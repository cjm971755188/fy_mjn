"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AttachmentsMapValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            uploadKey: 'uploadKey',
            name: 'name',
            mediaType: 'mediaType',
        };
    }
    static types() {
        return {
            uploadKey: 'string',
            name: 'string',
            mediaType: 'string',
        };
    }
}
exports.AttachmentsMapValue = AttachmentsMapValue;
class AddCommentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddCommentHeaders = AddCommentHeaders;
class AddCommentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commentContent: 'commentContent',
            commentType: 'commentType',
            option: 'option',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            commentContent: 'string',
            commentType: 'string',
            option: AddCommentRequestOption,
            operatorId: 'string',
        };
    }
}
exports.AddCommentRequest = AddCommentRequest;
class AddCommentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.AddCommentResponseBody = AddCommentResponseBody;
class AddCommentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddCommentResponseBody,
        };
    }
}
exports.AddCommentResponse = AddCommentResponse;
class AddWorkspaceDocMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddWorkspaceDocMembersHeaders = AddWorkspaceDocMembersHeaders;
class AddWorkspaceDocMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': AddWorkspaceDocMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.AddWorkspaceDocMembersRequest = AddWorkspaceDocMembersRequest;
class AddWorkspaceDocMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.AddWorkspaceDocMembersResponse = AddWorkspaceDocMembersResponse;
class AddWorkspaceMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddWorkspaceMembersHeaders = AddWorkspaceMembersHeaders;
class AddWorkspaceMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': AddWorkspaceMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.AddWorkspaceMembersRequest = AddWorkspaceMembersRequest;
class AddWorkspaceMembersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            notInOrgList: 'notInOrgList',
        };
    }
    static types() {
        return {
            notInOrgList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.AddWorkspaceMembersResponseBody = AddWorkspaceMembersResponseBody;
class AddWorkspaceMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddWorkspaceMembersResponseBody,
        };
    }
}
exports.AddWorkspaceMembersResponse = AddWorkspaceMembersResponse;
class AppendRowsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AppendRowsHeaders = AppendRowsHeaders;
class AppendRowsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            values: 'values',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            values: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            operatorId: 'string',
        };
    }
}
exports.AppendRowsRequest = AppendRowsRequest;
class AppendRowsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.AppendRowsResponse = AppendRowsResponse;
class BatchHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchHeaders = BatchHeaders;
class BatchRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requests: 'requests',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            requests: { 'type': 'array', 'itemType': BatchRequestRequests },
            operatorId: 'string',
        };
    }
}
exports.BatchRequest = BatchRequest;
class BatchResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            responses: 'responses',
        };
    }
    static types() {
        return {
            responses: { 'type': 'array', 'itemType': 'any' },
        };
    }
}
exports.BatchResponseBody = BatchResponseBody;
class BatchResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchResponseBody,
        };
    }
}
exports.BatchResponse = BatchResponse;
class BatchGetWorkspaceDocsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchGetWorkspaceDocsHeaders = BatchGetWorkspaceDocsHeaders;
class BatchGetWorkspaceDocsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nodeIds: 'nodeIds',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            nodeIds: { 'type': 'array', 'itemType': 'string' },
            operatorId: 'string',
        };
    }
}
exports.BatchGetWorkspaceDocsRequest = BatchGetWorkspaceDocsRequest;
class BatchGetWorkspaceDocsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': BatchGetWorkspaceDocsResponseBodyResult },
        };
    }
}
exports.BatchGetWorkspaceDocsResponseBody = BatchGetWorkspaceDocsResponseBody;
class BatchGetWorkspaceDocsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchGetWorkspaceDocsResponseBody,
        };
    }
}
exports.BatchGetWorkspaceDocsResponse = BatchGetWorkspaceDocsResponse;
class BatchGetWorkspacesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchGetWorkspacesHeaders = BatchGetWorkspacesHeaders;
class BatchGetWorkspacesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            includeRecent: 'includeRecent',
            operatorId: 'operatorId',
            workspaceIds: 'workspaceIds',
        };
    }
    static types() {
        return {
            includeRecent: 'boolean',
            operatorId: 'string',
            workspaceIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchGetWorkspacesRequest = BatchGetWorkspacesRequest;
class BatchGetWorkspacesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            workspaces: 'workspaces',
        };
    }
    static types() {
        return {
            workspaces: { 'type': 'array', 'itemType': BatchGetWorkspacesResponseBodyWorkspaces },
        };
    }
}
exports.BatchGetWorkspacesResponseBody = BatchGetWorkspacesResponseBody;
class BatchGetWorkspacesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchGetWorkspacesResponseBody,
        };
    }
}
exports.BatchGetWorkspacesResponse = BatchGetWorkspacesResponse;
class BindCoolAppToSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BindCoolAppToSheetHeaders = BindCoolAppToSheetHeaders;
class BindCoolAppToSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            operatorId: 'string',
        };
    }
}
exports.BindCoolAppToSheetRequest = BindCoolAppToSheetRequest;
class BindCoolAppToSheetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.BindCoolAppToSheetResponseBody = BindCoolAppToSheetResponseBody;
class BindCoolAppToSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BindCoolAppToSheetResponseBody,
        };
    }
}
exports.BindCoolAppToSheetResponse = BindCoolAppToSheetResponse;
class ClearHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ClearHeaders = ClearHeaders;
class ClearRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.ClearRequest = ClearRequest;
class ClearResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
        };
    }
}
exports.ClearResponseBody = ClearResponseBody;
class ClearResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ClearResponseBody,
        };
    }
}
exports.ClearResponse = ClearResponse;
class ClearDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ClearDataHeaders = ClearDataHeaders;
class ClearDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.ClearDataRequest = ClearDataRequest;
class ClearDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
        };
    }
}
exports.ClearDataResponseBody = ClearDataResponseBody;
class ClearDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ClearDataResponseBody,
        };
    }
}
exports.ClearDataResponse = ClearDataResponse;
class CreateConditionalFormattingRuleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateConditionalFormattingRuleHeaders = CreateConditionalFormattingRuleHeaders;
class CreateConditionalFormattingRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cellStyle: 'cellStyle',
            duplicateCondition: 'duplicateCondition',
            ranges: 'ranges',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            cellStyle: CreateConditionalFormattingRuleRequestCellStyle,
            duplicateCondition: CreateConditionalFormattingRuleRequestDuplicateCondition,
            ranges: { 'type': 'array', 'itemType': 'string' },
            operatorId: 'string',
        };
    }
}
exports.CreateConditionalFormattingRuleRequest = CreateConditionalFormattingRuleRequest;
class CreateConditionalFormattingRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.CreateConditionalFormattingRuleResponseBody = CreateConditionalFormattingRuleResponseBody;
class CreateConditionalFormattingRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateConditionalFormattingRuleResponseBody,
        };
    }
}
exports.CreateConditionalFormattingRuleResponse = CreateConditionalFormattingRuleResponse;
class CreateDeveloperMetadataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateDeveloperMetadataHeaders = CreateDeveloperMetadataHeaders;
class CreateDeveloperMetadataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            associatedColumn: 'associatedColumn',
            associatedRow: 'associatedRow',
            value: 'value',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            associatedColumn: CreateDeveloperMetadataRequestAssociatedColumn,
            associatedRow: CreateDeveloperMetadataRequestAssociatedRow,
            value: 'string',
            operatorId: 'string',
        };
    }
}
exports.CreateDeveloperMetadataRequest = CreateDeveloperMetadataRequest;
class CreateDeveloperMetadataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.CreateDeveloperMetadataResponseBody = CreateDeveloperMetadataResponseBody;
class CreateDeveloperMetadataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateDeveloperMetadataResponseBody,
        };
    }
}
exports.CreateDeveloperMetadataResponse = CreateDeveloperMetadataResponse;
class CreateRangeProtectionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateRangeProtectionHeaders = CreateRangeProtectionHeaders;
class CreateRangeProtectionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            editableSetting: 'editableSetting',
            otherUserPermission: 'otherUserPermission',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            editableSetting: CreateRangeProtectionRequestEditableSetting,
            otherUserPermission: 'string',
            operatorId: 'string',
        };
    }
}
exports.CreateRangeProtectionRequest = CreateRangeProtectionRequest;
class CreateRangeProtectionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.CreateRangeProtectionResponseBody = CreateRangeProtectionResponseBody;
class CreateRangeProtectionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateRangeProtectionResponseBody,
        };
    }
}
exports.CreateRangeProtectionResponse = CreateRangeProtectionResponse;
class CreateSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateSheetHeaders = CreateSheetHeaders;
class CreateSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            name: 'string',
            operatorId: 'string',
        };
    }
}
exports.CreateSheetRequest = CreateSheetRequest;
class CreateSheetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
            visibility: 'string',
        };
    }
}
exports.CreateSheetResponseBody = CreateSheetResponseBody;
class CreateSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateSheetResponseBody,
        };
    }
}
exports.CreateSheetResponse = CreateSheetResponse;
class CreateWorkspaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateWorkspaceHeaders = CreateWorkspaceHeaders;
class CreateWorkspaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            name: 'name',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            description: 'string',
            name: 'string',
            operatorId: 'string',
        };
    }
}
exports.CreateWorkspaceRequest = CreateWorkspaceRequest;
class CreateWorkspaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            name: 'name',
            url: 'url',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            description: 'string',
            name: 'string',
            url: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateWorkspaceResponseBody = CreateWorkspaceResponseBody;
class CreateWorkspaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateWorkspaceResponseBody,
        };
    }
}
exports.CreateWorkspaceResponse = CreateWorkspaceResponse;
class CreateWorkspaceDocHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateWorkspaceDocHeaders = CreateWorkspaceDocHeaders;
class CreateWorkspaceDocRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docType: 'docType',
            name: 'name',
            operatorId: 'operatorId',
            parentNodeId: 'parentNodeId',
            templateId: 'templateId',
            templateType: 'templateType',
        };
    }
    static types() {
        return {
            docType: 'string',
            name: 'string',
            operatorId: 'string',
            parentNodeId: 'string',
            templateId: 'string',
            templateType: 'string',
        };
    }
}
exports.CreateWorkspaceDocRequest = CreateWorkspaceDocRequest;
class CreateWorkspaceDocResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docKey: 'docKey',
            nodeId: 'nodeId',
            url: 'url',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            docKey: 'string',
            nodeId: 'string',
            url: 'string',
            workspaceId: 'string',
        };
    }
}
exports.CreateWorkspaceDocResponseBody = CreateWorkspaceDocResponseBody;
class CreateWorkspaceDocResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateWorkspaceDocResponseBody,
        };
    }
}
exports.CreateWorkspaceDocResponse = CreateWorkspaceDocResponse;
class DeleteColumnsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteColumnsHeaders = DeleteColumnsHeaders;
class DeleteColumnsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            column: 'column',
            columnCount: 'columnCount',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            column: 'number',
            columnCount: 'number',
            operatorId: 'string',
        };
    }
}
exports.DeleteColumnsRequest = DeleteColumnsRequest;
class DeleteColumnsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.DeleteColumnsResponseBody = DeleteColumnsResponseBody;
class DeleteColumnsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteColumnsResponseBody,
        };
    }
}
exports.DeleteColumnsResponse = DeleteColumnsResponse;
class DeleteDropdownListsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteDropdownListsHeaders = DeleteDropdownListsHeaders;
class DeleteDropdownListsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.DeleteDropdownListsRequest = DeleteDropdownListsRequest;
class DeleteDropdownListsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
        };
    }
}
exports.DeleteDropdownListsResponseBody = DeleteDropdownListsResponseBody;
class DeleteDropdownListsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteDropdownListsResponseBody,
        };
    }
}
exports.DeleteDropdownListsResponse = DeleteDropdownListsResponse;
class DeleteRangeProtectionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteRangeProtectionHeaders = DeleteRangeProtectionHeaders;
class DeleteRangeProtectionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.DeleteRangeProtectionRequest = DeleteRangeProtectionRequest;
class DeleteRangeProtectionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
        };
    }
}
exports.DeleteRangeProtectionResponseBody = DeleteRangeProtectionResponseBody;
class DeleteRangeProtectionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteRangeProtectionResponseBody,
        };
    }
}
exports.DeleteRangeProtectionResponse = DeleteRangeProtectionResponse;
class DeleteRowsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteRowsHeaders = DeleteRowsHeaders;
class DeleteRowsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            row: 'row',
            rowCount: 'rowCount',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            row: 'number',
            rowCount: 'number',
            operatorId: 'string',
        };
    }
}
exports.DeleteRowsRequest = DeleteRowsRequest;
class DeleteRowsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.DeleteRowsResponseBody = DeleteRowsResponseBody;
class DeleteRowsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteRowsResponseBody,
        };
    }
}
exports.DeleteRowsResponse = DeleteRowsResponse;
class DeleteSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteSheetHeaders = DeleteSheetHeaders;
class DeleteSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.DeleteSheetRequest = DeleteSheetRequest;
class DeleteSheetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteSheetResponseBody = DeleteSheetResponseBody;
class DeleteSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteSheetResponseBody,
        };
    }
}
exports.DeleteSheetResponse = DeleteSheetResponse;
class DeleteWorkspaceDocHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteWorkspaceDocHeaders = DeleteWorkspaceDocHeaders;
class DeleteWorkspaceDocRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.DeleteWorkspaceDocRequest = DeleteWorkspaceDocRequest;
class DeleteWorkspaceDocResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteWorkspaceDocResponse = DeleteWorkspaceDocResponse;
class DeleteWorkspaceDocMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteWorkspaceDocMembersHeaders = DeleteWorkspaceDocMembersHeaders;
class DeleteWorkspaceDocMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': DeleteWorkspaceDocMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.DeleteWorkspaceDocMembersRequest = DeleteWorkspaceDocMembersRequest;
class DeleteWorkspaceDocMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteWorkspaceDocMembersResponse = DeleteWorkspaceDocMembersResponse;
class DeleteWorkspaceMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteWorkspaceMembersHeaders = DeleteWorkspaceMembersHeaders;
class DeleteWorkspaceMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': DeleteWorkspaceMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.DeleteWorkspaceMembersRequest = DeleteWorkspaceMembersRequest;
class DeleteWorkspaceMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteWorkspaceMembersResponse = DeleteWorkspaceMembersResponse;
class DocAppendParagraphHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DocAppendParagraphHeaders = DocAppendParagraphHeaders;
class DocAppendParagraphRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            elementType: 'elementType',
            properties: 'properties',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            elementType: 'string',
            properties: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            operatorId: 'string',
        };
    }
}
exports.DocAppendParagraphRequest = DocAppendParagraphRequest;
class DocAppendParagraphResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: DocAppendParagraphResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.DocAppendParagraphResponseBody = DocAppendParagraphResponseBody;
class DocAppendParagraphResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DocAppendParagraphResponseBody,
        };
    }
}
exports.DocAppendParagraphResponse = DocAppendParagraphResponse;
class DocAppendTextHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DocAppendTextHeaders = DocAppendTextHeaders;
class DocAppendTextRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            text: 'string',
            operatorId: 'string',
        };
    }
}
exports.DocAppendTextRequest = DocAppendTextRequest;
class DocAppendTextResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: DocAppendTextResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.DocAppendTextResponseBody = DocAppendTextResponseBody;
class DocAppendTextResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DocAppendTextResponseBody,
        };
    }
}
exports.DocAppendTextResponse = DocAppendTextResponse;
class DocBlocksQueryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DocBlocksQueryHeaders = DocBlocksQueryHeaders;
class DocBlocksQueryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blockType: 'blockType',
            endIndex: 'endIndex',
            operatorId: 'operatorId',
            startIndex: 'startIndex',
        };
    }
    static types() {
        return {
            blockType: 'string',
            endIndex: 'number',
            operatorId: 'string',
            startIndex: 'number',
        };
    }
}
exports.DocBlocksQueryRequest = DocBlocksQueryRequest;
class DocBlocksQueryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: DocBlocksQueryResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.DocBlocksQueryResponseBody = DocBlocksQueryResponseBody;
class DocBlocksQueryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DocBlocksQueryResponseBody,
        };
    }
}
exports.DocBlocksQueryResponse = DocBlocksQueryResponse;
class DocDeleteBlockHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DocDeleteBlockHeaders = DocDeleteBlockHeaders;
class DocDeleteBlockRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.DocDeleteBlockRequest = DocDeleteBlockRequest;
class DocDeleteBlockResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: DocDeleteBlockResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.DocDeleteBlockResponseBody = DocDeleteBlockResponseBody;
class DocDeleteBlockResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DocDeleteBlockResponseBody,
        };
    }
}
exports.DocDeleteBlockResponse = DocDeleteBlockResponse;
class DocInsertBlocksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DocInsertBlocksHeaders = DocInsertBlocksHeaders;
class DocInsertBlocksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blockId: 'blockId',
            element: 'element',
            index: 'index',
            where: 'where',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            blockId: 'string',
            element: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            index: 'number',
            where: 'string',
            operatorId: 'string',
        };
    }
}
exports.DocInsertBlocksRequest = DocInsertBlocksRequest;
class DocInsertBlocksResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: DocInsertBlocksResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.DocInsertBlocksResponseBody = DocInsertBlocksResponseBody;
class DocInsertBlocksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DocInsertBlocksResponseBody,
        };
    }
}
exports.DocInsertBlocksResponse = DocInsertBlocksResponse;
class DocUpdateContentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DocUpdateContentHeaders = DocUpdateContentHeaders;
class DocUpdateContentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            dataType: 'dataType',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            content: 'string',
            dataType: 'string',
            operatorId: 'string',
        };
    }
}
exports.DocUpdateContentRequest = DocUpdateContentRequest;
class DocUpdateContentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: DocUpdateContentResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.DocUpdateContentResponseBody = DocUpdateContentResponseBody;
class DocUpdateContentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DocUpdateContentResponseBody,
        };
    }
}
exports.DocUpdateContentResponse = DocUpdateContentResponse;
class GetAllSheetsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAllSheetsHeaders = GetAllSheetsHeaders;
class GetAllSheetsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.GetAllSheetsRequest = GetAllSheetsRequest;
class GetAllSheetsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            value: 'value',
        };
    }
    static types() {
        return {
            value: { 'type': 'array', 'itemType': GetAllSheetsResponseBodyValue },
        };
    }
}
exports.GetAllSheetsResponseBody = GetAllSheetsResponseBody;
class GetAllSheetsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAllSheetsResponseBody,
        };
    }
}
exports.GetAllSheetsResponse = GetAllSheetsResponse;
class GetDeveloperMetadataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDeveloperMetadataHeaders = GetDeveloperMetadataHeaders;
class GetDeveloperMetadataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.GetDeveloperMetadataRequest = GetDeveloperMetadataRequest;
class GetDeveloperMetadataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            associatedColumn: 'associatedColumn',
            associatedRow: 'associatedRow',
            value: 'value',
        };
    }
    static types() {
        return {
            associatedColumn: GetDeveloperMetadataResponseBodyAssociatedColumn,
            associatedRow: GetDeveloperMetadataResponseBodyAssociatedRow,
            value: 'any',
        };
    }
}
exports.GetDeveloperMetadataResponseBody = GetDeveloperMetadataResponseBody;
class GetDeveloperMetadataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDeveloperMetadataResponseBody,
        };
    }
}
exports.GetDeveloperMetadataResponse = GetDeveloperMetadataResponse;
class GetRangeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRangeHeaders = GetRangeHeaders;
class GetRangeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
            select: 'select',
        };
    }
    static types() {
        return {
            operatorId: 'string',
            select: 'string',
        };
    }
}
exports.GetRangeRequest = GetRangeRequest;
class GetRangeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            backgroundColors: 'backgroundColors',
            displayValues: 'displayValues',
            fontSizes: 'fontSizes',
            fontWeights: 'fontWeights',
            formulas: 'formulas',
            horizontalAlignments: 'horizontalAlignments',
            values: 'values',
            verticalAlignments: 'verticalAlignments',
        };
    }
    static types() {
        return {
            backgroundColors: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': GetRangeResponseBodyBackgroundColors } },
            displayValues: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            fontSizes: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'number' } },
            fontWeights: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            formulas: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            horizontalAlignments: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            values: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'any' } },
            verticalAlignments: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
        };
    }
}
exports.GetRangeResponseBody = GetRangeResponseBody;
class GetRangeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRangeResponseBody,
        };
    }
}
exports.GetRangeResponse = GetRangeResponse;
class GetRecentEditDocsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRecentEditDocsHeaders = GetRecentEditDocsHeaders;
class GetRecentEditDocsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
        };
    }
}
exports.GetRecentEditDocsRequest = GetRecentEditDocsRequest;
class GetRecentEditDocsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            recentList: 'recentList',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            recentList: { 'type': 'array', 'itemType': GetRecentEditDocsResponseBodyRecentList },
        };
    }
}
exports.GetRecentEditDocsResponseBody = GetRecentEditDocsResponseBody;
class GetRecentEditDocsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRecentEditDocsResponseBody,
        };
    }
}
exports.GetRecentEditDocsResponse = GetRecentEditDocsResponse;
class GetRecentOpenDocsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRecentOpenDocsHeaders = GetRecentOpenDocsHeaders;
class GetRecentOpenDocsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
        };
    }
}
exports.GetRecentOpenDocsRequest = GetRecentOpenDocsRequest;
class GetRecentOpenDocsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            recentList: 'recentList',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            recentList: { 'type': 'array', 'itemType': GetRecentOpenDocsResponseBodyRecentList },
        };
    }
}
exports.GetRecentOpenDocsResponseBody = GetRecentOpenDocsResponseBody;
class GetRecentOpenDocsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRecentOpenDocsResponseBody,
        };
    }
}
exports.GetRecentOpenDocsResponse = GetRecentOpenDocsResponse;
class GetRelatedWorkspacesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRelatedWorkspacesHeaders = GetRelatedWorkspacesHeaders;
class GetRelatedWorkspacesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            includeRecent: 'includeRecent',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            includeRecent: 'boolean',
            operatorId: 'string',
        };
    }
}
exports.GetRelatedWorkspacesRequest = GetRelatedWorkspacesRequest;
class GetRelatedWorkspacesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            workspaces: 'workspaces',
        };
    }
    static types() {
        return {
            workspaces: { 'type': 'array', 'itemType': GetRelatedWorkspacesResponseBodyWorkspaces },
        };
    }
}
exports.GetRelatedWorkspacesResponseBody = GetRelatedWorkspacesResponseBody;
class GetRelatedWorkspacesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRelatedWorkspacesResponseBody,
        };
    }
}
exports.GetRelatedWorkspacesResponse = GetRelatedWorkspacesResponse;
class GetSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSheetHeaders = GetSheetHeaders;
class GetSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.GetSheetRequest = GetSheetRequest;
class GetSheetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            columnCount: 'columnCount',
            id: 'id',
            lastNonEmptyColumn: 'lastNonEmptyColumn',
            lastNonEmptyRow: 'lastNonEmptyRow',
            name: 'name',
            rowCount: 'rowCount',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            columnCount: 'number',
            id: 'string',
            lastNonEmptyColumn: 'number',
            lastNonEmptyRow: 'number',
            name: 'string',
            rowCount: 'number',
            visibility: 'string',
        };
    }
}
exports.GetSheetResponseBody = GetSheetResponseBody;
class GetSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSheetResponseBody,
        };
    }
}
exports.GetSheetResponse = GetSheetResponse;
class GetTemplateByIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTemplateByIdHeaders = GetTemplateByIdHeaders;
class GetTemplateByIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            belong: 'belong',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            belong: 'string',
            operatorId: 'string',
        };
    }
}
exports.GetTemplateByIdRequest = GetTemplateByIdRequest;
class GetTemplateByIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coverUrl: 'coverUrl',
            createTime: 'createTime',
            docType: 'docType',
            id: 'id',
            templateType: 'templateType',
            title: 'title',
            updateTime: 'updateTime',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            createTime: 'number',
            docType: 'string',
            id: 'string',
            templateType: 'string',
            title: 'string',
            updateTime: 'number',
            workspaceId: 'string',
        };
    }
}
exports.GetTemplateByIdResponseBody = GetTemplateByIdResponseBody;
class GetTemplateByIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTemplateByIdResponseBody,
        };
    }
}
exports.GetTemplateByIdResponse = GetTemplateByIdResponse;
class GetWorkspaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetWorkspaceHeaders = GetWorkspaceHeaders;
class GetWorkspaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isDeleted: 'isDeleted',
            owner: 'owner',
            rootDentryUuid: 'rootDentryUuid',
            url: 'url',
        };
    }
    static types() {
        return {
            isDeleted: 'boolean',
            owner: 'string',
            rootDentryUuid: 'string',
            url: 'string',
        };
    }
}
exports.GetWorkspaceResponseBody = GetWorkspaceResponseBody;
class GetWorkspaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWorkspaceResponseBody,
        };
    }
}
exports.GetWorkspaceResponse = GetWorkspaceResponse;
class GetWorkspaceNodeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetWorkspaceNodeHeaders = GetWorkspaceNodeHeaders;
class GetWorkspaceNodeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.GetWorkspaceNodeRequest = GetWorkspaceNodeRequest;
class GetWorkspaceNodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasPermission: 'hasPermission',
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            hasPermission: 'boolean',
            nodeBO: GetWorkspaceNodeResponseBodyNodeBO,
            workspaceBO: GetWorkspaceNodeResponseBodyWorkspaceBO,
        };
    }
}
exports.GetWorkspaceNodeResponseBody = GetWorkspaceNodeResponseBody;
class GetWorkspaceNodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWorkspaceNodeResponseBody,
        };
    }
}
exports.GetWorkspaceNodeResponse = GetWorkspaceNodeResponse;
class InitDocumentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InitDocumentHeaders = InitDocumentHeaders;
class InitDocumentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attachmentsMap: 'attachmentsMap',
            importType: 'importType',
            linksKey: 'linksKey',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            attachmentsMap: { 'type': 'map', 'keyType': 'string', 'valueType': AttachmentsMapValue },
            importType: 'number',
            linksKey: 'string',
            operatorId: 'string',
        };
    }
}
exports.InitDocumentRequest = InitDocumentRequest;
class InitDocumentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.InitDocumentResponseBody = InitDocumentResponseBody;
class InitDocumentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InitDocumentResponseBody,
        };
    }
}
exports.InitDocumentResponse = InitDocumentResponse;
class InsertBlocksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InsertBlocksHeaders = InsertBlocksHeaders;
class InsertBlocksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blocks: 'blocks',
            location: 'location',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            blocks: { 'type': 'array', 'itemType': InsertBlocksRequestBlocks },
            location: InsertBlocksRequestLocation,
            operatorId: 'string',
        };
    }
}
exports.InsertBlocksRequest = InsertBlocksRequest;
class InsertBlocksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.InsertBlocksResponse = InsertBlocksResponse;
class InsertColumnsBeforeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InsertColumnsBeforeHeaders = InsertColumnsBeforeHeaders;
class InsertColumnsBeforeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            column: 'column',
            columnCount: 'columnCount',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            column: 'number',
            columnCount: 'number',
            operatorId: 'string',
        };
    }
}
exports.InsertColumnsBeforeRequest = InsertColumnsBeforeRequest;
class InsertColumnsBeforeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.InsertColumnsBeforeResponseBody = InsertColumnsBeforeResponseBody;
class InsertColumnsBeforeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InsertColumnsBeforeResponseBody,
        };
    }
}
exports.InsertColumnsBeforeResponse = InsertColumnsBeforeResponse;
class InsertDropdownListsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InsertDropdownListsHeaders = InsertDropdownListsHeaders;
class InsertDropdownListsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            options: 'options',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            options: { 'type': 'array', 'itemType': InsertDropdownListsRequestOptions },
            operatorId: 'string',
        };
    }
}
exports.InsertDropdownListsRequest = InsertDropdownListsRequest;
class InsertDropdownListsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
        };
    }
}
exports.InsertDropdownListsResponseBody = InsertDropdownListsResponseBody;
class InsertDropdownListsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InsertDropdownListsResponseBody,
        };
    }
}
exports.InsertDropdownListsResponse = InsertDropdownListsResponse;
class InsertRowsBeforeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InsertRowsBeforeHeaders = InsertRowsBeforeHeaders;
class InsertRowsBeforeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            row: 'row',
            rowCount: 'rowCount',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            row: 'number',
            rowCount: 'number',
            operatorId: 'string',
        };
    }
}
exports.InsertRowsBeforeRequest = InsertRowsBeforeRequest;
class InsertRowsBeforeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.InsertRowsBeforeResponseBody = InsertRowsBeforeResponseBody;
class InsertRowsBeforeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InsertRowsBeforeResponseBody,
        };
    }
}
exports.InsertRowsBeforeResponse = InsertRowsBeforeResponse;
class ListTemplateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListTemplateHeaders = ListTemplateHeaders;
class ListTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
            templateType: 'templateType',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
            templateType: 'string',
            workspaceId: 'string',
        };
    }
}
exports.ListTemplateRequest = ListTemplateRequest;
class ListTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            templateList: 'templateList',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'string',
            templateList: { 'type': 'array', 'itemType': ListTemplateResponseBodyTemplateList },
        };
    }
}
exports.ListTemplateResponseBody = ListTemplateResponseBody;
class ListTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListTemplateResponseBody,
        };
    }
}
exports.ListTemplateResponse = ListTemplateResponse;
class MergeRangeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.MergeRangeHeaders = MergeRangeHeaders;
class MergeRangeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.MergeRangeRequest = MergeRangeRequest;
class MergeRangeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
        };
    }
}
exports.MergeRangeResponseBody = MergeRangeResponseBody;
class MergeRangeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: MergeRangeResponseBody,
        };
    }
}
exports.MergeRangeResponse = MergeRangeResponse;
class RangeFindNextHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RangeFindNextHeaders = RangeFindNextHeaders;
class RangeFindNextRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            findOptions: 'findOptions',
            text: 'text',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            findOptions: RangeFindNextRequestFindOptions,
            text: 'string',
            operatorId: 'string',
        };
    }
}
exports.RangeFindNextRequest = RangeFindNextRequest;
class RangeFindNextResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
        };
    }
}
exports.RangeFindNextResponseBody = RangeFindNextResponseBody;
class RangeFindNextResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RangeFindNextResponseBody,
        };
    }
}
exports.RangeFindNextResponse = RangeFindNextResponse;
class SearchWorkspaceDocsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchWorkspaceDocsHeaders = SearchWorkspaceDocsHeaders;
class SearchWorkspaceDocsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            keyword: 'keyword',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            keyword: 'string',
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
            workspaceId: 'string',
        };
    }
}
exports.SearchWorkspaceDocsRequest = SearchWorkspaceDocsRequest;
class SearchWorkspaceDocsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docs: 'docs',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            docs: { 'type': 'array', 'itemType': SearchWorkspaceDocsResponseBodyDocs },
            hasMore: 'boolean',
            nextToken: 'string',
        };
    }
}
exports.SearchWorkspaceDocsResponseBody = SearchWorkspaceDocsResponseBody;
class SearchWorkspaceDocsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchWorkspaceDocsResponseBody,
        };
    }
}
exports.SearchWorkspaceDocsResponse = SearchWorkspaceDocsResponse;
class SetColumnWidthHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetColumnWidthHeaders = SetColumnWidthHeaders;
class SetColumnWidthRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            column: 'column',
            width: 'width',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            column: 'number',
            width: 'number',
            operatorId: 'string',
        };
    }
}
exports.SetColumnWidthRequest = SetColumnWidthRequest;
class SetColumnWidthResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sheetId: 'sheetId',
            sheetName: 'sheetName',
        };
    }
    static types() {
        return {
            sheetId: 'string',
            sheetName: 'string',
        };
    }
}
exports.SetColumnWidthResponseBody = SetColumnWidthResponseBody;
class SetColumnWidthResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetColumnWidthResponseBody,
        };
    }
}
exports.SetColumnWidthResponse = SetColumnWidthResponse;
class SetColumnsVisibilityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetColumnsVisibilityHeaders = SetColumnsVisibilityHeaders;
class SetColumnsVisibilityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            column: 'column',
            columnCount: 'columnCount',
            visibility: 'visibility',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            column: 'number',
            columnCount: 'number',
            visibility: 'string',
            operatorId: 'string',
        };
    }
}
exports.SetColumnsVisibilityRequest = SetColumnsVisibilityRequest;
class SetColumnsVisibilityResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.SetColumnsVisibilityResponseBody = SetColumnsVisibilityResponseBody;
class SetColumnsVisibilityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetColumnsVisibilityResponseBody,
        };
    }
}
exports.SetColumnsVisibilityResponse = SetColumnsVisibilityResponse;
class SetRowHeightHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetRowHeightHeaders = SetRowHeightHeaders;
class SetRowHeightRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            height: 'height',
            row: 'row',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            height: 'number',
            row: 'number',
            operatorId: 'string',
        };
    }
}
exports.SetRowHeightRequest = SetRowHeightRequest;
class SetRowHeightResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sheetId: 'sheetId',
            sheetName: 'sheetName',
        };
    }
    static types() {
        return {
            sheetId: 'string',
            sheetName: 'string',
        };
    }
}
exports.SetRowHeightResponseBody = SetRowHeightResponseBody;
class SetRowHeightResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetRowHeightResponseBody,
        };
    }
}
exports.SetRowHeightResponse = SetRowHeightResponse;
class SetRowsVisibilityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetRowsVisibilityHeaders = SetRowsVisibilityHeaders;
class SetRowsVisibilityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            row: 'row',
            rowCount: 'rowCount',
            visibility: 'visibility',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            row: 'number',
            rowCount: 'number',
            visibility: 'string',
            operatorId: 'string',
        };
    }
}
exports.SetRowsVisibilityRequest = SetRowsVisibilityRequest;
class SetRowsVisibilityResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.SetRowsVisibilityResponseBody = SetRowsVisibilityResponseBody;
class SetRowsVisibilityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetRowsVisibilityResponseBody,
        };
    }
}
exports.SetRowsVisibilityResponse = SetRowsVisibilityResponse;
class SheetAutofitRowsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SheetAutofitRowsHeaders = SheetAutofitRowsHeaders;
class SheetAutofitRowsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fontWidth: 'fontWidth',
            row: 'row',
            rowCount: 'rowCount',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            fontWidth: 'number',
            row: 'number',
            rowCount: 'number',
            operatorId: 'string',
        };
    }
}
exports.SheetAutofitRowsRequest = SheetAutofitRowsRequest;
class SheetAutofitRowsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.SheetAutofitRowsResponseBody = SheetAutofitRowsResponseBody;
class SheetAutofitRowsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SheetAutofitRowsResponseBody,
        };
    }
}
exports.SheetAutofitRowsResponse = SheetAutofitRowsResponse;
class SheetFindAllHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SheetFindAllHeaders = SheetFindAllHeaders;
class SheetFindAllRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            findOptions: 'findOptions',
            text: 'text',
            operatorId: 'operatorId',
            select: 'select',
        };
    }
    static types() {
        return {
            findOptions: SheetFindAllRequestFindOptions,
            text: 'string',
            operatorId: 'string',
            select: 'string',
        };
    }
}
exports.SheetFindAllRequest = SheetFindAllRequest;
class SheetFindAllResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            value: 'value',
        };
    }
    static types() {
        return {
            value: { 'type': 'array', 'itemType': SheetFindAllResponseBodyValue },
        };
    }
}
exports.SheetFindAllResponseBody = SheetFindAllResponseBody;
class SheetFindAllResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SheetFindAllResponseBody,
        };
    }
}
exports.SheetFindAllResponse = SheetFindAllResponse;
class UnbindCoolAppToSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UnbindCoolAppToSheetHeaders = UnbindCoolAppToSheetHeaders;
class UnbindCoolAppToSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            operatorId: 'string',
        };
    }
}
exports.UnbindCoolAppToSheetRequest = UnbindCoolAppToSheetRequest;
class UnbindCoolAppToSheetResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UnbindCoolAppToSheetResponseBody = UnbindCoolAppToSheetResponseBody;
class UnbindCoolAppToSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnbindCoolAppToSheetResponseBody,
        };
    }
}
exports.UnbindCoolAppToSheetResponse = UnbindCoolAppToSheetResponse;
class UpdateRangeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateRangeHeaders = UpdateRangeHeaders;
class UpdateRangeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            backgroundColors: 'backgroundColors',
            fontSizes: 'fontSizes',
            fontWeights: 'fontWeights',
            horizontalAlignments: 'horizontalAlignments',
            hyperlinks: 'hyperlinks',
            numberFormat: 'numberFormat',
            values: 'values',
            verticalAlignments: 'verticalAlignments',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            backgroundColors: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            fontSizes: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'number' } },
            fontWeights: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            horizontalAlignments: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            hyperlinks: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': UpdateRangeRequestHyperlinks } },
            numberFormat: 'string',
            values: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            verticalAlignments: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            operatorId: 'string',
        };
    }
}
exports.UpdateRangeRequest = UpdateRangeRequest;
class UpdateRangeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
        };
    }
}
exports.UpdateRangeResponseBody = UpdateRangeResponseBody;
class UpdateRangeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateRangeResponseBody,
        };
    }
}
exports.UpdateRangeResponse = UpdateRangeResponse;
class UpdateSheetHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateSheetHeaders = UpdateSheetHeaders;
class UpdateSheetRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            visibility: 'visibility',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            name: 'string',
            visibility: 'string',
            operatorId: 'string',
        };
    }
}
exports.UpdateSheetRequest = UpdateSheetRequest;
class UpdateSheetResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateSheetResponse = UpdateSheetResponse;
class UpdateWorkspaceDocMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateWorkspaceDocMembersHeaders = UpdateWorkspaceDocMembersHeaders;
class UpdateWorkspaceDocMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': UpdateWorkspaceDocMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.UpdateWorkspaceDocMembersRequest = UpdateWorkspaceDocMembersRequest;
class UpdateWorkspaceDocMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateWorkspaceDocMembersResponse = UpdateWorkspaceDocMembersResponse;
class UpdateWorkspaceMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateWorkspaceMembersHeaders = UpdateWorkspaceMembersHeaders;
class UpdateWorkspaceMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': UpdateWorkspaceMembersRequestMembers },
            operatorId: 'string',
        };
    }
}
exports.UpdateWorkspaceMembersRequest = UpdateWorkspaceMembersRequest;
class UpdateWorkspaceMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateWorkspaceMembersResponse = UpdateWorkspaceMembersResponse;
class AddCommentRequestOption extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            extra: 'extra',
        };
    }
    static types() {
        return {
            createTime: 'string',
            extra: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.AddCommentRequestOption = AddCommentRequestOption;
class AddWorkspaceDocMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleType: 'roleType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
            roleType: 'string',
        };
    }
}
exports.AddWorkspaceDocMembersRequestMembers = AddWorkspaceDocMembersRequestMembers;
class AddWorkspaceMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleType: 'roleType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
            roleType: 'string',
        };
    }
}
exports.AddWorkspaceMembersRequestMembers = AddWorkspaceMembersRequestMembers;
class BatchRequestRequests extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
            method: 'method',
            path: 'path',
        };
    }
    static types() {
        return {
            body: 'any',
            method: 'string',
            path: 'string',
        };
    }
}
exports.BatchRequestRequests = BatchRequestRequests;
class BatchGetWorkspaceDocsResponseBodyResultNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deleted: 'deleted',
            docType: 'docType',
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            url: 'url',
        };
    }
    static types() {
        return {
            deleted: 'boolean',
            docType: 'string',
            lastEditTime: 'number',
            name: 'string',
            nodeId: 'string',
            url: 'string',
        };
    }
}
exports.BatchGetWorkspaceDocsResponseBodyResultNodeBO = BatchGetWorkspaceDocsResponseBodyResultNodeBO;
class BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            name: 'string',
            workspaceId: 'string',
        };
    }
}
exports.BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO = BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO;
class BatchGetWorkspaceDocsResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasPermission: 'hasPermission',
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            hasPermission: 'boolean',
            nodeBO: BatchGetWorkspaceDocsResponseBodyResultNodeBO,
            workspaceBO: BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO,
        };
    }
}
exports.BatchGetWorkspaceDocsResponseBodyResult = BatchGetWorkspaceDocsResponseBodyResult;
class BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            url: 'url',
        };
    }
    static types() {
        return {
            lastEditTime: 'string',
            name: 'string',
            nodeId: 'string',
            url: 'string',
        };
    }
}
exports.BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList = BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList;
class BatchGetWorkspacesResponseBodyWorkspacesWorkspace extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            name: 'name',
            orgPublished: 'orgPublished',
            recentList: 'recentList',
            url: 'url',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            createTime: 'number',
            name: 'string',
            orgPublished: 'boolean',
            recentList: { 'type': 'array', 'itemType': BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList },
            url: 'string',
            workspaceId: 'string',
        };
    }
}
exports.BatchGetWorkspacesResponseBodyWorkspacesWorkspace = BatchGetWorkspacesResponseBodyWorkspacesWorkspace;
class BatchGetWorkspacesResponseBodyWorkspaces extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasPermission: 'hasPermission',
            workspace: 'workspace',
        };
    }
    static types() {
        return {
            hasPermission: 'boolean',
            workspace: BatchGetWorkspacesResponseBodyWorkspacesWorkspace,
        };
    }
}
exports.BatchGetWorkspacesResponseBodyWorkspaces = BatchGetWorkspacesResponseBodyWorkspaces;
class CreateConditionalFormattingRuleRequestCellStyle extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            backgroundColor: 'backgroundColor',
        };
    }
    static types() {
        return {
            backgroundColor: 'string',
        };
    }
}
exports.CreateConditionalFormattingRuleRequestCellStyle = CreateConditionalFormattingRuleRequestCellStyle;
class CreateConditionalFormattingRuleRequestDuplicateCondition extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'operator',
        };
    }
    static types() {
        return {
            operator: 'string',
        };
    }
}
exports.CreateConditionalFormattingRuleRequestDuplicateCondition = CreateConditionalFormattingRuleRequestDuplicateCondition;
class CreateDeveloperMetadataRequestAssociatedColumn extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            column: 'column',
            sheet: 'sheet',
        };
    }
    static types() {
        return {
            column: 'number',
            sheet: 'string',
        };
    }
}
exports.CreateDeveloperMetadataRequestAssociatedColumn = CreateDeveloperMetadataRequestAssociatedColumn;
class CreateDeveloperMetadataRequestAssociatedRow extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            row: 'row',
            sheet: 'sheet',
        };
    }
    static types() {
        return {
            row: 'number',
            sheet: 'string',
        };
    }
}
exports.CreateDeveloperMetadataRequestAssociatedRow = CreateDeveloperMetadataRequestAssociatedRow;
class CreateRangeProtectionRequestEditableSetting extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deleteColumns: 'deleteColumns',
            deleteRows: 'deleteRows',
            editCells: 'editCells',
            formatCells: 'formatCells',
            insertColumns: 'insertColumns',
            insertRows: 'insertRows',
            toggleColumnsVisibility: 'toggleColumnsVisibility',
            toggleRowsVisibility: 'toggleRowsVisibility',
        };
    }
    static types() {
        return {
            deleteColumns: 'boolean',
            deleteRows: 'boolean',
            editCells: 'boolean',
            formatCells: 'boolean',
            insertColumns: 'boolean',
            insertRows: 'boolean',
            toggleColumnsVisibility: 'boolean',
            toggleRowsVisibility: 'boolean',
        };
    }
}
exports.CreateRangeProtectionRequestEditableSetting = CreateRangeProtectionRequestEditableSetting;
class DeleteWorkspaceDocMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
        };
    }
}
exports.DeleteWorkspaceDocMembersRequestMembers = DeleteWorkspaceDocMembersRequestMembers;
class DeleteWorkspaceMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
        };
    }
}
exports.DeleteWorkspaceMembersRequestMembers = DeleteWorkspaceMembersRequestMembers;
class DocAppendParagraphResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.DocAppendParagraphResponseBodyResult = DocAppendParagraphResponseBodyResult;
class DocAppendTextResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.DocAppendTextResponseBodyResult = DocAppendTextResponseBodyResult;
class DocBlocksQueryResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': 'any' },
        };
    }
}
exports.DocBlocksQueryResponseBodyResult = DocBlocksQueryResponseBodyResult;
class DocDeleteBlockResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.DocDeleteBlockResponseBodyResult = DocDeleteBlockResponseBodyResult;
class DocInsertBlocksResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.DocInsertBlocksResponseBodyResult = DocInsertBlocksResponseBodyResult;
class DocUpdateContentResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.DocUpdateContentResponseBodyResult = DocUpdateContentResponseBodyResult;
class GetAllSheetsResponseBodyValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
        };
    }
}
exports.GetAllSheetsResponseBodyValue = GetAllSheetsResponseBodyValue;
class GetDeveloperMetadataResponseBodyAssociatedColumn extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            column: 'column',
            sheetId: 'sheetId',
        };
    }
    static types() {
        return {
            column: 'number',
            sheetId: 'string',
        };
    }
}
exports.GetDeveloperMetadataResponseBodyAssociatedColumn = GetDeveloperMetadataResponseBodyAssociatedColumn;
class GetDeveloperMetadataResponseBodyAssociatedRow extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            row: 'row',
            sheetId: 'sheetId',
        };
    }
    static types() {
        return {
            row: 'number',
            sheetId: 'string',
        };
    }
}
exports.GetDeveloperMetadataResponseBodyAssociatedRow = GetDeveloperMetadataResponseBodyAssociatedRow;
class GetRangeResponseBodyBackgroundColors extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            red: 'red',
            green: 'green',
            blue: 'blue',
            hexString: 'hexString',
        };
    }
    static types() {
        return {
            red: 'number',
            green: 'number',
            blue: 'number',
            hexString: 'string',
        };
    }
}
exports.GetRangeResponseBodyBackgroundColors = GetRangeResponseBodyBackgroundColors;
class GetRecentEditDocsResponseBodyRecentListNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            docType: 'docType',
            isDeleted: 'isDeleted',
            lastEditTime: 'lastEditTime',
            nodeId: 'nodeId',
            nodeName: 'nodeName',
            updateTime: 'updateTime',
            url: 'url',
        };
    }
    static types() {
        return {
            createTime: 'number',
            docType: 'string',
            isDeleted: 'boolean',
            lastEditTime: 'number',
            nodeId: 'string',
            nodeName: 'string',
            updateTime: 'number',
            url: 'string',
        };
    }
}
exports.GetRecentEditDocsResponseBodyRecentListNodeBO = GetRecentEditDocsResponseBodyRecentListNodeBO;
class GetRecentEditDocsResponseBodyRecentListWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'url',
            workspaceId: 'workspaceId',
            workspaceName: 'workspaceName',
        };
    }
    static types() {
        return {
            url: 'string',
            workspaceId: 'string',
            workspaceName: 'string',
        };
    }
}
exports.GetRecentEditDocsResponseBodyRecentListWorkspaceBO = GetRecentEditDocsResponseBodyRecentListWorkspaceBO;
class GetRecentEditDocsResponseBodyRecentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            nodeBO: GetRecentEditDocsResponseBodyRecentListNodeBO,
            workspaceBO: GetRecentEditDocsResponseBodyRecentListWorkspaceBO,
        };
    }
}
exports.GetRecentEditDocsResponseBodyRecentList = GetRecentEditDocsResponseBodyRecentList;
class GetRecentOpenDocsResponseBodyRecentListNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            docType: 'docType',
            isDeleted: 'isDeleted',
            lastOpenTime: 'lastOpenTime',
            nodeId: 'nodeId',
            nodeName: 'nodeName',
            updateTime: 'updateTime',
            url: 'url',
        };
    }
    static types() {
        return {
            createTime: 'number',
            docType: 'string',
            isDeleted: 'boolean',
            lastOpenTime: 'number',
            nodeId: 'string',
            nodeName: 'string',
            updateTime: 'number',
            url: 'string',
        };
    }
}
exports.GetRecentOpenDocsResponseBodyRecentListNodeBO = GetRecentOpenDocsResponseBodyRecentListNodeBO;
class GetRecentOpenDocsResponseBodyRecentListWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'url',
            workspaceId: 'workspaceId',
            workspaceName: 'workspaceName',
        };
    }
    static types() {
        return {
            url: 'string',
            workspaceId: 'string',
            workspaceName: 'string',
        };
    }
}
exports.GetRecentOpenDocsResponseBodyRecentListWorkspaceBO = GetRecentOpenDocsResponseBodyRecentListWorkspaceBO;
class GetRecentOpenDocsResponseBodyRecentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            nodeBO: GetRecentOpenDocsResponseBodyRecentListNodeBO,
            workspaceBO: GetRecentOpenDocsResponseBodyRecentListWorkspaceBO,
        };
    }
}
exports.GetRecentOpenDocsResponseBodyRecentList = GetRecentOpenDocsResponseBodyRecentList;
class GetRelatedWorkspacesResponseBodyWorkspacesRecentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            url: 'url',
        };
    }
    static types() {
        return {
            lastEditTime: 'number',
            name: 'string',
            nodeId: 'string',
            url: 'string',
        };
    }
}
exports.GetRelatedWorkspacesResponseBodyWorkspacesRecentList = GetRelatedWorkspacesResponseBodyWorkspacesRecentList;
class GetRelatedWorkspacesResponseBodyWorkspaces extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            deleted: 'deleted',
            name: 'name',
            owner: 'owner',
            recentList: 'recentList',
            role: 'role',
            url: 'url',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            createTime: 'number',
            deleted: 'boolean',
            name: 'string',
            owner: 'string',
            recentList: { 'type': 'array', 'itemType': GetRelatedWorkspacesResponseBodyWorkspacesRecentList },
            role: 'string',
            url: 'string',
            workspaceId: 'string',
        };
    }
}
exports.GetRelatedWorkspacesResponseBodyWorkspaces = GetRelatedWorkspacesResponseBodyWorkspaces;
class GetWorkspaceNodeResponseBodyNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docType: 'docType',
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            url: 'url',
        };
    }
    static types() {
        return {
            docType: 'string',
            lastEditTime: 'number',
            name: 'string',
            nodeId: 'string',
            url: 'string',
        };
    }
}
exports.GetWorkspaceNodeResponseBodyNodeBO = GetWorkspaceNodeResponseBodyNodeBO;
class GetWorkspaceNodeResponseBodyWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            name: 'string',
            workspaceId: 'string',
        };
    }
}
exports.GetWorkspaceNodeResponseBodyWorkspaceBO = GetWorkspaceNodeResponseBodyWorkspaceBO;
class InsertBlocksRequestBlocksParagraphChildrenTextTextStyle extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bold: 'bold',
            dataType: 'dataType',
            fontSize: 'fontSize',
            sizeUnit: 'sizeUnit',
        };
    }
    static types() {
        return {
            bold: 'boolean',
            dataType: 'string',
            fontSize: 'number',
            sizeUnit: 'string',
        };
    }
}
exports.InsertBlocksRequestBlocksParagraphChildrenTextTextStyle = InsertBlocksRequestBlocksParagraphChildrenTextTextStyle;
class InsertBlocksRequestBlocksParagraphChildrenText extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            textStyle: 'textStyle',
        };
    }
    static types() {
        return {
            content: 'string',
            textStyle: InsertBlocksRequestBlocksParagraphChildrenTextTextStyle,
        };
    }
}
exports.InsertBlocksRequestBlocksParagraphChildrenText = InsertBlocksRequestBlocksParagraphChildrenText;
class InsertBlocksRequestBlocksParagraphChildren extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            elementType: 'elementType',
            text: 'text',
        };
    }
    static types() {
        return {
            elementType: 'string',
            text: InsertBlocksRequestBlocksParagraphChildrenText,
        };
    }
}
exports.InsertBlocksRequestBlocksParagraphChildren = InsertBlocksRequestBlocksParagraphChildren;
class InsertBlocksRequestBlocksParagraphStyle extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headingLevel: 'headingLevel',
        };
    }
    static types() {
        return {
            headingLevel: 'string',
        };
    }
}
exports.InsertBlocksRequestBlocksParagraphStyle = InsertBlocksRequestBlocksParagraphStyle;
class InsertBlocksRequestBlocksParagraph extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            children: 'children',
            style: 'style',
        };
    }
    static types() {
        return {
            children: { 'type': 'array', 'itemType': InsertBlocksRequestBlocksParagraphChildren },
            style: InsertBlocksRequestBlocksParagraphStyle,
        };
    }
}
exports.InsertBlocksRequestBlocksParagraph = InsertBlocksRequestBlocksParagraph;
class InsertBlocksRequestBlocks extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blockType: 'blockType',
            paragraph: 'paragraph',
        };
    }
    static types() {
        return {
            blockType: 'string',
            paragraph: InsertBlocksRequestBlocksParagraph,
        };
    }
}
exports.InsertBlocksRequestBlocks = InsertBlocksRequestBlocks;
class InsertBlocksRequestLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            head: 'head',
        };
    }
    static types() {
        return {
            head: 'boolean',
        };
    }
}
exports.InsertBlocksRequestLocation = InsertBlocksRequestLocation;
class InsertDropdownListsRequestOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            color: 'color',
            value: 'value',
        };
    }
    static types() {
        return {
            color: 'string',
            value: 'string',
        };
    }
}
exports.InsertDropdownListsRequestOptions = InsertDropdownListsRequestOptions;
class ListTemplateResponseBodyTemplateList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coverUrl: 'coverUrl',
            createTime: 'createTime',
            docType: 'docType',
            id: 'id',
            templateType: 'templateType',
            title: 'title',
            updateTime: 'updateTime',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            createTime: 'number',
            docType: 'string',
            id: 'string',
            templateType: 'string',
            title: 'string',
            updateTime: 'number',
            workspaceId: 'string',
        };
    }
}
exports.ListTemplateResponseBodyTemplateList = ListTemplateResponseBodyTemplateList;
class RangeFindNextRequestFindOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            includeHidden: 'includeHidden',
            matchCase: 'matchCase',
            matchEntireCell: 'matchEntireCell',
            matchFormulaText: 'matchFormulaText',
            scope: 'scope',
            useRegExp: 'useRegExp',
        };
    }
    static types() {
        return {
            includeHidden: 'boolean',
            matchCase: 'boolean',
            matchEntireCell: 'boolean',
            matchFormulaText: 'boolean',
            scope: 'string',
            useRegExp: 'boolean',
        };
    }
}
exports.RangeFindNextRequestFindOptions = RangeFindNextRequestFindOptions;
class SearchWorkspaceDocsResponseBodyDocsNodeBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docType: 'docType',
            lastEditTime: 'lastEditTime',
            name: 'name',
            nodeId: 'nodeId',
            originName: 'originName',
            url: 'url',
        };
    }
    static types() {
        return {
            docType: 'string',
            lastEditTime: 'number',
            name: 'string',
            nodeId: 'string',
            originName: 'string',
            url: 'string',
        };
    }
}
exports.SearchWorkspaceDocsResponseBodyDocsNodeBO = SearchWorkspaceDocsResponseBodyDocsNodeBO;
class SearchWorkspaceDocsResponseBodyDocsWorkspaceBO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            name: 'string',
            workspaceId: 'string',
        };
    }
}
exports.SearchWorkspaceDocsResponseBodyDocsWorkspaceBO = SearchWorkspaceDocsResponseBodyDocsWorkspaceBO;
class SearchWorkspaceDocsResponseBodyDocs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nodeBO: 'nodeBO',
            workspaceBO: 'workspaceBO',
        };
    }
    static types() {
        return {
            nodeBO: SearchWorkspaceDocsResponseBodyDocsNodeBO,
            workspaceBO: SearchWorkspaceDocsResponseBodyDocsWorkspaceBO,
        };
    }
}
exports.SearchWorkspaceDocsResponseBodyDocs = SearchWorkspaceDocsResponseBodyDocs;
class SheetFindAllRequestFindOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            includeHidden: 'includeHidden',
            matchCase: 'matchCase',
            matchEntireCell: 'matchEntireCell',
            matchFormulaText: 'matchFormulaText',
            scope: 'scope',
            unionCells: 'unionCells',
            useRegExp: 'useRegExp',
        };
    }
    static types() {
        return {
            includeHidden: 'boolean',
            matchCase: 'boolean',
            matchEntireCell: 'boolean',
            matchFormulaText: 'boolean',
            scope: 'string',
            unionCells: 'boolean',
            useRegExp: 'boolean',
        };
    }
}
exports.SheetFindAllRequestFindOptions = SheetFindAllRequestFindOptions;
class SheetFindAllResponseBodyValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            a1Notation: 'a1Notation',
            values: 'values',
        };
    }
    static types() {
        return {
            a1Notation: 'string',
            values: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'any' } },
        };
    }
}
exports.SheetFindAllResponseBodyValue = SheetFindAllResponseBodyValue;
class UpdateRangeRequestHyperlinks extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'type',
            link: 'link',
            text: 'text',
        };
    }
    static types() {
        return {
            type: 'string',
            link: 'string',
            text: 'string',
        };
    }
}
exports.UpdateRangeRequestHyperlinks = UpdateRangeRequestHyperlinks;
class UpdateWorkspaceDocMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleType: 'roleType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
            roleType: 'string',
        };
    }
}
exports.UpdateWorkspaceDocMembersRequestMembers = UpdateWorkspaceDocMembersRequestMembers;
class UpdateWorkspaceMembersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleType: 'roleType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
            roleType: 'string',
        };
    }
}
exports.UpdateWorkspaceMembersRequestMembers = UpdateWorkspaceMembersRequestMembers;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addCommentWithOptions(docId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.commentContent)) {
            body["commentContent"] = request.commentContent;
        }
        if (!tea_util_1.default.isUnset(request.commentType)) {
            body["commentType"] = request.commentType;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddComment",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/docs/${docId}/comments`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddCommentResponse({}));
    }
    async addComment(docId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddCommentHeaders({});
        return await this.addCommentWithOptions(docId, request, headers, runtime);
    }
    async addWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddWorkspaceDocMembers",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}/members`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddWorkspaceDocMembersResponse({}));
    }
    async addWorkspaceDocMembers(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddWorkspaceDocMembersHeaders({});
        return await this.addWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async addWorkspaceMembersWithOptions(workspaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddWorkspaceMembers",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}/members`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddWorkspaceMembersResponse({}));
    }
    async addWorkspaceMembers(workspaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddWorkspaceMembersHeaders({});
        return await this.addWorkspaceMembersWithOptions(workspaceId, request, headers, runtime);
    }
    async appendRowsWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.values)) {
            body["values"] = request.values;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AppendRows",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/appendRows`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AppendRowsResponse({}));
    }
    async appendRows(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AppendRowsHeaders({});
        return await this.appendRowsWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async batchWithOptions(workbookId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.requests)) {
            body["requests"] = request.requests;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Batch",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchResponse({}));
    }
    async batch(workbookId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchHeaders({});
        return await this.batchWithOptions(workbookId, request, headers, runtime);
    }
    async batchGetWorkspaceDocsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.nodeIds)) {
            body["nodeIds"] = request.nodeIds;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetWorkspaceDocs",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/docs/infos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchGetWorkspaceDocsResponse({}));
    }
    async batchGetWorkspaceDocs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchGetWorkspaceDocsHeaders({});
        return await this.batchGetWorkspaceDocsWithOptions(request, headers, runtime);
    }
    async batchGetWorkspacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.includeRecent)) {
            body["includeRecent"] = request.includeRecent;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.workspaceIds)) {
            body["workspaceIds"] = request.workspaceIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetWorkspaces",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/infos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchGetWorkspacesResponse({}));
    }
    async batchGetWorkspaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchGetWorkspacesHeaders({});
        return await this.batchGetWorkspacesWithOptions(request, headers, runtime);
    }
    async bindCoolAppToSheetWithOptions(workbookId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            body["coolAppCode"] = request.coolAppCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BindCoolAppToSheet",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/coolApps`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BindCoolAppToSheetResponse({}));
    }
    async bindCoolAppToSheet(workbookId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BindCoolAppToSheetHeaders({});
        return await this.bindCoolAppToSheetWithOptions(workbookId, request, headers, runtime);
    }
    async clearWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "Clear",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}/clear`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ClearResponse({}));
    }
    async clear(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ClearHeaders({});
        return await this.clearWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async clearDataWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ClearData",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}/clearData`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ClearDataResponse({}));
    }
    async clearData(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ClearDataHeaders({});
        return await this.clearDataWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async createConditionalFormattingRuleWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.cellStyle)) {
            body["cellStyle"] = request.cellStyle;
        }
        if (!tea_util_1.default.isUnset(request.duplicateCondition)) {
            body["duplicateCondition"] = request.duplicateCondition;
        }
        if (!tea_util_1.default.isUnset(request.ranges)) {
            body["ranges"] = request.ranges;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateConditionalFormattingRule",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/conditionalFormattingRules`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateConditionalFormattingRuleResponse({}));
    }
    async createConditionalFormattingRule(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateConditionalFormattingRuleHeaders({});
        return await this.createConditionalFormattingRuleWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async createDeveloperMetadataWithOptions(workbookId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.associatedColumn)) {
            body["associatedColumn"] = request.associatedColumn;
        }
        if (!tea_util_1.default.isUnset(request.associatedRow)) {
            body["associatedRow"] = request.associatedRow;
        }
        if (!tea_util_1.default.isUnset(request.value)) {
            body["value"] = request.value;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateDeveloperMetadata",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/developerMetadatas`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateDeveloperMetadataResponse({}));
    }
    async createDeveloperMetadata(workbookId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateDeveloperMetadataHeaders({});
        return await this.createDeveloperMetadataWithOptions(workbookId, request, headers, runtime);
    }
    async createRangeProtectionWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.editableSetting)) {
            body["editableSetting"] = request.editableSetting;
        }
        if (!tea_util_1.default.isUnset(request.otherUserPermission)) {
            body["otherUserPermission"] = request.otherUserPermission;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateRangeProtection",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}/protections`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateRangeProtectionResponse({}));
    }
    async createRangeProtection(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateRangeProtectionHeaders({});
        return await this.createRangeProtectionWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async createSheetWithOptions(workbookId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateSheet",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateSheetResponse({}));
    }
    async createSheet(workbookId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSheetHeaders({});
        return await this.createSheetWithOptions(workbookId, request, headers, runtime);
    }
    async createWorkspaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateWorkspace",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateWorkspaceResponse({}));
    }
    async createWorkspace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateWorkspaceHeaders({});
        return await this.createWorkspaceWithOptions(request, headers, runtime);
    }
    async createWorkspaceDocWithOptions(workspaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.docType)) {
            body["docType"] = request.docType;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.parentNodeId)) {
            body["parentNodeId"] = request.parentNodeId;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        if (!tea_util_1.default.isUnset(request.templateType)) {
            body["templateType"] = request.templateType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateWorkspaceDoc",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}/docs`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateWorkspaceDocResponse({}));
    }
    async createWorkspaceDoc(workspaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateWorkspaceDocHeaders({});
        return await this.createWorkspaceDocWithOptions(workspaceId, request, headers, runtime);
    }
    async deleteColumnsWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.column)) {
            body["column"] = request.column;
        }
        if (!tea_util_1.default.isUnset(request.columnCount)) {
            body["columnCount"] = request.columnCount;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteColumns",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/deleteColumns`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteColumnsResponse({}));
    }
    async deleteColumns(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteColumnsHeaders({});
        return await this.deleteColumnsWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async deleteDropdownListsWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDropdownLists",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}/deleteDropdownLists`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteDropdownListsResponse({}));
    }
    async deleteDropdownLists(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDropdownListsHeaders({});
        return await this.deleteDropdownListsWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async deleteRangeProtectionWithOptions(workbookId, sheetId, rangeAddress, protectionId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteRangeProtection",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}/protections/${protectionId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteRangeProtectionResponse({}));
    }
    async deleteRangeProtection(workbookId, sheetId, rangeAddress, protectionId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteRangeProtectionHeaders({});
        return await this.deleteRangeProtectionWithOptions(workbookId, sheetId, rangeAddress, protectionId, request, headers, runtime);
    }
    async deleteRowsWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.row)) {
            body["row"] = request.row;
        }
        if (!tea_util_1.default.isUnset(request.rowCount)) {
            body["rowCount"] = request.rowCount;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteRows",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/deleteRows`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteRowsResponse({}));
    }
    async deleteRows(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteRowsHeaders({});
        return await this.deleteRowsWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async deleteSheetWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteSheet",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteSheetResponse({}));
    }
    async deleteSheet(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteSheetHeaders({});
        return await this.deleteSheetWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async deleteWorkspaceDocWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteWorkspaceDoc",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteWorkspaceDocResponse({}));
    }
    async deleteWorkspaceDoc(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteWorkspaceDocHeaders({});
        return await this.deleteWorkspaceDocWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async deleteWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteWorkspaceDocMembers",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}/members/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteWorkspaceDocMembersResponse({}));
    }
    async deleteWorkspaceDocMembers(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteWorkspaceDocMembersHeaders({});
        return await this.deleteWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async deleteWorkspaceMembersWithOptions(workspaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteWorkspaceMembers",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}/members/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteWorkspaceMembersResponse({}));
    }
    async deleteWorkspaceMembers(workspaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteWorkspaceMembersHeaders({});
        return await this.deleteWorkspaceMembersWithOptions(workspaceId, request, headers, runtime);
    }
    async docAppendParagraphWithOptions(docKey, blockId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.elementType)) {
            body["elementType"] = request.elementType;
        }
        if (!tea_util_1.default.isUnset(request.properties)) {
            body["properties"] = request.properties;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DocAppendParagraph",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/suites/documents/${docKey}/blocks/${blockId}/paragraph/appendElement`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DocAppendParagraphResponse({}));
    }
    async docAppendParagraph(docKey, blockId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DocAppendParagraphHeaders({});
        return await this.docAppendParagraphWithOptions(docKey, blockId, request, headers, runtime);
    }
    async docAppendTextWithOptions(docKey, blockId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.text)) {
            body["text"] = request.text;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DocAppendText",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/suites/documents/${docKey}/blocks/${blockId}/paragraph/appendText`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DocAppendTextResponse({}));
    }
    async docAppendText(docKey, blockId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DocAppendTextHeaders({});
        return await this.docAppendTextWithOptions(docKey, blockId, request, headers, runtime);
    }
    async docBlocksQueryWithOptions(docKey, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.blockType)) {
            query["blockType"] = request.blockType;
        }
        if (!tea_util_1.default.isUnset(request.endIndex)) {
            query["endIndex"] = request.endIndex;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.startIndex)) {
            query["startIndex"] = request.startIndex;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DocBlocksQuery",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/suites/documents/${docKey}/blocks`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DocBlocksQueryResponse({}));
    }
    async docBlocksQuery(docKey, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DocBlocksQueryHeaders({});
        return await this.docBlocksQueryWithOptions(docKey, request, headers, runtime);
    }
    async docDeleteBlockWithOptions(docKey, blockId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DocDeleteBlock",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/suites/documents/${docKey}/blocks/${blockId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DocDeleteBlockResponse({}));
    }
    async docDeleteBlock(docKey, blockId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DocDeleteBlockHeaders({});
        return await this.docDeleteBlockWithOptions(docKey, blockId, request, headers, runtime);
    }
    async docInsertBlocksWithOptions(docKey, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.blockId)) {
            body["blockId"] = request.blockId;
        }
        if (!tea_util_1.default.isUnset(request.element)) {
            body["element"] = request.element;
        }
        if (!tea_util_1.default.isUnset(request.index)) {
            body["index"] = request.index;
        }
        if (!tea_util_1.default.isUnset(request.where)) {
            body["where"] = request.where;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DocInsertBlocks",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/suites/documents/${docKey}/blocks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DocInsertBlocksResponse({}));
    }
    async docInsertBlocks(docKey, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DocInsertBlocksHeaders({});
        return await this.docInsertBlocksWithOptions(docKey, request, headers, runtime);
    }
    async docUpdateContentWithOptions(docKey, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.dataType)) {
            body["dataType"] = request.dataType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DocUpdateContent",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/suites/documents/${docKey}/overwriteContent`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DocUpdateContentResponse({}));
    }
    async docUpdateContent(docKey, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DocUpdateContentHeaders({});
        return await this.docUpdateContentWithOptions(docKey, request, headers, runtime);
    }
    async getAllSheetsWithOptions(workbookId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAllSheets",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAllSheetsResponse({}));
    }
    async getAllSheets(workbookId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAllSheetsHeaders({});
        return await this.getAllSheetsWithOptions(workbookId, request, headers, runtime);
    }
    async getDeveloperMetadataWithOptions(workbookId, developerMetadataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDeveloperMetadata",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/developerMetadatas/${developerMetadataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDeveloperMetadataResponse({}));
    }
    async getDeveloperMetadata(workbookId, developerMetadataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDeveloperMetadataHeaders({});
        return await this.getDeveloperMetadataWithOptions(workbookId, developerMetadataId, request, headers, runtime);
    }
    async getRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.select)) {
            query["select"] = request.select;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRange",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRangeResponse({}));
    }
    async getRange(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRangeHeaders({});
        return await this.getRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async getRecentEditDocsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRecentEditDocs",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/docs/recentEditDocs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRecentEditDocsResponse({}));
    }
    async getRecentEditDocs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRecentEditDocsHeaders({});
        return await this.getRecentEditDocsWithOptions(request, headers, runtime);
    }
    async getRecentOpenDocsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRecentOpenDocs",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/docs/recentOpenDocs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRecentOpenDocsResponse({}));
    }
    async getRecentOpenDocs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRecentOpenDocsHeaders({});
        return await this.getRecentOpenDocsWithOptions(request, headers, runtime);
    }
    async getRelatedWorkspacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.includeRecent)) {
            query["includeRecent"] = request.includeRecent;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRelatedWorkspaces",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRelatedWorkspacesResponse({}));
    }
    async getRelatedWorkspaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRelatedWorkspacesHeaders({});
        return await this.getRelatedWorkspacesWithOptions(request, headers, runtime);
    }
    async getSheetWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSheet",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSheetResponse({}));
    }
    async getSheet(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSheetHeaders({});
        return await this.getSheetWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async getTemplateByIdWithOptions(templateId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.belong)) {
            query["belong"] = request.belong;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTemplateById",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/templates/${templateId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTemplateByIdResponse({}));
    }
    async getTemplateById(templateId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTemplateByIdHeaders({});
        return await this.getTemplateByIdWithOptions(templateId, request, headers, runtime);
    }
    async getWorkspaceWithOptions(workspaceId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetWorkspace",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetWorkspaceResponse({}));
    }
    async getWorkspace(workspaceId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetWorkspaceHeaders({});
        return await this.getWorkspaceWithOptions(workspaceId, headers, runtime);
    }
    async getWorkspaceNodeWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetWorkspaceNode",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetWorkspaceNodeResponse({}));
    }
    async getWorkspaceNode(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetWorkspaceNodeHeaders({});
        return await this.getWorkspaceNodeWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async initDocumentWithOptions(docId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.attachmentsMap)) {
            body["attachmentsMap"] = request.attachmentsMap;
        }
        if (!tea_util_1.default.isUnset(request.importType)) {
            body["importType"] = request.importType;
        }
        if (!tea_util_1.default.isUnset(request.linksKey)) {
            body["linksKey"] = request.linksKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InitDocument",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/docs/${docId}/init`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InitDocumentResponse({}));
    }
    async initDocument(docId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InitDocumentHeaders({});
        return await this.initDocumentWithOptions(docId, request, headers, runtime);
    }
    async insertBlocksWithOptions(documentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.blocks)) {
            body["blocks"] = request.blocks;
        }
        if (!tea_util_1.default.isUnset(request.location)) {
            body["location"] = request.location;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InsertBlocks",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/documents/${documentId}/blocks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InsertBlocksResponse({}));
    }
    async insertBlocks(documentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InsertBlocksHeaders({});
        return await this.insertBlocksWithOptions(documentId, request, headers, runtime);
    }
    async insertColumnsBeforeWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.column)) {
            body["column"] = request.column;
        }
        if (!tea_util_1.default.isUnset(request.columnCount)) {
            body["columnCount"] = request.columnCount;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InsertColumnsBefore",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/insertColumnsBefore`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InsertColumnsBeforeResponse({}));
    }
    async insertColumnsBefore(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InsertColumnsBeforeHeaders({});
        return await this.insertColumnsBeforeWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async insertDropdownListsWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.options)) {
            body["options"] = request.options;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InsertDropdownLists",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}/insertDropdownLists`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InsertDropdownListsResponse({}));
    }
    async insertDropdownLists(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InsertDropdownListsHeaders({});
        return await this.insertDropdownListsWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async insertRowsBeforeWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.row)) {
            body["row"] = request.row;
        }
        if (!tea_util_1.default.isUnset(request.rowCount)) {
            body["rowCount"] = request.rowCount;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InsertRowsBefore",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/insertRowsBefore`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InsertRowsBeforeResponse({}));
    }
    async insertRowsBefore(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InsertRowsBeforeHeaders({});
        return await this.insertRowsBeforeWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async listTemplateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.templateType)) {
            query["templateType"] = request.templateType;
        }
        if (!tea_util_1.default.isUnset(request.workspaceId)) {
            query["workspaceId"] = request.workspaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListTemplate",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/templates`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListTemplateResponse({}));
    }
    async listTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListTemplateHeaders({});
        return await this.listTemplateWithOptions(request, headers, runtime);
    }
    async mergeRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "MergeRange",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}/merge`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new MergeRangeResponse({}));
    }
    async mergeRange(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new MergeRangeHeaders({});
        return await this.mergeRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async rangeFindNextWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.findOptions)) {
            body["findOptions"] = request.findOptions;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["text"] = request.text;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RangeFindNext",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}/findNext`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RangeFindNextResponse({}));
    }
    async rangeFindNext(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RangeFindNextHeaders({});
        return await this.rangeFindNextWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async searchWorkspaceDocsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.workspaceId)) {
            query["workspaceId"] = request.workspaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchWorkspaceDocs",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/docs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchWorkspaceDocsResponse({}));
    }
    async searchWorkspaceDocs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchWorkspaceDocsHeaders({});
        return await this.searchWorkspaceDocsWithOptions(request, headers, runtime);
    }
    async setColumnWidthWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.column)) {
            body["column"] = request.column;
        }
        if (!tea_util_1.default.isUnset(request.width)) {
            body["width"] = request.width;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetColumnWidth",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/setColumnWidth`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetColumnWidthResponse({}));
    }
    async setColumnWidth(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetColumnWidthHeaders({});
        return await this.setColumnWidthWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async setColumnsVisibilityWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.column)) {
            body["column"] = request.column;
        }
        if (!tea_util_1.default.isUnset(request.columnCount)) {
            body["columnCount"] = request.columnCount;
        }
        if (!tea_util_1.default.isUnset(request.visibility)) {
            body["visibility"] = request.visibility;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetColumnsVisibility",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/setColumnsVisibility`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetColumnsVisibilityResponse({}));
    }
    async setColumnsVisibility(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetColumnsVisibilityHeaders({});
        return await this.setColumnsVisibilityWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async setRowHeightWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.height)) {
            body["height"] = request.height;
        }
        if (!tea_util_1.default.isUnset(request.row)) {
            body["row"] = request.row;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetRowHeight",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/setRowHeight`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetRowHeightResponse({}));
    }
    async setRowHeight(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetRowHeightHeaders({});
        return await this.setRowHeightWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async setRowsVisibilityWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.row)) {
            body["row"] = request.row;
        }
        if (!tea_util_1.default.isUnset(request.rowCount)) {
            body["rowCount"] = request.rowCount;
        }
        if (!tea_util_1.default.isUnset(request.visibility)) {
            body["visibility"] = request.visibility;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetRowsVisibility",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/setRowsVisibility`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetRowsVisibilityResponse({}));
    }
    async setRowsVisibility(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetRowsVisibilityHeaders({});
        return await this.setRowsVisibilityWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async sheetAutofitRowsWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.fontWidth)) {
            body["fontWidth"] = request.fontWidth;
        }
        if (!tea_util_1.default.isUnset(request.row)) {
            body["row"] = request.row;
        }
        if (!tea_util_1.default.isUnset(request.rowCount)) {
            body["rowCount"] = request.rowCount;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SheetAutofitRows",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/autofitRows`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SheetAutofitRowsResponse({}));
    }
    async sheetAutofitRows(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SheetAutofitRowsHeaders({});
        return await this.sheetAutofitRowsWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async sheetFindAllWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.select)) {
            query["select"] = request.select;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.findOptions)) {
            body["findOptions"] = request.findOptions;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["text"] = request.text;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SheetFindAll",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/findAll`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SheetFindAllResponse({}));
    }
    async sheetFindAll(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SheetFindAllHeaders({});
        return await this.sheetFindAllWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async unbindCoolAppToSheetWithOptions(workbookId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            query["coolAppCode"] = request.coolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UnbindCoolAppToSheet",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/coolApps`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UnbindCoolAppToSheetResponse({}));
    }
    async unbindCoolAppToSheet(workbookId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnbindCoolAppToSheetHeaders({});
        return await this.unbindCoolAppToSheetWithOptions(workbookId, request, headers, runtime);
    }
    async updateRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.backgroundColors)) {
            body["backgroundColors"] = request.backgroundColors;
        }
        if (!tea_util_1.default.isUnset(request.fontSizes)) {
            body["fontSizes"] = request.fontSizes;
        }
        if (!tea_util_1.default.isUnset(request.fontWeights)) {
            body["fontWeights"] = request.fontWeights;
        }
        if (!tea_util_1.default.isUnset(request.horizontalAlignments)) {
            body["horizontalAlignments"] = request.horizontalAlignments;
        }
        if (!tea_util_1.default.isUnset(request.hyperlinks)) {
            body["hyperlinks"] = request.hyperlinks;
        }
        if (!tea_util_1.default.isUnset(request.numberFormat)) {
            body["numberFormat"] = request.numberFormat;
        }
        if (!tea_util_1.default.isUnset(request.values)) {
            body["values"] = request.values;
        }
        if (!tea_util_1.default.isUnset(request.verticalAlignments)) {
            body["verticalAlignments"] = request.verticalAlignments;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRange",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}/ranges/${rangeAddress}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateRangeResponse({}));
    }
    async updateRange(workbookId, sheetId, rangeAddress, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRangeHeaders({});
        return await this.updateRangeWithOptions(workbookId, sheetId, rangeAddress, request, headers, runtime);
    }
    async updateSheetWithOptions(workbookId, sheetId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.visibility)) {
            body["visibility"] = request.visibility;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateSheet",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workbooks/${workbookId}/sheets/${sheetId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateSheetResponse({}));
    }
    async updateSheet(workbookId, sheetId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateSheetHeaders({});
        return await this.updateSheetWithOptions(workbookId, sheetId, request, headers, runtime);
    }
    async updateWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateWorkspaceDocMembers",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}/docs/${nodeId}/members`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateWorkspaceDocMembersResponse({}));
    }
    async updateWorkspaceDocMembers(workspaceId, nodeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateWorkspaceDocMembersHeaders({});
        return await this.updateWorkspaceDocMembersWithOptions(workspaceId, nodeId, request, headers, runtime);
    }
    async updateWorkspaceMembersWithOptions(workspaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateWorkspaceMembers",
            version: "doc_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/doc/workspaces/${workspaceId}/members`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateWorkspaceMembersResponse({}));
    }
    async updateWorkspaceMembers(workspaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateWorkspaceMembersHeaders({});
        return await this.updateWorkspaceMembersWithOptions(workspaceId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map