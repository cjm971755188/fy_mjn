"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class ContractBenefitConsumeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ContractBenefitConsumeHeaders = ContractBenefitConsumeHeaders;
class ContractBenefitConsumeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            benefitPoint: 'benefitPoint',
            bizRequestId: 'bizRequestId',
            consumeQuota: 'consumeQuota',
            corpId: 'corpId',
            extParams: 'extParams',
            isvCorpId: 'isvCorpId',
            optUnionId: 'optUnionId',
        };
    }
    static types() {
        return {
            benefitPoint: 'string',
            bizRequestId: 'string',
            consumeQuota: 'number',
            corpId: 'string',
            extParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            isvCorpId: 'string',
            optUnionId: 'string',
        };
    }
}
exports.ContractBenefitConsumeRequest = ContractBenefitConsumeRequest;
class ContractBenefitConsumeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: ContractBenefitConsumeResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.ContractBenefitConsumeResponseBody = ContractBenefitConsumeResponseBody;
class ContractBenefitConsumeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ContractBenefitConsumeResponseBody,
        };
    }
}
exports.ContractBenefitConsumeResponse = ContractBenefitConsumeResponse;
class EsignQueryGrantInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.EsignQueryGrantInfoHeaders = EsignQueryGrantInfoHeaders;
class EsignQueryGrantInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            extension: 'extension',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            unionId: 'string',
        };
    }
}
exports.EsignQueryGrantInfoRequest = EsignQueryGrantInfoRequest;
class EsignQueryGrantInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: EsignQueryGrantInfoResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.EsignQueryGrantInfoResponseBody = EsignQueryGrantInfoResponseBody;
class EsignQueryGrantInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EsignQueryGrantInfoResponseBody,
        };
    }
}
exports.EsignQueryGrantInfoResponse = EsignQueryGrantInfoResponse;
class EsignQueryIdentityByTicketHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.EsignQueryIdentityByTicketHeaders = EsignQueryIdentityByTicketHeaders;
class EsignQueryIdentityByTicketRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            extension: 'extension',
            ticket: 'ticket',
        };
    }
    static types() {
        return {
            corpId: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            ticket: 'string',
        };
    }
}
exports.EsignQueryIdentityByTicketRequest = EsignQueryIdentityByTicketRequest;
class EsignQueryIdentityByTicketResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: EsignQueryIdentityByTicketResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.EsignQueryIdentityByTicketResponseBody = EsignQueryIdentityByTicketResponseBody;
class EsignQueryIdentityByTicketResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EsignQueryIdentityByTicketResponseBody,
        };
    }
}
exports.EsignQueryIdentityByTicketResponse = EsignQueryIdentityByTicketResponse;
class EsignSyncEventHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.EsignSyncEventHeaders = EsignSyncEventHeaders;
class EsignSyncEventRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            corpId: 'corpId',
            esignData: 'esignData',
            extension: 'extension',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            action: 'string',
            corpId: 'string',
            esignData: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            unionId: 'string',
        };
    }
}
exports.EsignSyncEventRequest = EsignSyncEventRequest;
class EsignSyncEventResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: EsignSyncEventResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.EsignSyncEventResponseBody = EsignSyncEventResponseBody;
class EsignSyncEventResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EsignSyncEventResponseBody,
        };
    }
}
exports.EsignSyncEventResponse = EsignSyncEventResponse;
class QueryAdvancedContractVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAdvancedContractVersionHeaders = QueryAdvancedContractVersionHeaders;
class QueryAdvancedContractVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            extension: 'extension',
        };
    }
    static types() {
        return {
            corpId: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.QueryAdvancedContractVersionRequest = QueryAdvancedContractVersionRequest;
class QueryAdvancedContractVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryAdvancedContractVersionResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.QueryAdvancedContractVersionResponseBody = QueryAdvancedContractVersionResponseBody;
class QueryAdvancedContractVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAdvancedContractVersionResponseBody,
        };
    }
}
exports.QueryAdvancedContractVersionResponse = QueryAdvancedContractVersionResponse;
class SendContractCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendContractCardHeaders = SendContractCardHeaders;
class SendContractCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardType: 'cardType',
            contractInfo: 'contractInfo',
            corpId: 'corpId',
            extension: 'extension',
            processInstanceId: 'processInstanceId',
            receiveGroups: 'receiveGroups',
            receivers: 'receivers',
            sender: 'sender',
            syncSingleChat: 'syncSingleChat',
        };
    }
    static types() {
        return {
            cardType: 'string',
            contractInfo: SendContractCardRequestContractInfo,
            corpId: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            processInstanceId: 'string',
            receiveGroups: { 'type': 'array', 'itemType': 'string' },
            receivers: { 'type': 'array', 'itemType': SendContractCardRequestReceivers },
            sender: SendContractCardRequestSender,
            syncSingleChat: 'boolean',
        };
    }
}
exports.SendContractCardRequest = SendContractCardRequest;
class SendContractCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.SendContractCardResponseBody = SendContractCardResponseBody;
class SendContractCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendContractCardResponseBody,
        };
    }
}
exports.SendContractCardResponse = SendContractCardResponse;
class ContractBenefitConsumeResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            consumeResult: 'consumeResult',
        };
    }
    static types() {
        return {
            consumeResult: 'boolean',
        };
    }
}
exports.ContractBenefitConsumeResponseBodyResult = ContractBenefitConsumeResponseBodyResult;
class EsignQueryGrantInfoResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            legalPerson: 'legalPerson',
            mobilePhoneNumber: 'mobilePhoneNumber',
            orgName: 'orgName',
            stateCode: 'stateCode',
            unifiedSocialCredit: 'unifiedSocialCredit',
            userName: 'userName',
        };
    }
    static types() {
        return {
            legalPerson: 'string',
            mobilePhoneNumber: 'string',
            orgName: 'string',
            stateCode: 'string',
            unifiedSocialCredit: 'string',
            userName: 'string',
        };
    }
}
exports.EsignQueryGrantInfoResponseBodyResult = EsignQueryGrantInfoResponseBodyResult;
class EsignQueryIdentityByTicketResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.EsignQueryIdentityByTicketResponseBodyResult = EsignQueryIdentityByTicketResponseBodyResult;
class EsignSyncEventResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
        };
    }
    static types() {
        return {
            message: 'string',
        };
    }
}
exports.EsignSyncEventResponseBodyResult = EsignSyncEventResponseBodyResult;
class QueryAdvancedContractVersionResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enableEsignAttachmentSign: 'enableEsignAttachmentSign',
            extension: 'extension',
            version: 'version',
        };
    }
    static types() {
        return {
            enableEsignAttachmentSign: 'boolean',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            version: 'string',
        };
    }
}
exports.QueryAdvancedContractVersionResponseBodyResult = QueryAdvancedContractVersionResponseBodyResult;
class SendContractCardRequestContractInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contractCode: 'contractCode',
            contractName: 'contractName',
            createTime: 'createTime',
            signUserName: 'signUserName',
        };
    }
    static types() {
        return {
            contractCode: 'string',
            contractName: 'string',
            createTime: 'number',
            signUserName: 'string',
        };
    }
}
exports.SendContractCardRequestContractInfo = SendContractCardRequestContractInfo;
class SendContractCardRequestReceivers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            userId: 'userId',
            userType: 'userType',
        };
    }
    static types() {
        return {
            corpId: 'string',
            userId: 'string',
            userType: 'string',
        };
    }
}
exports.SendContractCardRequestReceivers = SendContractCardRequestReceivers;
class SendContractCardRequestSender extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            userId: 'userId',
            userType: 'userType',
        };
    }
    static types() {
        return {
            corpId: 'string',
            userId: 'string',
            userType: 'string',
        };
    }
}
exports.SendContractCardRequestSender = SendContractCardRequestSender;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async contractBenefitConsumeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.benefitPoint)) {
            body["benefitPoint"] = request.benefitPoint;
        }
        if (!tea_util_1.default.isUnset(request.bizRequestId)) {
            body["bizRequestId"] = request.bizRequestId;
        }
        if (!tea_util_1.default.isUnset(request.consumeQuota)) {
            body["consumeQuota"] = request.consumeQuota;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extParams)) {
            body["extParams"] = request.extParams;
        }
        if (!tea_util_1.default.isUnset(request.isvCorpId)) {
            body["isvCorpId"] = request.isvCorpId;
        }
        if (!tea_util_1.default.isUnset(request.optUnionId)) {
            body["optUnionId"] = request.optUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ContractBenefitConsume",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/benefits/consume`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ContractBenefitConsumeResponse({}));
    }
    async contractBenefitConsume(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ContractBenefitConsumeHeaders({});
        return await this.contractBenefitConsumeWithOptions(request, headers, runtime);
    }
    async esignQueryGrantInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EsignQueryGrantInfo",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/esign/anthInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EsignQueryGrantInfoResponse({}));
    }
    async esignQueryGrantInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EsignQueryGrantInfoHeaders({});
        return await this.esignQueryGrantInfoWithOptions(request, headers, runtime);
    }
    async esignQueryIdentityByTicketWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.ticket)) {
            body["ticket"] = request.ticket;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EsignQueryIdentityByTicket",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/esign/tickets/identities/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EsignQueryIdentityByTicketResponse({}));
    }
    async esignQueryIdentityByTicket(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EsignQueryIdentityByTicketHeaders({});
        return await this.esignQueryIdentityByTicketWithOptions(request, headers, runtime);
    }
    async esignSyncEventWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.esignData)) {
            body["esignData"] = request.esignData;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EsignSyncEvent",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/esign/events/sync`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EsignSyncEventResponse({}));
    }
    async esignSyncEvent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EsignSyncEventHeaders({});
        return await this.esignSyncEventWithOptions(request, headers, runtime);
    }
    async queryAdvancedContractVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryAdvancedContractVersion",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/versions/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAdvancedContractVersionResponse({}));
    }
    async queryAdvancedContractVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAdvancedContractVersionHeaders({});
        return await this.queryAdvancedContractVersionWithOptions(request, headers, runtime);
    }
    async sendContractCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardType)) {
            body["cardType"] = request.cardType;
        }
        if (!tea_util_1.default.isUnset(request.contractInfo)) {
            body["contractInfo"] = request.contractInfo;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            body["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.receiveGroups)) {
            body["receiveGroups"] = request.receiveGroups;
        }
        if (!tea_util_1.default.isUnset(request.receivers)) {
            body["receivers"] = request.receivers;
        }
        if (!tea_util_1.default.isUnset(request.sender)) {
            body["sender"] = request.sender;
        }
        if (!tea_util_1.default.isUnset(request.syncSingleChat)) {
            body["syncSingleChat"] = request.syncSingleChat;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendContractCard",
            version: "contract_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contract/cards/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendContractCardResponse({}));
    }
    async sendContractCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendContractCardHeaders({});
        return await this.sendContractCardWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map