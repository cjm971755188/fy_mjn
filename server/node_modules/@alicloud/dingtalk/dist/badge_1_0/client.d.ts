/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateBadgeCodeUserInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeCodeUserInstanceRequest extends $tea.Model {
    availableTimes?: CreateBadgeCodeUserInstanceRequestAvailableTimes[];
    codeIdentity?: string;
    codeValue?: string;
    codeValueType?: string;
    corpId?: string;
    extInfo?: {
        [key: string]: any;
    };
    gmtExpired?: string;
    requestId?: string;
    status?: string;
    userCorpRelationType?: string;
    userIdentity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeCodeUserInstanceResponseBody extends $tea.Model {
    codeDetailUrl?: string;
    codeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeCodeUserInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateBadgeCodeUserInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeNotifyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeNotifyRequest extends $tea.Model {
    content?: string;
    msgId?: string;
    msgType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeNotifyResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeNotifyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateBadgeNotifyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodeBadgeCodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodeBadgeCodeRequest extends $tea.Model {
    payCode?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodeBadgeCodeResponseBody extends $tea.Model {
    alipayCode?: string;
    codeId?: string;
    codeIdentity?: string;
    codeType?: string;
    corpId?: string;
    extInfo?: string;
    outBizId?: string;
    userCorpRelationType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodeBadgeCodeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DecodeBadgeCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultRequest extends $tea.Model {
    amount?: string;
    chargeAmount?: string;
    corpId?: string;
    extInfo?: string;
    gmtTradeCreate?: string;
    gmtTradeFinish?: string;
    merchantName?: string;
    payChannelDetailList?: NotifyBadgeCodePayResultRequestPayChannelDetailList[];
    payCode?: string;
    promotionAmount?: string;
    remark?: string;
    title?: string;
    tradeErrorCode?: string;
    tradeErrorMsg?: string;
    tradeNo?: string;
    tradeStatus?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: NotifyBadgeCodePayResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultRequest extends $tea.Model {
    corpId?: string;
    gmtRefund?: string;
    payChannelDetailList?: NotifyBadgeCodeRefundResultRequestPayChannelDetailList[];
    payCode?: string;
    refundAmount?: string;
    refundOrderNo?: string;
    refundPromotionAmount?: string;
    remark?: string;
    tradeNo?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: NotifyBadgeCodeRefundResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeVerifyResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeVerifyResultRequest extends $tea.Model {
    corpId?: string;
    payCode?: string;
    remark?: string;
    userCorpRelationType?: string;
    userIdentity?: string;
    verifyEvent?: string;
    verifyLocation?: string;
    verifyNo?: string;
    verifyResult?: boolean;
    verifyTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeVerifyResultResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeVerifyResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: NotifyBadgeCodeVerifyResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveBadgeCodeCorpInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveBadgeCodeCorpInstanceRequest extends $tea.Model {
    codeIdentity?: string;
    corpId?: string;
    extInfo?: {
        [key: string]: string;
    };
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveBadgeCodeCorpInstanceResponseBody extends $tea.Model {
    codeIdentity?: string;
    corpId?: string;
    extInfo?: {
        [key: string]: string;
    };
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveBadgeCodeCorpInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SaveBadgeCodeCorpInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceRequest extends $tea.Model {
    availableTimes?: UpdateBadgeCodeUserInstanceRequestAvailableTimes[];
    codeId?: string;
    codeIdentity?: string;
    codeValue?: string;
    corpId?: string;
    extInfo?: {
        [key: string]: any;
    };
    gmtExpired?: string;
    status?: string;
    userCorpRelationType?: string;
    userIdentity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceResponseBody extends $tea.Model {
    codeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateBadgeCodeUserInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBadgeCodeUserInstanceRequestAvailableTimes extends $tea.Model {
    gmtEnd?: string;
    gmtStart?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultRequestPayChannelDetailListFundToolDetailList extends $tea.Model {
    amount?: string;
    extInfo?: string;
    fundToolName?: string;
    gmtCreate?: string;
    gmtFinish?: string;
    promotionFundTool?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodePayResultRequestPayChannelDetailList extends $tea.Model {
    amount?: string;
    fundToolDetailList?: NotifyBadgeCodePayResultRequestPayChannelDetailListFundToolDetailList[];
    gmtCreate?: string;
    gmtFinish?: string;
    payChannelName?: string;
    payChannelOrderNo?: string;
    payChannelType?: string;
    promotionAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultRequestPayChannelDetailListFundToolDetailList extends $tea.Model {
    amount?: string;
    extInfo?: string;
    fundToolName?: string;
    gmtCreate?: string;
    gmtFinish?: string;
    promotionFundTool?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyBadgeCodeRefundResultRequestPayChannelDetailList extends $tea.Model {
    amount?: string;
    fundToolDetailList?: NotifyBadgeCodeRefundResultRequestPayChannelDetailListFundToolDetailList[];
    payChannelName?: string;
    payChannelOrderNo?: string;
    payChannelRefundOrderNo?: string;
    payChannelType?: string;
    promotionAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBadgeCodeUserInstanceRequestAvailableTimes extends $tea.Model {
    gmtEnd?: string;
    gmtStart?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    createBadgeCodeUserInstanceWithOptions(request: CreateBadgeCodeUserInstanceRequest, headers: CreateBadgeCodeUserInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateBadgeCodeUserInstanceResponse>;
    createBadgeCodeUserInstance(request: CreateBadgeCodeUserInstanceRequest): Promise<CreateBadgeCodeUserInstanceResponse>;
    createBadgeNotifyWithOptions(request: CreateBadgeNotifyRequest, headers: CreateBadgeNotifyHeaders, runtime: $Util.RuntimeOptions): Promise<CreateBadgeNotifyResponse>;
    createBadgeNotify(request: CreateBadgeNotifyRequest): Promise<CreateBadgeNotifyResponse>;
    decodeBadgeCodeWithOptions(request: DecodeBadgeCodeRequest, headers: DecodeBadgeCodeHeaders, runtime: $Util.RuntimeOptions): Promise<DecodeBadgeCodeResponse>;
    decodeBadgeCode(request: DecodeBadgeCodeRequest): Promise<DecodeBadgeCodeResponse>;
    notifyBadgeCodePayResultWithOptions(request: NotifyBadgeCodePayResultRequest, headers: NotifyBadgeCodePayResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyBadgeCodePayResultResponse>;
    notifyBadgeCodePayResult(request: NotifyBadgeCodePayResultRequest): Promise<NotifyBadgeCodePayResultResponse>;
    notifyBadgeCodeRefundResultWithOptions(request: NotifyBadgeCodeRefundResultRequest, headers: NotifyBadgeCodeRefundResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyBadgeCodeRefundResultResponse>;
    notifyBadgeCodeRefundResult(request: NotifyBadgeCodeRefundResultRequest): Promise<NotifyBadgeCodeRefundResultResponse>;
    notifyBadgeCodeVerifyResultWithOptions(request: NotifyBadgeCodeVerifyResultRequest, headers: NotifyBadgeCodeVerifyResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyBadgeCodeVerifyResultResponse>;
    notifyBadgeCodeVerifyResult(request: NotifyBadgeCodeVerifyResultRequest): Promise<NotifyBadgeCodeVerifyResultResponse>;
    saveBadgeCodeCorpInstanceWithOptions(request: SaveBadgeCodeCorpInstanceRequest, headers: SaveBadgeCodeCorpInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<SaveBadgeCodeCorpInstanceResponse>;
    saveBadgeCodeCorpInstance(request: SaveBadgeCodeCorpInstanceRequest): Promise<SaveBadgeCodeCorpInstanceResponse>;
    updateBadgeCodeUserInstanceWithOptions(request: UpdateBadgeCodeUserInstanceRequest, headers: UpdateBadgeCodeUserInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateBadgeCodeUserInstanceResponse>;
    updateBadgeCodeUserInstance(request: UpdateBadgeCodeUserInstanceRequest): Promise<UpdateBadgeCodeUserInstanceResponse>;
}
