"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class BatchDeleteReceiptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchDeleteReceiptHeaders = BatchDeleteReceiptHeaders;
class BatchDeleteReceiptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceIdList: 'instanceIdList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            instanceIdList: { 'type': 'array', 'itemType': 'string' },
            operator: 'string',
        };
    }
}
exports.BatchDeleteReceiptRequest = BatchDeleteReceiptRequest;
class BatchDeleteReceiptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.BatchDeleteReceiptResponseBody = BatchDeleteReceiptResponseBody;
class BatchDeleteReceiptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchDeleteReceiptResponseBody,
        };
    }
}
exports.BatchDeleteReceiptResponse = BatchDeleteReceiptResponse;
class GetCategoryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCategoryHeaders = GetCategoryHeaders;
class GetCategoryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
}
exports.GetCategoryRequest = GetCategoryRequest;
class GetCategoryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            isDir: 'isDir',
            name: 'name',
            parentCode: 'parentCode',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            isDir: 'boolean',
            name: 'string',
            parentCode: 'string',
            status: 'string',
            type: 'string',
        };
    }
}
exports.GetCategoryResponseBody = GetCategoryResponseBody;
class GetCategoryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCategoryResponseBody,
        };
    }
}
exports.GetCategoryResponse = GetCategoryResponse;
class GetFinanceAccountHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetFinanceAccountHeaders = GetFinanceAccountHeaders;
class GetFinanceAccountRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountCode: 'accountCode',
        };
    }
    static types() {
        return {
            accountCode: 'string',
        };
    }
}
exports.GetFinanceAccountRequest = GetFinanceAccountRequest;
class GetFinanceAccountResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountCode: 'accountCode',
            accountId: 'accountId',
            accountName: 'accountName',
            accountRemark: 'accountRemark',
            accountType: 'accountType',
            accountantBookIdList: 'accountantBookIdList',
            amount: 'amount',
            bankCode: 'bankCode',
            bankName: 'bankName',
            createTime: 'createTime',
            creator: 'creator',
        };
    }
    static types() {
        return {
            accountCode: 'string',
            accountId: 'string',
            accountName: 'string',
            accountRemark: 'string',
            accountType: 'string',
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            amount: 'string',
            bankCode: 'string',
            bankName: 'string',
            createTime: 'number',
            creator: 'string',
        };
    }
}
exports.GetFinanceAccountResponseBody = GetFinanceAccountResponseBody;
class GetFinanceAccountResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFinanceAccountResponseBody,
        };
    }
}
exports.GetFinanceAccountResponse = GetFinanceAccountResponse;
class GetProjectHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetProjectHeaders = GetProjectHeaders;
class GetProjectRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
}
exports.GetProjectRequest = GetProjectRequest;
class GetProjectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            creator: 'creator',
            description: 'description',
            name: 'name',
            projectCode: 'projectCode',
            projectName: 'projectName',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            creator: 'string',
            description: 'string',
            name: 'string',
            projectCode: 'string',
            projectName: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.GetProjectResponseBody = GetProjectResponseBody;
class GetProjectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetProjectResponseBody,
        };
    }
}
exports.GetProjectResponse = GetProjectResponse;
class GetSupplierHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSupplierHeaders = GetSupplierHeaders;
class GetSupplierRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
}
exports.GetSupplierRequest = GetSupplierRequest;
class GetSupplierResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.GetSupplierResponseBody = GetSupplierResponseBody;
class GetSupplierResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSupplierResponseBody,
        };
    }
}
exports.GetSupplierResponse = GetSupplierResponse;
class QueryCategoryByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCategoryByPageHeaders = QueryCategoryByPageHeaders;
class QueryCategoryByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            type: 'type',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            type: 'string',
        };
    }
}
exports.QueryCategoryByPageRequest = QueryCategoryByPageRequest;
class QueryCategoryByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCategoryByPageResponseBodyList },
        };
    }
}
exports.QueryCategoryByPageResponseBody = QueryCategoryByPageResponseBody;
class QueryCategoryByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCategoryByPageResponseBody,
        };
    }
}
exports.QueryCategoryByPageResponse = QueryCategoryByPageResponse;
class QueryCustomerByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCustomerByPageHeaders = QueryCustomerByPageHeaders;
class QueryCustomerByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryCustomerByPageRequest = QueryCustomerByPageRequest;
class QueryCustomerByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCustomerByPageResponseBodyList },
        };
    }
}
exports.QueryCustomerByPageResponseBody = QueryCustomerByPageResponseBody;
class QueryCustomerByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCustomerByPageResponseBody,
        };
    }
}
exports.QueryCustomerByPageResponse = QueryCustomerByPageResponse;
class QueryEnterpriseAccountByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryEnterpriseAccountByPageHeaders = QueryEnterpriseAccountByPageHeaders;
class QueryEnterpriseAccountByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryEnterpriseAccountByPageRequest = QueryEnterpriseAccountByPageRequest;
class QueryEnterpriseAccountByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryEnterpriseAccountByPageResponseBodyList },
        };
    }
}
exports.QueryEnterpriseAccountByPageResponseBody = QueryEnterpriseAccountByPageResponseBody;
class QueryEnterpriseAccountByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryEnterpriseAccountByPageResponseBody,
        };
    }
}
exports.QueryEnterpriseAccountByPageResponse = QueryEnterpriseAccountByPageResponse;
class QueryInstancePaymentOrderDetailHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryInstancePaymentOrderDetailHeaders = QueryInstancePaymentOrderDetailHeaders;
class QueryInstancePaymentOrderDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryInstancePaymentOrderDetailResponseBodyResult,
        };
    }
}
exports.QueryInstancePaymentOrderDetailResponseBody = QueryInstancePaymentOrderDetailResponseBody;
class QueryInstancePaymentOrderDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryInstancePaymentOrderDetailResponseBody,
        };
    }
}
exports.QueryInstancePaymentOrderDetailResponse = QueryInstancePaymentOrderDetailResponse;
class QueryProjectByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryProjectByPageHeaders = QueryProjectByPageHeaders;
class QueryProjectByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryProjectByPageRequest = QueryProjectByPageRequest;
class QueryProjectByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryProjectByPageResponseBodyList },
        };
    }
}
exports.QueryProjectByPageResponseBody = QueryProjectByPageResponseBody;
class QueryProjectByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryProjectByPageResponseBody,
        };
    }
}
exports.QueryProjectByPageResponse = QueryProjectByPageResponse;
class QuerySupplierByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QuerySupplierByPageHeaders = QuerySupplierByPageHeaders;
class QuerySupplierByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QuerySupplierByPageRequest = QuerySupplierByPageRequest;
class QuerySupplierByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QuerySupplierByPageResponseBodyList },
        };
    }
}
exports.QuerySupplierByPageResponseBody = QuerySupplierByPageResponseBody;
class QuerySupplierByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySupplierByPageResponseBody,
        };
    }
}
exports.QuerySupplierByPageResponse = QuerySupplierByPageResponse;
class SignEnterpriseAccountHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SignEnterpriseAccountHeaders = SignEnterpriseAccountHeaders;
class SignEnterpriseAccountRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bankCardNo: 'bankCardNo',
            operator: 'operator',
            signOperateType: 'signOperateType',
        };
    }
    static types() {
        return {
            bankCardNo: 'string',
            operator: 'string',
            signOperateType: 'string',
        };
    }
}
exports.SignEnterpriseAccountRequest = SignEnterpriseAccountRequest;
class SignEnterpriseAccountResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.SignEnterpriseAccountResponseBody = SignEnterpriseAccountResponseBody;
class SignEnterpriseAccountResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SignEnterpriseAccountResponseBody,
        };
    }
}
exports.SignEnterpriseAccountResponse = SignEnterpriseAccountResponse;
class UpdateInstanceOrderInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInstanceOrderInfoHeaders = UpdateInstanceOrderInfoHeaders;
class UpdateInstanceOrderInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failReason: 'failReason',
            outOrderNo: 'outOrderNo',
            payerBank: 'payerBank',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            failReason: 'string',
            outOrderNo: 'string',
            payerBank: UpdateInstanceOrderInfoRequestPayerBank,
            status: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateInstanceOrderInfoRequest = UpdateInstanceOrderInfoRequest;
class UpdateInstanceOrderInfoShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failReason: 'failReason',
            outOrderNo: 'outOrderNo',
            payerBankShrink: 'payerBank',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            failReason: 'string',
            outOrderNo: 'string',
            payerBankShrink: 'string',
            status: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateInstanceOrderInfoShrinkRequest = UpdateInstanceOrderInfoShrinkRequest;
class UpdateInstanceOrderInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateInstanceOrderInfoResponseBody = UpdateInstanceOrderInfoResponseBody;
class UpdateInstanceOrderInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInstanceOrderInfoResponseBody,
        };
    }
}
exports.UpdateInstanceOrderInfoResponse = UpdateInstanceOrderInfoResponse;
class QueryCategoryByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            isDir: 'isDir',
            name: 'name',
            parentCode: 'parentCode',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            isDir: 'boolean',
            name: 'string',
            parentCode: 'string',
            status: 'string',
            type: 'string',
        };
    }
}
exports.QueryCategoryByPageResponseBodyList = QueryCategoryByPageResponseBodyList;
class QueryCustomerByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.QueryCustomerByPageResponseBodyList = QueryCustomerByPageResponseBodyList;
class QueryEnterpriseAccountByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountCode: 'accountCode',
            accountId: 'accountId',
            accountName: 'accountName',
            accountRemark: 'accountRemark',
            accountType: 'accountType',
            amount: 'amount',
            bankCode: 'bankCode',
            bankName: 'bankName',
            createTime: 'createTime',
            creator: 'creator',
        };
    }
    static types() {
        return {
            accountCode: 'string',
            accountId: 'string',
            accountName: 'string',
            accountRemark: 'string',
            accountType: 'string',
            amount: 'string',
            bankCode: 'string',
            bankName: 'string',
            createTime: 'number',
            creator: 'string',
        };
    }
}
exports.QueryEnterpriseAccountByPageResponseBodyList = QueryEnterpriseAccountByPageResponseBodyList;
class QueryInstancePaymentOrderDetailResponseBodyResultPayeeAccountDTOBankOpenDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bankBranchCode: 'bankBranchCode',
            bankBranchName: 'bankBranchName',
            bankCardNo: 'bankCardNo',
            bankCode: 'bankCode',
            bankName: 'bankName',
            type: 'type',
        };
    }
    static types() {
        return {
            bankBranchCode: 'string',
            bankBranchName: 'string',
            bankCardNo: 'string',
            bankCode: 'string',
            bankName: 'string',
            type: 'string',
        };
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyResultPayeeAccountDTOBankOpenDTO = QueryInstancePaymentOrderDetailResponseBodyResultPayeeAccountDTOBankOpenDTO;
class QueryInstancePaymentOrderDetailResponseBodyResultPayeeAccountDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bankOpenDTO: 'bankOpenDTO',
        };
    }
    static types() {
        return {
            bankOpenDTO: QueryInstancePaymentOrderDetailResponseBodyResultPayeeAccountDTOBankOpenDTO,
        };
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyResultPayeeAccountDTO = QueryInstancePaymentOrderDetailResponseBodyResultPayeeAccountDTO;
class QueryInstancePaymentOrderDetailResponseBodyResultPayerAccountDTOBankOpenDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bankBranchCode: 'bankBranchCode',
            bankBranchName: 'bankBranchName',
            bankCardNo: 'bankCardNo',
            bankCode: 'bankCode',
            bankName: 'bankName',
            type: 'type',
        };
    }
    static types() {
        return {
            bankBranchCode: 'string',
            bankBranchName: 'string',
            bankCardNo: 'string',
            bankCode: 'string',
            bankName: 'string',
            type: 'string',
        };
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyResultPayerAccountDTOBankOpenDTO = QueryInstancePaymentOrderDetailResponseBodyResultPayerAccountDTOBankOpenDTO;
class QueryInstancePaymentOrderDetailResponseBodyResultPayerAccountDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bankOpenDTO: 'bankOpenDTO',
            enterpriseAccountCode: 'enterpriseAccountCode',
        };
    }
    static types() {
        return {
            bankOpenDTO: QueryInstancePaymentOrderDetailResponseBodyResultPayerAccountDTOBankOpenDTO,
            enterpriseAccountCode: 'string',
        };
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyResultPayerAccountDTO = QueryInstancePaymentOrderDetailResponseBodyResultPayerAccountDTO;
class QueryInstancePaymentOrderDetailResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            instanceId: 'instanceId',
            payeeAccountDTO: 'payeeAccountDTO',
            payerAccountDTO: 'payerAccountDTO',
            remark: 'remark',
            usage: 'usage',
            userId: 'userId',
        };
    }
    static types() {
        return {
            amount: 'string',
            instanceId: 'string',
            payeeAccountDTO: QueryInstancePaymentOrderDetailResponseBodyResultPayeeAccountDTO,
            payerAccountDTO: QueryInstancePaymentOrderDetailResponseBodyResultPayerAccountDTO,
            remark: 'string',
            usage: 'string',
            userId: 'string',
        };
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyResult = QueryInstancePaymentOrderDetailResponseBodyResult;
class QueryProjectByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            caode: 'caode',
            code: 'code',
            createTime: 'createTime',
            creator: 'creator',
            description: 'description',
            name: 'name',
            projectCode: 'projectCode',
            projectName: 'projectName',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            caode: 'string',
            code: 'string',
            createTime: 'number',
            creator: 'string',
            description: 'string',
            name: 'string',
            projectCode: 'string',
            projectName: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.QueryProjectByPageResponseBodyList = QueryProjectByPageResponseBodyList;
class QuerySupplierByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.QuerySupplierByPageResponseBodyList = QuerySupplierByPageResponseBodyList;
class UpdateInstanceOrderInfoRequestPayerBank extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardNo: 'cardNo',
            name: 'name',
        };
    }
    static types() {
        return {
            cardNo: 'string',
            name: 'string',
        };
    }
}
exports.UpdateInstanceOrderInfoRequestPayerBank = UpdateInstanceOrderInfoRequestPayerBank;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async batchDeleteReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.instanceIdList)) {
            body["instanceIdList"] = request.instanceIdList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchDeleteReceipt",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/instances/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchDeleteReceiptResponse({}));
    }
    async batchDeleteReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchDeleteReceiptHeaders({});
        return await this.batchDeleteReceiptWithOptions(request, headers, runtime);
    }
    async getCategoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCategory",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/categories`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCategoryResponse({}));
    }
    async getCategory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCategoryHeaders({});
        return await this.getCategoryWithOptions(request, headers, runtime);
    }
    async getFinanceAccountWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accountCode)) {
            query["accountCode"] = request.accountCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFinanceAccount",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/financeAccounts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFinanceAccountResponse({}));
    }
    async getFinanceAccount(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFinanceAccountHeaders({});
        return await this.getFinanceAccountWithOptions(request, headers, runtime);
    }
    async getProjectWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetProject",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/projects`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetProjectResponse({}));
    }
    async getProject(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetProjectHeaders({});
        return await this.getProjectWithOptions(request, headers, runtime);
    }
    async getSupplierWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSupplier",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/suppliers/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSupplierResponse({}));
    }
    async getSupplier(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSupplierHeaders({});
        return await this.getSupplierWithOptions(request, headers, runtime);
    }
    async queryCategoryByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCategoryByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/categories/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCategoryByPageResponse({}));
    }
    async queryCategoryByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCategoryByPageHeaders({});
        return await this.queryCategoryByPageWithOptions(request, headers, runtime);
    }
    async queryCustomerByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCustomerByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/customers/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCustomerByPageResponse({}));
    }
    async queryCustomerByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCustomerByPageHeaders({});
        return await this.queryCustomerByPageWithOptions(request, headers, runtime);
    }
    async queryEnterpriseAccountByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEnterpriseAccountByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/financeAccounts/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryEnterpriseAccountByPageResponse({}));
    }
    async queryEnterpriseAccountByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryEnterpriseAccountByPageHeaders({});
        return await this.queryEnterpriseAccountByPageWithOptions(request, headers, runtime);
    }
    async queryInstancePaymentOrderDetailWithOptions(instanceId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryInstancePaymentOrderDetail",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/instances/${instanceId}/paymentOrders/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryInstancePaymentOrderDetailResponse({}));
    }
    async queryInstancePaymentOrderDetail(instanceId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryInstancePaymentOrderDetailHeaders({});
        return await this.queryInstancePaymentOrderDetailWithOptions(instanceId, headers, runtime);
    }
    async queryProjectByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProjectByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/projects/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryProjectByPageResponse({}));
    }
    async queryProjectByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryProjectByPageHeaders({});
        return await this.queryProjectByPageWithOptions(request, headers, runtime);
    }
    async querySupplierByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySupplierByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/suppliers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySupplierByPageResponse({}));
    }
    async querySupplierByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySupplierByPageHeaders({});
        return await this.querySupplierByPageWithOptions(request, headers, runtime);
    }
    async signEnterpriseAccountWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bankCardNo)) {
            query["bankCardNo"] = request.bankCardNo;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.signOperateType)) {
            query["signOperateType"] = request.signOperateType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SignEnterpriseAccount",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/enterpriseAccounts/sign`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SignEnterpriseAccountResponse({}));
    }
    async signEnterpriseAccount(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SignEnterpriseAccountHeaders({});
        return await this.signEnterpriseAccountWithOptions(request, headers, runtime);
    }
    async updateInstanceOrderInfoWithOptions(instanceId, tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new UpdateInstanceOrderInfoShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.payerBank)) {
            request.payerBankShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.payerBank, "payerBank", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.failReason)) {
            query["failReason"] = request.failReason;
        }
        if (!tea_util_1.default.isUnset(request.outOrderNo)) {
            query["outOrderNo"] = request.outOrderNo;
        }
        if (!tea_util_1.default.isUnset(request.payerBankShrink)) {
            query["payerBank"] = request.payerBankShrink;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInstanceOrderInfo",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/instances/${instanceId}/paymentOrders/states`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInstanceOrderInfoResponse({}));
    }
    async updateInstanceOrderInfo(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInstanceOrderInfoHeaders({});
        return await this.updateInstanceOrderInfoWithOptions(instanceId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map