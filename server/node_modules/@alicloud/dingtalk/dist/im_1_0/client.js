"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class PrivateDataValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardParamMap: 'cardParamMap',
            cardMediaIdParamMap: 'cardMediaIdParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            cardMediaIdParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.PrivateDataValue = PrivateDataValue;
class AddOrgTextEmotionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddOrgTextEmotionHeaders = AddOrgTextEmotionHeaders;
class AddOrgTextEmotionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            backgroundMediaId: 'backgroundMediaId',
            backgroundMediaIdForPanel: 'backgroundMediaIdForPanel',
            deptId: 'deptId',
            emotionName: 'emotionName',
        };
    }
    static types() {
        return {
            backgroundMediaId: 'string',
            backgroundMediaIdForPanel: 'string',
            deptId: 'number',
            emotionName: 'string',
        };
    }
}
exports.AddOrgTextEmotionRequest = AddOrgTextEmotionRequest;
class AddOrgTextEmotionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: AddOrgTextEmotionResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.AddOrgTextEmotionResponseBody = AddOrgTextEmotionResponseBody;
class AddOrgTextEmotionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddOrgTextEmotionResponseBody,
        };
    }
}
exports.AddOrgTextEmotionResponse = AddOrgTextEmotionResponse;
class AddRobotToConversationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddRobotToConversationHeaders = AddRobotToConversationHeaders;
class AddRobotToConversationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            icon: 'icon',
            name: 'name',
            openConversationId: 'openConversationId',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            icon: 'string',
            name: 'string',
            openConversationId: 'string',
            robotCode: 'string',
        };
    }
}
exports.AddRobotToConversationRequest = AddRobotToConversationRequest;
class AddRobotToConversationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatBotUserId: 'chatBotUserId',
        };
    }
    static types() {
        return {
            chatBotUserId: 'string',
        };
    }
}
exports.AddRobotToConversationResponseBody = AddRobotToConversationResponseBody;
class AddRobotToConversationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddRobotToConversationResponseBody,
        };
    }
}
exports.AddRobotToConversationResponse = AddRobotToConversationResponse;
class AutoOpenDingTalkConnectHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AutoOpenDingTalkConnectHeaders = AutoOpenDingTalkConnectHeaders;
class AutoOpenDingTalkConnectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
        };
    }
    static types() {
        return {
            message: 'string',
        };
    }
}
exports.AutoOpenDingTalkConnectResponseBody = AutoOpenDingTalkConnectResponseBody;
class AutoOpenDingTalkConnectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AutoOpenDingTalkConnectResponseBody,
        };
    }
}
exports.AutoOpenDingTalkConnectResponse = AutoOpenDingTalkConnectResponse;
class BatchQueryFamilySchoolMessageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchQueryFamilySchoolMessageHeaders = BatchQueryFamilySchoolMessageHeaders;
class BatchQueryFamilySchoolMessageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            openMessageIds: 'openMessageIds',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            openMessageIds: { 'type': 'array', 'itemType': 'string' },
            unionId: 'string',
        };
    }
}
exports.BatchQueryFamilySchoolMessageRequest = BatchQueryFamilySchoolMessageRequest;
class BatchQueryFamilySchoolMessageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            messages: 'messages',
        };
    }
    static types() {
        return {
            messages: { 'type': 'array', 'itemType': BatchQueryFamilySchoolMessageResponseBodyMessages },
        };
    }
}
exports.BatchQueryFamilySchoolMessageResponseBody = BatchQueryFamilySchoolMessageResponseBody;
class BatchQueryFamilySchoolMessageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchQueryFamilySchoolMessageResponseBody,
        };
    }
}
exports.BatchQueryFamilySchoolMessageResponse = BatchQueryFamilySchoolMessageResponse;
class BatchQueryGroupMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchQueryGroupMemberHeaders = BatchQueryGroupMemberHeaders;
class BatchQueryGroupMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            maxResults: 'number',
            nextToken: 'string',
            openConversationId: 'string',
        };
    }
}
exports.BatchQueryGroupMemberRequest = BatchQueryGroupMemberRequest;
class BatchQueryGroupMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            memberUserIds: 'memberUserIds',
            nextToken: 'nextToken',
            success: 'success',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            memberUserIds: { 'type': 'array', 'itemType': 'string' },
            nextToken: 'string',
            success: 'boolean',
        };
    }
}
exports.BatchQueryGroupMemberResponseBody = BatchQueryGroupMemberResponseBody;
class BatchQueryGroupMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchQueryGroupMemberResponseBody,
        };
    }
}
exports.BatchQueryGroupMemberResponse = BatchQueryGroupMemberResponse;
class CardTemplateBuildActionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CardTemplateBuildActionHeaders = CardTemplateBuildActionHeaders;
class CardTemplateBuildActionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            cardTemplateJson: 'cardTemplateJson',
        };
    }
    static types() {
        return {
            action: 'string',
            cardTemplateJson: 'string',
        };
    }
}
exports.CardTemplateBuildActionRequest = CardTemplateBuildActionRequest;
class CardTemplateBuildActionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardTemplateJson: 'cardTemplateJson',
        };
    }
    static types() {
        return {
            cardTemplateJson: 'string',
        };
    }
}
exports.CardTemplateBuildActionResponseBody = CardTemplateBuildActionResponseBody;
class CardTemplateBuildActionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CardTemplateBuildActionResponseBody,
        };
    }
}
exports.CardTemplateBuildActionResponse = CardTemplateBuildActionResponse;
class ChangeGroupOwnerHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ChangeGroupOwnerHeaders = ChangeGroupOwnerHeaders;
class ChangeGroupOwnerRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupOwnerId: 'groupOwnerId',
            groupOwnerType: 'groupOwnerType',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            groupOwnerId: 'string',
            groupOwnerType: 'number',
            openConversationId: 'string',
        };
    }
}
exports.ChangeGroupOwnerRequest = ChangeGroupOwnerRequest;
class ChangeGroupOwnerResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            newGroupOwnerId: 'newGroupOwnerId',
            newGroupOwnerType: 'newGroupOwnerType',
        };
    }
    static types() {
        return {
            newGroupOwnerId: 'string',
            newGroupOwnerType: 'number',
        };
    }
}
exports.ChangeGroupOwnerResponseBody = ChangeGroupOwnerResponseBody;
class ChangeGroupOwnerResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChangeGroupOwnerResponseBody,
        };
    }
}
exports.ChangeGroupOwnerResponse = ChangeGroupOwnerResponse;
class ChatIdToOpenConversationIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ChatIdToOpenConversationIdHeaders = ChatIdToOpenConversationIdHeaders;
class ChatIdToOpenConversationIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
}
exports.ChatIdToOpenConversationIdResponseBody = ChatIdToOpenConversationIdResponseBody;
class ChatIdToOpenConversationIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatIdToOpenConversationIdResponseBody,
        };
    }
}
exports.ChatIdToOpenConversationIdResponse = ChatIdToOpenConversationIdResponse;
class ChatSubAdminUpdateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ChatSubAdminUpdateHeaders = ChatSubAdminUpdateHeaders;
class ChatSubAdminUpdateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            role: 'role',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            role: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ChatSubAdminUpdateRequest = ChatSubAdminUpdateRequest;
class ChatSubAdminUpdateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'string',
        };
    }
}
exports.ChatSubAdminUpdateResponseBody = ChatSubAdminUpdateResponseBody;
class ChatSubAdminUpdateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChatSubAdminUpdateResponseBody,
        };
    }
}
exports.ChatSubAdminUpdateResponse = ChatSubAdminUpdateResponse;
class CheckUserIsGroupMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CheckUserIsGroupMemberHeaders = CheckUserIsGroupMemberHeaders;
class CheckUserIsGroupMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            userId: 'string',
        };
    }
}
exports.CheckUserIsGroupMemberRequest = CheckUserIsGroupMemberRequest;
class CheckUserIsGroupMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.CheckUserIsGroupMemberResponseBody = CheckUserIsGroupMemberResponseBody;
class CheckUserIsGroupMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckUserIsGroupMemberResponseBody,
        };
    }
}
exports.CheckUserIsGroupMemberResponse = CheckUserIsGroupMemberResponse;
class CreateCoupleGroupConversationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateCoupleGroupConversationHeaders = CreateCoupleGroupConversationHeaders;
class CreateCoupleGroupConversationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserId: 'appUserId',
            groupAvatar: 'groupAvatar',
            groupName: 'groupName',
            groupOwnerId: 'groupOwnerId',
            groupTemplateId: 'groupTemplateId',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            appUserId: 'string',
            groupAvatar: 'string',
            groupName: 'string',
            groupOwnerId: 'string',
            groupTemplateId: 'string',
            operatorId: 'string',
        };
    }
}
exports.CreateCoupleGroupConversationRequest = CreateCoupleGroupConversationRequest;
class CreateCoupleGroupConversationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conversationId: 'conversationId',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            conversationId: 'string',
            openConversationId: 'string',
        };
    }
}
exports.CreateCoupleGroupConversationResponseBody = CreateCoupleGroupConversationResponseBody;
class CreateCoupleGroupConversationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCoupleGroupConversationResponseBody,
        };
    }
}
exports.CreateCoupleGroupConversationResponse = CreateCoupleGroupConversationResponse;
class CreateGroupConversationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateGroupConversationHeaders = CreateGroupConversationHeaders;
class CreateGroupConversationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserIds: 'appUserIds',
            groupAvatar: 'groupAvatar',
            groupName: 'groupName',
            groupOwnerId: 'groupOwnerId',
            groupOwnerType: 'groupOwnerType',
            groupTemplateId: 'groupTemplateId',
            operatorId: 'operatorId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            appUserIds: { 'type': 'array', 'itemType': 'string' },
            groupAvatar: 'string',
            groupName: 'string',
            groupOwnerId: 'string',
            groupOwnerType: 'number',
            groupTemplateId: 'string',
            operatorId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateGroupConversationRequest = CreateGroupConversationRequest;
class CreateGroupConversationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserIds: 'appUserIds',
            conversationId: 'conversationId',
            openConversationId: 'openConversationId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            appUserIds: { 'type': 'array', 'itemType': 'string' },
            conversationId: 'string',
            openConversationId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateGroupConversationResponseBody = CreateGroupConversationResponseBody;
class CreateGroupConversationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateGroupConversationResponseBody,
        };
    }
}
exports.CreateGroupConversationResponse = CreateGroupConversationResponse;
class CreateInterconnectionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateInterconnectionHeaders = CreateInterconnectionHeaders;
class CreateInterconnectionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            interconnections: 'interconnections',
        };
    }
    static types() {
        return {
            interconnections: { 'type': 'array', 'itemType': CreateInterconnectionRequestInterconnections },
        };
    }
}
exports.CreateInterconnectionRequest = CreateInterconnectionRequest;
class CreateInterconnectionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            results: 'results',
        };
    }
    static types() {
        return {
            results: { 'type': 'array', 'itemType': CreateInterconnectionResponseBodyResults },
        };
    }
}
exports.CreateInterconnectionResponseBody = CreateInterconnectionResponseBody;
class CreateInterconnectionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateInterconnectionResponseBody,
        };
    }
}
exports.CreateInterconnectionResponse = CreateInterconnectionResponse;
class CreateSceneGroupConversationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateSceneGroupConversationHeaders = CreateSceneGroupConversationHeaders;
class CreateSceneGroupConversationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            features: 'features',
            groupName: 'groupName',
            groupOwnerId: 'groupOwnerId',
            icon: 'icon',
            managementOptions: 'managementOptions',
            templateId: 'templateId',
            userIdList: 'userIdList',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            features: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            groupName: 'string',
            groupOwnerId: 'string',
            icon: 'string',
            managementOptions: CreateSceneGroupConversationRequestManagementOptions,
            templateId: 'string',
            userIdList: { 'type': 'array', 'itemType': 'string' },
            uuid: 'string',
        };
    }
}
exports.CreateSceneGroupConversationRequest = CreateSceneGroupConversationRequest;
class CreateSceneGroupConversationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
}
exports.CreateSceneGroupConversationResponseBody = CreateSceneGroupConversationResponseBody;
class CreateSceneGroupConversationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateSceneGroupConversationResponseBody,
        };
    }
}
exports.CreateSceneGroupConversationResponse = CreateSceneGroupConversationResponse;
class CreateStoreGroupConversationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateStoreGroupConversationHeaders = CreateStoreGroupConversationHeaders;
class CreateStoreGroupConversationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserId: 'appUserId',
            businessUniqueKey: 'businessUniqueKey',
            groupAvatar: 'groupAvatar',
            groupName: 'groupName',
            groupTemplateId: 'groupTemplateId',
            operatorId: 'operatorId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            appUserId: 'string',
            businessUniqueKey: 'string',
            groupAvatar: 'string',
            groupName: 'string',
            groupTemplateId: 'string',
            operatorId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateStoreGroupConversationRequest = CreateStoreGroupConversationRequest;
class CreateStoreGroupConversationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conversationId: 'conversationId',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            conversationId: 'string',
            openConversationId: 'string',
        };
    }
}
exports.CreateStoreGroupConversationResponseBody = CreateStoreGroupConversationResponseBody;
class CreateStoreGroupConversationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateStoreGroupConversationResponseBody,
        };
    }
}
exports.CreateStoreGroupConversationResponse = CreateStoreGroupConversationResponse;
class DeleteOrgTextEmotionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteOrgTextEmotionHeaders = DeleteOrgTextEmotionHeaders;
class DeleteOrgTextEmotionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            emotionIds: 'emotionIds',
        };
    }
    static types() {
        return {
            deptId: 'number',
            emotionIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DeleteOrgTextEmotionRequest = DeleteOrgTextEmotionRequest;
class DeleteOrgTextEmotionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteOrgTextEmotionResponseBody = DeleteOrgTextEmotionResponseBody;
class DeleteOrgTextEmotionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteOrgTextEmotionResponseBody,
        };
    }
}
exports.DeleteOrgTextEmotionResponse = DeleteOrgTextEmotionResponse;
class DismissGroupConversationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DismissGroupConversationHeaders = DismissGroupConversationHeaders;
class DismissGroupConversationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
}
exports.DismissGroupConversationRequest = DismissGroupConversationRequest;
class DismissGroupConversationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
}
exports.DismissGroupConversationResponseBody = DismissGroupConversationResponseBody;
class DismissGroupConversationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DismissGroupConversationResponseBody,
        };
    }
}
exports.DismissGroupConversationResponse = DismissGroupConversationResponse;
class GetConversationUrlHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetConversationUrlHeaders = GetConversationUrlHeaders;
class GetConversationUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserId: 'appUserId',
            channelCode: 'channelCode',
            deviceId: 'deviceId',
            openConversationId: 'openConversationId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appUserId: 'string',
            channelCode: 'string',
            deviceId: 'string',
            openConversationId: 'string',
            userId: 'string',
        };
    }
}
exports.GetConversationUrlRequest = GetConversationUrlRequest;
class GetConversationUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'url',
        };
    }
    static types() {
        return {
            url: 'string',
        };
    }
}
exports.GetConversationUrlResponseBody = GetConversationUrlResponseBody;
class GetConversationUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetConversationUrlResponseBody,
        };
    }
}
exports.GetConversationUrlResponse = GetConversationUrlResponse;
class GetFamilySchoolConversationMsgHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetFamilySchoolConversationMsgHeaders = GetFamilySchoolConversationMsgHeaders;
class GetFamilySchoolConversationMsgRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            msgTypes: 'msgTypes',
            nextToken: 'nextToken',
            openConversationId: 'openConversationId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            msgTypes: { 'type': 'array', 'itemType': 'number' },
            nextToken: 'number',
            openConversationId: 'string',
            unionId: 'string',
        };
    }
}
exports.GetFamilySchoolConversationMsgRequest = GetFamilySchoolConversationMsgRequest;
class GetFamilySchoolConversationMsgResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            hasMore: 'hasMore',
            messages: 'messages',
            nextToken: 'nextToken',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            hasMore: 'string',
            messages: { 'type': 'array', 'itemType': GetFamilySchoolConversationMsgResponseBodyMessages },
            nextToken: 'string',
            openConversationId: 'string',
        };
    }
}
exports.GetFamilySchoolConversationMsgResponseBody = GetFamilySchoolConversationMsgResponseBody;
class GetFamilySchoolConversationMsgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFamilySchoolConversationMsgResponseBody,
        };
    }
}
exports.GetFamilySchoolConversationMsgResponse = GetFamilySchoolConversationMsgResponse;
class GetFamilySchoolConversationsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetFamilySchoolConversationsHeaders = GetFamilySchoolConversationsHeaders;
class GetFamilySchoolConversationsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
            unionId: 'string',
        };
    }
}
exports.GetFamilySchoolConversationsRequest = GetFamilySchoolConversationsRequest;
class GetFamilySchoolConversationsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupInfoList: 'groupInfoList',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            groupInfoList: { 'type': 'array', 'itemType': GetFamilySchoolConversationsResponseBodyGroupInfoList },
            hasMore: 'string',
            nextToken: 'string',
        };
    }
}
exports.GetFamilySchoolConversationsResponseBody = GetFamilySchoolConversationsResponseBody;
class GetFamilySchoolConversationsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFamilySchoolConversationsResponseBody,
        };
    }
}
exports.GetFamilySchoolConversationsResponse = GetFamilySchoolConversationsResponse;
class GetInnerGroupMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetInnerGroupMembersHeaders = GetInnerGroupMembersHeaders;
class GetInnerGroupMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            openConversationId: 'openConversationId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            openConversationId: 'string',
            userId: 'string',
        };
    }
}
exports.GetInnerGroupMembersRequest = GetInnerGroupMembersRequest;
class GetInnerGroupMembersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetInnerGroupMembersResponseBody = GetInnerGroupMembersResponseBody;
class GetInnerGroupMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInnerGroupMembersResponseBody,
        };
    }
}
exports.GetInnerGroupMembersResponse = GetInnerGroupMembersResponse;
class GetInterconnectionUrlHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetInterconnectionUrlHeaders = GetInterconnectionUrlHeaders;
class GetInterconnectionUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserAvatar: 'appUserAvatar',
            appUserAvatarType: 'appUserAvatarType',
            appUserId: 'appUserId',
            appUserMobileNumber: 'appUserMobileNumber',
            appUserName: 'appUserName',
            msgPageType: 'msgPageType',
            qrCode: 'qrCode',
            signature: 'signature',
            sourceCode: 'sourceCode',
            sourceType: 'sourceType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appUserAvatar: 'string',
            appUserAvatarType: 'number',
            appUserId: 'string',
            appUserMobileNumber: 'string',
            appUserName: 'string',
            msgPageType: 'number',
            qrCode: 'string',
            signature: 'string',
            sourceCode: 'string',
            sourceType: 'number',
            userId: 'string',
        };
    }
}
exports.GetInterconnectionUrlRequest = GetInterconnectionUrlRequest;
class GetInterconnectionUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            url: 'url',
        };
    }
    static types() {
        return {
            url: 'string',
        };
    }
}
exports.GetInterconnectionUrlResponseBody = GetInterconnectionUrlResponseBody;
class GetInterconnectionUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInterconnectionUrlResponseBody,
        };
    }
}
exports.GetInterconnectionUrlResponse = GetInterconnectionUrlResponse;
class GetNewestInnerGroupsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetNewestInnerGroupsHeaders = GetNewestInnerGroupsHeaders;
class GetNewestInnerGroupsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.GetNewestInnerGroupsRequest = GetNewestInnerGroupsRequest;
class GetNewestInnerGroupsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupInfos: 'groupInfos',
        };
    }
    static types() {
        return {
            groupInfos: { 'type': 'array', 'itemType': GetNewestInnerGroupsResponseBodyGroupInfos },
        };
    }
}
exports.GetNewestInnerGroupsResponseBody = GetNewestInnerGroupsResponseBody;
class GetNewestInnerGroupsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetNewestInnerGroupsResponseBody,
        };
    }
}
exports.GetNewestInnerGroupsResponse = GetNewestInnerGroupsResponse;
class GetSceneGroupInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSceneGroupInfoHeaders = GetSceneGroupInfoHeaders;
class GetSceneGroupInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            openConversationId: 'string',
        };
    }
}
exports.GetSceneGroupInfoRequest = GetSceneGroupInfoRequest;
class GetSceneGroupInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupUrl: 'groupUrl',
            icon: 'icon',
            openConversationId: 'openConversationId',
            ownerUserId: 'ownerUserId',
            status: 'status',
            success: 'success',
            templateId: 'templateId',
            title: 'title',
        };
    }
    static types() {
        return {
            groupUrl: 'string',
            icon: 'string',
            openConversationId: 'string',
            ownerUserId: 'string',
            status: 'number',
            success: 'boolean',
            templateId: 'string',
            title: 'string',
        };
    }
}
exports.GetSceneGroupInfoResponseBody = GetSceneGroupInfoResponseBody;
class GetSceneGroupInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSceneGroupInfoResponseBody,
        };
    }
}
exports.GetSceneGroupInfoResponse = GetSceneGroupInfoResponse;
class GetSceneGroupMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSceneGroupMembersHeaders = GetSceneGroupMembersHeaders;
class GetSceneGroupMembersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            cursor: 'cursor',
            openConversationId: 'openConversationId',
            size: 'size',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            cursor: 'string',
            openConversationId: 'string',
            size: 'number',
        };
    }
}
exports.GetSceneGroupMembersRequest = GetSceneGroupMembersRequest;
class GetSceneGroupMembersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            memberUserIds: 'memberUserIds',
            nextCursor: 'nextCursor',
            success: 'success',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            memberUserIds: { 'type': 'array', 'itemType': 'string' },
            nextCursor: 'string',
            success: 'boolean',
        };
    }
}
exports.GetSceneGroupMembersResponseBody = GetSceneGroupMembersResponseBody;
class GetSceneGroupMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSceneGroupMembersResponseBody,
        };
    }
}
exports.GetSceneGroupMembersResponse = GetSceneGroupMembersResponse;
class GroupBanWordsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GroupBanWordsHeaders = GroupBanWordsHeaders;
class GroupBanWordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            banWordsMode: 'banWordsMode',
            openConversationId: 'openConversationId',
            options: 'options',
        };
    }
    static types() {
        return {
            banWordsMode: 'number',
            openConversationId: 'string',
            options: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.GroupBanWordsRequest = GroupBanWordsRequest;
class GroupBanWordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.GroupBanWordsResponse = GroupBanWordsResponse;
class GroupCapacityInquiryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GroupCapacityInquiryHeaders = GroupCapacityInquiryHeaders;
class GroupCapacityInquiryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            effectiveDuration: 'effectiveDuration',
            openConversationId: 'openConversationId',
            operator: 'operator',
            options: 'options',
            targetCapacity: 'targetCapacity',
        };
    }
    static types() {
        return {
            effectiveDuration: 'string',
            openConversationId: 'string',
            operator: 'string',
            options: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            targetCapacity: 'number',
        };
    }
}
exports.GroupCapacityInquiryRequest = GroupCapacityInquiryRequest;
class GroupCapacityInquiryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actualPrice: 'actualPrice',
            createdAt: 'createdAt',
            currentCapacity: 'currentCapacity',
            currentEffectUntil: 'currentEffectUntil',
            discount: 'discount',
            extInfo: 'extInfo',
            groupOwner: 'groupOwner',
            groupTitle: 'groupTitle',
            markedPrice: 'markedPrice',
            memberCount: 'memberCount',
            openConversationId: 'openConversationId',
            operator: 'operator',
            targetCapacity: 'targetCapacity',
            targetEffectUntil: 'targetEffectUntil',
            token: 'token',
        };
    }
    static types() {
        return {
            actualPrice: 'number',
            createdAt: 'number',
            currentCapacity: 'number',
            currentEffectUntil: 'number',
            discount: 'number',
            extInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            groupOwner: 'string',
            groupTitle: 'string',
            markedPrice: 'number',
            memberCount: 'number',
            openConversationId: 'string',
            operator: 'string',
            targetCapacity: 'number',
            targetEffectUntil: 'number',
            token: 'string',
        };
    }
}
exports.GroupCapacityInquiryResponseBody = GroupCapacityInquiryResponseBody;
class GroupCapacityInquiryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GroupCapacityInquiryResponseBody,
        };
    }
}
exports.GroupCapacityInquiryResponse = GroupCapacityInquiryResponse;
class GroupCapacityOrderConfirmHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GroupCapacityOrderConfirmHeaders = GroupCapacityOrderConfirmHeaders;
class GroupCapacityOrderConfirmRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operator: 'operator',
            orderId: 'orderId',
        };
    }
    static types() {
        return {
            operator: 'string',
            orderId: 'string',
        };
    }
}
exports.GroupCapacityOrderConfirmRequest = GroupCapacityOrderConfirmRequest;
class GroupCapacityOrderConfirmResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.GroupCapacityOrderConfirmResponseBody = GroupCapacityOrderConfirmResponseBody;
class GroupCapacityOrderConfirmResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GroupCapacityOrderConfirmResponseBody,
        };
    }
}
exports.GroupCapacityOrderConfirmResponse = GroupCapacityOrderConfirmResponse;
class GroupCapacityOrderPlaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GroupCapacityOrderPlaceHeaders = GroupCapacityOrderPlaceHeaders;
class GroupCapacityOrderPlaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actualPrice: 'actualPrice',
            currentCapacity: 'currentCapacity',
            currentEffectUntil: 'currentEffectUntil',
            discount: 'discount',
            extInfo: 'extInfo',
            markedPrice: 'markedPrice',
            openConversationId: 'openConversationId',
            operator: 'operator',
            targetCapacity: 'targetCapacity',
            targetEffectUntil: 'targetEffectUntil',
            token: 'token',
        };
    }
    static types() {
        return {
            actualPrice: 'number',
            currentCapacity: 'number',
            currentEffectUntil: 'number',
            discount: 'number',
            extInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            markedPrice: 'number',
            openConversationId: 'string',
            operator: 'string',
            targetCapacity: 'number',
            targetEffectUntil: 'number',
            token: 'string',
        };
    }
}
exports.GroupCapacityOrderPlaceRequest = GroupCapacityOrderPlaceRequest;
class GroupCapacityOrderPlaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actualPrice: 'actualPrice',
            currentCapacity: 'currentCapacity',
            currentEffectUntil: 'currentEffectUntil',
            discount: 'discount',
            extInfo: 'extInfo',
            markedPrice: 'markedPrice',
            openConversationId: 'openConversationId',
            operator: 'operator',
            orderId: 'orderId',
            targetCapacity: 'targetCapacity',
            targetEffectUntil: 'targetEffectUntil',
            token: 'token',
        };
    }
    static types() {
        return {
            actualPrice: 'number',
            currentCapacity: 'number',
            currentEffectUntil: 'number',
            discount: 'number',
            extInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            markedPrice: 'number',
            openConversationId: 'string',
            operator: 'string',
            orderId: 'string',
            targetCapacity: 'number',
            targetEffectUntil: 'number',
            token: 'string',
        };
    }
}
exports.GroupCapacityOrderPlaceResponseBody = GroupCapacityOrderPlaceResponseBody;
class GroupCapacityOrderPlaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GroupCapacityOrderPlaceResponseBody,
        };
    }
}
exports.GroupCapacityOrderPlaceResponse = GroupCapacityOrderPlaceResponse;
class GroupManageQueryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GroupManageQueryHeaders = GroupManageQueryHeaders;
class GroupManageQueryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createdAfter: 'createdAfter',
            groupId: 'groupId',
            groupMemberSamples: 'groupMemberSamples',
            groupOwner: 'groupOwner',
            groupTitleKeywords: 'groupTitleKeywords',
            groupUrl: 'groupUrl',
            maxResults: 'maxResults',
            membersOver: 'membersOver',
            nextToken: 'nextToken',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            createdAfter: 'number',
            groupId: 'string',
            groupMemberSamples: { 'type': 'array', 'itemType': 'string' },
            groupOwner: 'string',
            groupTitleKeywords: { 'type': 'array', 'itemType': 'string' },
            groupUrl: 'string',
            maxResults: 'number',
            membersOver: 'number',
            nextToken: 'string',
            openConversationId: 'string',
        };
    }
}
exports.GroupManageQueryRequest = GroupManageQueryRequest;
class GroupManageQueryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupInfoList: 'groupInfoList',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            groupInfoList: { 'type': 'array', 'itemType': GroupManageQueryResponseBodyGroupInfoList },
            hasMore: 'boolean',
            nextToken: 'string',
        };
    }
}
exports.GroupManageQueryResponseBody = GroupManageQueryResponseBody;
class GroupManageQueryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GroupManageQueryResponseBody,
        };
    }
}
exports.GroupManageQueryResponse = GroupManageQueryResponse;
class GroupManageReduceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GroupManageReduceHeaders = GroupManageReduceHeaders;
class GroupManageReduceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            capacityLimit: 'capacityLimit',
            openConversationId: 'openConversationId',
            options: 'options',
        };
    }
    static types() {
        return {
            capacityLimit: 'number',
            openConversationId: 'string',
            options: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.GroupManageReduceRequest = GroupManageReduceRequest;
class GroupManageReduceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.GroupManageReduceResponse = GroupManageReduceResponse;
class InstallRobotToOrgHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InstallRobotToOrgHeaders = InstallRobotToOrgHeaders;
class InstallRobotToOrgRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brief: 'brief',
            description: 'description',
            icon: 'icon',
            name: 'name',
            outgoingToken: 'outgoingToken',
            outgoingUrl: 'outgoingUrl',
            previewMediaId: 'previewMediaId',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            brief: 'string',
            description: 'string',
            icon: 'string',
            name: 'string',
            outgoingToken: 'string',
            outgoingUrl: 'string',
            previewMediaId: 'string',
            robotCode: 'string',
        };
    }
}
exports.InstallRobotToOrgRequest = InstallRobotToOrgRequest;
class InstallRobotToOrgResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            robotCode: 'string',
        };
    }
}
exports.InstallRobotToOrgResponseBody = InstallRobotToOrgResponseBody;
class InstallRobotToOrgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InstallRobotToOrgResponseBody,
        };
    }
}
exports.InstallRobotToOrgResponse = InstallRobotToOrgResponse;
class InteractiveCardCreateInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.InteractiveCardCreateInstanceHeaders = InteractiveCardCreateInstanceHeaders;
class InteractiveCardCreateInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            callbackRouteKey: 'callbackRouteKey',
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            chatBotId: 'chatBotId',
            conversationType: 'conversationType',
            openConversationId: 'openConversationId',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            pullStrategy: 'pullStrategy',
            receiverUserIdList: 'receiverUserIdList',
            robotCode: 'robotCode',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            callbackRouteKey: 'string',
            cardData: InteractiveCardCreateInstanceRequestCardData,
            cardTemplateId: 'string',
            chatBotId: 'string',
            conversationType: 'number',
            openConversationId: 'string',
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            pullStrategy: 'boolean',
            receiverUserIdList: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
            userIdType: 'number',
        };
    }
}
exports.InteractiveCardCreateInstanceRequest = InteractiveCardCreateInstanceRequest;
class InteractiveCardCreateInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processQueryKey: 'processQueryKey',
        };
    }
    static types() {
        return {
            processQueryKey: 'string',
        };
    }
}
exports.InteractiveCardCreateInstanceResponseBody = InteractiveCardCreateInstanceResponseBody;
class InteractiveCardCreateInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InteractiveCardCreateInstanceResponseBody,
        };
    }
}
exports.InteractiveCardCreateInstanceResponse = InteractiveCardCreateInstanceResponse;
class ListOrgTextEmotionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListOrgTextEmotionHeaders = ListOrgTextEmotionHeaders;
class ListOrgTextEmotionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: ListOrgTextEmotionResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.ListOrgTextEmotionResponseBody = ListOrgTextEmotionResponseBody;
class ListOrgTextEmotionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListOrgTextEmotionResponseBody,
        };
    }
}
exports.ListOrgTextEmotionResponse = ListOrgTextEmotionResponse;
class QueryGroupInfoByMemberAuthHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryGroupInfoByMemberAuthHeaders = QueryGroupInfoByMemberAuthHeaders;
class QueryGroupInfoByMemberAuthRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            openConversationId: 'string',
        };
    }
}
exports.QueryGroupInfoByMemberAuthRequest = QueryGroupInfoByMemberAuthRequest;
class QueryGroupInfoByMemberAuthResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberCount: 'memberCount',
        };
    }
    static types() {
        return {
            memberCount: 'number',
        };
    }
}
exports.QueryGroupInfoByMemberAuthResponseBody = QueryGroupInfoByMemberAuthResponseBody;
class QueryGroupInfoByMemberAuthResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGroupInfoByMemberAuthResponseBody,
        };
    }
}
exports.QueryGroupInfoByMemberAuthResponse = QueryGroupInfoByMemberAuthResponse;
class QueryGroupMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryGroupMemberHeaders = QueryGroupMemberHeaders;
class QueryGroupMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
}
exports.QueryGroupMemberRequest = QueryGroupMemberRequest;
class QueryGroupMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupMembers: 'groupMembers',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            groupMembers: { 'type': 'array', 'itemType': QueryGroupMemberResponseBodyGroupMembers },
            openConversationId: 'string',
        };
    }
}
exports.QueryGroupMemberResponseBody = QueryGroupMemberResponseBody;
class QueryGroupMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGroupMemberResponseBody,
        };
    }
}
exports.QueryGroupMemberResponse = QueryGroupMemberResponse;
class QueryGroupMemberByMemberAuthHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryGroupMemberByMemberAuthHeaders = QueryGroupMemberByMemberAuthHeaders;
class QueryGroupMemberByMemberAuthRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            openConversationId: 'string',
        };
    }
}
exports.QueryGroupMemberByMemberAuthRequest = QueryGroupMemberByMemberAuthRequest;
class QueryGroupMemberByMemberAuthResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupMemberList: 'groupMemberList',
        };
    }
    static types() {
        return {
            groupMemberList: { 'type': 'array', 'itemType': QueryGroupMemberByMemberAuthResponseBodyGroupMemberList },
        };
    }
}
exports.QueryGroupMemberByMemberAuthResponseBody = QueryGroupMemberByMemberAuthResponseBody;
class QueryGroupMemberByMemberAuthResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGroupMemberByMemberAuthResponseBody,
        };
    }
}
exports.QueryGroupMemberByMemberAuthResponse = QueryGroupMemberByMemberAuthResponse;
class QueryGroupMuteStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryGroupMuteStatusHeaders = QueryGroupMuteStatusHeaders;
class QueryGroupMuteStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            userId: 'string',
        };
    }
}
exports.QueryGroupMuteStatusRequest = QueryGroupMuteStatusRequest;
class QueryGroupMuteStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupMuteMode: 'groupMuteMode',
            userMuteResult: 'userMuteResult',
        };
    }
    static types() {
        return {
            groupMuteMode: 'boolean',
            userMuteResult: QueryGroupMuteStatusResponseBodyUserMuteResult,
        };
    }
}
exports.QueryGroupMuteStatusResponseBody = QueryGroupMuteStatusResponseBody;
class QueryGroupMuteStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGroupMuteStatusResponseBody,
        };
    }
}
exports.QueryGroupMuteStatusResponse = QueryGroupMuteStatusResponse;
class QueryMembersOfGroupRoleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMembersOfGroupRoleHeaders = QueryMembersOfGroupRoleHeaders;
class QueryMembersOfGroupRoleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            openRoleId: 'openRoleId',
            timestamp: 'timestamp',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            openRoleId: 'string',
            timestamp: 'number',
        };
    }
}
exports.QueryMembersOfGroupRoleRequest = QueryMembersOfGroupRoleRequest;
class QueryMembersOfGroupRoleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryMembersOfGroupRoleResponseBody = QueryMembersOfGroupRoleResponseBody;
class QueryMembersOfGroupRoleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMembersOfGroupRoleResponseBody,
        };
    }
}
exports.QueryMembersOfGroupRoleResponse = QueryMembersOfGroupRoleResponse;
class QuerySceneGroupTemplateRobotHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QuerySceneGroupTemplateRobotHeaders = QuerySceneGroupTemplateRobotHeaders;
class QuerySceneGroupTemplateRobotRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            robotCode: 'string',
        };
    }
}
exports.QuerySceneGroupTemplateRobotRequest = QuerySceneGroupTemplateRobotRequest;
class QuerySceneGroupTemplateRobotResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QuerySceneGroupTemplateRobotResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.QuerySceneGroupTemplateRobotResponseBody = QuerySceneGroupTemplateRobotResponseBody;
class QuerySceneGroupTemplateRobotResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySceneGroupTemplateRobotResponseBody,
        };
    }
}
exports.QuerySceneGroupTemplateRobotResponse = QuerySceneGroupTemplateRobotResponse;
class QuerySingleGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QuerySingleGroupHeaders = QuerySingleGroupHeaders;
class QuerySingleGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupMembers: 'groupMembers',
            groupTemplateId: 'groupTemplateId',
        };
    }
    static types() {
        return {
            groupMembers: { 'type': 'array', 'itemType': QuerySingleGroupRequestGroupMembers },
            groupTemplateId: 'string',
        };
    }
}
exports.QuerySingleGroupRequest = QuerySingleGroupRequest;
class QuerySingleGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversations: 'openConversations',
        };
    }
    static types() {
        return {
            openConversations: { 'type': 'array', 'itemType': QuerySingleGroupResponseBodyOpenConversations },
        };
    }
}
exports.QuerySingleGroupResponseBody = QuerySingleGroupResponseBody;
class QuerySingleGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySingleGroupResponseBody,
        };
    }
}
exports.QuerySingleGroupResponse = QuerySingleGroupResponse;
class QueryUnReadMessageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUnReadMessageHeaders = QueryUnReadMessageHeaders;
class QueryUnReadMessageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserId: 'appUserId',
            openConversationIds: 'openConversationIds',
        };
    }
    static types() {
        return {
            appUserId: 'string',
            openConversationIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryUnReadMessageRequest = QueryUnReadMessageRequest;
class QueryUnReadMessageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unReadCount: 'unReadCount',
            unReadItems: 'unReadItems',
        };
    }
    static types() {
        return {
            unReadCount: 'number',
            unReadItems: { 'type': 'array', 'itemType': QueryUnReadMessageResponseBodyUnReadItems },
        };
    }
}
exports.QueryUnReadMessageResponseBody = QueryUnReadMessageResponseBody;
class QueryUnReadMessageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUnReadMessageResponseBody,
        };
    }
}
exports.QueryUnReadMessageResponse = QueryUnReadMessageResponse;
class RemoveRobotFromConversationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveRobotFromConversationHeaders = RemoveRobotFromConversationHeaders;
class RemoveRobotFromConversationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatBotUserId: 'chatBotUserId',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            chatBotUserId: 'string',
            openConversationId: 'string',
        };
    }
}
exports.RemoveRobotFromConversationRequest = RemoveRobotFromConversationRequest;
class RemoveRobotFromConversationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatBotUserId: 'chatBotUserId',
        };
    }
    static types() {
        return {
            chatBotUserId: 'string',
        };
    }
}
exports.RemoveRobotFromConversationResponseBody = RemoveRobotFromConversationResponseBody;
class RemoveRobotFromConversationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveRobotFromConversationResponseBody,
        };
    }
}
exports.RemoveRobotFromConversationResponse = RemoveRobotFromConversationResponse;
class SearchInnerGroupsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchInnerGroupsHeaders = SearchInnerGroupsHeaders;
class SearchInnerGroupsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            searchKey: 'searchKey',
            userId: 'userId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            searchKey: 'string',
            userId: 'string',
        };
    }
}
exports.SearchInnerGroupsRequest = SearchInnerGroupsRequest;
class SearchInnerGroupsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupInfos: 'groupInfos',
        };
    }
    static types() {
        return {
            groupInfos: { 'type': 'array', 'itemType': SearchInnerGroupsResponseBodyGroupInfos },
        };
    }
}
exports.SearchInnerGroupsResponseBody = SearchInnerGroupsResponseBody;
class SearchInnerGroupsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchInnerGroupsResponseBody,
        };
    }
}
exports.SearchInnerGroupsResponse = SearchInnerGroupsResponse;
class SendInteractiveCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendInteractiveCardHeaders = SendInteractiveCardHeaders;
class SendInteractiveCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            atOpenIds: 'atOpenIds',
            callbackRouteKey: 'callbackRouteKey',
            cardData: 'cardData',
            cardOptions: 'cardOptions',
            cardTemplateId: 'cardTemplateId',
            chatBotId: 'chatBotId',
            conversationType: 'conversationType',
            digitalWorkerCode: 'digitalWorkerCode',
            openConversationId: 'openConversationId',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            pullStrategy: 'pullStrategy',
            receiverUserIdList: 'receiverUserIdList',
            robotCode: 'robotCode',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            atOpenIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            callbackRouteKey: 'string',
            cardData: SendInteractiveCardRequestCardData,
            cardOptions: SendInteractiveCardRequestCardOptions,
            cardTemplateId: 'string',
            chatBotId: 'string',
            conversationType: 'number',
            digitalWorkerCode: 'string',
            openConversationId: 'string',
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            pullStrategy: 'boolean',
            receiverUserIdList: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
            userIdType: 'number',
        };
    }
}
exports.SendInteractiveCardRequest = SendInteractiveCardRequest;
class SendInteractiveCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: SendInteractiveCardResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.SendInteractiveCardResponseBody = SendInteractiveCardResponseBody;
class SendInteractiveCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendInteractiveCardResponseBody,
        };
    }
}
exports.SendInteractiveCardResponse = SendInteractiveCardResponse;
class SendOTOInteractiveCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendOTOInteractiveCardHeaders = SendOTOInteractiveCardHeaders;
class SendOTOInteractiveCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            atOpenIds: 'atOpenIds',
            callbackRouteKey: 'callbackRouteKey',
            cardData: 'cardData',
            cardOptions: 'cardOptions',
            cardTemplateId: 'cardTemplateId',
            openConversationId: 'openConversationId',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            pullStrategy: 'pullStrategy',
            receiverUserIdList: 'receiverUserIdList',
            robotCode: 'robotCode',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            atOpenIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            callbackRouteKey: 'string',
            cardData: SendOTOInteractiveCardRequestCardData,
            cardOptions: SendOTOInteractiveCardRequestCardOptions,
            cardTemplateId: 'string',
            openConversationId: 'string',
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            pullStrategy: 'boolean',
            receiverUserIdList: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
            userIdType: 'number',
        };
    }
}
exports.SendOTOInteractiveCardRequest = SendOTOInteractiveCardRequest;
class SendOTOInteractiveCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: SendOTOInteractiveCardResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.SendOTOInteractiveCardResponseBody = SendOTOInteractiveCardResponseBody;
class SendOTOInteractiveCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendOTOInteractiveCardResponseBody,
        };
    }
}
exports.SendOTOInteractiveCardResponse = SendOTOInteractiveCardResponse;
class SendRobotInteractiveCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendRobotInteractiveCardHeaders = SendRobotInteractiveCardHeaders;
class SendRobotInteractiveCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            callbackUrl: 'callbackUrl',
            cardBizId: 'cardBizId',
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            openConversationId: 'openConversationId',
            pullStrategy: 'pullStrategy',
            robotCode: 'robotCode',
            sendOptions: 'sendOptions',
            singleChatReceiver: 'singleChatReceiver',
            unionIdPrivateDataMap: 'unionIdPrivateDataMap',
            userIdPrivateDataMap: 'userIdPrivateDataMap',
        };
    }
    static types() {
        return {
            callbackUrl: 'string',
            cardBizId: 'string',
            cardData: 'string',
            cardTemplateId: 'string',
            openConversationId: 'string',
            pullStrategy: 'boolean',
            robotCode: 'string',
            sendOptions: SendRobotInteractiveCardRequestSendOptions,
            singleChatReceiver: 'string',
            unionIdPrivateDataMap: 'string',
            userIdPrivateDataMap: 'string',
        };
    }
}
exports.SendRobotInteractiveCardRequest = SendRobotInteractiveCardRequest;
class SendRobotInteractiveCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processQueryKey: 'processQueryKey',
        };
    }
    static types() {
        return {
            processQueryKey: 'string',
        };
    }
}
exports.SendRobotInteractiveCardResponseBody = SendRobotInteractiveCardResponseBody;
class SendRobotInteractiveCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendRobotInteractiveCardResponseBody,
        };
    }
}
exports.SendRobotInteractiveCardResponse = SendRobotInteractiveCardResponse;
class SendRobotMessageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendRobotMessageHeaders = SendRobotMessageHeaders;
class SendRobotMessageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            atAll: 'atAll',
            atAppUserId: 'atAppUserId',
            atDingUserId: 'atDingUserId',
            msgContent: 'msgContent',
            msgType: 'msgType',
            openConversationIds: 'openConversationIds',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            atAll: 'boolean',
            atAppUserId: 'string',
            atDingUserId: 'string',
            msgContent: 'string',
            msgType: 'string',
            openConversationIds: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
        };
    }
}
exports.SendRobotMessageRequest = SendRobotMessageRequest;
class SendRobotMessageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.SendRobotMessageResponseBody = SendRobotMessageResponseBody;
class SendRobotMessageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendRobotMessageResponseBody,
        };
    }
}
exports.SendRobotMessageResponse = SendRobotMessageResponse;
class SendTemplateInteractiveCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendTemplateInteractiveCardHeaders = SendTemplateInteractiveCardHeaders;
class SendTemplateInteractiveCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            callbackUrl: 'callbackUrl',
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            openConversationId: 'openConversationId',
            outTrackId: 'outTrackId',
            robotCode: 'robotCode',
            sendOptions: 'sendOptions',
            singleChatReceiver: 'singleChatReceiver',
        };
    }
    static types() {
        return {
            callbackUrl: 'string',
            cardData: 'string',
            cardTemplateId: 'string',
            openConversationId: 'string',
            outTrackId: 'string',
            robotCode: 'string',
            sendOptions: SendTemplateInteractiveCardRequestSendOptions,
            singleChatReceiver: 'string',
        };
    }
}
exports.SendTemplateInteractiveCardRequest = SendTemplateInteractiveCardRequest;
class SendTemplateInteractiveCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processQueryKey: 'processQueryKey',
        };
    }
    static types() {
        return {
            processQueryKey: 'string',
        };
    }
}
exports.SendTemplateInteractiveCardResponseBody = SendTemplateInteractiveCardResponseBody;
class SendTemplateInteractiveCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendTemplateInteractiveCardResponseBody,
        };
    }
}
exports.SendTemplateInteractiveCardResponse = SendTemplateInteractiveCardResponse;
class SetRightPanelHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetRightPanelHeaders = SetRightPanelHeaders;
class SetRightPanelRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            rightPanelClosePermitted: 'rightPanelClosePermitted',
            rightPanelOpenStatus: 'rightPanelOpenStatus',
            title: 'title',
            webWndParams: 'webWndParams',
            width: 'width',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            rightPanelClosePermitted: 'boolean',
            rightPanelOpenStatus: 'number',
            title: 'string',
            webWndParams: SetRightPanelRequestWebWndParams,
            width: 'number',
        };
    }
}
exports.SetRightPanelRequest = SetRightPanelRequest;
class SetRightPanelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.SetRightPanelResponseBody = SetRightPanelResponseBody;
class SetRightPanelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetRightPanelResponseBody,
        };
    }
}
exports.SetRightPanelResponse = SetRightPanelResponse;
class TopboxCloseHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.TopboxCloseHeaders = TopboxCloseHeaders;
class TopboxCloseRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conversationType: 'conversationType',
            coolAppCode: 'coolAppCode',
            openConversationId: 'openConversationId',
            outTrackId: 'outTrackId',
            receiverUserIdList: 'receiverUserIdList',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            conversationType: 'number',
            coolAppCode: 'string',
            openConversationId: 'string',
            outTrackId: 'string',
            receiverUserIdList: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
        };
    }
}
exports.TopboxCloseRequest = TopboxCloseRequest;
class TopboxCloseResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.TopboxCloseResponse = TopboxCloseResponse;
class TopboxOpenHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.TopboxOpenHeaders = TopboxOpenHeaders;
class TopboxOpenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conversationType: 'conversationType',
            coolAppCode: 'coolAppCode',
            expiredTime: 'expiredTime',
            openConversationId: 'openConversationId',
            outTrackId: 'outTrackId',
            platforms: 'platforms',
            receiverUserIdList: 'receiverUserIdList',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            conversationType: 'number',
            coolAppCode: 'string',
            expiredTime: 'number',
            openConversationId: 'string',
            outTrackId: 'string',
            platforms: 'string',
            receiverUserIdList: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
        };
    }
}
exports.TopboxOpenRequest = TopboxOpenRequest;
class TopboxOpenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.TopboxOpenResponse = TopboxOpenResponse;
class UpdateGroupAvatarHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateGroupAvatarHeaders = UpdateGroupAvatarHeaders;
class UpdateGroupAvatarRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupAvatar: 'groupAvatar',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            groupAvatar: 'string',
            openConversationId: 'string',
        };
    }
}
exports.UpdateGroupAvatarRequest = UpdateGroupAvatarRequest;
class UpdateGroupAvatarResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            newGroupAvatar: 'newGroupAvatar',
        };
    }
    static types() {
        return {
            newGroupAvatar: 'string',
        };
    }
}
exports.UpdateGroupAvatarResponseBody = UpdateGroupAvatarResponseBody;
class UpdateGroupAvatarResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateGroupAvatarResponseBody,
        };
    }
}
exports.UpdateGroupAvatarResponse = UpdateGroupAvatarResponse;
class UpdateGroupNameHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateGroupNameHeaders = UpdateGroupNameHeaders;
class UpdateGroupNameRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'groupName',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            openConversationId: 'string',
        };
    }
}
exports.UpdateGroupNameRequest = UpdateGroupNameRequest;
class UpdateGroupNameResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            newGroupName: 'newGroupName',
        };
    }
    static types() {
        return {
            newGroupName: 'string',
        };
    }
}
exports.UpdateGroupNameResponseBody = UpdateGroupNameResponseBody;
class UpdateGroupNameResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateGroupNameResponseBody,
        };
    }
}
exports.UpdateGroupNameResponse = UpdateGroupNameResponse;
class UpdateGroupPermissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateGroupPermissionHeaders = UpdateGroupPermissionHeaders;
class UpdateGroupPermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            permissionGroup: 'permissionGroup',
            status: 'status',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            permissionGroup: 'string',
            status: 'string',
        };
    }
}
exports.UpdateGroupPermissionRequest = UpdateGroupPermissionRequest;
class UpdateGroupPermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateGroupPermissionResponseBody = UpdateGroupPermissionResponseBody;
class UpdateGroupPermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateGroupPermissionResponseBody,
        };
    }
}
exports.UpdateGroupPermissionResponse = UpdateGroupPermissionResponse;
class UpdateGroupSubAdminHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateGroupSubAdminHeaders = UpdateGroupSubAdminHeaders;
class UpdateGroupSubAdminRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            role: 'role',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            role: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UpdateGroupSubAdminRequest = UpdateGroupSubAdminRequest;
class UpdateGroupSubAdminResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateGroupSubAdminResponseBody = UpdateGroupSubAdminResponseBody;
class UpdateGroupSubAdminResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateGroupSubAdminResponseBody,
        };
    }
}
exports.UpdateGroupSubAdminResponse = UpdateGroupSubAdminResponse;
class UpdateInteractiveCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInteractiveCardHeaders = UpdateInteractiveCardHeaders;
class UpdateInteractiveCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardData: 'cardData',
            cardOptions: 'cardOptions',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            cardData: UpdateInteractiveCardRequestCardData,
            cardOptions: UpdateInteractiveCardRequestCardOptions,
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            userIdType: 'number',
        };
    }
}
exports.UpdateInteractiveCardRequest = UpdateInteractiveCardRequest;
class UpdateInteractiveCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'string',
        };
    }
}
exports.UpdateInteractiveCardResponseBody = UpdateInteractiveCardResponseBody;
class UpdateInteractiveCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInteractiveCardResponseBody,
        };
    }
}
exports.UpdateInteractiveCardResponse = UpdateInteractiveCardResponse;
class UpdateMemberBanWordsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateMemberBanWordsHeaders = UpdateMemberBanWordsHeaders;
class UpdateMemberBanWordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            muteDuration: 'muteDuration',
            muteStatus: 'muteStatus',
            openConversationId: 'openConversationId',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            muteDuration: 'number',
            muteStatus: 'number',
            openConversationId: 'string',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UpdateMemberBanWordsRequest = UpdateMemberBanWordsRequest;
class UpdateMemberBanWordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateMemberBanWordsResponse = UpdateMemberBanWordsResponse;
class UpdateMemberGroupNickHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateMemberGroupNickHeaders = UpdateMemberGroupNickHeaders;
class UpdateMemberGroupNickRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupNick: 'groupNick',
            openConversationId: 'openConversationId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            groupNick: 'string',
            openConversationId: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateMemberGroupNickRequest = UpdateMemberGroupNickRequest;
class UpdateMemberGroupNickResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateMemberGroupNickResponseBody = UpdateMemberGroupNickResponseBody;
class UpdateMemberGroupNickResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateMemberGroupNickResponseBody,
        };
    }
}
exports.UpdateMemberGroupNickResponse = UpdateMemberGroupNickResponse;
class UpdateRobotInOrgHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateRobotInOrgHeaders = UpdateRobotInOrgHeaders;
class UpdateRobotInOrgRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brief: 'brief',
            description: 'description',
            icon: 'icon',
            name: 'name',
            outgoingToken: 'outgoingToken',
            outgoingUrl: 'outgoingUrl',
            previewMediaId: 'previewMediaId',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            brief: 'string',
            description: 'string',
            icon: 'string',
            name: 'string',
            outgoingToken: 'string',
            outgoingUrl: 'string',
            previewMediaId: 'string',
            robotCode: 'string',
        };
    }
}
exports.UpdateRobotInOrgRequest = UpdateRobotInOrgRequest;
class UpdateRobotInOrgResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            robotCode: 'string',
        };
    }
}
exports.UpdateRobotInOrgResponseBody = UpdateRobotInOrgResponseBody;
class UpdateRobotInOrgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateRobotInOrgResponseBody,
        };
    }
}
exports.UpdateRobotInOrgResponse = UpdateRobotInOrgResponse;
class UpdateRobotInteractiveCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateRobotInteractiveCardHeaders = UpdateRobotInteractiveCardHeaders;
class UpdateRobotInteractiveCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardBizId: 'cardBizId',
            cardData: 'cardData',
            unionIdPrivateDataMap: 'unionIdPrivateDataMap',
            updateOptions: 'updateOptions',
            userIdPrivateDataMap: 'userIdPrivateDataMap',
        };
    }
    static types() {
        return {
            cardBizId: 'string',
            cardData: 'string',
            unionIdPrivateDataMap: 'string',
            updateOptions: UpdateRobotInteractiveCardRequestUpdateOptions,
            userIdPrivateDataMap: 'string',
        };
    }
}
exports.UpdateRobotInteractiveCardRequest = UpdateRobotInteractiveCardRequest;
class UpdateRobotInteractiveCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processQueryKey: 'processQueryKey',
        };
    }
    static types() {
        return {
            processQueryKey: 'string',
        };
    }
}
exports.UpdateRobotInteractiveCardResponseBody = UpdateRobotInteractiveCardResponseBody;
class UpdateRobotInteractiveCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateRobotInteractiveCardResponseBody,
        };
    }
}
exports.UpdateRobotInteractiveCardResponse = UpdateRobotInteractiveCardResponse;
class UpdateTheGroupRolesOfGroupMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateTheGroupRolesOfGroupMemberHeaders = UpdateTheGroupRolesOfGroupMemberHeaders;
class UpdateTheGroupRolesOfGroupMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            openRoleIds: 'openRoleIds',
            userId: 'userId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            openRoleIds: { 'type': 'array', 'itemType': 'string' },
            userId: 'string',
        };
    }
}
exports.UpdateTheGroupRolesOfGroupMemberRequest = UpdateTheGroupRolesOfGroupMemberRequest;
class UpdateTheGroupRolesOfGroupMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateTheGroupRolesOfGroupMemberResponseBody = UpdateTheGroupRolesOfGroupMemberResponseBody;
class UpdateTheGroupRolesOfGroupMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateTheGroupRolesOfGroupMemberResponseBody,
        };
    }
}
exports.UpdateTheGroupRolesOfGroupMemberResponse = UpdateTheGroupRolesOfGroupMemberResponse;
class AddGroupMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddGroupMemberHeaders = AddGroupMemberHeaders;
class AddGroupMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserIds: 'appUserIds',
            openConversationId: 'openConversationId',
            operatorId: 'operatorId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            appUserIds: { 'type': 'array', 'itemType': 'string' },
            openConversationId: 'string',
            operatorId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.AddGroupMemberRequest = AddGroupMemberRequest;
class AddGroupMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserIds: 'appUserIds',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            appUserIds: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.AddGroupMemberResponseBody = AddGroupMemberResponseBody;
class AddGroupMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddGroupMemberResponseBody,
        };
    }
}
exports.AddGroupMemberResponse = AddGroupMemberResponse;
class RemoveGroupMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveGroupMemberHeaders = RemoveGroupMemberHeaders;
class RemoveGroupMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserIds: 'appUserIds',
            openConversationId: 'openConversationId',
            operatorId: 'operatorId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            appUserIds: { 'type': 'array', 'itemType': 'string' },
            openConversationId: 'string',
            operatorId: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.RemoveGroupMemberRequest = RemoveGroupMemberRequest;
class RemoveGroupMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
        };
    }
    static types() {
        return {
            message: 'string',
        };
    }
}
exports.RemoveGroupMemberResponseBody = RemoveGroupMemberResponseBody;
class RemoveGroupMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveGroupMemberResponseBody,
        };
    }
}
exports.RemoveGroupMemberResponse = RemoveGroupMemberResponse;
class SendDingMessageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendDingMessageHeaders = SendDingMessageHeaders;
class SendDingMessageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            message: 'message',
            messageType: 'messageType',
            openConversationId: 'openConversationId',
            receiverId: 'receiverId',
            senderId: 'senderId',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
            messageType: 'string',
            openConversationId: 'string',
            receiverId: 'string',
            senderId: 'string',
        };
    }
}
exports.SendDingMessageRequest = SendDingMessageRequest;
class SendDingMessageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.SendDingMessageResponseBody = SendDingMessageResponseBody;
class SendDingMessageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendDingMessageResponseBody,
        };
    }
}
exports.SendDingMessageResponse = SendDingMessageResponse;
class SendMessageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendMessageHeaders = SendMessageHeaders;
class SendMessageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            messageType: 'messageType',
            openConversationId: 'openConversationId',
            receiverId: 'receiverId',
            senderId: 'senderId',
            sourceInfos: 'sourceInfos',
        };
    }
    static types() {
        return {
            message: 'string',
            messageType: 'string',
            openConversationId: 'string',
            receiverId: 'string',
            senderId: 'string',
            sourceInfos: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.SendMessageRequest = SendMessageRequest;
class SendMessageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.SendMessageResponseBody = SendMessageResponseBody;
class SendMessageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendMessageResponseBody,
        };
    }
}
exports.SendMessageResponse = SendMessageResponse;
class AddOrgTextEmotionResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            emotionId: 'emotionId',
        };
    }
    static types() {
        return {
            emotionId: 'string',
        };
    }
}
exports.AddOrgTextEmotionResponseBodyResult = AddOrgTextEmotionResponseBodyResult;
class BatchQueryFamilySchoolMessageResponseBodyMessagesMediaModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileName: 'fileName',
            fileType: 'fileType',
            mediaId: 'mediaId',
            size: 'size',
            url: 'url',
            videoPicMediaId: 'videoPicMediaId',
        };
    }
    static types() {
        return {
            fileName: 'string',
            fileType: 'string',
            mediaId: 'string',
            size: 'string',
            url: 'string',
            videoPicMediaId: 'string',
        };
    }
}
exports.BatchQueryFamilySchoolMessageResponseBodyMessagesMediaModels = BatchQueryFamilySchoolMessageResponseBodyMessagesMediaModels;
class BatchQueryFamilySchoolMessageResponseBodyMessages extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contentType: 'contentType',
            createAt: 'createAt',
            mediaModels: 'mediaModels',
            openMsgId: 'openMsgId',
        };
    }
    static types() {
        return {
            contentType: 'number',
            createAt: 'number',
            mediaModels: { 'type': 'array', 'itemType': BatchQueryFamilySchoolMessageResponseBodyMessagesMediaModels },
            openMsgId: 'string',
        };
    }
}
exports.BatchQueryFamilySchoolMessageResponseBodyMessages = BatchQueryFamilySchoolMessageResponseBodyMessages;
class CreateInterconnectionRequestInterconnections extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserAvatar: 'appUserAvatar',
            appUserAvatarMediaType: 'appUserAvatarMediaType',
            appUserDynamics: 'appUserDynamics',
            appUserId: 'appUserId',
            appUserMobile: 'appUserMobile',
            appUserName: 'appUserName',
            channelCode: 'channelCode',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appUserAvatar: 'string',
            appUserAvatarMediaType: 'number',
            appUserDynamics: 'string',
            appUserId: 'string',
            appUserMobile: 'string',
            appUserName: 'string',
            channelCode: 'string',
            userId: 'string',
        };
    }
}
exports.CreateInterconnectionRequestInterconnections = CreateInterconnectionRequestInterconnections;
class CreateInterconnectionResponseBodyResults extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserId: 'appUserId',
            message: 'message',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appUserId: 'string',
            message: 'string',
            userId: 'string',
        };
    }
}
exports.CreateInterconnectionResponseBodyResults = CreateInterconnectionResponseBodyResults;
class CreateSceneGroupConversationRequestManagementOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatBannedType: 'chatBannedType',
            managementType: 'managementType',
            mentionAllAuthority: 'mentionAllAuthority',
            searchable: 'searchable',
            showHistoryType: 'showHistoryType',
            validationType: 'validationType',
        };
    }
    static types() {
        return {
            chatBannedType: 'number',
            managementType: 'number',
            mentionAllAuthority: 'number',
            searchable: 'number',
            showHistoryType: 'number',
            validationType: 'number',
        };
    }
}
exports.CreateSceneGroupConversationRequestManagementOptions = CreateSceneGroupConversationRequestManagementOptions;
class GetFamilySchoolConversationMsgResponseBodyMessagesMediaModels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileName: 'fileName',
            fileType: 'fileType',
            mediaId: 'mediaId',
            size: 'size',
            url: 'url',
            videoPicMediaId: 'videoPicMediaId',
        };
    }
    static types() {
        return {
            fileName: 'string',
            fileType: 'string',
            mediaId: 'string',
            size: 'string',
            url: 'string',
            videoPicMediaId: 'string',
        };
    }
}
exports.GetFamilySchoolConversationMsgResponseBodyMessagesMediaModels = GetFamilySchoolConversationMsgResponseBodyMessagesMediaModels;
class GetFamilySchoolConversationMsgResponseBodyMessages extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            contentType: 'contentType',
            createAt: 'createAt',
            mediaModels: 'mediaModels',
            openMsgId: 'openMsgId',
        };
    }
    static types() {
        return {
            contentType: 'number',
            createAt: 'number',
            mediaModels: { 'type': 'array', 'itemType': GetFamilySchoolConversationMsgResponseBodyMessagesMediaModels },
            openMsgId: 'string',
        };
    }
}
exports.GetFamilySchoolConversationMsgResponseBodyMessages = GetFamilySchoolConversationMsgResponseBodyMessages;
class GetFamilySchoolConversationsResponseBodyGroupInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            deptNameChain: 'deptNameChain',
            groupName: 'groupName',
            groupType: 'groupType',
            joinGroupTime: 'joinGroupTime',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            deptNameChain: { 'type': 'array', 'itemType': 'string' },
            groupName: 'string',
            groupType: 'string',
            joinGroupTime: 'number',
            openConversationId: 'string',
        };
    }
}
exports.GetFamilySchoolConversationsResponseBodyGroupInfoList = GetFamilySchoolConversationsResponseBodyGroupInfoList;
class GetNewestInnerGroupsResponseBodyGroupInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            icon: 'icon',
            memberAmount: 'memberAmount',
            openConversationId: 'openConversationId',
            title: 'title',
        };
    }
    static types() {
        return {
            icon: 'string',
            memberAmount: 'string',
            openConversationId: 'string',
            title: 'string',
        };
    }
}
exports.GetNewestInnerGroupsResponseBodyGroupInfos = GetNewestInnerGroupsResponseBodyGroupInfos;
class GroupManageQueryResponseBodyGroupInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            banWordsMode: 'banWordsMode',
            capacity: 'capacity',
            createdAt: 'createdAt',
            extInfo: 'extInfo',
            groupAdminList: 'groupAdminList',
            groupOwner: 'groupOwner',
            groupTitle: 'groupTitle',
            memberCount: 'memberCount',
            openConversationId: 'openConversationId',
            type: 'type',
        };
    }
    static types() {
        return {
            banWordsMode: 'number',
            capacity: 'number',
            createdAt: 'number',
            extInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            groupAdminList: { 'type': 'array', 'itemType': 'string' },
            groupOwner: 'string',
            groupTitle: 'string',
            memberCount: 'number',
            openConversationId: 'string',
            type: 'string',
        };
    }
}
exports.GroupManageQueryResponseBodyGroupInfoList = GroupManageQueryResponseBodyGroupInfoList;
class InteractiveCardCreateInstanceRequestCardData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardMediaIdParamMap: 'cardMediaIdParamMap',
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardMediaIdParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.InteractiveCardCreateInstanceRequestCardData = InteractiveCardCreateInstanceRequestCardData;
class ListOrgTextEmotionResponseBodyResultEmotions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            backgroundMediaId: 'backgroundMediaId',
            backgroundMediaIdForPanel: 'backgroundMediaIdForPanel',
            deptId: 'deptId',
            emotionId: 'emotionId',
            emotionName: 'emotionName',
            status: 'status',
        };
    }
    static types() {
        return {
            backgroundMediaId: 'string',
            backgroundMediaIdForPanel: 'string',
            deptId: 'number',
            emotionId: 'string',
            emotionName: 'string',
            status: 'number',
        };
    }
}
exports.ListOrgTextEmotionResponseBodyResultEmotions = ListOrgTextEmotionResponseBodyResultEmotions;
class ListOrgTextEmotionResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            emotions: 'emotions',
        };
    }
    static types() {
        return {
            emotions: { 'type': 'array', 'itemType': ListOrgTextEmotionResponseBodyResultEmotions },
        };
    }
}
exports.ListOrgTextEmotionResponseBodyResult = ListOrgTextEmotionResponseBodyResult;
class QueryGroupMemberResponseBodyGroupMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupMemberAvatar: 'groupMemberAvatar',
            groupMemberDynamics: 'groupMemberDynamics',
            groupMemberId: 'groupMemberId',
            groupMemberName: 'groupMemberName',
            groupMemberType: 'groupMemberType',
        };
    }
    static types() {
        return {
            groupMemberAvatar: 'string',
            groupMemberDynamics: 'string',
            groupMemberId: 'string',
            groupMemberName: 'string',
            groupMemberType: 'number',
        };
    }
}
exports.QueryGroupMemberResponseBodyGroupMembers = QueryGroupMemberResponseBodyGroupMembers;
class QueryGroupMemberByMemberAuthResponseBodyGroupMemberList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupNickName: 'groupNickName',
            orgName: 'orgName',
            profilePhotoUrl: 'profilePhotoUrl',
            userId: 'userId',
        };
    }
    static types() {
        return {
            groupNickName: 'string',
            orgName: 'string',
            profilePhotoUrl: 'string',
            userId: 'string',
        };
    }
}
exports.QueryGroupMemberByMemberAuthResponseBodyGroupMemberList = QueryGroupMemberByMemberAuthResponseBodyGroupMemberList;
class QueryGroupMuteStatusResponseBodyUserMuteResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            muteEndTime: 'muteEndTime',
            muteStartTime: 'muteStartTime',
            userMuteMode: 'userMuteMode',
        };
    }
    static types() {
        return {
            muteEndTime: 'number',
            muteStartTime: 'number',
            userMuteMode: 'boolean',
        };
    }
}
exports.QueryGroupMuteStatusResponseBodyUserMuteResult = QueryGroupMuteStatusResponseBodyUserMuteResult;
class QuerySceneGroupTemplateRobotResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.QuerySceneGroupTemplateRobotResponseBodyResult = QuerySceneGroupTemplateRobotResponseBodyResult;
class QuerySingleGroupRequestGroupMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserId: 'appUserId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appUserId: 'string',
            userId: 'string',
        };
    }
}
exports.QuerySingleGroupRequestGroupMembers = QuerySingleGroupRequestGroupMembers;
class QuerySingleGroupResponseBodyOpenConversations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUserId: 'appUserId',
            openConversationId: 'openConversationId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appUserId: 'string',
            openConversationId: 'string',
            userId: 'string',
        };
    }
}
exports.QuerySingleGroupResponseBodyOpenConversations = QuerySingleGroupResponseBodyOpenConversations;
class QueryUnReadMessageResponseBodyUnReadItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
            unReadCount: 'unReadCount',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
            unReadCount: 'number',
        };
    }
}
exports.QueryUnReadMessageResponseBodyUnReadItems = QueryUnReadMessageResponseBodyUnReadItems;
class SearchInnerGroupsResponseBodyGroupInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            icon: 'icon',
            memberAmount: 'memberAmount',
            openConversationId: 'openConversationId',
            title: 'title',
        };
    }
    static types() {
        return {
            icon: 'string',
            memberAmount: 'string',
            openConversationId: 'string',
            title: 'string',
        };
    }
}
exports.SearchInnerGroupsResponseBodyGroupInfos = SearchInnerGroupsResponseBodyGroupInfos;
class SendInteractiveCardRequestCardData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardMediaIdParamMap: 'cardMediaIdParamMap',
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardMediaIdParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.SendInteractiveCardRequestCardData = SendInteractiveCardRequestCardData;
class SendInteractiveCardRequestCardOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            supportForward: 'boolean',
        };
    }
}
exports.SendInteractiveCardRequestCardOptions = SendInteractiveCardRequestCardOptions;
class SendInteractiveCardResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processQueryKey: 'processQueryKey',
        };
    }
    static types() {
        return {
            processQueryKey: 'string',
        };
    }
}
exports.SendInteractiveCardResponseBodyResult = SendInteractiveCardResponseBodyResult;
class SendOTOInteractiveCardRequestCardData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.SendOTOInteractiveCardRequestCardData = SendOTOInteractiveCardRequestCardData;
class SendOTOInteractiveCardRequestCardOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            supportForward: 'boolean',
        };
    }
}
exports.SendOTOInteractiveCardRequestCardOptions = SendOTOInteractiveCardRequestCardOptions;
class SendOTOInteractiveCardResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processQueryKey: 'processQueryKey',
        };
    }
    static types() {
        return {
            processQueryKey: 'string',
        };
    }
}
exports.SendOTOInteractiveCardResponseBodyResult = SendOTOInteractiveCardResponseBodyResult;
class SendRobotInteractiveCardRequestSendOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            atAll: 'atAll',
            atUserListJson: 'atUserListJson',
            cardPropertyJson: 'cardPropertyJson',
            receiverListJson: 'receiverListJson',
        };
    }
    static types() {
        return {
            atAll: 'boolean',
            atUserListJson: 'string',
            cardPropertyJson: 'string',
            receiverListJson: 'string',
        };
    }
}
exports.SendRobotInteractiveCardRequestSendOptions = SendRobotInteractiveCardRequestSendOptions;
class SendTemplateInteractiveCardRequestSendOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            atAll: 'atAll',
            atUserListJson: 'atUserListJson',
            cardPropertyJson: 'cardPropertyJson',
            receiverListJson: 'receiverListJson',
        };
    }
    static types() {
        return {
            atAll: 'boolean',
            atUserListJson: 'string',
            cardPropertyJson: 'string',
            receiverListJson: 'string',
        };
    }
}
exports.SendTemplateInteractiveCardRequestSendOptions = SendTemplateInteractiveCardRequestSendOptions;
class SetRightPanelRequestWebWndParams extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetURL: 'targetURL',
        };
    }
    static types() {
        return {
            targetURL: 'string',
        };
    }
}
exports.SetRightPanelRequestWebWndParams = SetRightPanelRequestWebWndParams;
class UpdateInteractiveCardRequestCardData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardMediaIdParamMap: 'cardMediaIdParamMap',
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardMediaIdParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.UpdateInteractiveCardRequestCardData = UpdateInteractiveCardRequestCardData;
class UpdateInteractiveCardRequestCardOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            updateCardDataByKey: 'updateCardDataByKey',
            updatePrivateDataByKey: 'updatePrivateDataByKey',
        };
    }
    static types() {
        return {
            updateCardDataByKey: 'boolean',
            updatePrivateDataByKey: 'boolean',
        };
    }
}
exports.UpdateInteractiveCardRequestCardOptions = UpdateInteractiveCardRequestCardOptions;
class UpdateRobotInteractiveCardRequestUpdateOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            updateCardDataByKey: 'updateCardDataByKey',
            updatePrivateDataByKey: 'updatePrivateDataByKey',
        };
    }
    static types() {
        return {
            updateCardDataByKey: 'boolean',
            updatePrivateDataByKey: 'boolean',
        };
    }
}
exports.UpdateRobotInteractiveCardRequestUpdateOptions = UpdateRobotInteractiveCardRequestUpdateOptions;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addOrgTextEmotionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.backgroundMediaId)) {
            body["backgroundMediaId"] = request.backgroundMediaId;
        }
        if (!tea_util_1.default.isUnset(request.backgroundMediaIdForPanel)) {
            body["backgroundMediaIdForPanel"] = request.backgroundMediaIdForPanel;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.emotionName)) {
            body["emotionName"] = request.emotionName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddOrgTextEmotion",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/organizations/textEmotions`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddOrgTextEmotionResponse({}));
    }
    async addOrgTextEmotion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddOrgTextEmotionHeaders({});
        return await this.addOrgTextEmotionWithOptions(request, headers, runtime);
    }
    async addRobotToConversationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddRobotToConversation",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/conversations/robots`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddRobotToConversationResponse({}));
    }
    async addRobotToConversation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddRobotToConversationHeaders({});
        return await this.addRobotToConversationWithOptions(request, headers, runtime);
    }
    async autoOpenDingTalkConnectWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "AutoOpenDingTalkConnect",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/apps/open`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AutoOpenDingTalkConnectResponse({}));
    }
    async autoOpenDingTalkConnect() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AutoOpenDingTalkConnectHeaders({});
        return await this.autoOpenDingTalkConnectWithOptions(headers, runtime);
    }
    async batchQueryFamilySchoolMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.openMessageIds)) {
            body["openMessageIds"] = request.openMessageIds;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchQueryFamilySchoolMessage",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/conversations/familySchools/messages/batchQuery`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchQueryFamilySchoolMessageResponse({}));
    }
    async batchQueryFamilySchoolMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchQueryFamilySchoolMessageHeaders({});
        return await this.batchQueryFamilySchoolMessageWithOptions(request, headers, runtime);
    }
    async batchQueryGroupMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            body["coolAppCode"] = request.coolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchQueryGroupMember",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/members/batchQuery`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchQueryGroupMemberResponse({}));
    }
    async batchQueryGroupMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchQueryGroupMemberHeaders({});
        return await this.batchQueryGroupMemberWithOptions(request, headers, runtime);
    }
    async cardTemplateBuildActionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            body["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateJson)) {
            body["cardTemplateJson"] = request.cardTemplateJson;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CardTemplateBuildAction",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interactiveCards/templates/buildAction`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CardTemplateBuildActionResponse({}));
    }
    async cardTemplateBuildAction(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CardTemplateBuildActionHeaders({});
        return await this.cardTemplateBuildActionWithOptions(request, headers, runtime);
    }
    async changeGroupOwnerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupOwnerId)) {
            body["groupOwnerId"] = request.groupOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.groupOwnerType)) {
            body["groupOwnerType"] = request.groupOwnerType;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChangeGroupOwner",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/groups/owners`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChangeGroupOwnerResponse({}));
    }
    async changeGroupOwner(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChangeGroupOwnerHeaders({});
        return await this.changeGroupOwnerWithOptions(request, headers, runtime);
    }
    async chatIdToOpenConversationIdWithOptions(chatId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ChatIdToOpenConversationId",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/chat/${chatId}/convertToOpenConversationId`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatIdToOpenConversationIdResponse({}));
    }
    async chatIdToOpenConversationId(chatId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatIdToOpenConversationIdHeaders({});
        return await this.chatIdToOpenConversationIdWithOptions(chatId, headers, runtime);
    }
    async chatSubAdminUpdateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.role)) {
            body["role"] = request.role;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChatSubAdminUpdate",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/subAdministrators`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChatSubAdminUpdateResponse({}));
    }
    async chatSubAdminUpdate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChatSubAdminUpdateHeaders({});
        return await this.chatSubAdminUpdateWithOptions(request, headers, runtime);
    }
    async checkUserIsGroupMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CheckUserIsGroupMember",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/innerGroups/members/check`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CheckUserIsGroupMemberResponse({}));
    }
    async checkUserIsGroupMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckUserIsGroupMemberHeaders({});
        return await this.checkUserIsGroupMemberWithOptions(request, headers, runtime);
    }
    async createCoupleGroupConversationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appUserId)) {
            body["appUserId"] = request.appUserId;
        }
        if (!tea_util_1.default.isUnset(request.groupAvatar)) {
            body["groupAvatar"] = request.groupAvatar;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.groupOwnerId)) {
            body["groupOwnerId"] = request.groupOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.groupTemplateId)) {
            body["groupTemplateId"] = request.groupTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCoupleGroupConversation",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/coupleGroups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCoupleGroupConversationResponse({}));
    }
    async createCoupleGroupConversation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCoupleGroupConversationHeaders({});
        return await this.createCoupleGroupConversationWithOptions(request, headers, runtime);
    }
    async createGroupConversationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appUserIds)) {
            body["appUserIds"] = request.appUserIds;
        }
        if (!tea_util_1.default.isUnset(request.groupAvatar)) {
            body["groupAvatar"] = request.groupAvatar;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.groupOwnerId)) {
            body["groupOwnerId"] = request.groupOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.groupOwnerType)) {
            body["groupOwnerType"] = request.groupOwnerType;
        }
        if (!tea_util_1.default.isUnset(request.groupTemplateId)) {
            body["groupTemplateId"] = request.groupTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateGroupConversation",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/groups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateGroupConversationResponse({}));
    }
    async createGroupConversation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateGroupConversationHeaders({});
        return await this.createGroupConversationWithOptions(request, headers, runtime);
    }
    async createInterconnectionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.interconnections)) {
            body["interconnections"] = request.interconnections;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateInterconnection",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateInterconnectionResponse({}));
    }
    async createInterconnection(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateInterconnectionHeaders({});
        return await this.createInterconnectionWithOptions(request, headers, runtime);
    }
    async createSceneGroupConversationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.features)) {
            body["features"] = request.features;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.groupOwnerId)) {
            body["groupOwnerId"] = request.groupOwnerId;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.managementOptions)) {
            body["managementOptions"] = request.managementOptions;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            body["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateSceneGroupConversation",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateSceneGroupConversationResponse({}));
    }
    async createSceneGroupConversation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSceneGroupConversationHeaders({});
        return await this.createSceneGroupConversationWithOptions(request, headers, runtime);
    }
    async createStoreGroupConversationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appUserId)) {
            body["appUserId"] = request.appUserId;
        }
        if (!tea_util_1.default.isUnset(request.businessUniqueKey)) {
            body["businessUniqueKey"] = request.businessUniqueKey;
        }
        if (!tea_util_1.default.isUnset(request.groupAvatar)) {
            body["groupAvatar"] = request.groupAvatar;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.groupTemplateId)) {
            body["groupTemplateId"] = request.groupTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateStoreGroupConversation",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/storeGroups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateStoreGroupConversationResponse({}));
    }
    async createStoreGroupConversation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateStoreGroupConversationHeaders({});
        return await this.createStoreGroupConversationWithOptions(request, headers, runtime);
    }
    async deleteOrgTextEmotionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.emotionIds)) {
            body["emotionIds"] = request.emotionIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteOrgTextEmotion",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/organizations/textEmotions/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteOrgTextEmotionResponse({}));
    }
    async deleteOrgTextEmotion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteOrgTextEmotionHeaders({});
        return await this.deleteOrgTextEmotionWithOptions(request, headers, runtime);
    }
    async dismissGroupConversationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DismissGroupConversation",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/groups/dismiss`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DismissGroupConversationResponse({}));
    }
    async dismissGroupConversation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DismissGroupConversationHeaders({});
        return await this.dismissGroupConversationWithOptions(request, headers, runtime);
    }
    async getConversationUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appUserId)) {
            body["appUserId"] = request.appUserId;
        }
        if (!tea_util_1.default.isUnset(request.channelCode)) {
            body["channelCode"] = request.channelCode;
        }
        if (!tea_util_1.default.isUnset(request.deviceId)) {
            body["deviceId"] = request.deviceId;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetConversationUrl",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/conversations/urls`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetConversationUrlResponse({}));
    }
    async getConversationUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetConversationUrlHeaders({});
        return await this.getConversationUrlWithOptions(request, headers, runtime);
    }
    async getFamilySchoolConversationMsgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.msgTypes)) {
            body["msgTypes"] = request.msgTypes;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetFamilySchoolConversationMsg",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/conversations/familySchools/messages/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFamilySchoolConversationMsgResponse({}));
    }
    async getFamilySchoolConversationMsg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFamilySchoolConversationMsgHeaders({});
        return await this.getFamilySchoolConversationMsgWithOptions(request, headers, runtime);
    }
    async getFamilySchoolConversationsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetFamilySchoolConversations",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/conversations/familySchools/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFamilySchoolConversationsResponse({}));
    }
    async getFamilySchoolConversations(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFamilySchoolConversationsHeaders({});
        return await this.getFamilySchoolConversationsWithOptions(request, headers, runtime);
    }
    async getInnerGroupMembersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetInnerGroupMembers",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/innerGroups/members/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInnerGroupMembersResponse({}));
    }
    async getInnerGroupMembers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInnerGroupMembersHeaders({});
        return await this.getInnerGroupMembersWithOptions(request, headers, runtime);
    }
    async getInterconnectionUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appUserAvatar)) {
            body["appUserAvatar"] = request.appUserAvatar;
        }
        if (!tea_util_1.default.isUnset(request.appUserAvatarType)) {
            body["appUserAvatarType"] = request.appUserAvatarType;
        }
        if (!tea_util_1.default.isUnset(request.appUserId)) {
            body["appUserId"] = request.appUserId;
        }
        if (!tea_util_1.default.isUnset(request.appUserMobileNumber)) {
            body["appUserMobileNumber"] = request.appUserMobileNumber;
        }
        if (!tea_util_1.default.isUnset(request.appUserName)) {
            body["appUserName"] = request.appUserName;
        }
        if (!tea_util_1.default.isUnset(request.msgPageType)) {
            body["msgPageType"] = request.msgPageType;
        }
        if (!tea_util_1.default.isUnset(request.qrCode)) {
            body["qrCode"] = request.qrCode;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        if (!tea_util_1.default.isUnset(request.sourceCode)) {
            body["sourceCode"] = request.sourceCode;
        }
        if (!tea_util_1.default.isUnset(request.sourceType)) {
            body["sourceType"] = request.sourceType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetInterconnectionUrl",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/sessions/urls`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInterconnectionUrlResponse({}));
    }
    async getInterconnectionUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInterconnectionUrlHeaders({});
        return await this.getInterconnectionUrlWithOptions(request, headers, runtime);
    }
    async getNewestInnerGroupsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetNewestInnerGroups",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/activities/innerGroups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetNewestInnerGroupsResponse({}));
    }
    async getNewestInnerGroups(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetNewestInnerGroupsHeaders({});
        return await this.getNewestInnerGroupsWithOptions(request, headers, runtime);
    }
    async getSceneGroupInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            body["coolAppCode"] = request.coolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetSceneGroupInfo",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSceneGroupInfoResponse({}));
    }
    async getSceneGroupInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSceneGroupInfoHeaders({});
        return await this.getSceneGroupInfoWithOptions(request, headers, runtime);
    }
    async getSceneGroupMembersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            body["coolAppCode"] = request.coolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.cursor)) {
            body["cursor"] = request.cursor;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            body["size"] = request.size;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetSceneGroupMembers",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/members/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSceneGroupMembersResponse({}));
    }
    async getSceneGroupMembers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSceneGroupMembersHeaders({});
        return await this.getSceneGroupMembersWithOptions(request, headers, runtime);
    }
    async groupBanWordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.banWordsMode)) {
            body["banWordsMode"] = request.banWordsMode;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.options)) {
            body["options"] = request.options;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GroupBanWords",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/groups/words/ban`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GroupBanWordsResponse({}));
    }
    async groupBanWords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GroupBanWordsHeaders({});
        return await this.groupBanWordsWithOptions(request, headers, runtime);
    }
    async groupCapacityInquiryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.effectiveDuration)) {
            body["effectiveDuration"] = request.effectiveDuration;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.options)) {
            body["options"] = request.options;
        }
        if (!tea_util_1.default.isUnset(request.targetCapacity)) {
            body["targetCapacity"] = request.targetCapacity;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GroupCapacityInquiry",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/groups/capacities/inquiries/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GroupCapacityInquiryResponse({}));
    }
    async groupCapacityInquiry(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GroupCapacityInquiryHeaders({});
        return await this.groupCapacityInquiryWithOptions(request, headers, runtime);
    }
    async groupCapacityOrderConfirmWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.orderId)) {
            body["orderId"] = request.orderId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GroupCapacityOrderConfirm",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/groups/capacities/orders/confirm`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GroupCapacityOrderConfirmResponse({}));
    }
    async groupCapacityOrderConfirm(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GroupCapacityOrderConfirmHeaders({});
        return await this.groupCapacityOrderConfirmWithOptions(request, headers, runtime);
    }
    async groupCapacityOrderPlaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actualPrice)) {
            body["actualPrice"] = request.actualPrice;
        }
        if (!tea_util_1.default.isUnset(request.currentCapacity)) {
            body["currentCapacity"] = request.currentCapacity;
        }
        if (!tea_util_1.default.isUnset(request.currentEffectUntil)) {
            body["currentEffectUntil"] = request.currentEffectUntil;
        }
        if (!tea_util_1.default.isUnset(request.discount)) {
            body["discount"] = request.discount;
        }
        if (!tea_util_1.default.isUnset(request.extInfo)) {
            body["extInfo"] = request.extInfo;
        }
        if (!tea_util_1.default.isUnset(request.markedPrice)) {
            body["markedPrice"] = request.markedPrice;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.targetCapacity)) {
            body["targetCapacity"] = request.targetCapacity;
        }
        if (!tea_util_1.default.isUnset(request.targetEffectUntil)) {
            body["targetEffectUntil"] = request.targetEffectUntil;
        }
        if (!tea_util_1.default.isUnset(request.token)) {
            body["token"] = request.token;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GroupCapacityOrderPlace",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/groups/capacities/orders/place`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GroupCapacityOrderPlaceResponse({}));
    }
    async groupCapacityOrderPlace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GroupCapacityOrderPlaceHeaders({});
        return await this.groupCapacityOrderPlaceWithOptions(request, headers, runtime);
    }
    async groupManageQueryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.createdAfter)) {
            body["createdAfter"] = request.createdAfter;
        }
        if (!tea_util_1.default.isUnset(request.groupId)) {
            body["groupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.groupMemberSamples)) {
            body["groupMemberSamples"] = request.groupMemberSamples;
        }
        if (!tea_util_1.default.isUnset(request.groupOwner)) {
            body["groupOwner"] = request.groupOwner;
        }
        if (!tea_util_1.default.isUnset(request.groupTitleKeywords)) {
            body["groupTitleKeywords"] = request.groupTitleKeywords;
        }
        if (!tea_util_1.default.isUnset(request.groupUrl)) {
            body["groupUrl"] = request.groupUrl;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.membersOver)) {
            body["membersOver"] = request.membersOver;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GroupManageQuery",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/groups/managements/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GroupManageQueryResponse({}));
    }
    async groupManageQuery(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GroupManageQueryHeaders({});
        return await this.groupManageQueryWithOptions(request, headers, runtime);
    }
    async groupManageReduceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.capacityLimit)) {
            body["capacityLimit"] = request.capacityLimit;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.options)) {
            body["options"] = request.options;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GroupManageReduce",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/groups/capacities/reduce`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GroupManageReduceResponse({}));
    }
    async groupManageReduce(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GroupManageReduceHeaders({});
        return await this.groupManageReduceWithOptions(request, headers, runtime);
    }
    async installRobotToOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.brief)) {
            body["brief"] = request.brief;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.outgoingToken)) {
            body["outgoingToken"] = request.outgoingToken;
        }
        if (!tea_util_1.default.isUnset(request.outgoingUrl)) {
            body["outgoingUrl"] = request.outgoingUrl;
        }
        if (!tea_util_1.default.isUnset(request.previewMediaId)) {
            body["previewMediaId"] = request.previewMediaId;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InstallRobotToOrg",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/organizations/robots/install`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InstallRobotToOrgResponse({}));
    }
    async installRobotToOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InstallRobotToOrgHeaders({});
        return await this.installRobotToOrgWithOptions(request, headers, runtime);
    }
    async interactiveCardCreateInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.chatBotId)) {
            body["chatBotId"] = request.chatBotId;
        }
        if (!tea_util_1.default.isUnset(request.conversationType)) {
            body["conversationType"] = request.conversationType;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.pullStrategy)) {
            body["pullStrategy"] = request.pullStrategy;
        }
        if (!tea_util_1.default.isUnset(request.receiverUserIdList)) {
            body["receiverUserIdList"] = request.receiverUserIdList;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InteractiveCardCreateInstance",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interactiveCards/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InteractiveCardCreateInstanceResponse({}));
    }
    async interactiveCardCreateInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InteractiveCardCreateInstanceHeaders({});
        return await this.interactiveCardCreateInstanceWithOptions(request, headers, runtime);
    }
    async listOrgTextEmotionWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListOrgTextEmotion",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/organizations/textEmotions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListOrgTextEmotionResponse({}));
    }
    async listOrgTextEmotion() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListOrgTextEmotionHeaders({});
        return await this.listOrgTextEmotionWithOptions(headers, runtime);
    }
    async queryGroupInfoByMemberAuthWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            body["coolAppCode"] = request.coolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryGroupInfoByMemberAuth",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/memberAuthorizations/groups/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGroupInfoByMemberAuthResponse({}));
    }
    async queryGroupInfoByMemberAuth(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupInfoByMemberAuthHeaders({});
        return await this.queryGroupInfoByMemberAuthWithOptions(request, headers, runtime);
    }
    async queryGroupMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            query["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryGroupMember",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/conversations/members`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGroupMemberResponse({}));
    }
    async queryGroupMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupMemberHeaders({});
        return await this.queryGroupMemberWithOptions(request, headers, runtime);
    }
    async queryGroupMemberByMemberAuthWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            body["coolAppCode"] = request.coolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryGroupMemberByMemberAuth",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/memberAuthorizations/groups/members/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGroupMemberByMemberAuthResponse({}));
    }
    async queryGroupMemberByMemberAuth(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupMemberByMemberAuthHeaders({});
        return await this.queryGroupMemberByMemberAuthWithOptions(request, headers, runtime);
    }
    async queryGroupMuteStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            query["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryGroupMuteStatus",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/muteSettings`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGroupMuteStatusResponse({}));
    }
    async queryGroupMuteStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupMuteStatusHeaders({});
        return await this.queryGroupMuteStatusWithOptions(request, headers, runtime);
    }
    async queryMembersOfGroupRoleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.openRoleId)) {
            body["openRoleId"] = request.openRoleId;
        }
        if (!tea_util_1.default.isUnset(request.timestamp)) {
            body["timestamp"] = request.timestamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryMembersOfGroupRole",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/roles/members/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMembersOfGroupRoleResponse({}));
    }
    async queryMembersOfGroupRole(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMembersOfGroupRoleHeaders({});
        return await this.queryMembersOfGroupRoleWithOptions(request, headers, runtime);
    }
    async querySceneGroupTemplateRobotWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            query["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            query["robotCode"] = request.robotCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySceneGroupTemplateRobot",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/templates/robots`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySceneGroupTemplateRobotResponse({}));
    }
    async querySceneGroupTemplateRobot(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySceneGroupTemplateRobotHeaders({});
        return await this.querySceneGroupTemplateRobotWithOptions(request, headers, runtime);
    }
    async querySingleGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupMembers)) {
            body["groupMembers"] = request.groupMembers;
        }
        if (!tea_util_1.default.isUnset(request.groupTemplateId)) {
            body["groupTemplateId"] = request.groupTemplateId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QuerySingleGroup",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/doubleGroups/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySingleGroupResponse({}));
    }
    async querySingleGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySingleGroupHeaders({});
        return await this.querySingleGroupWithOptions(request, headers, runtime);
    }
    async queryUnReadMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appUserId)) {
            body["appUserId"] = request.appUserId;
        }
        if (!tea_util_1.default.isUnset(request.openConversationIds)) {
            body["openConversationIds"] = request.openConversationIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryUnReadMessage",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/unReadMsgs/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUnReadMessageResponse({}));
    }
    async queryUnReadMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUnReadMessageHeaders({});
        return await this.queryUnReadMessageWithOptions(request, headers, runtime);
    }
    async removeRobotFromConversationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.chatBotUserId)) {
            body["chatBotUserId"] = request.chatBotUserId;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RemoveRobotFromConversation",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/conversations/robots/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveRobotFromConversationResponse({}));
    }
    async removeRobotFromConversation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveRobotFromConversationHeaders({});
        return await this.removeRobotFromConversationWithOptions(request, headers, runtime);
    }
    async searchInnerGroupsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            body["searchKey"] = request.searchKey;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchInnerGroups",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/innerGroups/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchInnerGroupsResponse({}));
    }
    async searchInnerGroups(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchInnerGroupsHeaders({});
        return await this.searchInnerGroupsWithOptions(request, headers, runtime);
    }
    async sendInteractiveCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.atOpenIds)) {
            body["atOpenIds"] = request.atOpenIds;
        }
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardOptions)) {
            body["cardOptions"] = request.cardOptions;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.chatBotId)) {
            body["chatBotId"] = request.chatBotId;
        }
        if (!tea_util_1.default.isUnset(request.conversationType)) {
            body["conversationType"] = request.conversationType;
        }
        if (!tea_util_1.default.isUnset(request.digitalWorkerCode)) {
            body["digitalWorkerCode"] = request.digitalWorkerCode;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.pullStrategy)) {
            body["pullStrategy"] = request.pullStrategy;
        }
        if (!tea_util_1.default.isUnset(request.receiverUserIdList)) {
            body["receiverUserIdList"] = request.receiverUserIdList;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendInteractiveCard",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interactiveCards/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendInteractiveCardResponse({}));
    }
    async sendInteractiveCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendInteractiveCardHeaders({});
        return await this.sendInteractiveCardWithOptions(request, headers, runtime);
    }
    async sendOTOInteractiveCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.atOpenIds)) {
            body["atOpenIds"] = request.atOpenIds;
        }
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardOptions)) {
            body["cardOptions"] = request.cardOptions;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.pullStrategy)) {
            body["pullStrategy"] = request.pullStrategy;
        }
        if (!tea_util_1.default.isUnset(request.receiverUserIdList)) {
            body["receiverUserIdList"] = request.receiverUserIdList;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendOTOInteractiveCard",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/privateChat/interactiveCards/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendOTOInteractiveCardResponse({}));
    }
    async sendOTOInteractiveCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendOTOInteractiveCardHeaders({});
        return await this.sendOTOInteractiveCardWithOptions(request, headers, runtime);
    }
    async sendRobotInteractiveCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackUrl)) {
            body["callbackUrl"] = request.callbackUrl;
        }
        if (!tea_util_1.default.isUnset(request.cardBizId)) {
            body["cardBizId"] = request.cardBizId;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.pullStrategy)) {
            body["pullStrategy"] = request.pullStrategy;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        if (!tea_util_1.default.isUnset(request.sendOptions)) {
            body["sendOptions"] = request.sendOptions;
        }
        if (!tea_util_1.default.isUnset(request.singleChatReceiver)) {
            body["singleChatReceiver"] = request.singleChatReceiver;
        }
        if (!tea_util_1.default.isUnset(request.unionIdPrivateDataMap)) {
            body["unionIdPrivateDataMap"] = request.unionIdPrivateDataMap;
        }
        if (!tea_util_1.default.isUnset(request.userIdPrivateDataMap)) {
            body["userIdPrivateDataMap"] = request.userIdPrivateDataMap;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendRobotInteractiveCard",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/v1.0/robot/interactiveCards/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendRobotInteractiveCardResponse({}));
    }
    async sendRobotInteractiveCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendRobotInteractiveCardHeaders({});
        return await this.sendRobotInteractiveCardWithOptions(request, headers, runtime);
    }
    async sendRobotMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.atAll)) {
            body["atAll"] = request.atAll;
        }
        if (!tea_util_1.default.isUnset(request.atAppUserId)) {
            body["atAppUserId"] = request.atAppUserId;
        }
        if (!tea_util_1.default.isUnset(request.atDingUserId)) {
            body["atDingUserId"] = request.atDingUserId;
        }
        if (!tea_util_1.default.isUnset(request.msgContent)) {
            body["msgContent"] = request.msgContent;
        }
        if (!tea_util_1.default.isUnset(request.msgType)) {
            body["msgType"] = request.msgType;
        }
        if (!tea_util_1.default.isUnset(request.openConversationIds)) {
            body["openConversationIds"] = request.openConversationIds;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendRobotMessage",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/robotMessages/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendRobotMessageResponse({}));
    }
    async sendRobotMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendRobotMessageHeaders({});
        return await this.sendRobotMessageWithOptions(request, headers, runtime);
    }
    async sendTemplateInteractiveCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackUrl)) {
            body["callbackUrl"] = request.callbackUrl;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        if (!tea_util_1.default.isUnset(request.sendOptions)) {
            body["sendOptions"] = request.sendOptions;
        }
        if (!tea_util_1.default.isUnset(request.singleChatReceiver)) {
            body["singleChatReceiver"] = request.singleChatReceiver;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendTemplateInteractiveCard",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interactiveCards/templates/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendTemplateInteractiveCardResponse({}));
    }
    async sendTemplateInteractiveCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendTemplateInteractiveCardHeaders({});
        return await this.sendTemplateInteractiveCardWithOptions(request, headers, runtime);
    }
    async setRightPanelWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.rightPanelClosePermitted)) {
            body["rightPanelClosePermitted"] = request.rightPanelClosePermitted;
        }
        if (!tea_util_1.default.isUnset(request.rightPanelOpenStatus)) {
            body["rightPanelOpenStatus"] = request.rightPanelOpenStatus;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.webWndParams)) {
            body["webWndParams"] = request.webWndParams;
        }
        if (!tea_util_1.default.isUnset(request.width)) {
            body["width"] = request.width;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetRightPanel",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/rightPanels/set`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetRightPanelResponse({}));
    }
    async setRightPanel(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetRightPanelHeaders({});
        return await this.setRightPanelWithOptions(request, headers, runtime);
    }
    async topboxCloseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.conversationType)) {
            body["conversationType"] = request.conversationType;
        }
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            body["coolAppCode"] = request.coolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.receiverUserIdList)) {
            body["receiverUserIdList"] = request.receiverUserIdList;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TopboxClose",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/topBoxes/close`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TopboxCloseResponse({}));
    }
    async topboxClose(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TopboxCloseHeaders({});
        return await this.topboxCloseWithOptions(request, headers, runtime);
    }
    async topboxOpenWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.conversationType)) {
            body["conversationType"] = request.conversationType;
        }
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            body["coolAppCode"] = request.coolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.expiredTime)) {
            body["expiredTime"] = request.expiredTime;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.platforms)) {
            body["platforms"] = request.platforms;
        }
        if (!tea_util_1.default.isUnset(request.receiverUserIdList)) {
            body["receiverUserIdList"] = request.receiverUserIdList;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TopboxOpen",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/topBoxes/open`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TopboxOpenResponse({}));
    }
    async topboxOpen(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TopboxOpenHeaders({});
        return await this.topboxOpenWithOptions(request, headers, runtime);
    }
    async updateGroupAvatarWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupAvatar)) {
            body["groupAvatar"] = request.groupAvatar;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateGroupAvatar",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/groups/avatars`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateGroupAvatarResponse({}));
    }
    async updateGroupAvatar(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateGroupAvatarHeaders({});
        return await this.updateGroupAvatarWithOptions(request, headers, runtime);
    }
    async updateGroupNameWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateGroupName",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/groups/names`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateGroupNameResponse({}));
    }
    async updateGroupName(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateGroupNameHeaders({});
        return await this.updateGroupNameWithOptions(request, headers, runtime);
    }
    async updateGroupPermissionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.permissionGroup)) {
            body["permissionGroup"] = request.permissionGroup;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateGroupPermission",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/permissions`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateGroupPermissionResponse({}));
    }
    async updateGroupPermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateGroupPermissionHeaders({});
        return await this.updateGroupPermissionWithOptions(request, headers, runtime);
    }
    async updateGroupSubAdminWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.role)) {
            body["role"] = request.role;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateGroupSubAdmin",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/subAdmins`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateGroupSubAdminResponse({}));
    }
    async updateGroupSubAdmin(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateGroupSubAdminHeaders({});
        return await this.updateGroupSubAdminWithOptions(request, headers, runtime);
    }
    async updateInteractiveCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardOptions)) {
            body["cardOptions"] = request.cardOptions;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInteractiveCard",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interactiveCards`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInteractiveCardResponse({}));
    }
    async updateInteractiveCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInteractiveCardHeaders({});
        return await this.updateInteractiveCardWithOptions(request, headers, runtime);
    }
    async updateMemberBanWordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.muteDuration)) {
            body["muteDuration"] = request.muteDuration;
        }
        if (!tea_util_1.default.isUnset(request.muteStatus)) {
            body["muteStatus"] = request.muteStatus;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateMemberBanWords",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/muteMembers/set`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateMemberBanWordsResponse({}));
    }
    async updateMemberBanWords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateMemberBanWordsHeaders({});
        return await this.updateMemberBanWordsWithOptions(request, headers, runtime);
    }
    async updateMemberGroupNickWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupNick)) {
            body["groupNick"] = request.groupNick;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateMemberGroupNick",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/members/groupNicks`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateMemberGroupNickResponse({}));
    }
    async updateMemberGroupNick(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateMemberGroupNickHeaders({});
        return await this.updateMemberGroupNickWithOptions(request, headers, runtime);
    }
    async updateRobotInOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.brief)) {
            body["brief"] = request.brief;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.outgoingToken)) {
            body["outgoingToken"] = request.outgoingToken;
        }
        if (!tea_util_1.default.isUnset(request.outgoingUrl)) {
            body["outgoingUrl"] = request.outgoingUrl;
        }
        if (!tea_util_1.default.isUnset(request.previewMediaId)) {
            body["previewMediaId"] = request.previewMediaId;
        }
        if (!tea_util_1.default.isUnset(request.robotCode)) {
            body["robotCode"] = request.robotCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRobotInOrg",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/organizations/robots`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateRobotInOrgResponse({}));
    }
    async updateRobotInOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRobotInOrgHeaders({});
        return await this.updateRobotInOrgWithOptions(request, headers, runtime);
    }
    async updateRobotInteractiveCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardBizId)) {
            body["cardBizId"] = request.cardBizId;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.unionIdPrivateDataMap)) {
            body["unionIdPrivateDataMap"] = request.unionIdPrivateDataMap;
        }
        if (!tea_util_1.default.isUnset(request.updateOptions)) {
            body["updateOptions"] = request.updateOptions;
        }
        if (!tea_util_1.default.isUnset(request.userIdPrivateDataMap)) {
            body["userIdPrivateDataMap"] = request.userIdPrivateDataMap;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRobotInteractiveCard",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/robots/interactiveCards`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateRobotInteractiveCardResponse({}));
    }
    async updateRobotInteractiveCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRobotInteractiveCardHeaders({});
        return await this.updateRobotInteractiveCardWithOptions(request, headers, runtime);
    }
    async updateTheGroupRolesOfGroupMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.openRoleIds)) {
            body["openRoleIds"] = request.openRoleIds;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateTheGroupRolesOfGroupMember",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/sceneGroups/members/groupRoles`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateTheGroupRolesOfGroupMemberResponse({}));
    }
    async updateTheGroupRolesOfGroupMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateTheGroupRolesOfGroupMemberHeaders({});
        return await this.updateTheGroupRolesOfGroupMemberWithOptions(request, headers, runtime);
    }
    async addGroupMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appUserIds)) {
            body["appUserIds"] = request.appUserIds;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "addGroupMember",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/groups/members`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddGroupMemberResponse({}));
    }
    async addGroupMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddGroupMemberHeaders({});
        return await this.addGroupMemberWithOptions(request, headers, runtime);
    }
    async removeGroupMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appUserIds)) {
            body["appUserIds"] = request.appUserIds;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "removeGroupMember",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/groups/members/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveGroupMemberResponse({}));
    }
    async removeGroupMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveGroupMemberHeaders({});
        return await this.removeGroupMemberWithOptions(request, headers, runtime);
    }
    async sendDingMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            body["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.message)) {
            body["message"] = request.message;
        }
        if (!tea_util_1.default.isUnset(request.messageType)) {
            body["messageType"] = request.messageType;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.receiverId)) {
            body["receiverId"] = request.receiverId;
        }
        if (!tea_util_1.default.isUnset(request.senderId)) {
            body["senderId"] = request.senderId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "sendDingMessage",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/dingMessages/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendDingMessageResponse({}));
    }
    async sendDingMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendDingMessageHeaders({});
        return await this.sendDingMessageWithOptions(request, headers, runtime);
    }
    async sendMessageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.message)) {
            body["message"] = request.message;
        }
        if (!tea_util_1.default.isUnset(request.messageType)) {
            body["messageType"] = request.messageType;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.receiverId)) {
            body["receiverId"] = request.receiverId;
        }
        if (!tea_util_1.default.isUnset(request.senderId)) {
            body["senderId"] = request.senderId;
        }
        if (!tea_util_1.default.isUnset(request.sourceInfos)) {
            body["sourceInfos"] = request.sourceInfos;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "sendMessage",
            version: "im_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/im/interconnections/messages/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendMessageResponse({}));
    }
    async sendMessage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendMessageHeaders({});
        return await this.sendMessageWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map