"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CfEmploymentRecordResp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptName: 'deptName',
            employeeStatus: 'employeeStatus',
            endDate: 'endDate',
            isLatestRecord: 'isLatestRecord',
            jobLevelName: 'jobLevelName',
            jobPositionCode: 'jobPositionCode',
            jobPositionName: 'jobPositionName',
            jobPostCode: 'jobPostCode',
            jobPostName: 'jobPostName',
            serviceStatus: 'serviceStatus',
            serviceType: 'serviceType',
            startDate: 'startDate',
            workNumbers: 'workNumbers',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptName: 'string',
            employeeStatus: 'string',
            endDate: 'string',
            isLatestRecord: 'boolean',
            jobLevelName: 'string',
            jobPositionCode: 'string',
            jobPositionName: 'string',
            jobPostCode: 'string',
            jobPostName: 'string',
            serviceStatus: 'string',
            serviceType: 'string',
            startDate: 'string',
            workNumbers: 'string',
        };
    }
}
exports.CfEmploymentRecordResp = CfEmploymentRecordResp;
class CfJobLevelResp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            level: 'level',
            name: 'name',
            startDate: 'startDate',
            stopDate: 'stopDate',
        };
    }
    static types() {
        return {
            level: 'number',
            name: 'string',
            startDate: 'string',
            stopDate: 'string',
        };
    }
}
exports.CfJobLevelResp = CfJobLevelResp;
class CfJobPositionResp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobPositionCode: 'jobPositionCode',
            name: 'name',
        };
    }
    static types() {
        return {
            jobPositionCode: 'string',
            name: 'string',
        };
    }
}
exports.CfJobPositionResp = CfJobPositionResp;
class CfJobPostResp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobPostCode: 'jobPostCode',
            name: 'name',
        };
    }
    static types() {
        return {
            jobPostCode: 'string',
            name: 'string',
        };
    }
}
exports.CfJobPostResp = CfJobPostResp;
class CfOrgResp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptName: 'deptName',
            level: 'level',
            organizationCodePath: 'organizationCodePath',
            organizationPath: 'organizationPath',
            parentDeptCode: 'parentDeptCode',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptName: 'string',
            level: 'number',
            organizationCodePath: 'string',
            organizationPath: 'string',
            parentDeptCode: 'string',
        };
    }
}
exports.CfOrgResp = CfOrgResp;
class CfStaffResp extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptName: 'deptName',
            email: 'email',
            mobile: 'mobile',
            name: 'name',
            nickName: 'nickName',
            workNumbers: 'workNumbers',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptName: 'string',
            email: 'string',
            mobile: 'string',
            name: 'string',
            nickName: 'string',
            workNumbers: 'string',
        };
    }
}
exports.CfStaffResp = CfStaffResp;
class OpenAnalyzeDataDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCount: 'deptCount',
            noAlignObjectiveCount: 'noAlignObjectiveCount',
            noKeyActionCount: 'noKeyActionCount',
            objectiveAlignRate: 'objectiveAlignRate',
            objectiveNoSetCount: 'objectiveNoSetCount',
            objectiveRiskCount: 'objectiveRiskCount',
            objectiveSetRate: 'objectiveSetRate',
            onlyOneKeyResultCount: 'onlyOneKeyResultCount',
            onlyOneObjectiveCount: 'onlyOneObjectiveCount',
            progressUpdateRateLast15Days: 'progressUpdateRateLast15Days',
            progressUpdateRateLast30Days: 'progressUpdateRateLast30Days',
            progressUpdateRateLast7Days: 'progressUpdateRateLast7Days',
        };
    }
    static types() {
        return {
            deptCount: 'number',
            noAlignObjectiveCount: 'number',
            noKeyActionCount: 'number',
            objectiveAlignRate: 'number',
            objectiveNoSetCount: 'number',
            objectiveRiskCount: 'number',
            objectiveSetRate: 'number',
            onlyOneKeyResultCount: 'number',
            onlyOneObjectiveCount: 'number',
            progressUpdateRateLast15Days: 'number',
            progressUpdateRateLast30Days: 'number',
            progressUpdateRateLast7Days: 'number',
        };
    }
}
exports.OpenAnalyzeDataDTO = OpenAnalyzeDataDTO;
class OpenKeyResultDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            progress: 'progress',
            status: 'status',
            title: 'title',
            titleMentions: 'titleMentions',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            progress: 'number',
            status: 'number',
            title: 'string',
            titleMentions: { 'type': 'array', 'itemType': TitleMention },
            type: 'number',
        };
    }
}
exports.OpenKeyResultDTO = OpenKeyResultDTO;
class OpenObjectiveDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            executor: 'executor',
            id: 'id',
            keyResults: 'keyResults',
            period: 'period',
            progress: 'progress',
            status: 'status',
            teams: 'teams',
            title: 'title',
        };
    }
    static types() {
        return {
            executor: OpenUserDTO,
            id: 'string',
            keyResults: { 'type': 'array', 'itemType': OpenKeyResultDTO },
            period: OpenPeriodDTO,
            progress: 'number',
            status: 'number',
            teams: { 'type': 'array', 'itemType': OpenTeamDTO },
            title: 'string',
        };
    }
}
exports.OpenObjectiveDTO = OpenObjectiveDTO;
class OpenPeriodDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            id: 'id',
            name: 'name',
            periodBizType: 'periodBizType',
            startDate: 'startDate',
        };
    }
    static types() {
        return {
            endDate: 'number',
            id: 'string',
            name: 'string',
            periodBizType: 'string',
            startDate: 'number',
        };
    }
}
exports.OpenPeriodDTO = OpenPeriodDTO;
class OpenProgressDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            created: 'created',
            creator: 'creator',
            htmlContent: 'htmlContent',
            id: 'id',
            modifier: 'modifier',
            updated: 'updated',
        };
    }
    static types() {
        return {
            created: 'number',
            creator: OpenUserDTO,
            htmlContent: 'string',
            id: 'string',
            modifier: OpenUserDTO,
            updated: 'number',
        };
    }
}
exports.OpenProgressDTO = OpenProgressDTO;
class OpenTeamDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
            openId: 'openId',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
            openId: 'string',
        };
    }
}
exports.OpenTeamDTO = OpenTeamDTO;
class OpenUserDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.OpenUserDTO = OpenUserDTO;
class TitleMention extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            length: 'length',
            offset: 'offset',
            user: 'user',
        };
    }
    static types() {
        return {
            length: 'number',
            offset: 'number',
            user: OpenUserDTO,
        };
    }
}
exports.TitleMention = TitleMention;
class GetAllJobLevelHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAllJobLevelHeaders = GetAllJobLevelHeaders;
class GetAllJobLevelResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CfJobLevelResp },
            requestId: 'string',
        };
    }
}
exports.GetAllJobLevelResponseBody = GetAllJobLevelResponseBody;
class GetAllJobLevelResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAllJobLevelResponseBody,
        };
    }
}
exports.GetAllJobLevelResponse = GetAllJobLevelResponse;
class GetAllJobPositionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAllJobPositionHeaders = GetAllJobPositionHeaders;
class GetAllJobPositionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CfJobPositionResp },
            requestId: 'string',
        };
    }
}
exports.GetAllJobPositionResponseBody = GetAllJobPositionResponseBody;
class GetAllJobPositionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAllJobPositionResponseBody,
        };
    }
}
exports.GetAllJobPositionResponse = GetAllJobPositionResponse;
class GetAllJobPostHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAllJobPostHeaders = GetAllJobPostHeaders;
class GetAllJobPostResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CfJobPostResp },
            requestId: 'string',
        };
    }
}
exports.GetAllJobPostResponseBody = GetAllJobPostResponseBody;
class GetAllJobPostResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAllJobPostResponseBody,
        };
    }
}
exports.GetAllJobPostResponse = GetAllJobPostResponse;
class GetAnalyzeDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAnalyzeDataHeaders = GetAnalyzeDataHeaders;
class GetAnalyzeDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            periodIds: 'periodIds',
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            periodIds: { 'type': 'array', 'itemType': 'string' },
            deptId: 'string',
        };
    }
}
exports.GetAnalyzeDataRequest = GetAnalyzeDataRequest;
class GetAnalyzeDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: OpenAnalyzeDataDTO,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetAnalyzeDataResponseBody = GetAnalyzeDataResponseBody;
class GetAnalyzeDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAnalyzeDataResponseBody,
        };
    }
}
exports.GetAnalyzeDataResponse = GetAnalyzeDataResponse;
class GetChildOrgListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetChildOrgListHeaders = GetChildOrgListHeaders;
class GetChildOrgListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
        };
    }
    static types() {
        return {
            deptCode: 'string',
        };
    }
}
exports.GetChildOrgListRequest = GetChildOrgListRequest;
class GetChildOrgListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CfOrgResp },
            requestId: 'string',
        };
    }
}
exports.GetChildOrgListResponseBody = GetChildOrgListResponseBody;
class GetChildOrgListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetChildOrgListResponseBody,
        };
    }
}
exports.GetChildOrgListResponse = GetChildOrgListResponse;
class GetEmployeeInfoByWorkNoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetEmployeeInfoByWorkNoHeaders = GetEmployeeInfoByWorkNoHeaders;
class GetEmployeeInfoByWorkNoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            workNo: 'string',
        };
    }
}
exports.GetEmployeeInfoByWorkNoRequest = GetEmployeeInfoByWorkNoRequest;
class GetEmployeeInfoByWorkNoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            success: 'success',
        };
    }
    static types() {
        return {
            content: GetEmployeeInfoByWorkNoResponseBodyContent,
            success: 'boolean',
        };
    }
}
exports.GetEmployeeInfoByWorkNoResponseBody = GetEmployeeInfoByWorkNoResponseBody;
class GetEmployeeInfoByWorkNoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetEmployeeInfoByWorkNoResponseBody,
        };
    }
}
exports.GetEmployeeInfoByWorkNoResponse = GetEmployeeInfoByWorkNoResponse;
class GetEmploymentRecordByWorkNoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetEmploymentRecordByWorkNoHeaders = GetEmploymentRecordByWorkNoHeaders;
class GetEmploymentRecordByWorkNoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': CfEmploymentRecordResp },
            requestId: 'string',
        };
    }
}
exports.GetEmploymentRecordByWorkNoResponseBody = GetEmploymentRecordByWorkNoResponseBody;
class GetEmploymentRecordByWorkNoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetEmploymentRecordByWorkNoResponseBody,
        };
    }
}
exports.GetEmploymentRecordByWorkNoResponse = GetEmploymentRecordByWorkNoResponse;
class GetJobPositionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetJobPositionHeaders = GetJobPositionHeaders;
class GetJobPositionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobPositionCode: 'jobPositionCode',
        };
    }
    static types() {
        return {
            jobPositionCode: 'string',
        };
    }
}
exports.GetJobPositionRequest = GetJobPositionRequest;
class GetJobPositionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: GetJobPositionResponseBodyContent,
            requestId: 'string',
        };
    }
}
exports.GetJobPositionResponseBody = GetJobPositionResponseBody;
class GetJobPositionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetJobPositionResponseBody,
        };
    }
}
exports.GetJobPositionResponse = GetJobPositionResponse;
class GetJobPostHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetJobPostHeaders = GetJobPostHeaders;
class GetJobPostRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobPostCode: 'jobPostCode',
        };
    }
    static types() {
        return {
            jobPostCode: 'string',
        };
    }
}
exports.GetJobPostRequest = GetJobPostRequest;
class GetJobPostResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: GetJobPostResponseBodyContent,
            requestId: 'string',
        };
    }
}
exports.GetJobPostResponseBody = GetJobPostResponseBody;
class GetJobPostResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetJobPostResponseBody,
        };
    }
}
exports.GetJobPostResponse = GetJobPostResponse;
class GetOrgInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOrgInfoHeaders = GetOrgInfoHeaders;
class GetOrgInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
        };
    }
    static types() {
        return {
            deptCode: 'string',
        };
    }
}
exports.GetOrgInfoRequest = GetOrgInfoRequest;
class GetOrgInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: GetOrgInfoResponseBodyContent,
            requestId: 'string',
        };
    }
}
exports.GetOrgInfoResponseBody = GetOrgInfoResponseBody;
class GetOrgInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOrgInfoResponseBody,
        };
    }
}
exports.GetOrgInfoResponse = GetOrgInfoResponse;
class GetStaffInfoByWorkNoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetStaffInfoByWorkNoHeaders = GetStaffInfoByWorkNoHeaders;
class GetStaffInfoByWorkNoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            workNumbers: 'workNumbers',
        };
    }
    static types() {
        return {
            workNumbers: 'string',
        };
    }
}
exports.GetStaffInfoByWorkNoRequest = GetStaffInfoByWorkNoRequest;
class GetStaffInfoByWorkNoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: GetStaffInfoByWorkNoResponseBodyContent,
            requestId: 'string',
        };
    }
}
exports.GetStaffInfoByWorkNoResponseBody = GetStaffInfoByWorkNoResponseBody;
class GetStaffInfoByWorkNoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetStaffInfoByWorkNoResponseBody,
        };
    }
}
exports.GetStaffInfoByWorkNoResponse = GetStaffInfoByWorkNoResponse;
class GetStaffPageQueryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetStaffPageQueryHeaders = GetStaffPageQueryHeaders;
class GetStaffPageQueryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            name: 'name',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            name: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            workNo: 'string',
        };
    }
}
exports.GetStaffPageQueryRequest = GetStaffPageQueryRequest;
class GetStaffPageQueryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            content: GetStaffPageQueryResponseBodyContent,
            requestId: 'string',
        };
    }
}
exports.GetStaffPageQueryResponseBody = GetStaffPageQueryResponseBody;
class GetStaffPageQueryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetStaffPageQueryResponseBody,
        };
    }
}
exports.GetStaffPageQueryResponse = GetStaffPageQueryResponse;
class GetUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserHeaders = GetUserHeaders;
class GetUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            okrUserId: 'okrUserId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            okrUserId: 'string',
            userId: 'string',
        };
    }
}
exports.GetUserRequest = GetUserRequest;
class GetUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: OpenUserDTO,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.GetUserResponseBody = GetUserResponseBody;
class GetUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserResponseBody,
        };
    }
}
exports.GetUserResponse = GetUserResponse;
class ListAnalyzePeriodsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListAnalyzePeriodsHeaders = ListAnalyzePeriodsHeaders;
class ListAnalyzePeriodsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': OpenPeriodDTO },
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListAnalyzePeriodsResponseBody = ListAnalyzePeriodsResponseBody;
class ListAnalyzePeriodsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAnalyzePeriodsResponseBody,
        };
    }
}
exports.ListAnalyzePeriodsResponse = ListAnalyzePeriodsResponse;
class ListObjectiveByIdsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListObjectiveByIdsHeaders = ListObjectiveByIdsHeaders;
class ListObjectiveByIdsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            objectiveIds: 'objectiveIds',
        };
    }
    static types() {
        return {
            objectiveIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListObjectiveByIdsRequest = ListObjectiveByIdsRequest;
class ListObjectiveByIdsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': OpenObjectiveDTO },
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListObjectiveByIdsResponseBody = ListObjectiveByIdsResponseBody;
class ListObjectiveByIdsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListObjectiveByIdsResponseBody,
        };
    }
}
exports.ListObjectiveByIdsResponse = ListObjectiveByIdsResponse;
class ListObjectiveByUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListObjectiveByUserHeaders = ListObjectiveByUserHeaders;
class ListObjectiveByUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            userId: 'userId',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            userId: 'string',
        };
    }
}
exports.ListObjectiveByUserRequest = ListObjectiveByUserRequest;
class ListObjectiveByUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: ListObjectiveByUserResponseBodyContent,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListObjectiveByUserResponseBody = ListObjectiveByUserResponseBody;
class ListObjectiveByUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListObjectiveByUserResponseBody,
        };
    }
}
exports.ListObjectiveByUserResponse = ListObjectiveByUserResponse;
class ListProgressByIdsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListProgressByIdsHeaders = ListProgressByIdsHeaders;
class ListProgressByIdsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            progressIds: 'progressIds',
        };
    }
    static types() {
        return {
            progressIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListProgressByIdsRequest = ListProgressByIdsRequest;
class ListProgressByIdsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': OpenProgressDTO },
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.ListProgressByIdsResponseBody = ListProgressByIdsResponseBody;
class ListProgressByIdsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListProgressByIdsResponseBody,
        };
    }
}
exports.ListProgressByIdsResponse = ListProgressByIdsResponse;
class PageListObjectiveProgressHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PageListObjectiveProgressHeaders = PageListObjectiveProgressHeaders;
class PageListObjectiveProgressRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            objectiveId: 'objectiveId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            objectiveId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.PageListObjectiveProgressRequest = PageListObjectiveProgressRequest;
class PageListObjectiveProgressResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: PageListObjectiveProgressResponseBodyContent,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.PageListObjectiveProgressResponseBody = PageListObjectiveProgressResponseBody;
class PageListObjectiveProgressResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PageListObjectiveProgressResponseBody,
        };
    }
}
exports.PageListObjectiveProgressResponse = PageListObjectiveProgressResponse;
class TransferUserObjectiveHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.TransferUserObjectiveHeaders = TransferUserObjectiveHeaders;
class TransferUserObjectiveRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            objectiveId: 'objectiveId',
            targetUserId: 'targetUserId',
        };
    }
    static types() {
        return {
            objectiveId: 'string',
            targetUserId: 'string',
        };
    }
}
exports.TransferUserObjectiveRequest = TransferUserObjectiveRequest;
class TransferUserObjectiveResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: 'boolean',
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.TransferUserObjectiveResponseBody = TransferUserObjectiveResponseBody;
class TransferUserObjectiveResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TransferUserObjectiveResponseBody,
        };
    }
}
exports.TransferUserObjectiveResponse = TransferUserObjectiveResponse;
class GetEmployeeInfoByWorkNoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            name: 'string',
            workNo: 'string',
        };
    }
}
exports.GetEmployeeInfoByWorkNoResponseBodyContent = GetEmployeeInfoByWorkNoResponseBodyContent;
class GetJobPositionResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            establishDate: 'establishDate',
            jobCode: 'jobCode',
            jobRequirements: 'jobRequirements',
            name: 'name',
            startDate: 'startDate',
            stopDate: 'stopDate',
        };
    }
    static types() {
        return {
            description: 'string',
            establishDate: 'string',
            jobCode: 'string',
            jobRequirements: 'string',
            name: 'string',
            startDate: 'string',
            stopDate: 'string',
        };
    }
}
exports.GetJobPositionResponseBodyContent = GetJobPositionResponseBodyContent;
class GetJobPostResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            establishDate: 'establishDate',
            name: 'name',
            startDate: 'startDate',
            stopDate: 'stopDate',
        };
    }
    static types() {
        return {
            code: 'string',
            establishDate: 'string',
            name: 'string',
            startDate: 'string',
            stopDate: 'string',
        };
    }
}
exports.GetJobPostResponseBodyContent = GetJobPostResponseBodyContent;
class GetOrgInfoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptName: 'deptName',
            deptNum: 'deptNum',
            level: 'level',
            organizationCodePath: 'organizationCodePath',
            organizationPath: 'organizationPath',
            parentDeptCode: 'parentDeptCode',
            shortName: 'shortName',
            startDate: 'startDate',
            stopDate: 'stopDate',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptName: 'string',
            deptNum: 'string',
            level: 'string',
            organizationCodePath: 'string',
            organizationPath: 'string',
            parentDeptCode: 'string',
            shortName: 'string',
            startDate: 'string',
            stopDate: 'string',
        };
    }
}
exports.GetOrgInfoResponseBodyContent = GetOrgInfoResponseBodyContent;
class GetStaffInfoByWorkNoResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptCode: 'deptCode',
            deptName: 'deptName',
            email: 'email',
            employType: 'employType',
            employeeStatus: 'employeeStatus',
            jobLevelName: 'jobLevelName',
            jobPositionCode: 'jobPositionCode',
            jobPositionName: 'jobPositionName',
            jobPostCode: 'jobPostCode',
            jobPostName: 'jobPostName',
            mobile: 'mobile',
            name: 'name',
            nickName: 'nickName',
            workNumbers: 'workNumbers',
        };
    }
    static types() {
        return {
            deptCode: 'string',
            deptName: 'string',
            email: 'string',
            employType: 'string',
            employeeStatus: 'string',
            jobLevelName: 'string',
            jobPositionCode: 'string',
            jobPositionName: 'string',
            jobPostCode: 'string',
            jobPostName: 'string',
            mobile: 'string',
            name: 'string',
            nickName: 'string',
            workNumbers: 'string',
        };
    }
}
exports.GetStaffInfoByWorkNoResponseBodyContent = GetStaffInfoByWorkNoResponseBodyContent;
class GetStaffPageQueryResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': CfStaffResp },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetStaffPageQueryResponseBodyContent = GetStaffPageQueryResponseBodyContent;
class ListObjectiveByUserResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            count: 'count',
            objectives: 'objectives',
        };
    }
    static types() {
        return {
            count: 'number',
            objectives: { 'type': 'array', 'itemType': OpenObjectiveDTO },
        };
    }
}
exports.ListObjectiveByUserResponseBodyContent = ListObjectiveByUserResponseBodyContent;
class PageListObjectiveProgressResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            count: 'count',
            progressList: 'progressList',
        };
    }
    static types() {
        return {
            count: 'number',
            progressList: { 'type': 'array', 'itemType': OpenProgressDTO },
        };
    }
}
exports.PageListObjectiveProgressResponseBodyContent = PageListObjectiveProgressResponseBodyContent;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async getAllJobLevelWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetAllJobLevel",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/jobLevels`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAllJobLevelResponse({}));
    }
    async getAllJobLevel() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAllJobLevelHeaders({});
        return await this.getAllJobLevelWithOptions(headers, runtime);
    }
    async getAllJobPositionWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetAllJobPosition",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/jobPositions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAllJobPositionResponse({}));
    }
    async getAllJobPosition() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAllJobPositionHeaders({});
        return await this.getAllJobPositionWithOptions(headers, runtime);
    }
    async getAllJobPostWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetAllJobPost",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/jobPosts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAllJobPostResponse({}));
    }
    async getAllJobPost() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAllJobPostHeaders({});
        return await this.getAllJobPostWithOptions(headers, runtime);
    }
    async getAnalyzeDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.periodIds)) {
            body["periodIds"] = request.periodIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetAnalyzeData",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/okr/analyses/datas/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAnalyzeDataResponse({}));
    }
    async getAnalyzeData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAnalyzeDataHeaders({});
        return await this.getAnalyzeDataWithOptions(request, headers, runtime);
    }
    async getChildOrgListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptCode)) {
            query["deptCode"] = request.deptCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetChildOrgList",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/organizations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetChildOrgListResponse({}));
    }
    async getChildOrgList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetChildOrgListHeaders({});
        return await this.getChildOrgListWithOptions(request, headers, runtime);
    }
    async getEmployeeInfoByWorkNoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.workNo)) {
            query["workNo"] = request.workNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetEmployeeInfoByWorkNo",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/workNumbers/employees`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetEmployeeInfoByWorkNoResponse({}));
    }
    async getEmployeeInfoByWorkNo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetEmployeeInfoByWorkNoHeaders({});
        return await this.getEmployeeInfoByWorkNoWithOptions(request, headers, runtime);
    }
    async getEmploymentRecordByWorkNoWithOptions(workNumbers, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetEmploymentRecordByWorkNo",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/users/workNumber/${workNumbers}employmentRecords`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetEmploymentRecordByWorkNoResponse({}));
    }
    async getEmploymentRecordByWorkNo(workNumbers) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetEmploymentRecordByWorkNoHeaders({});
        return await this.getEmploymentRecordByWorkNoWithOptions(workNumbers, headers, runtime);
    }
    async getJobPositionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.jobPositionCode)) {
            query["jobPositionCode"] = request.jobPositionCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetJobPosition",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/jobPositions/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetJobPositionResponse({}));
    }
    async getJobPosition(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetJobPositionHeaders({});
        return await this.getJobPositionWithOptions(request, headers, runtime);
    }
    async getJobPostWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.jobPostCode)) {
            query["jobPostCode"] = request.jobPostCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetJobPost",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/jobPosts/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetJobPostResponse({}));
    }
    async getJobPost(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetJobPostHeaders({});
        return await this.getJobPostWithOptions(request, headers, runtime);
    }
    async getOrgInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptCode)) {
            query["deptCode"] = request.deptCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetOrgInfo",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/organizations/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOrgInfoResponse({}));
    }
    async getOrgInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOrgInfoHeaders({});
        return await this.getOrgInfoWithOptions(request, headers, runtime);
    }
    async getStaffInfoByWorkNoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.workNumbers)) {
            query["workNumbers"] = request.workNumbers;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetStaffInfoByWorkNo",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetStaffInfoByWorkNoResponse({}));
    }
    async getStaffInfoByWorkNo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetStaffInfoByWorkNoHeaders({});
        return await this.getStaffInfoByWorkNoWithOptions(request, headers, runtime);
    }
    async getStaffPageQueryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptCode)) {
            query["deptCode"] = request.deptCode;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.workNo)) {
            query["workNo"] = request.workNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetStaffPageQuery",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/users/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetStaffPageQueryResponse({}));
    }
    async getStaffPageQuery(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetStaffPageQueryHeaders({});
        return await this.getStaffPageQueryWithOptions(request, headers, runtime);
    }
    async getUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.okrUserId)) {
            query["okrUserId"] = request.okrUserId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUser",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/okr/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserResponse({}));
    }
    async getUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserHeaders({});
        return await this.getUserWithOptions(request, headers, runtime);
    }
    async listAnalyzePeriodsWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListAnalyzePeriods",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/okr/analyses/periods`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAnalyzePeriodsResponse({}));
    }
    async listAnalyzePeriods() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAnalyzePeriodsHeaders({});
        return await this.listAnalyzePeriodsWithOptions(headers, runtime);
    }
    async listObjectiveByIdsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.objectiveIds)) {
            body["objectiveIds"] = request.objectiveIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListObjectiveByIds",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/okr/objectives/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListObjectiveByIdsResponse({}));
    }
    async listObjectiveByIds(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListObjectiveByIdsHeaders({});
        return await this.listObjectiveByIdsWithOptions(request, headers, runtime);
    }
    async listObjectiveByUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListObjectiveByUser",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/okr/users/objectives`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListObjectiveByUserResponse({}));
    }
    async listObjectiveByUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListObjectiveByUserHeaders({});
        return await this.listObjectiveByUserWithOptions(request, headers, runtime);
    }
    async listProgressByIdsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.progressIds)) {
            body["progressIds"] = request.progressIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListProgressByIds",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/okr/objectives/progresses/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListProgressByIdsResponse({}));
    }
    async listProgressByIds(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListProgressByIdsHeaders({});
        return await this.listProgressByIdsWithOptions(request, headers, runtime);
    }
    async pageListObjectiveProgressWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.objectiveId)) {
            query["objectiveId"] = request.objectiveId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "PageListObjectiveProgress",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/okr/objectives/progresses/records`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PageListObjectiveProgressResponse({}));
    }
    async pageListObjectiveProgress(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PageListObjectiveProgressHeaders({});
        return await this.pageListObjectiveProgressWithOptions(request, headers, runtime);
    }
    async transferUserObjectiveWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.objectiveId)) {
            query["objectiveId"] = request.objectiveId;
        }
        if (!tea_util_1.default.isUnset(request.targetUserId)) {
            query["targetUserId"] = request.targetUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "TransferUserObjective",
            version: "chengfeng_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/chengfeng/okr/objectives/transfer`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TransferUserObjectiveResponse({}));
    }
    async transferUserObjective(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TransferUserObjectiveHeaders({});
        return await this.transferUserObjectiveWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map