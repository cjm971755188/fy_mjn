"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class DentryAppPropertiesValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            value: 'value',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
            visibility: 'string',
        };
    }
}
exports.DentryAppPropertiesValue = DentryAppPropertiesValue;
class AddPermissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddPermissionHeaders = AddPermissionHeaders;
class AddPermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            option: 'option',
            roleId: 'roleId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': AddPermissionRequestMembers },
            option: AddPermissionRequestOption,
            roleId: 'string',
            unionId: 'string',
        };
    }
}
exports.AddPermissionRequest = AddPermissionRequest;
class AddPermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.AddPermissionResponseBody = AddPermissionResponseBody;
class AddPermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddPermissionResponseBody,
        };
    }
}
exports.AddPermissionResponse = AddPermissionResponse;
class CommitFileHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CommitFileHeaders = CommitFileHeaders;
class CommitFileRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            option: 'option',
            uploadKey: 'uploadKey',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            option: CommitFileRequestOption,
            uploadKey: 'string',
            unionId: 'string',
        };
    }
}
exports.CommitFileRequest = CommitFileRequest;
class CommitFileResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dentry: 'dentry',
        };
    }
    static types() {
        return {
            dentry: CommitFileResponseBodyDentry,
        };
    }
}
exports.CommitFileResponseBody = CommitFileResponseBody;
class CommitFileResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CommitFileResponseBody,
        };
    }
}
exports.CommitFileResponse = CommitFileResponse;
class DeletePermissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeletePermissionHeaders = DeletePermissionHeaders;
class DeletePermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            roleId: 'roleId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': DeletePermissionRequestMembers },
            roleId: 'string',
            unionId: 'string',
        };
    }
}
exports.DeletePermissionRequest = DeletePermissionRequest;
class DeletePermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeletePermissionResponseBody = DeletePermissionResponseBody;
class DeletePermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeletePermissionResponseBody,
        };
    }
}
exports.DeletePermissionResponse = DeletePermissionResponse;
class GetFileUploadInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetFileUploadInfoHeaders = GetFileUploadInfoHeaders;
class GetFileUploadInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            option: 'option',
            protocol: 'protocol',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: GetFileUploadInfoRequestOption,
            protocol: 'string',
            unionId: 'string',
        };
    }
}
exports.GetFileUploadInfoRequest = GetFileUploadInfoRequest;
class GetFileUploadInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headerSignatureInfo: 'headerSignatureInfo',
            protocol: 'protocol',
            storageDriver: 'storageDriver',
            uploadKey: 'uploadKey',
        };
    }
    static types() {
        return {
            headerSignatureInfo: GetFileUploadInfoResponseBodyHeaderSignatureInfo,
            protocol: 'string',
            storageDriver: 'string',
            uploadKey: 'string',
        };
    }
}
exports.GetFileUploadInfoResponseBody = GetFileUploadInfoResponseBody;
class GetFileUploadInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFileUploadInfoResponseBody,
        };
    }
}
exports.GetFileUploadInfoResponse = GetFileUploadInfoResponse;
class GetPermissionInheritanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPermissionInheritanceHeaders = GetPermissionInheritanceHeaders;
class GetPermissionInheritanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.GetPermissionInheritanceRequest = GetPermissionInheritanceRequest;
class GetPermissionInheritanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inheritance: 'inheritance',
        };
    }
    static types() {
        return {
            inheritance: 'string',
        };
    }
}
exports.GetPermissionInheritanceResponseBody = GetPermissionInheritanceResponseBody;
class GetPermissionInheritanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPermissionInheritanceResponseBody,
        };
    }
}
exports.GetPermissionInheritanceResponse = GetPermissionInheritanceResponse;
class ListPermissionsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListPermissionsHeaders = ListPermissionsHeaders;
class ListPermissionsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            option: 'option',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            option: ListPermissionsRequestOption,
            unionId: 'string',
        };
    }
}
exports.ListPermissionsRequest = ListPermissionsRequest;
class ListPermissionsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            permissions: 'permissions',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            permissions: { 'type': 'array', 'itemType': ListPermissionsResponseBodyPermissions },
        };
    }
}
exports.ListPermissionsResponseBody = ListPermissionsResponseBody;
class ListPermissionsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPermissionsResponseBody,
        };
    }
}
exports.ListPermissionsResponse = ListPermissionsResponse;
class ManagerGetDefaultHandOverUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ManagerGetDefaultHandOverUserHeaders = ManagerGetDefaultHandOverUserHeaders;
class ManagerGetDefaultHandOverUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.ManagerGetDefaultHandOverUserRequest = ManagerGetDefaultHandOverUserRequest;
class ManagerGetDefaultHandOverUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            defaultHandoverUserId: 'defaultHandoverUserId',
        };
    }
    static types() {
        return {
            defaultHandoverUserId: 'string',
        };
    }
}
exports.ManagerGetDefaultHandOverUserResponseBody = ManagerGetDefaultHandOverUserResponseBody;
class ManagerGetDefaultHandOverUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ManagerGetDefaultHandOverUserResponseBody,
        };
    }
}
exports.ManagerGetDefaultHandOverUserResponse = ManagerGetDefaultHandOverUserResponse;
class ManagerSetDefaultHandOverUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ManagerSetDefaultHandOverUserHeaders = ManagerSetDefaultHandOverUserHeaders;
class ManagerSetDefaultHandOverUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            defaultHandoverUserId: 'defaultHandoverUserId',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            defaultHandoverUserId: 'string',
            operatorId: 'string',
        };
    }
}
exports.ManagerSetDefaultHandOverUserRequest = ManagerSetDefaultHandOverUserRequest;
class ManagerSetDefaultHandOverUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.ManagerSetDefaultHandOverUserResponseBody = ManagerSetDefaultHandOverUserResponseBody;
class ManagerSetDefaultHandOverUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ManagerSetDefaultHandOverUserResponseBody,
        };
    }
}
exports.ManagerSetDefaultHandOverUserResponse = ManagerSetDefaultHandOverUserResponse;
class SearchDentriesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchDentriesHeaders = SearchDentriesHeaders;
class SearchDentriesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            keyword: 'keyword',
            option: 'option',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            keyword: 'string',
            option: SearchDentriesRequestOption,
            operatorId: 'string',
        };
    }
}
exports.SearchDentriesRequest = SearchDentriesRequest;
class SearchDentriesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'items',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': SearchDentriesResponseBodyItems },
            nextToken: 'string',
        };
    }
}
exports.SearchDentriesResponseBody = SearchDentriesResponseBody;
class SearchDentriesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchDentriesResponseBody,
        };
    }
}
exports.SearchDentriesResponse = SearchDentriesResponse;
class SearchWorkspacesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchWorkspacesHeaders = SearchWorkspacesHeaders;
class SearchWorkspacesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            keyword: 'keyword',
            option: 'option',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            keyword: 'string',
            option: SearchWorkspacesRequestOption,
            operatorId: 'string',
        };
    }
}
exports.SearchWorkspacesRequest = SearchWorkspacesRequest;
class SearchWorkspacesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            items: 'items',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': SearchWorkspacesResponseBodyItems },
            nextToken: 'string',
        };
    }
}
exports.SearchWorkspacesResponseBody = SearchWorkspacesResponseBody;
class SearchWorkspacesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchWorkspacesResponseBody,
        };
    }
}
exports.SearchWorkspacesResponse = SearchWorkspacesResponse;
class SetPermissionInheritanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetPermissionInheritanceHeaders = SetPermissionInheritanceHeaders;
class SetPermissionInheritanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inheritance: 'inheritance',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            inheritance: 'string',
            unionId: 'string',
        };
    }
}
exports.SetPermissionInheritanceRequest = SetPermissionInheritanceRequest;
class SetPermissionInheritanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.SetPermissionInheritanceResponseBody = SetPermissionInheritanceResponseBody;
class SetPermissionInheritanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetPermissionInheritanceResponseBody,
        };
    }
}
exports.SetPermissionInheritanceResponse = SetPermissionInheritanceResponse;
class UpdatePermissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdatePermissionHeaders = UpdatePermissionHeaders;
class UpdatePermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
            option: 'option',
            roleId: 'roleId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': UpdatePermissionRequestMembers },
            option: UpdatePermissionRequestOption,
            roleId: 'string',
            unionId: 'string',
        };
    }
}
exports.UpdatePermissionRequest = UpdatePermissionRequest;
class UpdatePermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdatePermissionResponseBody = UpdatePermissionResponseBody;
class UpdatePermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdatePermissionResponseBody,
        };
    }
}
exports.UpdatePermissionResponse = UpdatePermissionResponse;
class AddPermissionRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            type: 'type',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'string',
            type: 'string',
        };
    }
}
exports.AddPermissionRequestMembers = AddPermissionRequestMembers;
class AddPermissionRequestOption extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            duration: 'duration',
        };
    }
    static types() {
        return {
            duration: 'number',
        };
    }
}
exports.AddPermissionRequestOption = AddPermissionRequestOption;
class CommitFileRequestOptionAppProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            value: 'value',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
            visibility: 'string',
        };
    }
}
exports.CommitFileRequestOptionAppProperties = CommitFileRequestOptionAppProperties;
class CommitFileRequestOption extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appProperties: 'appProperties',
            conflictStrategy: 'conflictStrategy',
            convertToOnlineDoc: 'convertToOnlineDoc',
            convertToOnlineDocTargetDocumentType: 'convertToOnlineDocTargetDocumentType',
            size: 'size',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'array', 'itemType': CommitFileRequestOptionAppProperties },
            conflictStrategy: 'string',
            convertToOnlineDoc: 'boolean',
            convertToOnlineDocTargetDocumentType: 'string',
            size: 'number',
        };
    }
}
exports.CommitFileRequestOption = CommitFileRequestOption;
class CommitFileResponseBodyDentryProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            readOnly: 'readOnly',
        };
    }
    static types() {
        return {
            readOnly: 'boolean',
        };
    }
}
exports.CommitFileResponseBodyDentryProperties = CommitFileResponseBodyDentryProperties;
class CommitFileResponseBodyDentryThumbnail extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            height: 'height',
            url: 'url',
            width: 'width',
        };
    }
    static types() {
        return {
            height: 'number',
            url: 'string',
            width: 'number',
        };
    }
}
exports.CommitFileResponseBodyDentryThumbnail = CommitFileResponseBodyDentryThumbnail;
class CommitFileResponseBodyDentry extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appProperties: 'appProperties',
            category: 'category',
            createTime: 'createTime',
            creatorId: 'creatorId',
            extension: 'extension',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            name: 'name',
            parentId: 'parentId',
            partitionType: 'partitionType',
            path: 'path',
            properties: 'properties',
            size: 'size',
            spaceId: 'spaceId',
            status: 'status',
            storageDriver: 'storageDriver',
            thumbnail: 'thumbnail',
            type: 'type',
            uuid: 'uuid',
            version: 'version',
        };
    }
    static types() {
        return {
            appProperties: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': DentryAppPropertiesValue } },
            category: 'string',
            createTime: 'string',
            creatorId: 'string',
            extension: 'string',
            id: 'string',
            modifiedTime: 'string',
            modifierId: 'string',
            name: 'string',
            parentId: 'string',
            partitionType: 'string',
            path: 'string',
            properties: CommitFileResponseBodyDentryProperties,
            size: 'number',
            spaceId: 'string',
            status: 'string',
            storageDriver: 'string',
            thumbnail: CommitFileResponseBodyDentryThumbnail,
            type: 'string',
            uuid: 'string',
            version: 'number',
        };
    }
}
exports.CommitFileResponseBodyDentry = CommitFileResponseBodyDentry;
class DeletePermissionRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            type: 'type',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'string',
            type: 'string',
        };
    }
}
exports.DeletePermissionRequestMembers = DeletePermissionRequestMembers;
class GetFileUploadInfoRequestOptionPreCheckParam extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            size: 'size',
        };
    }
    static types() {
        return {
            name: 'string',
            size: 'number',
        };
    }
}
exports.GetFileUploadInfoRequestOptionPreCheckParam = GetFileUploadInfoRequestOptionPreCheckParam;
class GetFileUploadInfoRequestOption extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            preCheckParam: 'preCheckParam',
            preferIntranet: 'preferIntranet',
            preferRegion: 'preferRegion',
            storageDriver: 'storageDriver',
        };
    }
    static types() {
        return {
            preCheckParam: GetFileUploadInfoRequestOptionPreCheckParam,
            preferIntranet: 'boolean',
            preferRegion: 'string',
            storageDriver: 'string',
        };
    }
}
exports.GetFileUploadInfoRequestOption = GetFileUploadInfoRequestOption;
class GetFileUploadInfoResponseBodyHeaderSignatureInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            expirationSeconds: 'expirationSeconds',
            headers: 'headers',
            internalResourceUrls: 'internalResourceUrls',
            region: 'region',
            resourceUrls: 'resourceUrls',
        };
    }
    static types() {
        return {
            expirationSeconds: 'number',
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            internalResourceUrls: { 'type': 'array', 'itemType': 'string' },
            region: 'string',
            resourceUrls: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetFileUploadInfoResponseBodyHeaderSignatureInfo = GetFileUploadInfoResponseBodyHeaderSignatureInfo;
class ListPermissionsRequestOption extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            filterRoleIds: 'filterRoleIds',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            filterRoleIds: { 'type': 'array', 'itemType': 'string' },
            maxResults: 'number',
            nextToken: 'string',
        };
    }
}
exports.ListPermissionsRequestOption = ListPermissionsRequestOption;
class ListPermissionsResponseBodyPermissionsMember extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            type: 'type',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'string',
            type: 'string',
        };
    }
}
exports.ListPermissionsResponseBodyPermissionsMember = ListPermissionsResponseBodyPermissionsMember;
class ListPermissionsResponseBodyPermissionsRole extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
        };
    }
}
exports.ListPermissionsResponseBodyPermissionsRole = ListPermissionsResponseBodyPermissionsRole;
class ListPermissionsResponseBodyPermissions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dentryUuid: 'dentryUuid',
            duration: 'duration',
            member: 'member',
            role: 'role',
        };
    }
    static types() {
        return {
            dentryUuid: 'string',
            duration: 'number',
            member: ListPermissionsResponseBodyPermissionsMember,
            role: ListPermissionsResponseBodyPermissionsRole,
        };
    }
}
exports.ListPermissionsResponseBodyPermissions = ListPermissionsResponseBodyPermissions;
class SearchDentriesRequestOptionCreateTimeRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            startTime: 'number',
        };
    }
}
exports.SearchDentriesRequestOptionCreateTimeRange = SearchDentriesRequestOptionCreateTimeRange;
class SearchDentriesRequestOptionVisitTimeRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            startTime: 'number',
        };
    }
}
exports.SearchDentriesRequestOptionVisitTimeRange = SearchDentriesRequestOptionVisitTimeRange;
class SearchDentriesRequestOption extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTimeRange: 'createTimeRange',
            creatorIds: 'creatorIds',
            dentryCategories: 'dentryCategories',
            maxResults: 'maxResults',
            modifierIds: 'modifierIds',
            nextToken: 'nextToken',
            visitTimeRange: 'visitTimeRange',
        };
    }
    static types() {
        return {
            createTimeRange: SearchDentriesRequestOptionCreateTimeRange,
            creatorIds: { 'type': 'array', 'itemType': 'string' },
            dentryCategories: { 'type': 'array', 'itemType': 'string' },
            maxResults: 'number',
            modifierIds: { 'type': 'array', 'itemType': 'string' },
            nextToken: 'string',
            visitTimeRange: SearchDentriesRequestOptionVisitTimeRange,
        };
    }
}
exports.SearchDentriesRequestOption = SearchDentriesRequestOption;
class SearchDentriesResponseBodyItemsCreator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.SearchDentriesResponseBodyItemsCreator = SearchDentriesResponseBodyItemsCreator;
class SearchDentriesResponseBodyItemsModifier extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.SearchDentriesResponseBodyItemsModifier = SearchDentriesResponseBodyItemsModifier;
class SearchDentriesResponseBodyItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            creator: 'creator',
            dentryUuid: 'dentryUuid',
            modifier: 'modifier',
            name: 'name',
        };
    }
    static types() {
        return {
            creator: SearchDentriesResponseBodyItemsCreator,
            dentryUuid: 'string',
            modifier: SearchDentriesResponseBodyItemsModifier,
            name: 'string',
        };
    }
}
exports.SearchDentriesResponseBodyItems = SearchDentriesResponseBodyItems;
class SearchWorkspacesRequestOption extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
        };
    }
}
exports.SearchWorkspacesRequestOption = SearchWorkspacesRequestOption;
class SearchWorkspacesResponseBodyItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            url: 'url',
            workspaceId: 'workspaceId',
        };
    }
    static types() {
        return {
            name: 'string',
            url: 'string',
            workspaceId: 'string',
        };
    }
}
exports.SearchWorkspacesResponseBodyItems = SearchWorkspacesResponseBodyItems;
class UpdatePermissionRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            id: 'id',
            type: 'type',
        };
    }
    static types() {
        return {
            corpId: 'string',
            id: 'string',
            type: 'string',
        };
    }
}
exports.UpdatePermissionRequestMembers = UpdatePermissionRequestMembers;
class UpdatePermissionRequestOption extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            duration: 'duration',
        };
    }
    static types() {
        return {
            duration: 'number',
        };
    }
}
exports.UpdatePermissionRequestOption = UpdatePermissionRequestOption;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addPermissionWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.roleId)) {
            body["roleId"] = request.roleId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddPermission",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/spaces/dentries/${dentryUuid}/permissions`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddPermissionResponse({}));
    }
    async addPermission(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddPermissionHeaders({});
        return await this.addPermissionWithOptions(dentryUuid, request, headers, runtime);
    }
    async commitFileWithOptions(parentDentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.uploadKey)) {
            body["uploadKey"] = request.uploadKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CommitFile",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/spaces/files/${parentDentryUuid}/commit`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CommitFileResponse({}));
    }
    async commitFile(parentDentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CommitFileHeaders({});
        return await this.commitFileWithOptions(parentDentryUuid, request, headers, runtime);
    }
    async deletePermissionWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.roleId)) {
            body["roleId"] = request.roleId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeletePermission",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/spaces/dentries/${dentryUuid}/permissions/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeletePermissionResponse({}));
    }
    async deletePermission(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeletePermissionHeaders({});
        return await this.deletePermissionWithOptions(dentryUuid, request, headers, runtime);
    }
    async getFileUploadInfoWithOptions(parentDentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.protocol)) {
            body["protocol"] = request.protocol;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetFileUploadInfo",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/spaces/files/${parentDentryUuid}/uploadInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFileUploadInfoResponse({}));
    }
    async getFileUploadInfo(parentDentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFileUploadInfoHeaders({});
        return await this.getFileUploadInfoWithOptions(parentDentryUuid, request, headers, runtime);
    }
    async getPermissionInheritanceWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPermissionInheritance",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/spaces/dentries/${dentryUuid}/permissions/inheritances`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPermissionInheritanceResponse({}));
    }
    async getPermissionInheritance(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPermissionInheritanceHeaders({});
        return await this.getPermissionInheritanceWithOptions(dentryUuid, request, headers, runtime);
    }
    async listPermissionsWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListPermissions",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/spaces/dentries/${dentryUuid}/permissions/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListPermissionsResponse({}));
    }
    async listPermissions(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListPermissionsHeaders({});
        return await this.listPermissionsWithOptions(dentryUuid, request, headers, runtime);
    }
    async managerGetDefaultHandOverUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ManagerGetDefaultHandOverUser",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/managementSettings/defaultHandOverUsers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ManagerGetDefaultHandOverUserResponse({}));
    }
    async managerGetDefaultHandOverUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ManagerGetDefaultHandOverUserHeaders({});
        return await this.managerGetDefaultHandOverUserWithOptions(request, headers, runtime);
    }
    async managerSetDefaultHandOverUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.defaultHandoverUserId)) {
            body["defaultHandoverUserId"] = request.defaultHandoverUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ManagerSetDefaultHandOverUser",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/managementSettings/defaultHandOverUsers/set`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ManagerSetDefaultHandOverUserResponse({}));
    }
    async managerSetDefaultHandOverUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ManagerSetDefaultHandOverUserHeaders({});
        return await this.managerSetDefaultHandOverUserWithOptions(request, headers, runtime);
    }
    async searchDentriesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.keyword)) {
            body["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchDentries",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/dentries/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchDentriesResponse({}));
    }
    async searchDentries(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchDentriesHeaders({});
        return await this.searchDentriesWithOptions(request, headers, runtime);
    }
    async searchWorkspacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.keyword)) {
            body["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchWorkspaces",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/workspaces/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchWorkspacesResponse({}));
    }
    async searchWorkspaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchWorkspacesHeaders({});
        return await this.searchWorkspacesWithOptions(request, headers, runtime);
    }
    async setPermissionInheritanceWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.inheritance)) {
            body["inheritance"] = request.inheritance;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetPermissionInheritance",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/spaces/dentries/${dentryUuid}/permissions/inheritances`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetPermissionInheritanceResponse({}));
    }
    async setPermissionInheritance(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetPermissionInheritanceHeaders({});
        return await this.setPermissionInheritanceWithOptions(dentryUuid, request, headers, runtime);
    }
    async updatePermissionWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.roleId)) {
            body["roleId"] = request.roleId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdatePermission",
            version: "storage_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/storage/spaces/dentries/${dentryUuid}/permissions`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdatePermissionResponse({}));
    }
    async updatePermission(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdatePermissionHeaders({});
        return await this.updatePermissionWithOptions(dentryUuid, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map