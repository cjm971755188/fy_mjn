"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class BatchInsertBizObjectHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchInsertBizObjectHeaders = BatchInsertBizObjectHeaders;
class BatchInsertBizObjectRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectJsonArray: 'bizObjectJsonArray',
            isDraft: 'isDraft',
            opUserId: 'opUserId',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            bizObjectJsonArray: { 'type': 'array', 'itemType': 'string' },
            isDraft: 'boolean',
            opUserId: 'string',
            schemaCode: 'string',
        };
    }
}
exports.BatchInsertBizObjectRequest = BatchInsertBizObjectRequest;
class BatchInsertBizObjectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: BatchInsertBizObjectResponseBodyData,
            message: 'string',
        };
    }
}
exports.BatchInsertBizObjectResponseBody = BatchInsertBizObjectResponseBody;
class BatchInsertBizObjectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchInsertBizObjectResponseBody,
        };
    }
}
exports.BatchInsertBizObjectResponse = BatchInsertBizObjectResponse;
class CancelProcessInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CancelProcessInstanceHeaders = CancelProcessInstanceHeaders;
class CancelProcessInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processInstanceId: 'processInstanceId',
        };
    }
    static types() {
        return {
            processInstanceId: 'string',
        };
    }
}
exports.CancelProcessInstanceRequest = CancelProcessInstanceRequest;
class CancelProcessInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
        };
    }
}
exports.CancelProcessInstanceResponseBody = CancelProcessInstanceResponseBody;
class CancelProcessInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CancelProcessInstanceResponseBody,
        };
    }
}
exports.CancelProcessInstanceResponse = CancelProcessInstanceResponse;
class CreateBizObjectHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateBizObjectHeaders = CreateBizObjectHeaders;
class CreateBizObjectRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectJson: 'bizObjectJson',
            isDraft: 'isDraft',
            opUserId: 'opUserId',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            bizObjectJson: 'string',
            isDraft: 'boolean',
            opUserId: 'string',
            schemaCode: 'string',
        };
    }
}
exports.CreateBizObjectRequest = CreateBizObjectRequest;
class CreateBizObjectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateBizObjectResponseBodyData,
            message: 'string',
        };
    }
}
exports.CreateBizObjectResponseBody = CreateBizObjectResponseBody;
class CreateBizObjectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateBizObjectResponseBody,
        };
    }
}
exports.CreateBizObjectResponse = CreateBizObjectResponse;
class CreateProcessesInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateProcessesInstanceHeaders = CreateProcessesInstanceHeaders;
class CreateProcessesInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectId: 'bizObjectId',
            opUserId: 'opUserId',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            bizObjectId: 'string',
            opUserId: 'string',
            schemaCode: 'string',
        };
    }
}
exports.CreateProcessesInstanceRequest = CreateProcessesInstanceRequest;
class CreateProcessesInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: CreateProcessesInstanceResponseBodyData,
            message: 'string',
        };
    }
}
exports.CreateProcessesInstanceResponseBody = CreateProcessesInstanceResponseBody;
class CreateProcessesInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateProcessesInstanceResponseBody,
        };
    }
}
exports.CreateProcessesInstanceResponse = CreateProcessesInstanceResponse;
class DeleteBizObjectHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteBizObjectHeaders = DeleteBizObjectHeaders;
class DeleteBizObjectRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectId: 'bizObjectId',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            bizObjectId: 'string',
            schemaCode: 'string',
        };
    }
}
exports.DeleteBizObjectRequest = DeleteBizObjectRequest;
class DeleteBizObjectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
        };
    }
}
exports.DeleteBizObjectResponseBody = DeleteBizObjectResponseBody;
class DeleteBizObjectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteBizObjectResponseBody,
        };
    }
}
exports.DeleteBizObjectResponse = DeleteBizObjectResponse;
class DeleteProcessesInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteProcessesInstanceHeaders = DeleteProcessesInstanceHeaders;
class DeleteProcessesInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isAutoUpdateBizObject: 'isAutoUpdateBizObject',
            processInstanceId: 'processInstanceId',
        };
    }
    static types() {
        return {
            isAutoUpdateBizObject: 'boolean',
            processInstanceId: 'string',
        };
    }
}
exports.DeleteProcessesInstanceRequest = DeleteProcessesInstanceRequest;
class DeleteProcessesInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
        };
    }
}
exports.DeleteProcessesInstanceResponseBody = DeleteProcessesInstanceResponseBody;
class DeleteProcessesInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteProcessesInstanceResponseBody,
        };
    }
}
exports.DeleteProcessesInstanceResponse = DeleteProcessesInstanceResponse;
class GetAppsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAppsHeaders = GetAppsHeaders;
class GetAppsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            queryType: 'queryType',
            values: 'values',
        };
    }
    static types() {
        return {
            queryType: 'string',
            values: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetAppsRequest = GetAppsRequest;
class GetAppsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': GetAppsResponseBodyData },
            message: 'string',
        };
    }
}
exports.GetAppsResponseBody = GetAppsResponseBody;
class GetAppsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAppsResponseBody,
        };
    }
}
exports.GetAppsResponse = GetAppsResponse;
class GetAttachmentTemporaryUrlHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAttachmentTemporaryUrlHeaders = GetAttachmentTemporaryUrlHeaders;
class GetAttachmentTemporaryUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attachmentId: 'attachmentId',
        };
    }
    static types() {
        return {
            attachmentId: 'string',
        };
    }
}
exports.GetAttachmentTemporaryUrlRequest = GetAttachmentTemporaryUrlRequest;
class GetAttachmentTemporaryUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetAttachmentTemporaryUrlResponseBodyData,
            message: 'string',
        };
    }
}
exports.GetAttachmentTemporaryUrlResponseBody = GetAttachmentTemporaryUrlResponseBody;
class GetAttachmentTemporaryUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAttachmentTemporaryUrlResponseBody,
        };
    }
}
exports.GetAttachmentTemporaryUrlResponse = GetAttachmentTemporaryUrlResponse;
class GetOrganizationsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOrganizationsHeaders = GetOrganizationsHeaders;
class GetOrganizationsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
        };
    }
    static types() {
        return {
            departmentId: 'string',
        };
    }
}
exports.GetOrganizationsRequest = GetOrganizationsRequest;
class GetOrganizationsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': GetOrganizationsResponseBodyData },
            message: 'string',
        };
    }
}
exports.GetOrganizationsResponseBody = GetOrganizationsResponseBody;
class GetOrganizationsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOrganizationsResponseBody,
        };
    }
}
exports.GetOrganizationsResponse = GetOrganizationsResponse;
class GetRoleUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRoleUsersHeaders = GetRoleUsersHeaders;
class GetRoleUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleId: 'roleId',
        };
    }
    static types() {
        return {
            roleId: 'string',
        };
    }
}
exports.GetRoleUsersRequest = GetRoleUsersRequest;
class GetRoleUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': GetRoleUsersResponseBodyData },
            message: 'string',
        };
    }
}
exports.GetRoleUsersResponseBody = GetRoleUsersResponseBody;
class GetRoleUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRoleUsersResponseBody,
        };
    }
}
exports.GetRoleUsersResponse = GetRoleUsersResponse;
class GetRolesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRolesHeaders = GetRolesHeaders;
class GetRolesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetRolesResponseBodyData,
            message: 'string',
        };
    }
}
exports.GetRolesResponseBody = GetRolesResponseBody;
class GetRolesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRolesResponseBody,
        };
    }
}
exports.GetRolesResponse = GetRolesResponse;
class GetUploadUrlHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUploadUrlHeaders = GetUploadUrlHeaders;
class GetUploadUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectId: 'bizObjectId',
            fieldName: 'fieldName',
            isOverwrite: 'isOverwrite',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            bizObjectId: 'string',
            fieldName: 'string',
            isOverwrite: 'boolean',
            schemaCode: 'string',
        };
    }
}
exports.GetUploadUrlRequest = GetUploadUrlRequest;
class GetUploadUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: GetUploadUrlResponseBodyData,
            message: 'string',
        };
    }
}
exports.GetUploadUrlResponseBody = GetUploadUrlResponseBody;
class GetUploadUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUploadUrlResponseBody,
        };
    }
}
exports.GetUploadUrlResponse = GetUploadUrlResponse;
class GetUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUsersHeaders = GetUsersHeaders;
class GetUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            isRecursive: 'isRecursive',
        };
    }
    static types() {
        return {
            departmentId: 'string',
            isRecursive: 'boolean',
        };
    }
}
exports.GetUsersRequest = GetUsersRequest;
class GetUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': GetUsersResponseBodyData },
            message: 'string',
        };
    }
}
exports.GetUsersResponseBody = GetUsersResponseBody;
class GetUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUsersResponseBody,
        };
    }
}
exports.GetUsersResponse = GetUsersResponse;
class LoadBizFieldsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.LoadBizFieldsHeaders = LoadBizFieldsHeaders;
class LoadBizFieldsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            schemaCode: 'string',
        };
    }
}
exports.LoadBizFieldsRequest = LoadBizFieldsRequest;
class LoadBizFieldsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: LoadBizFieldsResponseBodyData,
            message: 'string',
        };
    }
}
exports.LoadBizFieldsResponseBody = LoadBizFieldsResponseBody;
class LoadBizFieldsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LoadBizFieldsResponseBody,
        };
    }
}
exports.LoadBizFieldsResponse = LoadBizFieldsResponse;
class LoadBizObjectHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.LoadBizObjectHeaders = LoadBizObjectHeaders;
class LoadBizObjectRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectId: 'bizObjectId',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            bizObjectId: 'string',
            schemaCode: 'string',
        };
    }
}
exports.LoadBizObjectRequest = LoadBizObjectRequest;
class LoadBizObjectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            message: 'string',
        };
    }
}
exports.LoadBizObjectResponseBody = LoadBizObjectResponseBody;
class LoadBizObjectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LoadBizObjectResponseBody,
        };
    }
}
exports.LoadBizObjectResponse = LoadBizObjectResponse;
class LoadBizObjectsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.LoadBizObjectsHeaders = LoadBizObjectsHeaders;
class LoadBizObjectsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            matcherJson: 'matcherJson',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            returnFields: 'returnFields',
            schemaCode: 'schemaCode',
            sortByFields: 'sortByFields',
        };
    }
    static types() {
        return {
            matcherJson: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            returnFields: { 'type': 'array', 'itemType': 'string' },
            schemaCode: 'string',
            sortByFields: { 'type': 'array', 'itemType': LoadBizObjectsRequestSortByFields },
        };
    }
}
exports.LoadBizObjectsRequest = LoadBizObjectsRequest;
class LoadBizObjectsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: LoadBizObjectsResponseBodyData,
            message: 'string',
        };
    }
}
exports.LoadBizObjectsResponseBody = LoadBizObjectsResponseBody;
class LoadBizObjectsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LoadBizObjectsResponseBody,
        };
    }
}
exports.LoadBizObjectsResponse = LoadBizObjectsResponse;
class QueryAppFunctionNodesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAppFunctionNodesHeaders = QueryAppFunctionNodesHeaders;
class QueryAppFunctionNodesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'appCode',
        };
    }
    static types() {
        return {
            appCode: 'string',
        };
    }
}
exports.QueryAppFunctionNodesRequest = QueryAppFunctionNodesRequest;
class QueryAppFunctionNodesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': QueryAppFunctionNodesResponseBodyData },
            message: 'string',
        };
    }
}
exports.QueryAppFunctionNodesResponseBody = QueryAppFunctionNodesResponseBody;
class QueryAppFunctionNodesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAppFunctionNodesResponseBody,
        };
    }
}
exports.QueryAppFunctionNodesResponse = QueryAppFunctionNodesResponse;
class QueryProcessesInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryProcessesInstanceHeaders = QueryProcessesInstanceHeaders;
class QueryProcessesInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectId: 'bizObjectId',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            bizObjectId: 'string',
            schemaCode: 'string',
        };
    }
}
exports.QueryProcessesInstanceRequest = QueryProcessesInstanceRequest;
class QueryProcessesInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': QueryProcessesInstanceResponseBodyData },
            message: 'string',
        };
    }
}
exports.QueryProcessesInstanceResponseBody = QueryProcessesInstanceResponseBody;
class QueryProcessesInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryProcessesInstanceResponseBody,
        };
    }
}
exports.QueryProcessesInstanceResponse = QueryProcessesInstanceResponse;
class QueryProcessesWorkItemsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryProcessesWorkItemsHeaders = QueryProcessesWorkItemsHeaders;
class QueryProcessesWorkItemsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processInstanceId: 'processInstanceId',
        };
    }
    static types() {
        return {
            processInstanceId: 'string',
        };
    }
}
exports.QueryProcessesWorkItemsRequest = QueryProcessesWorkItemsRequest;
class QueryProcessesWorkItemsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': QueryProcessesWorkItemsResponseBodyData },
            message: 'string',
        };
    }
}
exports.QueryProcessesWorkItemsResponseBody = QueryProcessesWorkItemsResponseBody;
class QueryProcessesWorkItemsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryProcessesWorkItemsResponseBody,
        };
    }
}
exports.QueryProcessesWorkItemsResponse = QueryProcessesWorkItemsResponse;
class UpdateBizObjectHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateBizObjectHeaders = UpdateBizObjectHeaders;
class UpdateBizObjectRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectId: 'bizObjectId',
            bizObjectJson: 'bizObjectJson',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            bizObjectId: 'string',
            bizObjectJson: 'string',
            schemaCode: 'string',
        };
    }
}
exports.UpdateBizObjectRequest = UpdateBizObjectRequest;
class UpdateBizObjectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'string',
            message: 'string',
        };
    }
}
exports.UpdateBizObjectResponseBody = UpdateBizObjectResponseBody;
class UpdateBizObjectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateBizObjectResponseBody,
        };
    }
}
exports.UpdateBizObjectResponse = UpdateBizObjectResponse;
class BatchInsertBizObjectResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectIds: 'bizObjectIds',
            failedDatas: 'failedDatas',
            failedMessages: 'failedMessages',
            processIds: 'processIds',
        };
    }
    static types() {
        return {
            bizObjectIds: { 'type': 'array', 'itemType': 'string' },
            failedDatas: { 'type': 'array', 'itemType': 'string' },
            failedMessages: { 'type': 'array', 'itemType': 'string' },
            processIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchInsertBizObjectResponseBodyData = BatchInsertBizObjectResponseBodyData;
class CreateBizObjectResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjectId: 'bizObjectId',
            formUsageType: 'formUsageType',
            processInstanceId: 'processInstanceId',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            bizObjectId: 'string',
            formUsageType: 'string',
            processInstanceId: 'string',
            schemaCode: 'string',
        };
    }
}
exports.CreateBizObjectResponseBodyData = CreateBizObjectResponseBodyData;
class CreateProcessesInstanceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            processInstanceId: 'processInstanceId',
        };
    }
    static types() {
        return {
            processInstanceId: 'string',
        };
    }
}
exports.CreateProcessesInstanceResponseBodyData = CreateProcessesInstanceResponseBodyData;
class GetAppsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'appCode',
            appSource: 'appSource',
            appState: 'appState',
            displayName: 'displayName',
            solution: 'solution',
        };
    }
    static types() {
        return {
            appCode: 'string',
            appSource: 'string',
            appState: 'string',
            displayName: 'string',
            solution: 'string',
        };
    }
}
exports.GetAppsResponseBodyData = GetAppsResponseBodyData;
class GetAttachmentTemporaryUrlResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attachmentUrl: 'attachmentUrl',
        };
    }
    static types() {
        return {
            attachmentUrl: 'string',
        };
    }
}
exports.GetAttachmentTemporaryUrlResponseBodyData = GetAttachmentTemporaryUrlResponseBodyData;
class GetOrganizationsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            description: 'description',
            id: 'id',
            name: 'name',
            parentId: 'parentId',
            sortKey: 'sortKey',
            unitType: 'unitType',
        };
    }
    static types() {
        return {
            code: 'string',
            description: 'string',
            id: 'string',
            name: 'string',
            parentId: 'string',
            sortKey: 'number',
            unitType: 'string',
        };
    }
}
exports.GetOrganizationsResponseBodyData = GetOrganizationsResponseBodyData;
class GetRoleUsersResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            description: 'description',
            domainType: 'domainType',
            email: 'email',
            mobile: 'mobile',
            name: 'name',
            partDepartmentIds: 'partDepartmentIds',
            sex: 'sex',
            sortKey: 'sortKey',
            userId: 'userId',
        };
    }
    static types() {
        return {
            code: 'string',
            departmentId: 'string',
            departmentName: 'string',
            description: 'string',
            domainType: 'string',
            email: 'string',
            mobile: 'string',
            name: 'string',
            partDepartmentIds: { 'type': 'array', 'itemType': 'string' },
            sex: 'string',
            sortKey: 'number',
            userId: 'string',
        };
    }
}
exports.GetRoleUsersResponseBodyData = GetRoleUsersResponseBodyData;
class GetRolesResponseBodyDataRoleGroups extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyId: 'companyId',
            description: 'description',
            groupCode: 'groupCode',
            groupId: 'groupId',
            groupName: 'groupName',
            state: 'state',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            companyId: 'string',
            description: 'string',
            groupCode: 'string',
            groupId: 'string',
            groupName: 'string',
            state: 'string',
            visibility: 'string',
        };
    }
}
exports.GetRolesResponseBodyDataRoleGroups = GetRolesResponseBodyDataRoleGroups;
class GetRolesResponseBodyDataRoles extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyId: 'companyId',
            description: 'description',
            groupId: 'groupId',
            roleCode: 'roleCode',
            roleId: 'roleId',
            roleName: 'roleName',
            state: 'state',
            visibility: 'visibility',
        };
    }
    static types() {
        return {
            companyId: 'string',
            description: 'string',
            groupId: 'string',
            roleCode: 'string',
            roleId: 'string',
            roleName: 'string',
            state: 'string',
            visibility: 'string',
        };
    }
}
exports.GetRolesResponseBodyDataRoles = GetRolesResponseBodyDataRoles;
class GetRolesResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleGroups: 'roleGroups',
            roles: 'roles',
        };
    }
    static types() {
        return {
            roleGroups: { 'type': 'array', 'itemType': GetRolesResponseBodyDataRoleGroups },
            roles: { 'type': 'array', 'itemType': GetRolesResponseBodyDataRoles },
        };
    }
}
exports.GetRolesResponseBodyData = GetRolesResponseBodyData;
class GetUploadUrlResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            uploadUrl: 'uploadUrl',
        };
    }
    static types() {
        return {
            uploadUrl: 'string',
        };
    }
}
exports.GetUploadUrlResponseBodyData = GetUploadUrlResponseBodyData;
class GetUsersResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            description: 'description',
            domainType: 'domainType',
            email: 'email',
            id: 'id',
            mobile: 'mobile',
            name: 'name',
            partDepartmentIds: 'partDepartmentIds',
            sex: 'sex',
            sortKey: 'sortKey',
        };
    }
    static types() {
        return {
            code: 'string',
            departmentId: 'string',
            departmentName: 'string',
            description: 'string',
            domainType: 'string',
            email: 'string',
            id: 'string',
            mobile: 'string',
            name: 'string',
            partDepartmentIds: { 'type': 'array', 'itemType': 'string' },
            sex: 'string',
            sortKey: 'number',
        };
    }
}
exports.GetUsersResponseBodyData = GetUsersResponseBodyData;
class LoadBizFieldsResponseBodyDataChildFormsFields extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizDataType: 'bizDataType',
            fieldName: 'fieldName',
            label: 'label',
        };
    }
    static types() {
        return {
            bizDataType: 'string',
            fieldName: 'string',
            label: 'string',
        };
    }
}
exports.LoadBizFieldsResponseBodyDataChildFormsFields = LoadBizFieldsResponseBodyDataChildFormsFields;
class LoadBizFieldsResponseBodyDataChildForms extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fields: 'fields',
            formName: 'formName',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            fields: { 'type': 'array', 'itemType': LoadBizFieldsResponseBodyDataChildFormsFields },
            formName: 'string',
            schemaCode: 'string',
        };
    }
}
exports.LoadBizFieldsResponseBodyDataChildForms = LoadBizFieldsResponseBodyDataChildForms;
class LoadBizFieldsResponseBodyDataFields extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizDataType: 'bizDataType',
            fieldName: 'fieldName',
            label: 'label',
        };
    }
    static types() {
        return {
            bizDataType: 'string',
            fieldName: 'string',
            label: 'string',
        };
    }
}
exports.LoadBizFieldsResponseBodyDataFields = LoadBizFieldsResponseBodyDataFields;
class LoadBizFieldsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            childForms: 'childForms',
            fields: 'fields',
            formName: 'formName',
            schemaCode: 'schemaCode',
        };
    }
    static types() {
        return {
            childForms: { 'type': 'array', 'itemType': LoadBizFieldsResponseBodyDataChildForms },
            fields: { 'type': 'array', 'itemType': LoadBizFieldsResponseBodyDataFields },
            formName: 'string',
            schemaCode: 'string',
        };
    }
}
exports.LoadBizFieldsResponseBodyData = LoadBizFieldsResponseBodyData;
class LoadBizObjectsRequestSortByFields extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            direction: 'direction',
            fieldName: 'fieldName',
        };
    }
    static types() {
        return {
            direction: 'string',
            fieldName: 'string',
        };
    }
}
exports.LoadBizObjectsRequestSortByFields = LoadBizObjectsRequestSortByFields;
class LoadBizObjectsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizObjects: 'bizObjects',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            bizObjects: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.LoadBizObjectsResponseBodyData = LoadBizObjectsResponseBodyData;
class QueryAppFunctionNodesResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'appCode',
            displayName: 'displayName',
            isSystem: 'isSystem',
            nodeType: 'nodeType',
            nodeVisibleType: 'nodeVisibleType',
            parentCode: 'parentCode',
            schemaCode: 'schemaCode',
            sortKey: 'sortKey',
            state: 'state',
        };
    }
    static types() {
        return {
            appCode: 'string',
            displayName: 'string',
            isSystem: 'boolean',
            nodeType: 'string',
            nodeVisibleType: 'string',
            parentCode: 'string',
            schemaCode: 'string',
            sortKey: 'number',
            state: 'string',
        };
    }
}
exports.QueryAppFunctionNodesResponseBodyData = QueryAppFunctionNodesResponseBodyData;
class QueryProcessesInstanceResponseBodyDataOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentId: 'string',
            departmentName: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.QueryProcessesInstanceResponseBodyDataOriginator = QueryProcessesInstanceResponseBodyDataOriginator;
class QueryProcessesInstanceResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appCode: 'appCode',
            bizObjectId: 'bizObjectId',
            createdTimeGMT: 'createdTimeGMT',
            dingTalkProcessId: 'dingTalkProcessId',
            finishTimeGMT: 'finishTimeGMT',
            originator: 'originator',
            processDisplayName: 'processDisplayName',
            processInstanceId: 'processInstanceId',
            processVersion: 'processVersion',
            schemaCode: 'schemaCode',
            startTimeGMT: 'startTimeGMT',
            state: 'state',
        };
    }
    static types() {
        return {
            appCode: 'string',
            bizObjectId: 'string',
            createdTimeGMT: 'string',
            dingTalkProcessId: 'string',
            finishTimeGMT: 'string',
            originator: QueryProcessesInstanceResponseBodyDataOriginator,
            processDisplayName: 'string',
            processInstanceId: 'string',
            processVersion: 'number',
            schemaCode: 'string',
            startTimeGMT: 'string',
            state: 'string',
        };
    }
}
exports.QueryProcessesInstanceResponseBodyData = QueryProcessesInstanceResponseBodyData;
class QueryProcessesWorkItemsResponseBodyDataFinisher extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentId: 'string',
            departmentName: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.QueryProcessesWorkItemsResponseBodyDataFinisher = QueryProcessesWorkItemsResponseBodyDataFinisher;
class QueryProcessesWorkItemsResponseBodyDataParticipant extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentId: 'string',
            departmentName: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.QueryProcessesWorkItemsResponseBodyDataParticipant = QueryProcessesWorkItemsResponseBodyDataParticipant;
class QueryProcessesWorkItemsResponseBodyDataReceiptor extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentId: 'departmentId',
            departmentName: 'departmentName',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentId: 'string',
            departmentName: 'string',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.QueryProcessesWorkItemsResponseBodyDataReceiptor = QueryProcessesWorkItemsResponseBodyDataReceiptor;
class QueryProcessesWorkItemsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activityCode: 'activityCode',
            activityName: 'activityName',
            appCode: 'appCode',
            bizObjectId: 'bizObjectId',
            comment: 'comment',
            displayName: 'displayName',
            finishTimeGMT: 'finishTimeGMT',
            finisher: 'finisher',
            isApproval: 'isApproval',
            isFinish: 'isFinish',
            participant: 'participant',
            processInstanceId: 'processInstanceId',
            processVersion: 'processVersion',
            receiptor: 'receiptor',
            receiveTimeGMT: 'receiveTimeGMT',
            schemaCode: 'schemaCode',
            startTimeGMT: 'startTimeGMT',
            state: 'state',
            workItemId: 'workItemId',
            workItemType: 'workItemType',
        };
    }
    static types() {
        return {
            activityCode: 'string',
            activityName: 'string',
            appCode: 'string',
            bizObjectId: 'string',
            comment: 'string',
            displayName: 'string',
            finishTimeGMT: 'string',
            finisher: QueryProcessesWorkItemsResponseBodyDataFinisher,
            isApproval: 'boolean',
            isFinish: 'boolean',
            participant: QueryProcessesWorkItemsResponseBodyDataParticipant,
            processInstanceId: 'string',
            processVersion: 'string',
            receiptor: QueryProcessesWorkItemsResponseBodyDataReceiptor,
            receiveTimeGMT: 'string',
            schemaCode: 'string',
            startTimeGMT: 'string',
            state: 'string',
            workItemId: 'string',
            workItemType: 'string',
        };
    }
}
exports.QueryProcessesWorkItemsResponseBodyData = QueryProcessesWorkItemsResponseBodyData;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async batchInsertBizObjectWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizObjectJsonArray)) {
            body["bizObjectJsonArray"] = request.bizObjectJsonArray;
        }
        if (!tea_util_1.default.isUnset(request.isDraft)) {
            body["isDraft"] = request.isDraft;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            body["schemaCode"] = request.schemaCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchInsertBizObject",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/forms/instances/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchInsertBizObjectResponse({}));
    }
    async batchInsertBizObject(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchInsertBizObjectHeaders({});
        return await this.batchInsertBizObjectWithOptions(request, headers, runtime);
    }
    async cancelProcessInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            body["processInstanceId"] = request.processInstanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CancelProcessInstance",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/processes/instances/cancel`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CancelProcessInstanceResponse({}));
    }
    async cancelProcessInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CancelProcessInstanceHeaders({});
        return await this.cancelProcessInstanceWithOptions(request, headers, runtime);
    }
    async createBizObjectWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizObjectJson)) {
            body["bizObjectJson"] = request.bizObjectJson;
        }
        if (!tea_util_1.default.isUnset(request.isDraft)) {
            body["isDraft"] = request.isDraft;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            body["schemaCode"] = request.schemaCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateBizObject",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/forms/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateBizObjectResponse({}));
    }
    async createBizObject(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateBizObjectHeaders({});
        return await this.createBizObjectWithOptions(request, headers, runtime);
    }
    async createProcessesInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizObjectId)) {
            body["bizObjectId"] = request.bizObjectId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            body["schemaCode"] = request.schemaCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateProcessesInstance",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/processes/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateProcessesInstanceResponse({}));
    }
    async createProcessesInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateProcessesInstanceHeaders({});
        return await this.createProcessesInstanceWithOptions(request, headers, runtime);
    }
    async deleteBizObjectWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizObjectId)) {
            query["bizObjectId"] = request.bizObjectId;
        }
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            query["schemaCode"] = request.schemaCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteBizObject",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/forms/instances`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteBizObjectResponse({}));
    }
    async deleteBizObject(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteBizObjectHeaders({});
        return await this.deleteBizObjectWithOptions(request, headers, runtime);
    }
    async deleteProcessesInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isAutoUpdateBizObject)) {
            query["isAutoUpdateBizObject"] = request.isAutoUpdateBizObject;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            query["processInstanceId"] = request.processInstanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteProcessesInstance",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/processes/instances`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteProcessesInstanceResponse({}));
    }
    async deleteProcessesInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteProcessesInstanceHeaders({});
        return await this.deleteProcessesInstanceWithOptions(request, headers, runtime);
    }
    async getAppsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.queryType)) {
            body["queryType"] = request.queryType;
        }
        if (!tea_util_1.default.isUnset(request.values)) {
            body["values"] = request.values;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetApps",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/apps/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAppsResponse({}));
    }
    async getApps(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAppsHeaders({});
        return await this.getAppsWithOptions(request, headers, runtime);
    }
    async getAttachmentTemporaryUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.attachmentId)) {
            query["attachmentId"] = request.attachmentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAttachmentTemporaryUrl",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/attachments/temporaryUrls`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAttachmentTemporaryUrlResponse({}));
    }
    async getAttachmentTemporaryUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAttachmentTemporaryUrlHeaders({});
        return await this.getAttachmentTemporaryUrlWithOptions(request, headers, runtime);
    }
    async getOrganizationsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            query["departmentId"] = request.departmentId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetOrganizations",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/departments`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOrganizationsResponse({}));
    }
    async getOrganizations(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOrganizationsHeaders({});
        return await this.getOrganizationsWithOptions(request, headers, runtime);
    }
    async getRoleUsersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.roleId)) {
            query["roleId"] = request.roleId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRoleUsers",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/roles/roleUsers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRoleUsersResponse({}));
    }
    async getRoleUsers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRoleUsersHeaders({});
        return await this.getRoleUsersWithOptions(request, headers, runtime);
    }
    async getRolesWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetRoles",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRolesResponse({}));
    }
    async getRoles() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRolesHeaders({});
        return await this.getRolesWithOptions(headers, runtime);
    }
    async getUploadUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizObjectId)) {
            query["bizObjectId"] = request.bizObjectId;
        }
        if (!tea_util_1.default.isUnset(request.fieldName)) {
            query["fieldName"] = request.fieldName;
        }
        if (!tea_util_1.default.isUnset(request.isOverwrite)) {
            query["isOverwrite"] = request.isOverwrite;
        }
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            query["schemaCode"] = request.schemaCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUploadUrl",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/attachments/uploadUrls`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUploadUrlResponse({}));
    }
    async getUploadUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUploadUrlHeaders({});
        return await this.getUploadUrlWithOptions(request, headers, runtime);
    }
    async getUsersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            query["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.isRecursive)) {
            query["isRecursive"] = request.isRecursive;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUsers",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUsersResponse({}));
    }
    async getUsers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUsersHeaders({});
        return await this.getUsersWithOptions(request, headers, runtime);
    }
    async loadBizFieldsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            query["schemaCode"] = request.schemaCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "LoadBizFields",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/forms/loadBizFields`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LoadBizFieldsResponse({}));
    }
    async loadBizFields(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LoadBizFieldsHeaders({});
        return await this.loadBizFieldsWithOptions(request, headers, runtime);
    }
    async loadBizObjectWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizObjectId)) {
            query["bizObjectId"] = request.bizObjectId;
        }
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            query["schemaCode"] = request.schemaCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "LoadBizObject",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/forms/instances/loadInstances`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LoadBizObjectResponse({}));
    }
    async loadBizObject(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LoadBizObjectHeaders({});
        return await this.loadBizObjectWithOptions(request, headers, runtime);
    }
    async loadBizObjectsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.matcherJson)) {
            body["matcherJson"] = request.matcherJson;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.returnFields)) {
            body["returnFields"] = request.returnFields;
        }
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            body["schemaCode"] = request.schemaCode;
        }
        if (!tea_util_1.default.isUnset(request.sortByFields)) {
            body["sortByFields"] = request.sortByFields;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "LoadBizObjects",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/forms/instances/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LoadBizObjectsResponse({}));
    }
    async loadBizObjects(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LoadBizObjectsHeaders({});
        return await this.loadBizObjectsWithOptions(request, headers, runtime);
    }
    async queryAppFunctionNodesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appCode)) {
            query["appCode"] = request.appCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAppFunctionNodes",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/apps/functionNodes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAppFunctionNodesResponse({}));
    }
    async queryAppFunctionNodes(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAppFunctionNodesHeaders({});
        return await this.queryAppFunctionNodesWithOptions(request, headers, runtime);
    }
    async queryProcessesInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bizObjectId)) {
            query["bizObjectId"] = request.bizObjectId;
        }
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            query["schemaCode"] = request.schemaCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProcessesInstance",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/processes/instances`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryProcessesInstanceResponse({}));
    }
    async queryProcessesInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryProcessesInstanceHeaders({});
        return await this.queryProcessesInstanceWithOptions(request, headers, runtime);
    }
    async queryProcessesWorkItemsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            query["processInstanceId"] = request.processInstanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProcessesWorkItems",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/processes/workItems`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryProcessesWorkItemsResponse({}));
    }
    async queryProcessesWorkItems(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryProcessesWorkItemsHeaders({});
        return await this.queryProcessesWorkItemsWithOptions(request, headers, runtime);
    }
    async updateBizObjectWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizObjectId)) {
            body["bizObjectId"] = request.bizObjectId;
        }
        if (!tea_util_1.default.isUnset(request.bizObjectJson)) {
            body["bizObjectJson"] = request.bizObjectJson;
        }
        if (!tea_util_1.default.isUnset(request.schemaCode)) {
            body["schemaCode"] = request.schemaCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateBizObject",
            version: "h3yun_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h3yun/forms/instances`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateBizObjectResponse({}));
    }
    async updateBizObject(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateBizObjectHeaders({});
        return await this.updateBizObjectWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map