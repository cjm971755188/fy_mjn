"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class PrivateDataValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.PrivateDataValue = PrivateDataValue;
class AppendSpaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AppendSpaceHeaders = AppendSpaceHeaders;
class AppendSpaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coFeedOpenSpaceModel: 'coFeedOpenSpaceModel',
            imGroupOpenSpaceModel: 'imGroupOpenSpaceModel',
            imRobotOpenSpaceModel: 'imRobotOpenSpaceModel',
            outTrackId: 'outTrackId',
            topOpenSpaceModel: 'topOpenSpaceModel',
        };
    }
    static types() {
        return {
            coFeedOpenSpaceModel: AppendSpaceRequestCoFeedOpenSpaceModel,
            imGroupOpenSpaceModel: AppendSpaceRequestImGroupOpenSpaceModel,
            imRobotOpenSpaceModel: AppendSpaceRequestImRobotOpenSpaceModel,
            outTrackId: 'string',
            topOpenSpaceModel: AppendSpaceRequestTopOpenSpaceModel,
        };
    }
}
exports.AppendSpaceRequest = AppendSpaceRequest;
class AppendSpaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
}
exports.AppendSpaceResponseBody = AppendSpaceResponseBody;
class AppendSpaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AppendSpaceResponseBody,
        };
    }
}
exports.AppendSpaceResponse = AppendSpaceResponse;
class CreateAndDeliverHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateAndDeliverHeaders = CreateAndDeliverHeaders;
class CreateAndDeliverRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            callbackRouteKey: 'callbackRouteKey',
            callbackType: 'callbackType',
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            coFeedOpenDeliverModel: 'coFeedOpenDeliverModel',
            coFeedOpenSpaceModel: 'coFeedOpenSpaceModel',
            docOpenDeliverModel: 'docOpenDeliverModel',
            imGroupOpenDeliverModel: 'imGroupOpenDeliverModel',
            imGroupOpenSpaceModel: 'imGroupOpenSpaceModel',
            imRobotOpenDeliverModel: 'imRobotOpenDeliverModel',
            imRobotOpenSpaceModel: 'imRobotOpenSpaceModel',
            openDynamicDataConfig: 'openDynamicDataConfig',
            openSpaceId: 'openSpaceId',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            topOpenDeliverModel: 'topOpenDeliverModel',
            topOpenSpaceModel: 'topOpenSpaceModel',
            userId: 'userId',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            callbackRouteKey: 'string',
            callbackType: 'string',
            cardData: CreateAndDeliverRequestCardData,
            cardTemplateId: 'string',
            coFeedOpenDeliverModel: CreateAndDeliverRequestCoFeedOpenDeliverModel,
            coFeedOpenSpaceModel: CreateAndDeliverRequestCoFeedOpenSpaceModel,
            docOpenDeliverModel: CreateAndDeliverRequestDocOpenDeliverModel,
            imGroupOpenDeliverModel: CreateAndDeliverRequestImGroupOpenDeliverModel,
            imGroupOpenSpaceModel: CreateAndDeliverRequestImGroupOpenSpaceModel,
            imRobotOpenDeliverModel: CreateAndDeliverRequestImRobotOpenDeliverModel,
            imRobotOpenSpaceModel: CreateAndDeliverRequestImRobotOpenSpaceModel,
            openDynamicDataConfig: CreateAndDeliverRequestOpenDynamicDataConfig,
            openSpaceId: 'string',
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            topOpenDeliverModel: CreateAndDeliverRequestTopOpenDeliverModel,
            topOpenSpaceModel: CreateAndDeliverRequestTopOpenSpaceModel,
            userId: 'string',
            userIdType: 'number',
        };
    }
}
exports.CreateAndDeliverRequest = CreateAndDeliverRequest;
class CreateAndDeliverResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateAndDeliverResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.CreateAndDeliverResponseBody = CreateAndDeliverResponseBody;
class CreateAndDeliverResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateAndDeliverResponseBody,
        };
    }
}
exports.CreateAndDeliverResponse = CreateAndDeliverResponse;
class CreateCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateCardHeaders = CreateCardHeaders;
class CreateCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            callbackRouteKey: 'callbackRouteKey',
            callbackType: 'callbackType',
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            coFeedOpenSpaceModel: 'coFeedOpenSpaceModel',
            imGroupOpenSpaceModel: 'imGroupOpenSpaceModel',
            imRobotOpenSpaceModel: 'imRobotOpenSpaceModel',
            openDynamicDataConfig: 'openDynamicDataConfig',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            topOpenSpaceModel: 'topOpenSpaceModel',
            userId: 'userId',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            callbackRouteKey: 'string',
            callbackType: 'string',
            cardData: CreateCardRequestCardData,
            cardTemplateId: 'string',
            coFeedOpenSpaceModel: CreateCardRequestCoFeedOpenSpaceModel,
            imGroupOpenSpaceModel: CreateCardRequestImGroupOpenSpaceModel,
            imRobotOpenSpaceModel: CreateCardRequestImRobotOpenSpaceModel,
            openDynamicDataConfig: CreateCardRequestOpenDynamicDataConfig,
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            topOpenSpaceModel: CreateCardRequestTopOpenSpaceModel,
            userId: 'string',
            userIdType: 'number',
        };
    }
}
exports.CreateCardRequest = CreateCardRequest;
class CreateCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateCardResponseBody = CreateCardResponseBody;
class CreateCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCardResponseBody,
        };
    }
}
exports.CreateCardResponse = CreateCardResponse;
class DeliverCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeliverCardHeaders = DeliverCardHeaders;
class DeliverCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coFeedOpenDeliverModel: 'coFeedOpenDeliverModel',
            docOpenDeliverModel: 'docOpenDeliverModel',
            imGroupOpenDeliverModel: 'imGroupOpenDeliverModel',
            imRobotOpenDeliverModel: 'imRobotOpenDeliverModel',
            openSpaceId: 'openSpaceId',
            outTrackId: 'outTrackId',
            topOpenDeliverModel: 'topOpenDeliverModel',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            coFeedOpenDeliverModel: DeliverCardRequestCoFeedOpenDeliverModel,
            docOpenDeliverModel: DeliverCardRequestDocOpenDeliverModel,
            imGroupOpenDeliverModel: DeliverCardRequestImGroupOpenDeliverModel,
            imRobotOpenDeliverModel: DeliverCardRequestImRobotOpenDeliverModel,
            openSpaceId: 'string',
            outTrackId: 'string',
            topOpenDeliverModel: DeliverCardRequestTopOpenDeliverModel,
            userIdType: 'number',
        };
    }
}
exports.DeliverCardRequest = DeliverCardRequest;
class DeliverCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': DeliverCardResponseBodyResult },
            success: 'boolean',
        };
    }
}
exports.DeliverCardResponseBody = DeliverCardResponseBody;
class DeliverCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeliverCardResponseBody,
        };
    }
}
exports.DeliverCardResponse = DeliverCardResponse;
class RegisterCallbackHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RegisterCallbackHeaders = RegisterCallbackHeaders;
class RegisterCallbackRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiSecret: 'apiSecret',
            callbackRouteKey: 'callbackRouteKey',
            callbackUrl: 'callbackUrl',
            forceUpdate: 'forceUpdate',
        };
    }
    static types() {
        return {
            apiSecret: 'string',
            callbackRouteKey: 'string',
            callbackUrl: 'string',
            forceUpdate: 'boolean',
        };
    }
}
exports.RegisterCallbackRequest = RegisterCallbackRequest;
class RegisterCallbackResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: RegisterCallbackResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.RegisterCallbackResponseBody = RegisterCallbackResponseBody;
class RegisterCallbackResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RegisterCallbackResponseBody,
        };
    }
}
exports.RegisterCallbackResponse = RegisterCallbackResponse;
class StreamingUpdateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.StreamingUpdateHeaders = StreamingUpdateHeaders;
class StreamingUpdateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            guid: 'guid',
            isError: 'isError',
            isFinalize: 'isFinalize',
            isFull: 'isFull',
            key: 'key',
            outTrackId: 'outTrackId',
        };
    }
    static types() {
        return {
            content: 'string',
            guid: 'string',
            isError: 'boolean',
            isFinalize: 'boolean',
            isFull: 'boolean',
            key: 'string',
            outTrackId: 'string',
        };
    }
}
exports.StreamingUpdateRequest = StreamingUpdateRequest;
class StreamingUpdateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
}
exports.StreamingUpdateResponseBody = StreamingUpdateResponseBody;
class StreamingUpdateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StreamingUpdateResponseBody,
        };
    }
}
exports.StreamingUpdateResponse = StreamingUpdateResponse;
class UpdateCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateCardHeaders = UpdateCardHeaders;
class UpdateCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardData: 'cardData',
            cardUpdateOptions: 'cardUpdateOptions',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            cardData: UpdateCardRequestCardData,
            cardUpdateOptions: UpdateCardRequestCardUpdateOptions,
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            userIdType: 'number',
        };
    }
}
exports.UpdateCardRequest = UpdateCardRequest;
class UpdateCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
}
exports.UpdateCardResponseBody = UpdateCardResponseBody;
class UpdateCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCardResponseBody,
        };
    }
}
exports.UpdateCardResponse = UpdateCardResponse;
class AppendSpaceRequestCoFeedOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            title: 'title',
        };
    }
    static types() {
        return {
            title: 'string',
        };
    }
}
exports.AppendSpaceRequestCoFeedOpenSpaceModel = AppendSpaceRequestCoFeedOpenSpaceModel;
class AppendSpaceRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
}
exports.AppendSpaceRequestImGroupOpenSpaceModelNotification = AppendSpaceRequestImGroupOpenSpaceModelNotification;
class AppendSpaceRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
}
exports.AppendSpaceRequestImGroupOpenSpaceModelSearchSupport = AppendSpaceRequestImGroupOpenSpaceModelSearchSupport;
class AppendSpaceRequestImGroupOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: AppendSpaceRequestImGroupOpenSpaceModelNotification,
            searchSupport: AppendSpaceRequestImGroupOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
}
exports.AppendSpaceRequestImGroupOpenSpaceModel = AppendSpaceRequestImGroupOpenSpaceModel;
class AppendSpaceRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
}
exports.AppendSpaceRequestImRobotOpenSpaceModelNotification = AppendSpaceRequestImRobotOpenSpaceModelNotification;
class AppendSpaceRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
}
exports.AppendSpaceRequestImRobotOpenSpaceModelSearchSupport = AppendSpaceRequestImRobotOpenSpaceModelSearchSupport;
class AppendSpaceRequestImRobotOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: AppendSpaceRequestImRobotOpenSpaceModelNotification,
            searchSupport: AppendSpaceRequestImRobotOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
}
exports.AppendSpaceRequestImRobotOpenSpaceModel = AppendSpaceRequestImRobotOpenSpaceModel;
class AppendSpaceRequestTopOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            spaceType: 'string',
        };
    }
}
exports.AppendSpaceRequestTopOpenSpaceModel = AppendSpaceRequestTopOpenSpaceModel;
class CreateAndDeliverRequestCardData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.CreateAndDeliverRequestCardData = CreateAndDeliverRequestCardData;
class CreateAndDeliverRequestCoFeedOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTag: 'bizTag',
            gmtTimeLine: 'gmtTimeLine',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            gmtTimeLine: 'number',
        };
    }
}
exports.CreateAndDeliverRequestCoFeedOpenDeliverModel = CreateAndDeliverRequestCoFeedOpenDeliverModel;
class CreateAndDeliverRequestCoFeedOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            title: 'title',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            title: 'string',
        };
    }
}
exports.CreateAndDeliverRequestCoFeedOpenSpaceModel = CreateAndDeliverRequestCoFeedOpenSpaceModel;
class CreateAndDeliverRequestDocOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.CreateAndDeliverRequestDocOpenDeliverModel = CreateAndDeliverRequestDocOpenDeliverModel;
class CreateAndDeliverRequestImGroupOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
            recipients: 'recipients',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            recipients: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
        };
    }
}
exports.CreateAndDeliverRequestImGroupOpenDeliverModel = CreateAndDeliverRequestImGroupOpenDeliverModel;
class CreateAndDeliverRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
}
exports.CreateAndDeliverRequestImGroupOpenSpaceModelNotification = CreateAndDeliverRequestImGroupOpenSpaceModelNotification;
class CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
}
exports.CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport = CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport;
class CreateAndDeliverRequestImGroupOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateAndDeliverRequestImGroupOpenSpaceModelNotification,
            searchSupport: CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
}
exports.CreateAndDeliverRequestImGroupOpenSpaceModel = CreateAndDeliverRequestImGroupOpenSpaceModel;
class CreateAndDeliverRequestImRobotOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extension: 'extension',
            robotCode: 'robotCode',
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            robotCode: 'string',
            spaceType: 'string',
        };
    }
}
exports.CreateAndDeliverRequestImRobotOpenDeliverModel = CreateAndDeliverRequestImRobotOpenDeliverModel;
class CreateAndDeliverRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
}
exports.CreateAndDeliverRequestImRobotOpenSpaceModelNotification = CreateAndDeliverRequestImRobotOpenSpaceModelNotification;
class CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
}
exports.CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport = CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport;
class CreateAndDeliverRequestImRobotOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateAndDeliverRequestImRobotOpenSpaceModelNotification,
            searchSupport: CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
}
exports.CreateAndDeliverRequestImRobotOpenSpaceModel = CreateAndDeliverRequestImRobotOpenSpaceModel;
class CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            interval: 'interval',
            pullStrategy: 'pullStrategy',
            timeUnit: 'timeUnit',
        };
    }
    static types() {
        return {
            interval: 'number',
            pullStrategy: 'string',
            timeUnit: 'string',
        };
    }
}
exports.CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig;
class CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            constParams: 'constParams',
            dynamicDataSourceId: 'dynamicDataSourceId',
            pullConfig: 'pullConfig',
        };
    }
    static types() {
        return {
            constParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dynamicDataSourceId: 'string',
            pullConfig: CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig,
        };
    }
}
exports.CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs = CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs;
class CreateAndDeliverRequestOpenDynamicDataConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dynamicDataSourceConfigs: 'dynamicDataSourceConfigs',
        };
    }
    static types() {
        return {
            dynamicDataSourceConfigs: { 'type': 'array', 'itemType': CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs },
        };
    }
}
exports.CreateAndDeliverRequestOpenDynamicDataConfig = CreateAndDeliverRequestOpenDynamicDataConfig;
class CreateAndDeliverRequestTopOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            expiredTimeMillis: 'expiredTimeMillis',
            platforms: 'platforms',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            expiredTimeMillis: 'number',
            platforms: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateAndDeliverRequestTopOpenDeliverModel = CreateAndDeliverRequestTopOpenDeliverModel;
class CreateAndDeliverRequestTopOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            spaceType: 'string',
        };
    }
}
exports.CreateAndDeliverRequestTopOpenSpaceModel = CreateAndDeliverRequestTopOpenSpaceModel;
class CreateAndDeliverResponseBodyResultDeliverResults extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            carrierId: 'carrierId',
            errorMsg: 'errorMsg',
            spaceId: 'spaceId',
            spaceType: 'spaceType',
            success: 'success',
        };
    }
    static types() {
        return {
            carrierId: 'string',
            errorMsg: 'string',
            spaceId: 'string',
            spaceType: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateAndDeliverResponseBodyResultDeliverResults = CreateAndDeliverResponseBodyResultDeliverResults;
class CreateAndDeliverResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deliverResults: 'deliverResults',
            outTrackId: 'outTrackId',
        };
    }
    static types() {
        return {
            deliverResults: { 'type': 'array', 'itemType': CreateAndDeliverResponseBodyResultDeliverResults },
            outTrackId: 'string',
        };
    }
}
exports.CreateAndDeliverResponseBodyResult = CreateAndDeliverResponseBodyResult;
class CreateCardRequestCardData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.CreateCardRequestCardData = CreateCardRequestCardData;
class CreateCardRequestCoFeedOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            title: 'title',
        };
    }
    static types() {
        return {
            title: 'string',
        };
    }
}
exports.CreateCardRequestCoFeedOpenSpaceModel = CreateCardRequestCoFeedOpenSpaceModel;
class CreateCardRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
}
exports.CreateCardRequestImGroupOpenSpaceModelNotification = CreateCardRequestImGroupOpenSpaceModelNotification;
class CreateCardRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
}
exports.CreateCardRequestImGroupOpenSpaceModelSearchSupport = CreateCardRequestImGroupOpenSpaceModelSearchSupport;
class CreateCardRequestImGroupOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateCardRequestImGroupOpenSpaceModelNotification,
            searchSupport: CreateCardRequestImGroupOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
}
exports.CreateCardRequestImGroupOpenSpaceModel = CreateCardRequestImGroupOpenSpaceModel;
class CreateCardRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
}
exports.CreateCardRequestImRobotOpenSpaceModelNotification = CreateCardRequestImRobotOpenSpaceModelNotification;
class CreateCardRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
}
exports.CreateCardRequestImRobotOpenSpaceModelSearchSupport = CreateCardRequestImRobotOpenSpaceModelSearchSupport;
class CreateCardRequestImRobotOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateCardRequestImRobotOpenSpaceModelNotification,
            searchSupport: CreateCardRequestImRobotOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
}
exports.CreateCardRequestImRobotOpenSpaceModel = CreateCardRequestImRobotOpenSpaceModel;
class CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            interval: 'interval',
            pullStrategy: 'pullStrategy',
            timeUnit: 'timeUnit',
        };
    }
    static types() {
        return {
            interval: 'number',
            pullStrategy: 'string',
            timeUnit: 'string',
        };
    }
}
exports.CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig;
class CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            constParams: 'constParams',
            dynamicDataSourceId: 'dynamicDataSourceId',
            pullConfig: 'pullConfig',
        };
    }
    static types() {
        return {
            constParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dynamicDataSourceId: 'string',
            pullConfig: CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig,
        };
    }
}
exports.CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs = CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs;
class CreateCardRequestOpenDynamicDataConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dynamicDataSourceConfigs: 'dynamicDataSourceConfigs',
        };
    }
    static types() {
        return {
            dynamicDataSourceConfigs: { 'type': 'array', 'itemType': CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs },
        };
    }
}
exports.CreateCardRequestOpenDynamicDataConfig = CreateCardRequestOpenDynamicDataConfig;
class CreateCardRequestTopOpenSpaceModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            spaceType: 'string',
        };
    }
}
exports.CreateCardRequestTopOpenSpaceModel = CreateCardRequestTopOpenSpaceModel;
class DeliverCardRequestCoFeedOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTag: 'bizTag',
            gmtTimeLine: 'gmtTimeLine',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            gmtTimeLine: 'number',
        };
    }
}
exports.DeliverCardRequestCoFeedOpenDeliverModel = DeliverCardRequestCoFeedOpenDeliverModel;
class DeliverCardRequestDocOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.DeliverCardRequestDocOpenDeliverModel = DeliverCardRequestDocOpenDeliverModel;
class DeliverCardRequestImGroupOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
            recipients: 'recipients',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            recipients: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
        };
    }
}
exports.DeliverCardRequestImGroupOpenDeliverModel = DeliverCardRequestImGroupOpenDeliverModel;
class DeliverCardRequestImRobotOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            extension: 'extension',
            robotCode: 'robotCode',
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            robotCode: 'string',
            spaceType: 'string',
        };
    }
}
exports.DeliverCardRequestImRobotOpenDeliverModel = DeliverCardRequestImRobotOpenDeliverModel;
class DeliverCardRequestTopOpenDeliverModel extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            expiredTimeMillis: 'expiredTimeMillis',
            platforms: 'platforms',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            expiredTimeMillis: 'number',
            platforms: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DeliverCardRequestTopOpenDeliverModel = DeliverCardRequestTopOpenDeliverModel;
class DeliverCardResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            carrierId: 'carrierId',
            errorMsg: 'errorMsg',
            spaceId: 'spaceId',
            spaceType: 'spaceType',
            success: 'success',
        };
    }
    static types() {
        return {
            carrierId: 'string',
            errorMsg: 'string',
            spaceId: 'string',
            spaceType: 'string',
            success: 'boolean',
        };
    }
}
exports.DeliverCardResponseBodyResult = DeliverCardResponseBodyResult;
class RegisterCallbackResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiSecret: 'apiSecret',
            callbackUrl: 'callbackUrl',
        };
    }
    static types() {
        return {
            apiSecret: 'string',
            callbackUrl: 'string',
        };
    }
}
exports.RegisterCallbackResponseBodyResult = RegisterCallbackResponseBodyResult;
class UpdateCardRequestCardData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
}
exports.UpdateCardRequestCardData = UpdateCardRequestCardData;
class UpdateCardRequestCardUpdateOptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            updateCardDataByKey: 'updateCardDataByKey',
            updatePrivateDataByKey: 'updatePrivateDataByKey',
        };
    }
    static types() {
        return {
            updateCardDataByKey: 'boolean',
            updatePrivateDataByKey: 'boolean',
        };
    }
}
exports.UpdateCardRequestCardUpdateOptions = UpdateCardRequestCardUpdateOptions;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async appendSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coFeedOpenSpaceModel)) {
            body["coFeedOpenSpaceModel"] = request.coFeedOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenSpaceModel)) {
            body["imGroupOpenSpaceModel"] = request.imGroupOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenSpaceModel)) {
            body["imRobotOpenSpaceModel"] = request.imRobotOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.topOpenSpaceModel)) {
            body["topOpenSpaceModel"] = request.topOpenSpaceModel;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AppendSpace",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances/spaces`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AppendSpaceResponse({}));
    }
    async appendSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AppendSpaceHeaders({});
        return await this.appendSpaceWithOptions(request, headers, runtime);
    }
    async createAndDeliverWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.callbackType)) {
            body["callbackType"] = request.callbackType;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.coFeedOpenDeliverModel)) {
            body["coFeedOpenDeliverModel"] = request.coFeedOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.coFeedOpenSpaceModel)) {
            body["coFeedOpenSpaceModel"] = request.coFeedOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.docOpenDeliverModel)) {
            body["docOpenDeliverModel"] = request.docOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenDeliverModel)) {
            body["imGroupOpenDeliverModel"] = request.imGroupOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenSpaceModel)) {
            body["imGroupOpenSpaceModel"] = request.imGroupOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenDeliverModel)) {
            body["imRobotOpenDeliverModel"] = request.imRobotOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenSpaceModel)) {
            body["imRobotOpenSpaceModel"] = request.imRobotOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.openDynamicDataConfig)) {
            body["openDynamicDataConfig"] = request.openDynamicDataConfig;
        }
        if (!tea_util_1.default.isUnset(request.openSpaceId)) {
            body["openSpaceId"] = request.openSpaceId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.topOpenDeliverModel)) {
            body["topOpenDeliverModel"] = request.topOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.topOpenSpaceModel)) {
            body["topOpenSpaceModel"] = request.topOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateAndDeliver",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances/createAndDeliver`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateAndDeliverResponse({}));
    }
    async createAndDeliver(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateAndDeliverHeaders({});
        return await this.createAndDeliverWithOptions(request, headers, runtime);
    }
    async createCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.callbackType)) {
            body["callbackType"] = request.callbackType;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.coFeedOpenSpaceModel)) {
            body["coFeedOpenSpaceModel"] = request.coFeedOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenSpaceModel)) {
            body["imGroupOpenSpaceModel"] = request.imGroupOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenSpaceModel)) {
            body["imRobotOpenSpaceModel"] = request.imRobotOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.openDynamicDataConfig)) {
            body["openDynamicDataConfig"] = request.openDynamicDataConfig;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.topOpenSpaceModel)) {
            body["topOpenSpaceModel"] = request.topOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCard",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCardResponse({}));
    }
    async createCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCardHeaders({});
        return await this.createCardWithOptions(request, headers, runtime);
    }
    async deliverCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coFeedOpenDeliverModel)) {
            body["coFeedOpenDeliverModel"] = request.coFeedOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.docOpenDeliverModel)) {
            body["docOpenDeliverModel"] = request.docOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenDeliverModel)) {
            body["imGroupOpenDeliverModel"] = request.imGroupOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenDeliverModel)) {
            body["imRobotOpenDeliverModel"] = request.imRobotOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.openSpaceId)) {
            body["openSpaceId"] = request.openSpaceId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.topOpenDeliverModel)) {
            body["topOpenDeliverModel"] = request.topOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeliverCard",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances/deliver`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeliverCardResponse({}));
    }
    async deliverCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeliverCardHeaders({});
        return await this.deliverCardWithOptions(request, headers, runtime);
    }
    async registerCallbackWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.apiSecret)) {
            body["apiSecret"] = request.apiSecret;
        }
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.callbackUrl)) {
            body["callbackUrl"] = request.callbackUrl;
        }
        if (!tea_util_1.default.isUnset(request.forceUpdate)) {
            body["forceUpdate"] = request.forceUpdate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RegisterCallback",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/callbacks/register`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RegisterCallbackResponse({}));
    }
    async registerCallback(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RegisterCallbackHeaders({});
        return await this.registerCallbackWithOptions(request, headers, runtime);
    }
    async streamingUpdateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.guid)) {
            body["guid"] = request.guid;
        }
        if (!tea_util_1.default.isUnset(request.isError)) {
            body["isError"] = request.isError;
        }
        if (!tea_util_1.default.isUnset(request.isFinalize)) {
            body["isFinalize"] = request.isFinalize;
        }
        if (!tea_util_1.default.isUnset(request.isFull)) {
            body["isFull"] = request.isFull;
        }
        if (!tea_util_1.default.isUnset(request.key)) {
            body["key"] = request.key;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "StreamingUpdate",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/streaming`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new StreamingUpdateResponse({}));
    }
    async streamingUpdate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StreamingUpdateHeaders({});
        return await this.streamingUpdateWithOptions(request, headers, runtime);
    }
    async updateCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardUpdateOptions)) {
            body["cardUpdateOptions"] = request.cardUpdateOptions;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCard",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCardResponse({}));
    }
    async updateCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCardHeaders({});
        return await this.updateCardWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map