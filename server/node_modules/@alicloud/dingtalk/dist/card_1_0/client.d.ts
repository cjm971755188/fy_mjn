/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class PrivateDataValue extends $tea.Model {
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceRequest extends $tea.Model {
    coFeedOpenSpaceModel?: AppendSpaceRequestCoFeedOpenSpaceModel;
    imGroupOpenSpaceModel?: AppendSpaceRequestImGroupOpenSpaceModel;
    imRobotOpenSpaceModel?: AppendSpaceRequestImRobotOpenSpaceModel;
    outTrackId?: string;
    topOpenSpaceModel?: AppendSpaceRequestTopOpenSpaceModel;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AppendSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequest extends $tea.Model {
    callbackRouteKey?: string;
    callbackType?: string;
    cardData?: CreateAndDeliverRequestCardData;
    cardTemplateId?: string;
    coFeedOpenDeliverModel?: CreateAndDeliverRequestCoFeedOpenDeliverModel;
    coFeedOpenSpaceModel?: CreateAndDeliverRequestCoFeedOpenSpaceModel;
    docOpenDeliverModel?: CreateAndDeliverRequestDocOpenDeliverModel;
    imGroupOpenDeliverModel?: CreateAndDeliverRequestImGroupOpenDeliverModel;
    imGroupOpenSpaceModel?: CreateAndDeliverRequestImGroupOpenSpaceModel;
    imRobotOpenDeliverModel?: CreateAndDeliverRequestImRobotOpenDeliverModel;
    imRobotOpenSpaceModel?: CreateAndDeliverRequestImRobotOpenSpaceModel;
    openDynamicDataConfig?: CreateAndDeliverRequestOpenDynamicDataConfig;
    openSpaceId?: string;
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    topOpenDeliverModel?: CreateAndDeliverRequestTopOpenDeliverModel;
    topOpenSpaceModel?: CreateAndDeliverRequestTopOpenSpaceModel;
    userId?: string;
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverResponseBody extends $tea.Model {
    result?: CreateAndDeliverResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateAndDeliverResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequest extends $tea.Model {
    callbackRouteKey?: string;
    callbackType?: string;
    cardData?: CreateCardRequestCardData;
    cardTemplateId?: string;
    coFeedOpenSpaceModel?: CreateCardRequestCoFeedOpenSpaceModel;
    imGroupOpenSpaceModel?: CreateCardRequestImGroupOpenSpaceModel;
    imRobotOpenSpaceModel?: CreateCardRequestImRobotOpenSpaceModel;
    openDynamicDataConfig?: CreateCardRequestOpenDynamicDataConfig;
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    topOpenSpaceModel?: CreateCardRequestTopOpenSpaceModel;
    userId?: string;
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardRequest extends $tea.Model {
    coFeedOpenDeliverModel?: DeliverCardRequestCoFeedOpenDeliverModel;
    docOpenDeliverModel?: DeliverCardRequestDocOpenDeliverModel;
    imGroupOpenDeliverModel?: DeliverCardRequestImGroupOpenDeliverModel;
    imRobotOpenDeliverModel?: DeliverCardRequestImRobotOpenDeliverModel;
    openSpaceId?: string;
    outTrackId?: string;
    topOpenDeliverModel?: DeliverCardRequestTopOpenDeliverModel;
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardResponseBody extends $tea.Model {
    result?: DeliverCardResponseBodyResult[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeliverCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterCallbackHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterCallbackRequest extends $tea.Model {
    apiSecret?: string;
    callbackRouteKey?: string;
    callbackUrl?: string;
    forceUpdate?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterCallbackResponseBody extends $tea.Model {
    result?: RegisterCallbackResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterCallbackResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RegisterCallbackResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StreamingUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StreamingUpdateRequest extends $tea.Model {
    content?: string;
    guid?: string;
    isError?: boolean;
    isFinalize?: boolean;
    isFull?: boolean;
    key?: string;
    outTrackId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StreamingUpdateResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StreamingUpdateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StreamingUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardRequest extends $tea.Model {
    cardData?: UpdateCardRequestCardData;
    cardUpdateOptions?: UpdateCardRequestCardUpdateOptions;
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceRequestCoFeedOpenSpaceModel extends $tea.Model {
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    alertContent?: string;
    notificationOff?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    searchDesc?: string;
    searchIcon?: string;
    searchTypeName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceRequestImGroupOpenSpaceModel extends $tea.Model {
    lastMessageI18n?: {
        [key: string]: string;
    };
    notification?: AppendSpaceRequestImGroupOpenSpaceModelNotification;
    searchSupport?: AppendSpaceRequestImGroupOpenSpaceModelSearchSupport;
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    alertContent?: string;
    notificationOff?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    searchDesc?: string;
    searchIcon?: string;
    searchTypeName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceRequestImRobotOpenSpaceModel extends $tea.Model {
    lastMessageI18n?: {
        [key: string]: string;
    };
    notification?: AppendSpaceRequestImRobotOpenSpaceModelNotification;
    searchSupport?: AppendSpaceRequestImRobotOpenSpaceModelSearchSupport;
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendSpaceRequestTopOpenSpaceModel extends $tea.Model {
    spaceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestCardData extends $tea.Model {
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestCoFeedOpenDeliverModel extends $tea.Model {
    bizTag?: string;
    gmtTimeLine?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestCoFeedOpenSpaceModel extends $tea.Model {
    coolAppCode?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestDocOpenDeliverModel extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestImGroupOpenDeliverModel extends $tea.Model {
    atUserIds?: {
        [key: string]: string;
    };
    extension?: {
        [key: string]: string;
    };
    recipients?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    alertContent?: string;
    notificationOff?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    searchDesc?: string;
    searchIcon?: string;
    searchTypeName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestImGroupOpenSpaceModel extends $tea.Model {
    lastMessageI18n?: {
        [key: string]: string;
    };
    notification?: CreateAndDeliverRequestImGroupOpenSpaceModelNotification;
    searchSupport?: CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport;
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestImRobotOpenDeliverModel extends $tea.Model {
    extension?: {
        [key: string]: string;
    };
    robotCode?: string;
    spaceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    alertContent?: string;
    notificationOff?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    searchDesc?: string;
    searchIcon?: string;
    searchTypeName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestImRobotOpenSpaceModel extends $tea.Model {
    lastMessageI18n?: {
        [key: string]: string;
    };
    notification?: CreateAndDeliverRequestImRobotOpenSpaceModelNotification;
    searchSupport?: CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport;
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig extends $tea.Model {
    interval?: number;
    pullStrategy?: string;
    timeUnit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs extends $tea.Model {
    constParams?: {
        [key: string]: string;
    };
    dynamicDataSourceId?: string;
    pullConfig?: CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestOpenDynamicDataConfig extends $tea.Model {
    dynamicDataSourceConfigs?: CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestTopOpenDeliverModel extends $tea.Model {
    expiredTimeMillis?: number;
    platforms?: string[];
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverRequestTopOpenSpaceModel extends $tea.Model {
    spaceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverResponseBodyResultDeliverResults extends $tea.Model {
    carrierId?: string;
    errorMsg?: string;
    spaceId?: string;
    spaceType?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAndDeliverResponseBodyResult extends $tea.Model {
    deliverResults?: CreateAndDeliverResponseBodyResultDeliverResults[];
    outTrackId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestCardData extends $tea.Model {
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestCoFeedOpenSpaceModel extends $tea.Model {
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    alertContent?: string;
    notificationOff?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    searchDesc?: string;
    searchIcon?: string;
    searchTypeName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestImGroupOpenSpaceModel extends $tea.Model {
    lastMessageI18n?: {
        [key: string]: string;
    };
    notification?: CreateCardRequestImGroupOpenSpaceModelNotification;
    searchSupport?: CreateCardRequestImGroupOpenSpaceModelSearchSupport;
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    alertContent?: string;
    notificationOff?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    searchDesc?: string;
    searchIcon?: string;
    searchTypeName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestImRobotOpenSpaceModel extends $tea.Model {
    lastMessageI18n?: {
        [key: string]: string;
    };
    notification?: CreateCardRequestImRobotOpenSpaceModelNotification;
    searchSupport?: CreateCardRequestImRobotOpenSpaceModelSearchSupport;
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig extends $tea.Model {
    interval?: number;
    pullStrategy?: string;
    timeUnit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs extends $tea.Model {
    constParams?: {
        [key: string]: string;
    };
    dynamicDataSourceId?: string;
    pullConfig?: CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestOpenDynamicDataConfig extends $tea.Model {
    dynamicDataSourceConfigs?: CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCardRequestTopOpenSpaceModel extends $tea.Model {
    spaceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardRequestCoFeedOpenDeliverModel extends $tea.Model {
    bizTag?: string;
    gmtTimeLine?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardRequestDocOpenDeliverModel extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardRequestImGroupOpenDeliverModel extends $tea.Model {
    atUserIds?: {
        [key: string]: string;
    };
    extension?: {
        [key: string]: string;
    };
    recipients?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardRequestImRobotOpenDeliverModel extends $tea.Model {
    extension?: {
        [key: string]: string;
    };
    robotCode?: string;
    spaceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardRequestTopOpenDeliverModel extends $tea.Model {
    expiredTimeMillis?: number;
    platforms?: string[];
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeliverCardResponseBodyResult extends $tea.Model {
    carrierId?: string;
    errorMsg?: string;
    spaceId?: string;
    spaceType?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterCallbackResponseBodyResult extends $tea.Model {
    apiSecret?: string;
    callbackUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardRequestCardData extends $tea.Model {
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCardRequestCardUpdateOptions extends $tea.Model {
    updateCardDataByKey?: boolean;
    updatePrivateDataByKey?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    appendSpaceWithOptions(request: AppendSpaceRequest, headers: AppendSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<AppendSpaceResponse>;
    appendSpace(request: AppendSpaceRequest): Promise<AppendSpaceResponse>;
    createAndDeliverWithOptions(request: CreateAndDeliverRequest, headers: CreateAndDeliverHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAndDeliverResponse>;
    createAndDeliver(request: CreateAndDeliverRequest): Promise<CreateAndDeliverResponse>;
    createCardWithOptions(request: CreateCardRequest, headers: CreateCardHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCardResponse>;
    createCard(request: CreateCardRequest): Promise<CreateCardResponse>;
    deliverCardWithOptions(request: DeliverCardRequest, headers: DeliverCardHeaders, runtime: $Util.RuntimeOptions): Promise<DeliverCardResponse>;
    deliverCard(request: DeliverCardRequest): Promise<DeliverCardResponse>;
    registerCallbackWithOptions(request: RegisterCallbackRequest, headers: RegisterCallbackHeaders, runtime: $Util.RuntimeOptions): Promise<RegisterCallbackResponse>;
    registerCallback(request: RegisterCallbackRequest): Promise<RegisterCallbackResponse>;
    streamingUpdateWithOptions(request: StreamingUpdateRequest, headers: StreamingUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<StreamingUpdateResponse>;
    streamingUpdate(request: StreamingUpdateRequest): Promise<StreamingUpdateResponse>;
    updateCardWithOptions(request: UpdateCardRequest, headers: UpdateCardHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateCardResponse>;
    updateCard(request: UpdateCardRequest): Promise<UpdateCardResponse>;
}
