"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddCallConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddCallConfigHeaders = AddCallConfigHeaders;
class AddCallConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            isvToken: 'isvToken',
            phoneNumber: 'phoneNumber',
            scopeType: 'scopeType',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvToken: 'string',
            phoneNumber: 'string',
            scopeType: 'string',
        };
    }
}
exports.AddCallConfigRequest = AddCallConfigRequest;
class AddCallConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            token: 'token',
        };
    }
    static types() {
        return {
            token: 'string',
        };
    }
}
exports.AddCallConfigResponseBody = AddCallConfigResponseBody;
class AddCallConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddCallConfigResponseBody,
        };
    }
}
exports.AddCallConfigResponse = AddCallConfigResponse;
class DelCallConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DelCallConfigHeaders = DelCallConfigHeaders;
class DelCallConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            isvToken: 'isvToken',
            phoneNumber: 'phoneNumber',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvToken: 'string',
            phoneNumber: 'string',
        };
    }
}
exports.DelCallConfigRequest = DelCallConfigRequest;
class DelCallConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DelCallConfigResponseBody = DelCallConfigResponseBody;
class DelCallConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DelCallConfigResponseBody,
        };
    }
}
exports.DelCallConfigResponse = DelCallConfigResponse;
class QueryCallConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCallConfigHeaders = QueryCallConfigHeaders;
class QueryCallConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            isvToken: 'isvToken',
            phoneNumber: 'phoneNumber',
            scopeType: 'scopeType',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvToken: 'string',
            phoneNumber: 'string',
            scopeType: 'string',
        };
    }
}
exports.QueryCallConfigRequest = QueryCallConfigRequest;
class QueryCallConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryCallConfigResponseBodyResult },
        };
    }
}
exports.QueryCallConfigResponseBody = QueryCallConfigResponseBody;
class QueryCallConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCallConfigResponseBody,
        };
    }
}
exports.QueryCallConfigResponse = QueryCallConfigResponse;
class QueryCallConfigResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountDomain: 'accountDomain',
            accountId: 'accountId',
            callInType: 'callInType',
            callOutType: 'callOutType',
            createUid: 'createUid',
            phoneNumber: 'phoneNumber',
            scopeType: 'scopeType',
            showType: 'showType',
            sourceType: 'sourceType',
            status: 'status',
        };
    }
    static types() {
        return {
            accountDomain: 'string',
            accountId: 'string',
            callInType: 'number',
            callOutType: 'number',
            createUid: 'string',
            phoneNumber: 'string',
            scopeType: 'string',
            showType: 'number',
            sourceType: 'string',
            status: 'number',
        };
    }
}
exports.QueryCallConfigResponseBodyResult = QueryCallConfigResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addCallConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvToken)) {
            query["isvToken"] = request.isvToken;
        }
        if (!tea_util_1.default.isUnset(request.phoneNumber)) {
            query["phoneNumber"] = request.phoneNumber;
        }
        if (!tea_util_1.default.isUnset(request.scopeType)) {
            query["scopeType"] = request.scopeType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AddCallConfig",
            version: "dingPhone_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/dingPhone/callConfigs`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddCallConfigResponse({}));
    }
    async addCallConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddCallConfigHeaders({});
        return await this.addCallConfigWithOptions(request, headers, runtime);
    }
    async delCallConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvToken)) {
            query["isvToken"] = request.isvToken;
        }
        if (!tea_util_1.default.isUnset(request.phoneNumber)) {
            query["phoneNumber"] = request.phoneNumber;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DelCallConfig",
            version: "dingPhone_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/dingPhone/callConfigs`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DelCallConfigResponse({}));
    }
    async delCallConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DelCallConfigHeaders({});
        return await this.delCallConfigWithOptions(request, headers, runtime);
    }
    async queryCallConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.isvToken)) {
            query["isvToken"] = request.isvToken;
        }
        if (!tea_util_1.default.isUnset(request.phoneNumber)) {
            query["phoneNumber"] = request.phoneNumber;
        }
        if (!tea_util_1.default.isUnset(request.scopeType)) {
            query["scopeType"] = request.scopeType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCallConfig",
            version: "dingPhone_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/dingPhone/callConfigs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCallConfigResponse({}));
    }
    async queryCallConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCallConfigHeaders({});
        return await this.queryCallConfigWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map