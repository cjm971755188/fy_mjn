"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddOrgHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddOrgHeaders = AddOrgHeaders;
class AddOrgRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mobileNum: 'mobileNum',
            name: 'name',
        };
    }
    static types() {
        return {
            mobileNum: 'string',
            name: 'string',
        };
    }
}
exports.AddOrgRequest = AddOrgRequest;
class AddOrgResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            corpId: 'string',
        };
    }
}
exports.AddOrgResponseBody = AddOrgResponseBody;
class AddOrgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddOrgResponseBody,
        };
    }
}
exports.AddOrgResponse = AddOrgResponse;
class ApproveProcessCallbackHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ApproveProcessCallbackHeaders = ApproveProcessCallbackHeaders;
class ApproveProcessCallbackRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            request: 'request',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            request: ApproveProcessCallbackRequestRequest,
            targetCorpId: 'string',
        };
    }
}
exports.ApproveProcessCallbackRequest = ApproveProcessCallbackRequest;
class ApproveProcessCallbackResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'string',
        };
    }
}
exports.ApproveProcessCallbackResponseBody = ApproveProcessCallbackResponseBody;
class ApproveProcessCallbackResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ApproveProcessCallbackResponseBody,
        };
    }
}
exports.ApproveProcessCallbackResponse = ApproveProcessCallbackResponse;
class BanOrOpenGroupWordsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BanOrOpenGroupWordsHeaders = BanOrOpenGroupWordsHeaders;
class BanOrOpenGroupWordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            banWordsType: 'banWordsType',
            openConverationId: 'openConverationId',
        };
    }
    static types() {
        return {
            banWordsType: 'number',
            openConverationId: 'string',
        };
    }
}
exports.BanOrOpenGroupWordsRequest = BanOrOpenGroupWordsRequest;
class BanOrOpenGroupWordsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cause: 'cause',
            code: 'code',
        };
    }
    static types() {
        return {
            cause: 'string',
            code: 'string',
        };
    }
}
exports.BanOrOpenGroupWordsResponseBody = BanOrOpenGroupWordsResponseBody;
class BanOrOpenGroupWordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BanOrOpenGroupWordsResponseBody,
        };
    }
}
exports.BanOrOpenGroupWordsResponse = BanOrOpenGroupWordsResponse;
class CreateCategoryAndBindingGroupsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateCategoryAndBindingGroupsHeaders = CreateCategoryAndBindingGroupsHeaders;
class CreateCategoryAndBindingGroupsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            categoryName: 'categoryName',
            groupIds: 'groupIds',
        };
    }
    static types() {
        return {
            categoryName: 'string',
            groupIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.CreateCategoryAndBindingGroupsRequest = CreateCategoryAndBindingGroupsRequest;
class CreateCategoryAndBindingGroupsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'number',
        };
    }
}
exports.CreateCategoryAndBindingGroupsResponseBody = CreateCategoryAndBindingGroupsResponseBody;
class CreateCategoryAndBindingGroupsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCategoryAndBindingGroupsResponseBody,
        };
    }
}
exports.CreateCategoryAndBindingGroupsResponse = CreateCategoryAndBindingGroupsResponse;
class CreateMessageCategoryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateMessageCategoryHeaders = CreateMessageCategoryHeaders;
class CreateMessageCategoryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            categoryName: 'categoryName',
            groupIds: 'groupIds',
        };
    }
    static types() {
        return {
            categoryName: 'string',
            groupIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateMessageCategoryRequest = CreateMessageCategoryRequest;
class CreateMessageCategoryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'number',
        };
    }
}
exports.CreateMessageCategoryResponseBody = CreateMessageCategoryResponseBody;
class CreateMessageCategoryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateMessageCategoryResponseBody,
        };
    }
}
exports.CreateMessageCategoryResponse = CreateMessageCategoryResponse;
class CreateRuleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateRuleHeaders = CreateRuleHeaders;
class CreateRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            customPlan: 'customPlan',
        };
    }
    static types() {
        return {
            customPlan: CreateRuleRequestCustomPlan,
        };
    }
}
exports.CreateRuleRequest = CreateRuleRequest;
class CreateRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'number',
        };
    }
}
exports.CreateRuleResponseBody = CreateRuleResponseBody;
class CreateRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateRuleResponseBody,
        };
    }
}
exports.CreateRuleResponse = CreateRuleResponse;
class CreateTrustedDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateTrustedDeviceHeaders = CreateTrustedDeviceHeaders;
class CreateTrustedDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            did: 'did',
            macAddress: 'macAddress',
            platform: 'platform',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            did: 'string',
            macAddress: 'string',
            platform: 'string',
            status: 'number',
            userId: 'string',
        };
    }
}
exports.CreateTrustedDeviceRequest = CreateTrustedDeviceRequest;
class CreateTrustedDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.CreateTrustedDeviceResponseBody = CreateTrustedDeviceResponseBody;
class CreateTrustedDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTrustedDeviceResponseBody,
        };
    }
}
exports.CreateTrustedDeviceResponse = CreateTrustedDeviceResponse;
class CreateTrustedDeviceBatchHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateTrustedDeviceBatchHeaders = CreateTrustedDeviceBatchHeaders;
class CreateTrustedDeviceBatchRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            macAddressList: 'macAddressList',
            platform: 'platform',
            userId: 'userId',
        };
    }
    static types() {
        return {
            macAddressList: { 'type': 'array', 'itemType': 'string' },
            platform: 'string',
            userId: 'string',
        };
    }
}
exports.CreateTrustedDeviceBatchRequest = CreateTrustedDeviceBatchRequest;
class CreateTrustedDeviceBatchResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.CreateTrustedDeviceBatchResponseBody = CreateTrustedDeviceBatchResponseBody;
class CreateTrustedDeviceBatchResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTrustedDeviceBatchResponseBody,
        };
    }
}
exports.CreateTrustedDeviceBatchResponse = CreateTrustedDeviceBatchResponse;
class DeleteAcrossCloudStroageConfigsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteAcrossCloudStroageConfigsHeaders = DeleteAcrossCloudStroageConfigsHeaders;
class DeleteAcrossCloudStroageConfigsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteAcrossCloudStroageConfigsResponseBody = DeleteAcrossCloudStroageConfigsResponseBody;
class DeleteAcrossCloudStroageConfigsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteAcrossCloudStroageConfigsResponseBody,
        };
    }
}
exports.DeleteAcrossCloudStroageConfigsResponse = DeleteAcrossCloudStroageConfigsResponse;
class DeleteCommentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteCommentHeaders = DeleteCommentHeaders;
class DeleteCommentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: 'boolean',
        };
    }
}
exports.DeleteCommentResponse = DeleteCommentResponse;
class DeleteTrustedDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteTrustedDeviceHeaders = DeleteTrustedDeviceHeaders;
class DeleteTrustedDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kickOff: 'kickOff',
            macAddress: 'macAddress',
            userId: 'userId',
        };
    }
    static types() {
        return {
            kickOff: 'boolean',
            macAddress: 'string',
            userId: 'string',
        };
    }
}
exports.DeleteTrustedDeviceRequest = DeleteTrustedDeviceRequest;
class DeleteTrustedDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteTrustedDeviceResponseBody = DeleteTrustedDeviceResponseBody;
class DeleteTrustedDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteTrustedDeviceResponseBody,
        };
    }
}
exports.DeleteTrustedDeviceResponse = DeleteTrustedDeviceResponse;
class DistributePartnerAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DistributePartnerAppHeaders = DistributePartnerAppHeaders;
class DistributePartnerAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            deptId: 'deptId',
            subCorpId: 'subCorpId',
            type: 'type',
        };
    }
    static types() {
        return {
            appId: 'number',
            deptId: 'number',
            subCorpId: 'string',
            type: 'number',
        };
    }
}
exports.DistributePartnerAppRequest = DistributePartnerAppRequest;
class DistributePartnerAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inviteUrl: 'inviteUrl',
        };
    }
    static types() {
        return {
            inviteUrl: 'string',
        };
    }
}
exports.DistributePartnerAppResponseBody = DistributePartnerAppResponseBody;
class DistributePartnerAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DistributePartnerAppResponseBody,
        };
    }
}
exports.DistributePartnerAppResponse = DistributePartnerAppResponse;
class ExclusiveCreateDingPortalHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExclusiveCreateDingPortalHeaders = ExclusiveCreateDingPortalHeaders;
class ExclusiveCreateDingPortalRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingPortalName: 'dingPortalName',
            targetCorpId: 'targetCorpId',
            templateAppUuid: 'templateAppUuid',
            templateCorpId: 'templateCorpId',
        };
    }
    static types() {
        return {
            dingPortalName: 'string',
            targetCorpId: 'string',
            templateAppUuid: 'string',
            templateCorpId: 'string',
        };
    }
}
exports.ExclusiveCreateDingPortalRequest = ExclusiveCreateDingPortalRequest;
class ExclusiveCreateDingPortalResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'string',
        };
    }
}
exports.ExclusiveCreateDingPortalResponseBody = ExclusiveCreateDingPortalResponseBody;
class ExclusiveCreateDingPortalResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExclusiveCreateDingPortalResponseBody,
        };
    }
}
exports.ExclusiveCreateDingPortalResponse = ExclusiveCreateDingPortalResponse;
class FileStorageActiveStorageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.FileStorageActiveStorageHeaders = FileStorageActiveStorageHeaders;
class FileStorageActiveStorageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            oss: 'oss',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            oss: 'string',
            targetCorpId: 'string',
        };
    }
}
exports.FileStorageActiveStorageRequest = FileStorageActiveStorageRequest;
class FileStorageActiveStorageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createDate: 'createDate',
            fileStorageOpenStatus: 'fileStorageOpenStatus',
            storageStatus: 'storageStatus',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            createDate: 'string',
            fileStorageOpenStatus: 'number',
            storageStatus: 'number',
            usedQuota: 'number',
        };
    }
}
exports.FileStorageActiveStorageResponseBody = FileStorageActiveStorageResponseBody;
class FileStorageActiveStorageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageActiveStorageResponseBody,
        };
    }
}
exports.FileStorageActiveStorageResponse = FileStorageActiveStorageResponse;
class FileStorageCheckConnectionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.FileStorageCheckConnectionHeaders = FileStorageCheckConnectionHeaders;
class FileStorageCheckConnectionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            oss: 'oss',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            oss: 'string',
            targetCorpId: 'string',
        };
    }
}
exports.FileStorageCheckConnectionRequest = FileStorageCheckConnectionRequest;
class FileStorageCheckConnectionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            checkState: 'checkState',
            oss: 'oss',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            checkState: 'number',
            oss: 'string',
        };
    }
}
exports.FileStorageCheckConnectionResponseBody = FileStorageCheckConnectionResponseBody;
class FileStorageCheckConnectionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageCheckConnectionResponseBody,
        };
    }
}
exports.FileStorageCheckConnectionResponse = FileStorageCheckConnectionResponse;
class FileStorageGetQuotaDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.FileStorageGetQuotaDataHeaders = FileStorageGetQuotaDataHeaders;
class FileStorageGetQuotaDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
            targetCorpId: 'targetCorpId',
            type: 'type',
        };
    }
    static types() {
        return {
            endTime: 'string',
            startTime: 'string',
            targetCorpId: 'string',
            type: 'string',
        };
    }
}
exports.FileStorageGetQuotaDataRequest = FileStorageGetQuotaDataRequest;
class FileStorageGetQuotaDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            quotaModelList: 'quotaModelList',
        };
    }
    static types() {
        return {
            quotaModelList: { 'type': 'array', 'itemType': FileStorageGetQuotaDataResponseBodyQuotaModelList },
        };
    }
}
exports.FileStorageGetQuotaDataResponseBody = FileStorageGetQuotaDataResponseBody;
class FileStorageGetQuotaDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageGetQuotaDataResponseBody,
        };
    }
}
exports.FileStorageGetQuotaDataResponse = FileStorageGetQuotaDataResponse;
class FileStorageGetStorageStateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.FileStorageGetStorageStateHeaders = FileStorageGetStorageStateHeaders;
class FileStorageGetStorageStateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCorpId: 'string',
        };
    }
}
exports.FileStorageGetStorageStateRequest = FileStorageGetStorageStateRequest;
class FileStorageGetStorageStateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            createDate: 'createDate',
            fileStorageOpenStatus: 'fileStorageOpenStatus',
            oss: 'oss',
            storageStatus: 'storageStatus',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            createDate: 'string',
            fileStorageOpenStatus: 'number',
            oss: 'string',
            storageStatus: 'number',
            usedQuota: 'number',
        };
    }
}
exports.FileStorageGetStorageStateResponseBody = FileStorageGetStorageStateResponseBody;
class FileStorageGetStorageStateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageGetStorageStateResponseBody,
        };
    }
}
exports.FileStorageGetStorageStateResponse = FileStorageGetStorageStateResponse;
class FileStorageUpdateStorageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.FileStorageUpdateStorageHeaders = FileStorageUpdateStorageHeaders;
class FileStorageUpdateStorageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            targetCorpId: 'string',
        };
    }
}
exports.FileStorageUpdateStorageRequest = FileStorageUpdateStorageRequest;
class FileStorageUpdateStorageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            oss: 'oss',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            oss: 'string',
        };
    }
}
exports.FileStorageUpdateStorageResponseBody = FileStorageUpdateStorageResponseBody;
class FileStorageUpdateStorageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FileStorageUpdateStorageResponseBody,
        };
    }
}
exports.FileStorageUpdateStorageResponse = FileStorageUpdateStorageResponse;
class GenerateDarkWaterMarkHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GenerateDarkWaterMarkHeaders = GenerateDarkWaterMarkHeaders;
class GenerateDarkWaterMarkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GenerateDarkWaterMarkRequest = GenerateDarkWaterMarkRequest;
class GenerateDarkWaterMarkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            darkWatermarkVOList: 'darkWatermarkVOList',
        };
    }
    static types() {
        return {
            darkWatermarkVOList: { 'type': 'array', 'itemType': GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList },
        };
    }
}
exports.GenerateDarkWaterMarkResponseBody = GenerateDarkWaterMarkResponseBody;
class GenerateDarkWaterMarkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GenerateDarkWaterMarkResponseBody,
        };
    }
}
exports.GenerateDarkWaterMarkResponse = GenerateDarkWaterMarkResponse;
class GetAccountTransferListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAccountTransferListHeaders = GetAccountTransferListHeaders;
class GetAccountTransferListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            status: 'status',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            status: 'number',
        };
    }
}
exports.GetAccountTransferListRequest = GetAccountTransferListRequest;
class GetAccountTransferListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            itemList: 'itemList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            itemList: { 'type': 'array', 'itemType': GetAccountTransferListResponseBodyItemList },
            totalCount: 'number',
        };
    }
}
exports.GetAccountTransferListResponseBody = GetAccountTransferListResponseBody;
class GetAccountTransferListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAccountTransferListResponseBody,
        };
    }
}
exports.GetAccountTransferListResponse = GetAccountTransferListResponse;
class GetActiveUserSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetActiveUserSummaryHeaders = GetActiveUserSummaryHeaders;
class GetActiveUserSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actUsrCnt1m: 'actUsrCnt1m',
        };
    }
    static types() {
        return {
            actUsrCnt1m: 'string',
        };
    }
}
exports.GetActiveUserSummaryResponseBody = GetActiveUserSummaryResponseBody;
class GetActiveUserSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetActiveUserSummaryResponseBody,
        };
    }
}
exports.GetActiveUserSummaryResponse = GetActiveUserSummaryResponse;
class GetAgentIdByRelatedAppIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAgentIdByRelatedAppIdHeaders = GetAgentIdByRelatedAppIdHeaders;
class GetAgentIdByRelatedAppIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            appId: 'number',
            targetCorpId: 'string',
        };
    }
}
exports.GetAgentIdByRelatedAppIdRequest = GetAgentIdByRelatedAppIdRequest;
class GetAgentIdByRelatedAppIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
        };
    }
    static types() {
        return {
            agentId: 'number',
        };
    }
}
exports.GetAgentIdByRelatedAppIdResponseBody = GetAgentIdByRelatedAppIdResponseBody;
class GetAgentIdByRelatedAppIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAgentIdByRelatedAppIdResponseBody,
        };
    }
}
exports.GetAgentIdByRelatedAppIdResponse = GetAgentIdByRelatedAppIdResponse;
class GetAllLabelableDeptsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAllLabelableDeptsHeaders = GetAllLabelableDeptsHeaders;
class GetAllLabelableDeptsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetAllLabelableDeptsResponseBodyData },
        };
    }
}
exports.GetAllLabelableDeptsResponseBody = GetAllLabelableDeptsResponseBody;
class GetAllLabelableDeptsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAllLabelableDeptsResponseBody,
        };
    }
}
exports.GetAllLabelableDeptsResponse = GetAllLabelableDeptsResponse;
class GetAppDispatchInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAppDispatchInfoHeaders = GetAppDispatchInfoHeaders;
class GetAppDispatchInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            startTime: 'number',
        };
    }
}
exports.GetAppDispatchInfoRequest = GetAppDispatchInfoRequest;
class GetAppDispatchInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            android: 'android',
            iOS: 'iOS',
            mac: 'mac',
            windows: 'windows',
        };
    }
    static types() {
        return {
            android: { 'type': 'array', 'itemType': GetAppDispatchInfoResponseBodyAndroid },
            iOS: { 'type': 'array', 'itemType': GetAppDispatchInfoResponseBodyIOS },
            mac: { 'type': 'array', 'itemType': GetAppDispatchInfoResponseBodyMac },
            windows: { 'type': 'array', 'itemType': GetAppDispatchInfoResponseBodyWindows },
        };
    }
}
exports.GetAppDispatchInfoResponseBody = GetAppDispatchInfoResponseBody;
class GetAppDispatchInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAppDispatchInfoResponseBody,
        };
    }
}
exports.GetAppDispatchInfoResponse = GetAppDispatchInfoResponse;
class GetCalenderSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCalenderSummaryHeaders = GetCalenderSummaryHeaders;
class GetCalenderSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            calendarCreateUserCnt: 'calendarCreateUserCnt',
            recvCalendarUserCnt1d: 'recvCalendarUserCnt1d',
            useCalendarUserCnt1d: 'useCalendarUserCnt1d',
        };
    }
    static types() {
        return {
            calendarCreateUserCnt: 'string',
            recvCalendarUserCnt1d: 'string',
            useCalendarUserCnt1d: 'string',
        };
    }
}
exports.GetCalenderSummaryResponseBody = GetCalenderSummaryResponseBody;
class GetCalenderSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCalenderSummaryResponseBody,
        };
    }
}
exports.GetCalenderSummaryResponse = GetCalenderSummaryResponse;
class GetCommentListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCommentListHeaders = GetCommentListHeaders;
class GetCommentListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.GetCommentListRequest = GetCommentListRequest;
class GetCommentListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetCommentListResponseBodyData },
            totalCount: 'number',
        };
    }
}
exports.GetCommentListResponseBody = GetCommentListResponseBody;
class GetCommentListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCommentListResponseBody,
        };
    }
}
exports.GetCommentListResponse = GetCommentListResponse;
class GetConfBaseInfoByLogicalIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetConfBaseInfoByLogicalIdHeaders = GetConfBaseInfoByLogicalIdHeaders;
class GetConfBaseInfoByLogicalIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            logicalConferenceId: 'logicalConferenceId',
        };
    }
    static types() {
        return {
            logicalConferenceId: 'string',
        };
    }
}
exports.GetConfBaseInfoByLogicalIdRequest = GetConfBaseInfoByLogicalIdRequest;
class GetConfBaseInfoByLogicalIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conferenceId: 'conferenceId',
            logicalConferenceId: 'logicalConferenceId',
            nickname: 'nickname',
            startTime: 'startTime',
            title: 'title',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            logicalConferenceId: 'string',
            nickname: 'string',
            startTime: 'number',
            title: 'string',
            unionId: 'string',
        };
    }
}
exports.GetConfBaseInfoByLogicalIdResponseBody = GetConfBaseInfoByLogicalIdResponseBody;
class GetConfBaseInfoByLogicalIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetConfBaseInfoByLogicalIdResponseBody,
        };
    }
}
exports.GetConfBaseInfoByLogicalIdResponse = GetConfBaseInfoByLogicalIdResponse;
class GetConferenceDetailHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetConferenceDetailHeaders = GetConferenceDetailHeaders;
class GetConferenceDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendeeNum: 'attendeeNum',
            attendeePercentage: 'attendeePercentage',
            callerId: 'callerId',
            callerName: 'callerName',
            confStartTime: 'confStartTime',
            conferenceId: 'conferenceId',
            duration: 'duration',
            memberList: 'memberList',
            title: 'title',
            totalNum: 'totalNum',
        };
    }
    static types() {
        return {
            attendeeNum: 'number',
            attendeePercentage: 'string',
            callerId: 'string',
            callerName: 'string',
            confStartTime: 'number',
            conferenceId: 'string',
            duration: 'number',
            memberList: { 'type': 'array', 'itemType': GetConferenceDetailResponseBodyMemberList },
            title: 'string',
            totalNum: 'number',
        };
    }
}
exports.GetConferenceDetailResponseBody = GetConferenceDetailResponseBody;
class GetConferenceDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetConferenceDetailResponseBody,
        };
    }
}
exports.GetConferenceDetailResponse = GetConferenceDetailResponse;
class GetDingReportDeptSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDingReportDeptSummaryHeaders = GetDingReportDeptSummaryHeaders;
class GetDingReportDeptSummaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.GetDingReportDeptSummaryRequest = GetDingReportDeptSummaryRequest;
class GetDingReportDeptSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetDingReportDeptSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
}
exports.GetDingReportDeptSummaryResponseBody = GetDingReportDeptSummaryResponseBody;
class GetDingReportDeptSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDingReportDeptSummaryResponseBody,
        };
    }
}
exports.GetDingReportDeptSummaryResponse = GetDingReportDeptSummaryResponse;
class GetDingReportSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDingReportSummaryHeaders = GetDingReportSummaryHeaders;
class GetDingReportSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            reportCommentUserCnt1d: 'reportCommentUserCnt1d',
        };
    }
    static types() {
        return {
            reportCommentUserCnt1d: 'string',
        };
    }
}
exports.GetDingReportSummaryResponseBody = GetDingReportSummaryResponseBody;
class GetDingReportSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDingReportSummaryResponseBody,
        };
    }
}
exports.GetDingReportSummaryResponse = GetDingReportSummaryResponse;
class GetDocCreatedDeptSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDocCreatedDeptSummaryHeaders = GetDocCreatedDeptSummaryHeaders;
class GetDocCreatedDeptSummaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.GetDocCreatedDeptSummaryRequest = GetDocCreatedDeptSummaryRequest;
class GetDocCreatedDeptSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetDocCreatedDeptSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
}
exports.GetDocCreatedDeptSummaryResponseBody = GetDocCreatedDeptSummaryResponseBody;
class GetDocCreatedDeptSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDocCreatedDeptSummaryResponseBody,
        };
    }
}
exports.GetDocCreatedDeptSummaryResponse = GetDocCreatedDeptSummaryResponse;
class GetDocCreatedSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDocCreatedSummaryHeaders = GetDocCreatedSummaryHeaders;
class GetDocCreatedSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            docCreateUserCnt1d: 'docCreateUserCnt1d',
            docCreatedCnt: 'docCreatedCnt',
        };
    }
    static types() {
        return {
            docCreateUserCnt1d: 'string',
            docCreatedCnt: 'string',
        };
    }
}
exports.GetDocCreatedSummaryResponseBody = GetDocCreatedSummaryResponseBody;
class GetDocCreatedSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDocCreatedSummaryResponseBody,
        };
    }
}
exports.GetDocCreatedSummaryResponse = GetDocCreatedSummaryResponse;
class GetExclusiveAccountAllOrgListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetExclusiveAccountAllOrgListHeaders = GetExclusiveAccountAllOrgListHeaders;
class GetExclusiveAccountAllOrgListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.GetExclusiveAccountAllOrgListRequest = GetExclusiveAccountAllOrgListRequest;
class GetExclusiveAccountAllOrgListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orgInfoList: 'orgInfoList',
        };
    }
    static types() {
        return {
            orgInfoList: { 'type': 'array', 'itemType': GetExclusiveAccountAllOrgListResponseBodyOrgInfoList },
        };
    }
}
exports.GetExclusiveAccountAllOrgListResponseBody = GetExclusiveAccountAllOrgListResponseBody;
class GetExclusiveAccountAllOrgListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetExclusiveAccountAllOrgListResponseBody,
        };
    }
}
exports.GetExclusiveAccountAllOrgListResponse = GetExclusiveAccountAllOrgListResponse;
class GetGeneralFormCreatedDeptSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetGeneralFormCreatedDeptSummaryHeaders = GetGeneralFormCreatedDeptSummaryHeaders;
class GetGeneralFormCreatedDeptSummaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.GetGeneralFormCreatedDeptSummaryRequest = GetGeneralFormCreatedDeptSummaryRequest;
class GetGeneralFormCreatedDeptSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetGeneralFormCreatedDeptSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
}
exports.GetGeneralFormCreatedDeptSummaryResponseBody = GetGeneralFormCreatedDeptSummaryResponseBody;
class GetGeneralFormCreatedDeptSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetGeneralFormCreatedDeptSummaryResponseBody,
        };
    }
}
exports.GetGeneralFormCreatedDeptSummaryResponse = GetGeneralFormCreatedDeptSummaryResponse;
class GetGeneralFormCreatedSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetGeneralFormCreatedSummaryHeaders = GetGeneralFormCreatedSummaryHeaders;
class GetGeneralFormCreatedSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            generalFormCreatedCnt: 'generalFormCreatedCnt',
            useGeneralFormUserCnt1d: 'useGeneralFormUserCnt1d',
        };
    }
    static types() {
        return {
            generalFormCreatedCnt: 'string',
            useGeneralFormUserCnt1d: 'string',
        };
    }
}
exports.GetGeneralFormCreatedSummaryResponseBody = GetGeneralFormCreatedSummaryResponseBody;
class GetGeneralFormCreatedSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetGeneralFormCreatedSummaryResponseBody,
        };
    }
}
exports.GetGeneralFormCreatedSummaryResponse = GetGeneralFormCreatedSummaryResponse;
class GetGroupActiveInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetGroupActiveInfoHeaders = GetGroupActiveInfoHeaders;
class GetGroupActiveInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingGroupId: 'dingGroupId',
            groupType: 'groupType',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            dingGroupId: 'string',
            groupType: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            statDate: 'string',
        };
    }
}
exports.GetGroupActiveInfoRequest = GetGroupActiveInfoRequest;
class GetGroupActiveInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetGroupActiveInfoResponseBodyData },
            totalCount: 'number',
        };
    }
}
exports.GetGroupActiveInfoResponseBody = GetGroupActiveInfoResponseBody;
class GetGroupActiveInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetGroupActiveInfoResponseBody,
        };
    }
}
exports.GetGroupActiveInfoResponse = GetGroupActiveInfoResponse;
class GetInActiveUserListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetInActiveUserListHeaders = GetInActiveUserListHeaders;
class GetInActiveUserListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'string' },
            pageNumber: 'number',
            pageSize: 'number',
            statDate: 'string',
        };
    }
}
exports.GetInActiveUserListRequest = GetInActiveUserListRequest;
class GetInActiveUserListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': GetInActiveUserListResponseBodyMetaList },
        };
    }
}
exports.GetInActiveUserListResponseBody = GetInActiveUserListResponseBody;
class GetInActiveUserListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInActiveUserListResponseBody,
        };
    }
}
exports.GetInActiveUserListResponse = GetInActiveUserListResponse;
class GetLastOrgAuthDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetLastOrgAuthDataHeaders = GetLastOrgAuthDataHeaders;
class GetLastOrgAuthDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCorpId: 'string',
        };
    }
}
exports.GetLastOrgAuthDataRequest = GetLastOrgAuthDataRequest;
class GetLastOrgAuthDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authRemark: 'authRemark',
            authStatus: 'authStatus',
        };
    }
    static types() {
        return {
            authRemark: 'string',
            authStatus: 'number',
        };
    }
}
exports.GetLastOrgAuthDataResponseBody = GetLastOrgAuthDataResponseBody;
class GetLastOrgAuthDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetLastOrgAuthDataResponseBody,
        };
    }
}
exports.GetLastOrgAuthDataResponse = GetLastOrgAuthDataResponse;
class GetOaOperatorLogListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOaOperatorLogListHeaders = GetOaOperatorLogListHeaders;
class GetOaOperatorLogListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            categoryList: 'categoryList',
            endTime: 'endTime',
            opUserId: 'opUserId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            categoryList: { 'type': 'array', 'itemType': 'string' },
            endTime: 'number',
            opUserId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startTime: 'number',
        };
    }
}
exports.GetOaOperatorLogListRequest = GetOaOperatorLogListRequest;
class GetOaOperatorLogListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            itemCount: 'itemCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetOaOperatorLogListResponseBodyData },
            itemCount: 'number',
        };
    }
}
exports.GetOaOperatorLogListResponseBody = GetOaOperatorLogListResponseBody;
class GetOaOperatorLogListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOaOperatorLogListResponseBody,
        };
    }
}
exports.GetOaOperatorLogListResponse = GetOaOperatorLogListResponse;
class GetOutGroupsByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOutGroupsByPageHeaders = GetOutGroupsByPageHeaders;
class GetOutGroupsByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.GetOutGroupsByPageRequest = GetOutGroupsByPageRequest;
class GetOutGroupsByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            responseBody: 'responseBody',
        };
    }
    static types() {
        return {
            responseBody: GetOutGroupsByPageResponseBodyResponseBody,
        };
    }
}
exports.GetOutGroupsByPageResponseBody = GetOutGroupsByPageResponseBody;
class GetOutGroupsByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOutGroupsByPageResponseBody,
        };
    }
}
exports.GetOutGroupsByPageResponse = GetOutGroupsByPageResponse;
class GetOutsideAuditGroupMessageByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOutsideAuditGroupMessageByPageHeaders = GetOutsideAuditGroupMessageByPageHeaders;
class GetOutsideAuditGroupMessageByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
            openConversationId: 'string',
        };
    }
}
exports.GetOutsideAuditGroupMessageByPageRequest = GetOutsideAuditGroupMessageByPageRequest;
class GetOutsideAuditGroupMessageByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            responseBody: 'responseBody',
        };
    }
    static types() {
        return {
            responseBody: GetOutsideAuditGroupMessageByPageResponseBodyResponseBody,
        };
    }
}
exports.GetOutsideAuditGroupMessageByPageResponseBody = GetOutsideAuditGroupMessageByPageResponseBody;
class GetOutsideAuditGroupMessageByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOutsideAuditGroupMessageByPageResponseBody,
        };
    }
}
exports.GetOutsideAuditGroupMessageByPageResponse = GetOutsideAuditGroupMessageByPageResponse;
class GetPartnerTypeByParentIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPartnerTypeByParentIdHeaders = GetPartnerTypeByParentIdHeaders;
class GetPartnerTypeByParentIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetPartnerTypeByParentIdResponseBodyData },
        };
    }
}
exports.GetPartnerTypeByParentIdResponseBody = GetPartnerTypeByParentIdResponseBody;
class GetPartnerTypeByParentIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPartnerTypeByParentIdResponseBody,
        };
    }
}
exports.GetPartnerTypeByParentIdResponse = GetPartnerTypeByParentIdResponse;
class GetPublicDevicesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPublicDevicesHeaders = GetPublicDevicesHeaders;
class GetPublicDevicesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            macAddress: 'macAddress',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            platform: 'platform',
            startTime: 'startTime',
            title: 'title',
        };
    }
    static types() {
        return {
            endTime: 'number',
            macAddress: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            platform: 'string',
            startTime: 'number',
            title: 'string',
        };
    }
}
exports.GetPublicDevicesRequest = GetPublicDevicesRequest;
class GetPublicDevicesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            dataCnt: 'dataCnt',
            totalCnt: 'totalCnt',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetPublicDevicesResponseBodyData },
            dataCnt: 'number',
            totalCnt: 'number',
        };
    }
}
exports.GetPublicDevicesResponseBody = GetPublicDevicesResponseBody;
class GetPublicDevicesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPublicDevicesResponseBody,
        };
    }
}
exports.GetPublicDevicesResponse = GetPublicDevicesResponse;
class GetPublisherSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPublisherSummaryHeaders = GetPublisherSummaryHeaders;
class GetPublisherSummaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.GetPublisherSummaryRequest = GetPublisherSummaryRequest;
class GetPublisherSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            publisherArticleCntStd: 'publisherArticleCntStd',
            publisherArticlePvCntStd: 'publisherArticlePvCntStd',
            publisherArticlePvTop5: 'publisherArticlePvTop5',
            publisherCntStd: 'publisherCntStd',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetPublisherSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
            publisherArticleCntStd: 'string',
            publisherArticlePvCntStd: 'string',
            publisherArticlePvTop5: { 'type': 'array', 'itemType': GetPublisherSummaryResponseBodyPublisherArticlePvTop5 },
            publisherCntStd: 'string',
        };
    }
}
exports.GetPublisherSummaryResponseBody = GetPublisherSummaryResponseBody;
class GetPublisherSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPublisherSummaryResponseBody,
        };
    }
}
exports.GetPublisherSummaryResponse = GetPublisherSummaryResponse;
class GetRealPeopleRecordsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRealPeopleRecordsHeaders = GetRealPeopleRecordsHeaders;
class GetRealPeopleRecordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            fromTime: 'fromTime',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            personIdentification: 'personIdentification',
            scene: 'scene',
            toTime: 'toTime',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            agentId: 'number',
            fromTime: 'number',
            maxResults: 'number',
            nextToken: 'number',
            personIdentification: 'number',
            scene: 'number',
            toTime: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetRealPeopleRecordsRequest = GetRealPeopleRecordsRequest;
class GetRealPeopleRecordsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            nextToken: 'nextToken',
            total: 'total',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetRealPeopleRecordsResponseBodyData },
            nextToken: 'number',
            total: 'number',
        };
    }
}
exports.GetRealPeopleRecordsResponseBody = GetRealPeopleRecordsResponseBody;
class GetRealPeopleRecordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRealPeopleRecordsResponseBody,
        };
    }
}
exports.GetRealPeopleRecordsResponse = GetRealPeopleRecordsResponse;
class GetRecognizeRecordsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRecognizeRecordsHeaders = GetRecognizeRecordsHeaders;
class GetRecognizeRecordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            faceCompareResult: 'faceCompareResult',
            fromTime: 'fromTime',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            toTime: 'toTime',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            agentId: 'number',
            faceCompareResult: 'number',
            fromTime: 'number',
            maxResults: 'number',
            nextToken: 'number',
            toTime: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetRecognizeRecordsRequest = GetRecognizeRecordsRequest;
class GetRecognizeRecordsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            nextToken: 'nextToken',
            total: 'total',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetRecognizeRecordsResponseBodyData },
            nextToken: 'number',
            total: 'number',
        };
    }
}
exports.GetRecognizeRecordsResponseBody = GetRecognizeRecordsResponseBody;
class GetRecognizeRecordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRecognizeRecordsResponseBody,
        };
    }
}
exports.GetRecognizeRecordsResponse = GetRecognizeRecordsResponse;
class GetSignedDetailByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSignedDetailByPageHeaders = GetSignedDetailByPageHeaders;
class GetSignedDetailByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            signStatus: 'signStatus',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            signStatus: 'number',
        };
    }
}
exports.GetSignedDetailByPageRequest = GetSignedDetailByPageRequest;
class GetSignedDetailByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auditSignedDetailDTOList: 'auditSignedDetailDTOList',
            currentPage: 'currentPage',
            pageSize: 'pageSize',
            total: 'total',
        };
    }
    static types() {
        return {
            auditSignedDetailDTOList: { 'type': 'array', 'itemType': GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList },
            currentPage: 'number',
            pageSize: 'number',
            total: 'number',
        };
    }
}
exports.GetSignedDetailByPageResponseBody = GetSignedDetailByPageResponseBody;
class GetSignedDetailByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSignedDetailByPageResponseBody,
        };
    }
}
exports.GetSignedDetailByPageResponse = GetSignedDetailByPageResponse;
class GetTrustDeviceListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTrustDeviceListHeaders = GetTrustDeviceListHeaders;
class GetTrustDeviceListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetTrustDeviceListRequest = GetTrustDeviceListRequest;
class GetTrustDeviceListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetTrustDeviceListResponseBodyData },
        };
    }
}
exports.GetTrustDeviceListResponseBody = GetTrustDeviceListResponseBody;
class GetTrustDeviceListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTrustDeviceListResponseBody,
        };
    }
}
exports.GetTrustDeviceListResponse = GetTrustDeviceListResponse;
class GetUserAppVersionSummaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserAppVersionSummaryHeaders = GetUserAppVersionSummaryHeaders;
class GetUserAppVersionSummaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.GetUserAppVersionSummaryRequest = GetUserAppVersionSummaryRequest;
class GetUserAppVersionSummaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetUserAppVersionSummaryResponseBodyData },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
}
exports.GetUserAppVersionSummaryResponseBody = GetUserAppVersionSummaryResponseBody;
class GetUserAppVersionSummaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserAppVersionSummaryResponseBody,
        };
    }
}
exports.GetUserAppVersionSummaryResponse = GetUserAppVersionSummaryResponse;
class GetUserFaceStateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserFaceStateHeaders = GetUserFaceStateHeaders;
class GetUserFaceStateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetUserFaceStateRequest = GetUserFaceStateRequest;
class GetUserFaceStateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetUserFaceStateResponseBodyData },
        };
    }
}
exports.GetUserFaceStateResponseBody = GetUserFaceStateResponseBody;
class GetUserFaceStateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserFaceStateResponseBody,
        };
    }
}
exports.GetUserFaceStateResponse = GetUserFaceStateResponse;
class GetUserRealPeopleStateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserRealPeopleStateHeaders = GetUserRealPeopleStateHeaders;
class GetUserRealPeopleStateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetUserRealPeopleStateRequest = GetUserRealPeopleStateRequest;
class GetUserRealPeopleStateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetUserRealPeopleStateResponseBodyData },
        };
    }
}
exports.GetUserRealPeopleStateResponseBody = GetUserRealPeopleStateResponseBody;
class GetUserRealPeopleStateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserRealPeopleStateResponseBody,
        };
    }
}
exports.GetUserRealPeopleStateResponse = GetUserRealPeopleStateResponse;
class GetUserStayLengthHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserStayLengthHeaders = GetUserStayLengthHeaders;
class GetUserStayLengthRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            statDate: 'string',
        };
    }
}
exports.GetUserStayLengthRequest = GetUserStayLengthRequest;
class GetUserStayLengthResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            itemList: 'itemList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            itemList: { 'type': 'array', 'itemType': GetUserStayLengthResponseBodyItemList },
            totalCount: 'number',
        };
    }
}
exports.GetUserStayLengthResponseBody = GetUserStayLengthResponseBody;
class GetUserStayLengthResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserStayLengthResponseBody,
        };
    }
}
exports.GetUserStayLengthResponse = GetUserStayLengthResponse;
class ListAuditLogHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListAuditLogHeaders = ListAuditLogHeaders;
class ListAuditLogRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            nextBizId: 'nextBizId',
            nextGmtCreate: 'nextGmtCreate',
            pageSize: 'pageSize',
            startDate: 'startDate',
        };
    }
    static types() {
        return {
            endDate: 'number',
            nextBizId: 'number',
            nextGmtCreate: 'number',
            pageSize: 'number',
            startDate: 'number',
        };
    }
}
exports.ListAuditLogRequest = ListAuditLogRequest;
class ListAuditLogResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListAuditLogResponseBodyList },
        };
    }
}
exports.ListAuditLogResponseBody = ListAuditLogResponseBody;
class ListAuditLogResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAuditLogResponseBody,
        };
    }
}
exports.ListAuditLogResponse = ListAuditLogResponse;
class ListCategorysHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListCategorysHeaders = ListCategorysHeaders;
class ListCategorysRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: ListCategorysRequestBody,
        };
    }
}
exports.ListCategorysRequest = ListCategorysRequest;
class ListCategorysShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bodyShrink: 'body',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
        };
    }
}
exports.ListCategorysShrinkRequest = ListCategorysShrinkRequest;
class ListCategorysResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            detailModelList: 'detailModelList',
        };
    }
    static types() {
        return {
            detailModelList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
        };
    }
}
exports.ListCategorysResponseBody = ListCategorysResponseBody;
class ListCategorysResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListCategorysResponseBody,
        };
    }
}
exports.ListCategorysResponse = ListCategorysResponse;
class ListJoinOrgInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListJoinOrgInfoHeaders = ListJoinOrgInfoHeaders;
class ListJoinOrgInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mobile: 'mobile',
        };
    }
    static types() {
        return {
            mobile: 'string',
        };
    }
}
exports.ListJoinOrgInfoRequest = ListJoinOrgInfoRequest;
class ListJoinOrgInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orgInfoList: 'orgInfoList',
        };
    }
    static types() {
        return {
            orgInfoList: { 'type': 'array', 'itemType': ListJoinOrgInfoResponseBodyOrgInfoList },
        };
    }
}
exports.ListJoinOrgInfoResponseBody = ListJoinOrgInfoResponseBody;
class ListJoinOrgInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListJoinOrgInfoResponseBody,
        };
    }
}
exports.ListJoinOrgInfoResponse = ListJoinOrgInfoResponse;
class ListMiniAppAvailableVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListMiniAppAvailableVersionHeaders = ListMiniAppAvailableVersionHeaders;
class ListMiniAppAvailableVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniAppId: 'miniAppId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            versionTypeSet: 'versionTypeSet',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            versionTypeSet: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.ListMiniAppAvailableVersionRequest = ListMiniAppAvailableVersionRequest;
class ListMiniAppAvailableVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListMiniAppAvailableVersionResponseBodyList },
        };
    }
}
exports.ListMiniAppAvailableVersionResponseBody = ListMiniAppAvailableVersionResponseBody;
class ListMiniAppAvailableVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListMiniAppAvailableVersionResponseBody,
        };
    }
}
exports.ListMiniAppAvailableVersionResponse = ListMiniAppAvailableVersionResponse;
class ListMiniAppHistoryVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListMiniAppHistoryVersionHeaders = ListMiniAppHistoryVersionHeaders;
class ListMiniAppHistoryVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniAppId: 'miniAppId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.ListMiniAppHistoryVersionRequest = ListMiniAppHistoryVersionRequest;
class ListMiniAppHistoryVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListMiniAppHistoryVersionResponseBodyList },
        };
    }
}
exports.ListMiniAppHistoryVersionResponseBody = ListMiniAppHistoryVersionResponseBody;
class ListMiniAppHistoryVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListMiniAppHistoryVersionResponseBody,
        };
    }
}
exports.ListMiniAppHistoryVersionResponse = ListMiniAppHistoryVersionResponse;
class ListPartnerRolesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListPartnerRolesHeaders = ListPartnerRolesHeaders;
class ListPartnerRolesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyList },
        };
    }
}
exports.ListPartnerRolesResponseBody = ListPartnerRolesResponseBody;
class ListPartnerRolesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPartnerRolesResponseBody,
        };
    }
}
exports.ListPartnerRolesResponse = ListPartnerRolesResponse;
class ListPunchScheduleByConditionWithPagingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListPunchScheduleByConditionWithPagingHeaders = ListPunchScheduleByConditionWithPagingHeaders;
class ListPunchScheduleByConditionWithPagingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizInstanceId: 'bizInstanceId',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            scheduleDateEnd: 'scheduleDateEnd',
            scheduleDateStart: 'scheduleDateStart',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            bizInstanceId: 'string',
            maxResults: 'number',
            nextToken: 'number',
            scheduleDateEnd: 'string',
            scheduleDateStart: 'string',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListPunchScheduleByConditionWithPagingRequest = ListPunchScheduleByConditionWithPagingRequest;
class ListPunchScheduleByConditionWithPagingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': ListPunchScheduleByConditionWithPagingResponseBodyList },
            nextToken: 'number',
        };
    }
}
exports.ListPunchScheduleByConditionWithPagingResponseBody = ListPunchScheduleByConditionWithPagingResponseBody;
class ListPunchScheduleByConditionWithPagingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPunchScheduleByConditionWithPagingResponseBody,
        };
    }
}
exports.ListPunchScheduleByConditionWithPagingResponse = ListPunchScheduleByConditionWithPagingResponse;
class ListRulesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListRulesHeaders = ListRulesHeaders;
class ListRulesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: ListRulesRequestBody,
        };
    }
}
exports.ListRulesRequest = ListRulesRequest;
class ListRulesShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bodyShrink: 'body',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
        };
    }
}
exports.ListRulesShrinkRequest = ListRulesShrinkRequest;
class ListRulesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            detailModelList: 'detailModelList',
        };
    }
    static types() {
        return {
            detailModelList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
        };
    }
}
exports.ListRulesResponseBody = ListRulesResponseBody;
class ListRulesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListRulesResponseBody,
        };
    }
}
exports.ListRulesResponse = ListRulesResponse;
class LogoutHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.LogoutHeaders = LogoutHeaders;
class LogoutRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceType: 'deviceType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deviceType: 'string',
            userId: 'string',
        };
    }
}
exports.LogoutRequest = LogoutRequest;
class LogoutResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.LogoutResponseBody = LogoutResponseBody;
class LogoutResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LogoutResponseBody,
        };
    }
}
exports.LogoutResponse = LogoutResponse;
class PublishFileChangeNoticeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PublishFileChangeNoticeHeaders = PublishFileChangeNoticeHeaders;
class PublishFileChangeNoticeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileId: 'fileId',
            operateType: 'operateType',
            operatorUnionId: 'operatorUnionId',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            fileId: 'string',
            operateType: 'string',
            operatorUnionId: 'string',
            spaceId: 'string',
        };
    }
}
exports.PublishFileChangeNoticeRequest = PublishFileChangeNoticeRequest;
class PublishFileChangeNoticeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.PublishFileChangeNoticeResponse = PublishFileChangeNoticeResponse;
class PublishRuleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PublishRuleHeaders = PublishRuleHeaders;
class PublishRuleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
}
exports.PublishRuleRequest = PublishRuleRequest;
class PublishRuleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isPublish: 'isPublish',
        };
    }
    static types() {
        return {
            isPublish: 'boolean',
        };
    }
}
exports.PublishRuleResponseBody = PublishRuleResponseBody;
class PublishRuleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PublishRuleResponseBody,
        };
    }
}
exports.PublishRuleResponse = PublishRuleResponse;
class PushBadgeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PushBadgeHeaders = PushBadgeHeaders;
class PushBadgeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            badgeItems: 'badgeItems',
            pushType: 'pushType',
        };
    }
    static types() {
        return {
            agentId: 'string',
            badgeItems: { 'type': 'array', 'itemType': PushBadgeRequestBadgeItems },
            pushType: 'string',
        };
    }
}
exports.PushBadgeRequest = PushBadgeRequest;
class PushBadgeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.PushBadgeResponseBody = PushBadgeResponseBody;
class PushBadgeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PushBadgeResponseBody,
        };
    }
}
exports.PushBadgeResponse = PushBadgeResponse;
class QueryAcrossCloudStroageConfigsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAcrossCloudStroageConfigsHeaders = QueryAcrossCloudStroageConfigsHeaders;
class QueryAcrossCloudStroageConfigsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetCloudType: 'targetCloudType',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCloudType: 'number',
            targetCorpId: 'string',
        };
    }
}
exports.QueryAcrossCloudStroageConfigsRequest = QueryAcrossCloudStroageConfigsRequest;
class QueryAcrossCloudStroageConfigsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            bucketName: 'bucketName',
            cloudType: 'cloudType',
            endpoint: 'endpoint',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            bucketName: 'string',
            cloudType: 'number',
            endpoint: 'string',
        };
    }
}
exports.QueryAcrossCloudStroageConfigsResponseBody = QueryAcrossCloudStroageConfigsResponseBody;
class QueryAcrossCloudStroageConfigsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAcrossCloudStroageConfigsResponseBody,
        };
    }
}
exports.QueryAcrossCloudStroageConfigsResponse = QueryAcrossCloudStroageConfigsResponse;
class QueryPartnerInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryPartnerInfoHeaders = QueryPartnerInfoHeaders;
class QueryPartnerInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            partnerDeptList: 'partnerDeptList',
            partnerLabelList: 'partnerLabelList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            partnerDeptList: { 'type': 'array', 'itemType': QueryPartnerInfoResponseBodyPartnerDeptList },
            partnerLabelList: { 'type': 'array', 'itemType': QueryPartnerInfoResponseBodyPartnerLabelList },
            userId: 'string',
        };
    }
}
exports.QueryPartnerInfoResponseBody = QueryPartnerInfoResponseBody;
class QueryPartnerInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPartnerInfoResponseBody,
        };
    }
}
exports.QueryPartnerInfoResponse = QueryPartnerInfoResponse;
class QueryUserBehaviorHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserBehaviorHeaders = QueryUserBehaviorHeaders;
class QueryUserBehaviorRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            platform: 'platform',
            startTime: 'startTime',
            type: 'type',
            userId: 'userId',
        };
    }
    static types() {
        return {
            endTime: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            platform: 'number',
            startTime: 'number',
            type: 'number',
            userId: 'string',
        };
    }
}
exports.QueryUserBehaviorRequest = QueryUserBehaviorRequest;
class QueryUserBehaviorResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            dataCnt: 'dataCnt',
            totalCnt: 'totalCnt',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': QueryUserBehaviorResponseBodyData },
            dataCnt: 'number',
            totalCnt: 'number',
        };
    }
}
exports.QueryUserBehaviorResponseBody = QueryUserBehaviorResponseBody;
class QueryUserBehaviorResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserBehaviorResponseBody,
        };
    }
}
exports.QueryUserBehaviorResponse = QueryUserBehaviorResponse;
class RollbackMiniAppVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RollbackMiniAppVersionHeaders = RollbackMiniAppVersionHeaders;
class RollbackMiniAppVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniAppId: 'miniAppId',
            rollbackVersion: 'rollbackVersion',
            targetVersion: 'targetVersion',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
            rollbackVersion: 'string',
            targetVersion: 'string',
        };
    }
}
exports.RollbackMiniAppVersionRequest = RollbackMiniAppVersionRequest;
class RollbackMiniAppVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cause: 'cause',
            code: 'code',
        };
    }
    static types() {
        return {
            cause: 'string',
            code: 'number',
        };
    }
}
exports.RollbackMiniAppVersionResponseBody = RollbackMiniAppVersionResponseBody;
class RollbackMiniAppVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RollbackMiniAppVersionResponseBody,
        };
    }
}
exports.RollbackMiniAppVersionResponse = RollbackMiniAppVersionResponse;
class SaveAcrossCloudStroageConfigsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SaveAcrossCloudStroageConfigsHeaders = SaveAcrossCloudStroageConfigsHeaders;
class SaveAcrossCloudStroageConfigsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            bucketName: 'bucketName',
            cloudType: 'cloudType',
            endpoint: 'endpoint',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            bucketName: 'string',
            cloudType: 'number',
            endpoint: 'string',
            targetCorpId: 'string',
        };
    }
}
exports.SaveAcrossCloudStroageConfigsRequest = SaveAcrossCloudStroageConfigsRequest;
class SaveAcrossCloudStroageConfigsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            endpoint: 'endpoint',
            state: 'state',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            endpoint: 'string',
            state: 'number',
        };
    }
}
exports.SaveAcrossCloudStroageConfigsResponseBody = SaveAcrossCloudStroageConfigsResponseBody;
class SaveAcrossCloudStroageConfigsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveAcrossCloudStroageConfigsResponseBody,
        };
    }
}
exports.SaveAcrossCloudStroageConfigsResponse = SaveAcrossCloudStroageConfigsResponse;
class SaveAndSubmitAuthInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SaveAndSubmitAuthInfoHeaders = SaveAndSubmitAuthInfoHeaders;
class SaveAndSubmitAuthInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applyRemark: 'applyRemark',
            authorizeMediaId: 'authorizeMediaId',
            industry: 'industry',
            legalPerson: 'legalPerson',
            legalPersonIdCard: 'legalPersonIdCard',
            licenseMediaId: 'licenseMediaId',
            locCity: 'locCity',
            locCityName: 'locCityName',
            locProvince: 'locProvince',
            locProvinceName: 'locProvinceName',
            mobileNum: 'mobileNum',
            orgName: 'orgName',
            organizationCode: 'organizationCode',
            organizationCodeMediaId: 'organizationCodeMediaId',
            registLocation: 'registLocation',
            registNum: 'registNum',
            targetCorpId: 'targetCorpId',
            unifiedSocialCredit: 'unifiedSocialCredit',
        };
    }
    static types() {
        return {
            applyRemark: 'string',
            authorizeMediaId: 'string',
            industry: 'string',
            legalPerson: 'string',
            legalPersonIdCard: 'string',
            licenseMediaId: 'string',
            locCity: 'number',
            locCityName: 'string',
            locProvince: 'number',
            locProvinceName: 'string',
            mobileNum: 'string',
            orgName: 'string',
            organizationCode: 'string',
            organizationCodeMediaId: 'string',
            registLocation: 'string',
            registNum: 'string',
            targetCorpId: 'string',
            unifiedSocialCredit: 'string',
        };
    }
}
exports.SaveAndSubmitAuthInfoRequest = SaveAndSubmitAuthInfoRequest;
class SaveAndSubmitAuthInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.SaveAndSubmitAuthInfoResponseBody = SaveAndSubmitAuthInfoResponseBody;
class SaveAndSubmitAuthInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveAndSubmitAuthInfoResponseBody,
        };
    }
}
exports.SaveAndSubmitAuthInfoResponse = SaveAndSubmitAuthInfoResponse;
class SaveOpenTerminalInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SaveOpenTerminalInfoHeaders = SaveOpenTerminalInfoHeaders;
class SaveOpenTerminalInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            logSource: 'logSource',
            logType: 'logType',
            openExt: 'openExt',
        };
    }
    static types() {
        return {
            corpId: 'string',
            logSource: 'string',
            logType: 'string',
            openExt: 'string',
        };
    }
}
exports.SaveOpenTerminalInfoRequest = SaveOpenTerminalInfoRequest;
class SaveOpenTerminalInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.SaveOpenTerminalInfoResponseBody = SaveOpenTerminalInfoResponseBody;
class SaveOpenTerminalInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveOpenTerminalInfoResponseBody,
        };
    }
}
exports.SaveOpenTerminalInfoResponse = SaveOpenTerminalInfoResponse;
class SaveWhiteAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SaveWhiteAppHeaders = SaveWhiteAppHeaders;
class SaveWhiteAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentIdList: 'agentIdList',
            agentIdMap: 'agentIdMap',
            operation: 'operation',
        };
    }
    static types() {
        return {
            agentIdList: { 'type': 'array', 'itemType': 'number' },
            agentIdMap: 'string',
            operation: 'string',
        };
    }
}
exports.SaveWhiteAppRequest = SaveWhiteAppRequest;
class SaveWhiteAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.SaveWhiteAppResponseBody = SaveWhiteAppResponseBody;
class SaveWhiteAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveWhiteAppResponseBody,
        };
    }
}
exports.SaveWhiteAppResponse = SaveWhiteAppResponse;
class SearchOrgInnerGroupInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchOrgInnerGroupInfoHeaders = SearchOrgInnerGroupInfoHeaders;
class SearchOrgInnerGroupInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTimeEnd: 'createTimeEnd',
            createTimeStart: 'createTimeStart',
            groupMembersCountEnd: 'groupMembersCountEnd',
            groupMembersCountStart: 'groupMembersCountStart',
            groupName: 'groupName',
            groupOwner: 'groupOwner',
            lastActiveTimeEnd: 'lastActiveTimeEnd',
            lastActiveTimeStart: 'lastActiveTimeStart',
            operatorUserId: 'operatorUserId',
            pageSize: 'pageSize',
            pageStart: 'pageStart',
            syncToDingpan: 'syncToDingpan',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            createTimeEnd: 'number',
            createTimeStart: 'number',
            groupMembersCountEnd: 'number',
            groupMembersCountStart: 'number',
            groupName: 'string',
            groupOwner: 'string',
            lastActiveTimeEnd: 'number',
            lastActiveTimeStart: 'number',
            operatorUserId: 'string',
            pageSize: 'number',
            pageStart: 'number',
            syncToDingpan: 'number',
            uuid: 'string',
        };
    }
}
exports.SearchOrgInnerGroupInfoRequest = SearchOrgInnerGroupInfoRequest;
class SearchOrgInnerGroupInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            itemCount: 'itemCount',
            items: 'items',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            itemCount: 'number',
            items: { 'type': 'array', 'itemType': SearchOrgInnerGroupInfoResponseBodyItems },
            totalCount: 'number',
        };
    }
}
exports.SearchOrgInnerGroupInfoResponseBody = SearchOrgInnerGroupInfoResponseBody;
class SearchOrgInnerGroupInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchOrgInnerGroupInfoResponseBody,
        };
    }
}
exports.SearchOrgInnerGroupInfoResponse = SearchOrgInnerGroupInfoResponse;
class SendAppDingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendAppDingHeaders = SendAppDingHeaders;
class SendAppDingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            userids: 'userids',
        };
    }
    static types() {
        return {
            content: 'string',
            userids: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.SendAppDingRequest = SendAppDingRequest;
class SendAppDingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.SendAppDingResponse = SendAppDingResponse;
class SendInvitationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendInvitationHeaders = SendInvitationHeaders;
class SendInvitationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            orgAlias: 'orgAlias',
            partnerLabelId: 'partnerLabelId',
            partnerNum: 'partnerNum',
            phone: 'phone',
        };
    }
    static types() {
        return {
            deptId: 'string',
            orgAlias: 'string',
            partnerLabelId: 'number',
            partnerNum: 'string',
            phone: 'string',
        };
    }
}
exports.SendInvitationRequest = SendInvitationRequest;
class SendInvitationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.SendInvitationResponse = SendInvitationResponse;
class SendPhoneDingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendPhoneDingHeaders = SendPhoneDingHeaders;
class SendPhoneDingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            userids: 'userids',
        };
    }
    static types() {
        return {
            content: 'string',
            userids: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.SendPhoneDingRequest = SendPhoneDingRequest;
class SendPhoneDingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.SendPhoneDingResponseBody = SendPhoneDingResponseBody;
class SendPhoneDingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendPhoneDingResponseBody,
        };
    }
}
exports.SendPhoneDingResponse = SendPhoneDingResponse;
class SetDeptPartnerTypeAndNumHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetDeptPartnerTypeAndNumHeaders = SetDeptPartnerTypeAndNumHeaders;
class SetDeptPartnerTypeAndNumRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            labelIds: 'labelIds',
            partnerNum: 'partnerNum',
        };
    }
    static types() {
        return {
            deptId: 'string',
            labelIds: { 'type': 'array', 'itemType': 'string' },
            partnerNum: 'string',
        };
    }
}
exports.SetDeptPartnerTypeAndNumRequest = SetDeptPartnerTypeAndNumRequest;
class SetDeptPartnerTypeAndNumResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.SetDeptPartnerTypeAndNumResponse = SetDeptPartnerTypeAndNumResponse;
class UpdateCategoryNameHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateCategoryNameHeaders = UpdateCategoryNameHeaders;
class UpdateCategoryNameRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentCategoryName: 'currentCategoryName',
            targetCategoryName: 'targetCategoryName',
        };
    }
    static types() {
        return {
            currentCategoryName: 'string',
            targetCategoryName: 'string',
        };
    }
}
exports.UpdateCategoryNameRequest = UpdateCategoryNameRequest;
class UpdateCategoryNameResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
}
exports.UpdateCategoryNameResponseBody = UpdateCategoryNameResponseBody;
class UpdateCategoryNameResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCategoryNameResponseBody,
        };
    }
}
exports.UpdateCategoryNameResponse = UpdateCategoryNameResponse;
class UpdateFileStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateFileStatusHeaders = UpdateFileStatusHeaders;
class UpdateFileStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestIds: 'requestIds',
            status: 'status',
        };
    }
    static types() {
        return {
            requestIds: { 'type': 'array', 'itemType': 'string' },
            status: 'number',
        };
    }
}
exports.UpdateFileStatusRequest = UpdateFileStatusRequest;
class UpdateFileStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateFileStatusResponseBody = UpdateFileStatusResponseBody;
class UpdateFileStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateFileStatusResponseBody,
        };
    }
}
exports.UpdateFileStatusResponse = UpdateFileStatusResponse;
class UpdateMiniAppVersionStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateMiniAppVersionStatusHeaders = UpdateMiniAppVersionStatusHeaders;
class UpdateMiniAppVersionStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniAppId: 'miniAppId',
            version: 'version',
            versionType: 'versionType',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
            version: 'string',
            versionType: 'number',
        };
    }
}
exports.UpdateMiniAppVersionStatusRequest = UpdateMiniAppVersionStatusRequest;
class UpdateMiniAppVersionStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cause: 'cause',
            code: 'code',
        };
    }
    static types() {
        return {
            cause: 'string',
            code: 'string',
        };
    }
}
exports.UpdateMiniAppVersionStatusResponseBody = UpdateMiniAppVersionStatusResponseBody;
class UpdateMiniAppVersionStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateMiniAppVersionStatusResponseBody,
        };
    }
}
exports.UpdateMiniAppVersionStatusResponse = UpdateMiniAppVersionStatusResponse;
class UpdatePartnerVisibilityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdatePartnerVisibilityHeaders = UpdatePartnerVisibilityHeaders;
class UpdatePartnerVisibilityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
            labelId: 'labelId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            labelId: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UpdatePartnerVisibilityRequest = UpdatePartnerVisibilityRequest;
class UpdatePartnerVisibilityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: 'boolean',
        };
    }
}
exports.UpdatePartnerVisibilityResponse = UpdatePartnerVisibilityResponse;
class UpdateRoleVisibilityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateRoleVisibilityHeaders = UpdateRoleVisibilityHeaders;
class UpdateRoleVisibilityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
            labelId: 'labelId',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            labelId: 'number',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UpdateRoleVisibilityRequest = UpdateRoleVisibilityRequest;
class UpdateRoleVisibilityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: 'boolean',
        };
    }
}
exports.UpdateRoleVisibilityResponse = UpdateRoleVisibilityResponse;
class UpdateStorageModeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateStorageModeHeaders = UpdateStorageModeHeaders;
class UpdateStorageModeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileStorageMode: 'fileStorageMode',
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            fileStorageMode: 'string',
            targetCorpId: 'string',
        };
    }
}
exports.UpdateStorageModeRequest = UpdateStorageModeRequest;
class UpdateStorageModeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCorpId: 'string',
        };
    }
}
exports.UpdateStorageModeResponseBody = UpdateStorageModeResponseBody;
class UpdateStorageModeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateStorageModeResponseBody,
        };
    }
}
exports.UpdateStorageModeResponse = UpdateStorageModeResponse;
class ApproveProcessCallbackRequestRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            approveResult: 'approveResult',
            approveType: 'approveType',
            approvers: 'approvers',
            createTime: 'createTime',
            eventType: 'eventType',
            finishTime: 'finishTime',
            params: 'params',
            processInstanceId: 'processInstanceId',
            title: 'title',
        };
    }
    static types() {
        return {
            approveResult: 'string',
            approveType: 'string',
            approvers: { 'type': 'array', 'itemType': 'string' },
            createTime: 'number',
            eventType: 'string',
            finishTime: 'number',
            params: 'string',
            processInstanceId: 'string',
            title: 'string',
        };
    }
}
exports.ApproveProcessCallbackRequestRequest = ApproveProcessCallbackRequestRequest;
class CreateRuleRequestCustomPlan extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentCategoryList: 'currentCategoryList',
            deptIds: 'deptIds',
            planName: 'planName',
            unSelectCategoryList: 'unSelectCategoryList',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            currentCategoryList: { 'type': 'array', 'itemType': 'string' },
            deptIds: { 'type': 'array', 'itemType': 'number' },
            planName: 'string',
            unSelectCategoryList: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateRuleRequestCustomPlan = CreateRuleRequestCustomPlan;
class FileStorageGetQuotaDataResponseBodyQuotaModelList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            statisticTime: 'statisticTime',
            usedStorage: 'usedStorage',
        };
    }
    static types() {
        return {
            statisticTime: 'string',
            usedStorage: 'number',
        };
    }
}
exports.FileStorageGetQuotaDataResponseBodyQuotaModelList = FileStorageGetQuotaDataResponseBodyQuotaModelList;
class GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            darkWatermark: 'darkWatermark',
            userId: 'userId',
        };
    }
    static types() {
        return {
            darkWatermark: 'string',
            userId: 'string',
        };
    }
}
exports.GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList = GenerateDarkWaterMarkResponseBodyDarkWatermarkVOList;
class GetAccountTransferListResponseBodyItemList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptName: 'deptName',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'number',
            name: 'string',
            userId: 'string',
        };
    }
}
exports.GetAccountTransferListResponseBodyItemList = GetAccountTransferListResponseBodyItemList;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1 extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2 extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3 extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4 extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4;
class GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5 extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
            levelNum: 'levelNum',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
            levelNum: 'number',
        };
    }
}
exports.GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5 = GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5;
class GetAllLabelableDeptsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            memberCount: 'memberCount',
            partnerLabelVOLevel1: 'partnerLabelVOLevel1',
            partnerLabelVOLevel2: 'partnerLabelVOLevel2',
            partnerLabelVOLevel3: 'partnerLabelVOLevel3',
            partnerLabelVOLevel4: 'partnerLabelVOLevel4',
            partnerLabelVOLevel5: 'partnerLabelVOLevel5',
            partnerNum: 'partnerNum',
            superDeptId: 'superDeptId',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
            memberCount: 'number',
            partnerLabelVOLevel1: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel1,
            partnerLabelVOLevel2: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel2,
            partnerLabelVOLevel3: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel3,
            partnerLabelVOLevel4: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel4,
            partnerLabelVOLevel5: GetAllLabelableDeptsResponseBodyDataPartnerLabelVOLevel5,
            partnerNum: 'string',
            superDeptId: 'string',
        };
    }
}
exports.GetAllLabelableDeptsResponseBodyData = GetAllLabelableDeptsResponseBodyData;
class GetAppDispatchInfoResponseBodyAndroid extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            baseLineVersion: 'baseLineVersion',
            downloadUrl: 'downloadUrl',
            inGray: 'inGray',
            packTime: 'packTime',
            platform: 'platform',
            version: 'version',
        };
    }
    static types() {
        return {
            baseLineVersion: 'string',
            downloadUrl: 'string',
            inGray: 'boolean',
            packTime: 'number',
            platform: 'string',
            version: 'string',
        };
    }
}
exports.GetAppDispatchInfoResponseBodyAndroid = GetAppDispatchInfoResponseBodyAndroid;
class GetAppDispatchInfoResponseBodyIOSExt extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            plist: 'plist',
        };
    }
    static types() {
        return {
            plist: 'string',
        };
    }
}
exports.GetAppDispatchInfoResponseBodyIOSExt = GetAppDispatchInfoResponseBodyIOSExt;
class GetAppDispatchInfoResponseBodyIOS extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            baseLineVersion: 'baseLineVersion',
            downloadUrl: 'downloadUrl',
            ext: 'ext',
            inGray: 'inGray',
            packTime: 'packTime',
            platform: 'platform',
            version: 'version',
        };
    }
    static types() {
        return {
            baseLineVersion: 'string',
            downloadUrl: 'string',
            ext: GetAppDispatchInfoResponseBodyIOSExt,
            inGray: 'boolean',
            packTime: 'number',
            platform: 'string',
            version: 'string',
        };
    }
}
exports.GetAppDispatchInfoResponseBodyIOS = GetAppDispatchInfoResponseBodyIOS;
class GetAppDispatchInfoResponseBodyMac extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            baseLineVersion: 'baseLineVersion',
            downloadUrl: 'downloadUrl',
            inGray: 'inGray',
            packTime: 'packTime',
            platform: 'platform',
            version: 'version',
        };
    }
    static types() {
        return {
            baseLineVersion: 'string',
            downloadUrl: 'string',
            inGray: 'boolean',
            packTime: 'number',
            platform: 'string',
            version: 'string',
        };
    }
}
exports.GetAppDispatchInfoResponseBodyMac = GetAppDispatchInfoResponseBodyMac;
class GetAppDispatchInfoResponseBodyWindows extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            baseLineVersion: 'baseLineVersion',
            downloadUrl: 'downloadUrl',
            inGray: 'inGray',
            packTime: 'packTime',
            platform: 'platform',
            version: 'version',
        };
    }
    static types() {
        return {
            baseLineVersion: 'string',
            downloadUrl: 'string',
            inGray: 'boolean',
            packTime: 'number',
            platform: 'string',
            version: 'string',
        };
    }
}
exports.GetAppDispatchInfoResponseBodyWindows = GetAppDispatchInfoResponseBodyWindows;
class GetCommentListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commentId: 'commentId',
            commentTime: 'commentTime',
            commentUserName: 'commentUserName',
            content: 'content',
        };
    }
    static types() {
        return {
            commentId: 'string',
            commentTime: 'number',
            commentUserName: 'string',
            content: 'string',
        };
    }
}
exports.GetCommentListResponseBodyData = GetCommentListResponseBodyData;
class GetConferenceDetailResponseBodyMemberList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendDuration: 'attendDuration',
            name: 'name',
            staffId: 'staffId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            attendDuration: 'number',
            name: 'string',
            staffId: 'string',
            unionId: 'string',
        };
    }
}
exports.GetConferenceDetailResponseBodyMemberList = GetConferenceDetailResponseBodyMemberList;
class GetDingReportDeptSummaryResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            dingReportSendCnt: 'dingReportSendCnt',
            dingReportSendUsrCnt: 'dingReportSendUsrCnt',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
            dingReportSendCnt: 'string',
            dingReportSendUsrCnt: 'string',
        };
    }
}
exports.GetDingReportDeptSummaryResponseBodyData = GetDingReportDeptSummaryResponseBodyData;
class GetDocCreatedDeptSummaryResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createDocUserCnt1d: 'createDocUserCnt1d',
            deptId: 'deptId',
            deptName: 'deptName',
            docCreatedCnt: 'docCreatedCnt',
        };
    }
    static types() {
        return {
            createDocUserCnt1d: 'string',
            deptId: 'string',
            deptName: 'string',
            docCreatedCnt: 'string',
        };
    }
}
exports.GetDocCreatedDeptSummaryResponseBodyData = GetDocCreatedDeptSummaryResponseBodyData;
class GetExclusiveAccountAllOrgListResponseBodyOrgInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            isMainOrg: 'isMainOrg',
            logoUrl: 'logoUrl',
            orgFullName: 'orgFullName',
            orgName: 'orgName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isMainOrg: 'boolean',
            logoUrl: 'string',
            orgFullName: 'string',
            orgName: 'string',
        };
    }
}
exports.GetExclusiveAccountAllOrgListResponseBodyOrgInfoList = GetExclusiveAccountAllOrgListResponseBodyOrgInfoList;
class GetGeneralFormCreatedDeptSummaryResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
            generalFormCreateCnt1d: 'generalFormCreateCnt1d',
            useGeneralFormUserCnt1d: 'useGeneralFormUserCnt1d',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
            generalFormCreateCnt1d: 'string',
            useGeneralFormUserCnt1d: 'string',
        };
    }
}
exports.GetGeneralFormCreatedDeptSummaryResponseBodyData = GetGeneralFormCreatedDeptSummaryResponseBodyData;
class GetGroupActiveInfoResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingGroupId: 'dingGroupId',
            groupCreateTime: 'groupCreateTime',
            groupCreateUserId: 'groupCreateUserId',
            groupCreateUserName: 'groupCreateUserName',
            groupName: 'groupName',
            groupType: 'groupType',
            groupUserCnt1d: 'groupUserCnt1d',
            openConvUv1d: 'openConvUv1d',
            sendMessageCnt1d: 'sendMessageCnt1d',
            sendMessageUserCnt1d: 'sendMessageUserCnt1d',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            dingGroupId: 'string',
            groupCreateTime: 'string',
            groupCreateUserId: 'string',
            groupCreateUserName: 'string',
            groupName: 'string',
            groupType: 'number',
            groupUserCnt1d: 'number',
            openConvUv1d: 'number',
            sendMessageCnt1d: 'number',
            sendMessageUserCnt1d: 'number',
            statDate: 'string',
        };
    }
}
exports.GetGroupActiveInfoResponseBodyData = GetGroupActiveInfoResponseBodyData;
class GetInActiveUserListResponseBodyMetaList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
}
exports.GetInActiveUserListResponseBodyMetaList = GetInActiveUserListResponseBodyMetaList;
class GetOaOperatorLogListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            category1Name: 'category1Name',
            category2Name: 'category2Name',
            content: 'content',
            opName: 'opName',
            opTime: 'opTime',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            category1Name: 'string',
            category2Name: 'string',
            content: 'string',
            opName: 'string',
            opTime: 'number',
            opUserId: 'string',
        };
    }
}
exports.GetOaOperatorLogListResponseBodyData = GetOaOperatorLogListResponseBodyData;
class GetOutGroupsByPageResponseBodyResponseBodyGroupList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openConversationId: 'openConversationId',
        };
    }
    static types() {
        return {
            openConversationId: 'string',
        };
    }
}
exports.GetOutGroupsByPageResponseBodyResponseBodyGroupList = GetOutGroupsByPageResponseBodyResponseBodyGroupList;
class GetOutGroupsByPageResponseBodyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupList: 'groupList',
            total: 'total',
        };
    }
    static types() {
        return {
            groupList: { 'type': 'array', 'itemType': GetOutGroupsByPageResponseBodyResponseBodyGroupList },
            total: 'number',
        };
    }
}
exports.GetOutGroupsByPageResponseBodyResponseBody = GetOutGroupsByPageResponseBodyResponseBody;
class GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            idType: 'idType',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            idType: 'string',
            type: 'string',
        };
    }
}
exports.GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender = GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender;
class GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            contentType: 'contentType',
            createAt: 'createAt',
            openConversationId: 'openConversationId',
            sender: 'sender',
        };
    }
    static types() {
        return {
            content: 'string',
            contentType: 'string',
            createAt: 'string',
            openConversationId: 'string',
            sender: GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageListSender,
        };
    }
}
exports.GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList = GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList;
class GetOutsideAuditGroupMessageByPageResponseBodyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            messageList: 'messageList',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            messageList: { 'type': 'array', 'itemType': GetOutsideAuditGroupMessageByPageResponseBodyResponseBodyMessageList },
            nextToken: 'string',
        };
    }
}
exports.GetOutsideAuditGroupMessageByPageResponseBodyResponseBody = GetOutsideAuditGroupMessageByPageResponseBodyResponseBody;
class GetPartnerTypeByParentIdResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelId: 'labelId',
            typeId: 'typeId',
            typeName: 'typeName',
        };
    }
    static types() {
        return {
            labelId: 'string',
            typeId: 'number',
            typeName: 'string',
        };
    }
}
exports.GetPartnerTypeByParentIdResponseBodyData = GetPartnerTypeByParentIdResponseBodyData;
class GetPublicDevicesResponseBodyDataDeviceDepts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
        };
    }
}
exports.GetPublicDevicesResponseBodyDataDeviceDepts = GetPublicDevicesResponseBodyDataDeviceDepts;
class GetPublicDevicesResponseBodyDataDeviceRoles extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            tagCode: 'tagCode',
        };
    }
    static types() {
        return {
            name: 'string',
            tagCode: 'string',
        };
    }
}
exports.GetPublicDevicesResponseBodyDataDeviceRoles = GetPublicDevicesResponseBodyDataDeviceRoles;
class GetPublicDevicesResponseBodyDataDeviceStaffs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.GetPublicDevicesResponseBodyDataDeviceStaffs = GetPublicDevicesResponseBodyDataDeviceStaffs;
class GetPublicDevicesResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceDepts: 'deviceDepts',
            deviceRoles: 'deviceRoles',
            deviceScopeType: 'deviceScopeType',
            deviceStaffs: 'deviceStaffs',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            macAddress: 'macAddress',
            platform: 'platform',
            title: 'title',
        };
    }
    static types() {
        return {
            deviceDepts: { 'type': 'array', 'itemType': GetPublicDevicesResponseBodyDataDeviceDepts },
            deviceRoles: { 'type': 'array', 'itemType': GetPublicDevicesResponseBodyDataDeviceRoles },
            deviceScopeType: 'number',
            deviceStaffs: { 'type': 'array', 'itemType': GetPublicDevicesResponseBodyDataDeviceStaffs },
            gmtCreate: 'number',
            gmtModified: 'number',
            macAddress: 'string',
            platform: 'string',
            title: 'string',
        };
    }
}
exports.GetPublicDevicesResponseBodyData = GetPublicDevicesResponseBodyData;
class GetPublisherSummaryResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            publisherArticleCntStd: 'publisherArticleCntStd',
            publisherArticlePvCntStd: 'publisherArticlePvCntStd',
            publisherName: 'publisherName',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            publisherArticleCntStd: 'string',
            publisherArticlePvCntStd: 'string',
            publisherName: 'string',
            unionId: 'string',
        };
    }
}
exports.GetPublisherSummaryResponseBodyData = GetPublisherSummaryResponseBodyData;
class GetPublisherSummaryResponseBodyPublisherArticlePvTop5 extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
        };
    }
    static types() {
        return {
            name: 'string',
        };
    }
}
exports.GetPublisherSummaryResponseBodyPublisherArticlePvTop5 = GetPublisherSummaryResponseBodyPublisherArticlePvTop5;
class GetRealPeopleRecordsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            invokeTime: 'invokeTime',
            personIdentification: 'personIdentification',
            platform: 'platform',
            scene: 'scene',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agentId: 'number',
            invokeTime: 'number',
            personIdentification: 'number',
            platform: 'number',
            scene: 'number',
            userId: 'string',
        };
    }
}
exports.GetRealPeopleRecordsResponseBodyData = GetRealPeopleRecordsResponseBodyData;
class GetRecognizeRecordsResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            faceCompareResult: 'faceCompareResult',
            invokeTime: 'invokeTime',
            platform: 'platform',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agentId: 'number',
            faceCompareResult: 'number',
            invokeTime: 'number',
            platform: 'number',
            userId: 'string',
        };
    }
}
exports.GetRecognizeRecordsResponseBodyData = GetRecognizeRecordsResponseBodyData;
class GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            phone: 'phone',
            roles: 'roles',
            staffId: 'staffId',
            title: 'title',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: 'string',
            phone: 'string',
            roles: 'string',
            staffId: 'string',
            title: 'string',
        };
    }
}
exports.GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList = GetSignedDetailByPageResponseBodyAuditSignedDetailDTOList;
class GetTrustDeviceListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTime: 'createTime',
            macAddress: 'macAddress',
            model: 'model',
            platform: 'platform',
            status: 'status',
            title: 'title',
            userId: 'userId',
        };
    }
    static types() {
        return {
            createTime: 'number',
            macAddress: 'string',
            model: 'string',
            platform: 'string',
            status: 'number',
            title: 'string',
            userId: 'string',
        };
    }
}
exports.GetTrustDeviceListResponseBodyData = GetTrustDeviceListResponseBodyData;
class GetUserAppVersionSummaryResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appVersion: 'appVersion',
            client: 'client',
            orgName: 'orgName',
            statDate: 'statDate',
            userCnt: 'userCnt',
        };
    }
    static types() {
        return {
            appVersion: 'string',
            client: 'string',
            orgName: 'string',
            statDate: 'string',
            userCnt: 'number',
        };
    }
}
exports.GetUserAppVersionSummaryResponseBodyData = GetUserAppVersionSummaryResponseBodyData;
class GetUserFaceStateResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            state: 'state',
            userId: 'userId',
        };
    }
    static types() {
        return {
            state: 'number',
            userId: 'string',
        };
    }
}
exports.GetUserFaceStateResponseBodyData = GetUserFaceStateResponseBodyData;
class GetUserRealPeopleStateResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            state: 'state',
            userId: 'userId',
        };
    }
    static types() {
        return {
            state: 'number',
            userId: 'string',
        };
    }
}
exports.GetUserRealPeopleStateResponseBodyData = GetUserRealPeopleStateResponseBodyData;
class GetUserStayLengthResponseBodyItemList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            statDate: 'statDate',
            stayTimeLenApp1d: 'stayTimeLenApp1d',
            stayTimeLenPc1d: 'stayTimeLenPc1d',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            statDate: 'string',
            stayTimeLenApp1d: 'number',
            stayTimeLenPc1d: 'number',
            userId: 'string',
        };
    }
}
exports.GetUserStayLengthResponseBodyItemList = GetUserStayLengthResponseBodyItemList;
class ListAuditLogResponseBodyListDocMemberList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberName: 'memberName',
            memberType: 'memberType',
            memberTypeView: 'memberTypeView',
            permissionRole: 'permissionRole',
            permissionRoleView: 'permissionRoleView',
        };
    }
    static types() {
        return {
            memberName: 'string',
            memberType: 'number',
            memberTypeView: 'string',
            permissionRole: 'number',
            permissionRoleView: 'string',
        };
    }
}
exports.ListAuditLogResponseBodyListDocMemberList = ListAuditLogResponseBodyListDocMemberList;
class ListAuditLogResponseBodyListDocReceiverList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            receiverName: 'receiverName',
            receiverType: 'receiverType',
            receiverTypeView: 'receiverTypeView',
        };
    }
    static types() {
        return {
            receiverName: 'string',
            receiverType: 'number',
            receiverTypeView: 'string',
        };
    }
}
exports.ListAuditLogResponseBodyListDocReceiverList = ListAuditLogResponseBodyListDocReceiverList;
class ListAuditLogResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            actionView: 'actionView',
            bizId: 'bizId',
            docMemberList: 'docMemberList',
            docMobileUrl: 'docMobileUrl',
            docPcUrl: 'docPcUrl',
            docReceiverList: 'docReceiverList',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            ipAddress: 'ipAddress',
            operateModule: 'operateModule',
            operateModuleView: 'operateModuleView',
            operatorName: 'operatorName',
            orgName: 'orgName',
            platform: 'platform',
            platformView: 'platformView',
            prevWorkSpaceId: 'prevWorkSpaceId',
            prevWorkSpaceMobileUrl: 'prevWorkSpaceMobileUrl',
            prevWorkSpaceName: 'prevWorkSpaceName',
            prevWorkSpacePcUrl: 'prevWorkSpacePcUrl',
            realName: 'realName',
            receiverName: 'receiverName',
            receiverType: 'receiverType',
            receiverTypeView: 'receiverTypeView',
            resource: 'resource',
            resourceExtension: 'resourceExtension',
            resourceSize: 'resourceSize',
            status: 'status',
            targetSpaceId: 'targetSpaceId',
            userId: 'userId',
            workSpaceId: 'workSpaceId',
            workSpaceMobileUrl: 'workSpaceMobileUrl',
            workSpaceName: 'workSpaceName',
            workSpacePcUrl: 'workSpacePcUrl',
        };
    }
    static types() {
        return {
            action: 'number',
            actionView: 'string',
            bizId: 'string',
            docMemberList: { 'type': 'array', 'itemType': ListAuditLogResponseBodyListDocMemberList },
            docMobileUrl: 'string',
            docPcUrl: 'string',
            docReceiverList: { 'type': 'array', 'itemType': ListAuditLogResponseBodyListDocReceiverList },
            gmtCreate: 'number',
            gmtModified: 'number',
            ipAddress: 'string',
            operateModule: 'number',
            operateModuleView: 'string',
            operatorName: 'string',
            orgName: 'string',
            platform: 'number',
            platformView: 'string',
            prevWorkSpaceId: 'number',
            prevWorkSpaceMobileUrl: 'string',
            prevWorkSpaceName: 'string',
            prevWorkSpacePcUrl: 'string',
            realName: 'string',
            receiverName: 'string',
            receiverType: 'number',
            receiverTypeView: 'string',
            resource: 'string',
            resourceExtension: 'string',
            resourceSize: 'number',
            status: 'number',
            targetSpaceId: 'number',
            userId: 'string',
            workSpaceId: 'number',
            workSpaceMobileUrl: 'string',
            workSpaceName: 'string',
            workSpacePcUrl: 'string',
        };
    }
}
exports.ListAuditLogResponseBodyList = ListAuditLogResponseBodyList;
class ListCategorysRequestBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
}
exports.ListCategorysRequestBody = ListCategorysRequestBody;
class ListJoinOrgInfoResponseBodyOrgInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            domain: 'domain',
            orgFullName: 'orgFullName',
            orgName: 'orgName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            domain: 'string',
            orgFullName: 'string',
            orgName: 'number',
        };
    }
}
exports.ListJoinOrgInfoResponseBodyOrgInfoList = ListJoinOrgInfoResponseBodyOrgInfoList;
class ListMiniAppAvailableVersionResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            buildStatus: 'buildStatus',
            version: 'version',
        };
    }
    static types() {
        return {
            buildStatus: 'number',
            version: 'string',
        };
    }
}
exports.ListMiniAppAvailableVersionResponseBodyList = ListMiniAppAvailableVersionResponseBodyList;
class ListMiniAppHistoryVersionResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            buildStatus: 'buildStatus',
            h5Bundle: 'h5Bundle',
            packageSize: 'packageSize',
            packageUrl: 'packageUrl',
            version: 'version',
        };
    }
    static types() {
        return {
            buildStatus: 'number',
            h5Bundle: 'string',
            packageSize: 'string',
            packageUrl: 'string',
            version: 'string',
        };
    }
}
exports.ListMiniAppHistoryVersionResponseBodyList = ListMiniAppHistoryVersionResponseBodyList;
class ListPartnerRolesResponseBodyListVisibleDepts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            name: 'name',
        };
    }
    static types() {
        return {
            deptId: 'number',
            name: 'string',
        };
    }
}
exports.ListPartnerRolesResponseBodyListVisibleDepts = ListPartnerRolesResponseBodyListVisibleDepts;
class ListPartnerRolesResponseBodyListVisibleUsers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.ListPartnerRolesResponseBodyListVisibleUsers = ListPartnerRolesResponseBodyListVisibleUsers;
class ListPartnerRolesResponseBodyListWarningDepts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            name: 'name',
        };
    }
    static types() {
        return {
            deptId: 'number',
            name: 'string',
        };
    }
}
exports.ListPartnerRolesResponseBodyListWarningDepts = ListPartnerRolesResponseBodyListWarningDepts;
class ListPartnerRolesResponseBodyListWarningUsers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
}
exports.ListPartnerRolesResponseBodyListWarningUsers = ListPartnerRolesResponseBodyListWarningUsers;
class ListPartnerRolesResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            isNecessary: 'isNecessary',
            name: 'name',
            visibleDepts: 'visibleDepts',
            visibleUsers: 'visibleUsers',
            warningDepts: 'warningDepts',
            warningUsers: 'warningUsers',
        };
    }
    static types() {
        return {
            id: 'number',
            isNecessary: 'number',
            name: 'string',
            visibleDepts: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyListVisibleDepts },
            visibleUsers: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyListVisibleUsers },
            warningDepts: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyListWarningDepts },
            warningUsers: { 'type': 'array', 'itemType': ListPartnerRolesResponseBodyListWarningUsers },
        };
    }
}
exports.ListPartnerRolesResponseBodyList = ListPartnerRolesResponseBodyList;
class ListPunchScheduleByConditionWithPagingResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizOuterId: 'bizOuterId',
            positionName: 'positionName',
            punchSymbol: 'punchSymbol',
            userId: 'userId',
            userPunchTime: 'userPunchTime',
        };
    }
    static types() {
        return {
            bizOuterId: 'string',
            positionName: 'string',
            punchSymbol: 'string',
            userId: 'string',
            userPunchTime: 'number',
        };
    }
}
exports.ListPunchScheduleByConditionWithPagingResponseBodyList = ListPunchScheduleByConditionWithPagingResponseBodyList;
class ListRulesRequestBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'number',
        };
    }
}
exports.ListRulesRequestBody = ListRulesRequestBody;
class PushBadgeRequestBadgeItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pushValue: 'pushValue',
            userId: 'userId',
        };
    }
    static types() {
        return {
            pushValue: 'string',
            userId: 'string',
        };
    }
}
exports.PushBadgeRequestBadgeItems = PushBadgeRequestBadgeItems;
class QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1 extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelId: 'labelId',
            labelname: 'labelname',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelname: 'string',
        };
    }
}
exports.QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1 = QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1;
class QueryPartnerInfoResponseBodyPartnerDeptList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberCount: 'memberCount',
            partnerLabelModelLevel1: 'partnerLabelModelLevel1',
            partnerNum: 'partnerNum',
            title: 'title',
            value: 'value',
        };
    }
    static types() {
        return {
            memberCount: 'number',
            partnerLabelModelLevel1: QueryPartnerInfoResponseBodyPartnerDeptListPartnerLabelModelLevel1,
            partnerNum: 'string',
            title: 'string',
            value: 'string',
        };
    }
}
exports.QueryPartnerInfoResponseBodyPartnerDeptList = QueryPartnerInfoResponseBodyPartnerDeptList;
class QueryPartnerInfoResponseBodyPartnerLabelList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'number',
            name: 'string',
        };
    }
}
exports.QueryPartnerInfoResponseBodyPartnerLabelList = QueryPartnerInfoResponseBodyPartnerLabelList;
class QueryUserBehaviorResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pictureUrl: 'pictureUrl',
            platform: 'platform',
            scene: 'scene',
            time: 'time',
            type: 'type',
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            pictureUrl: 'string',
            platform: 'number',
            scene: 'string',
            time: 'number',
            type: 'number',
            userId: 'string',
            userName: 'string',
        };
    }
}
exports.QueryUserBehaviorResponseBodyData = QueryUserBehaviorResponseBodyData;
class SearchOrgInnerGroupInfoResponseBodyItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupAdminsCount: 'groupAdminsCount',
            groupCreateTime: 'groupCreateTime',
            groupLastActiveTime: 'groupLastActiveTime',
            groupLastActiveTimeShow: 'groupLastActiveTimeShow',
            groupMembersCount: 'groupMembersCount',
            groupName: 'groupName',
            groupOwner: 'groupOwner',
            groupOwnerUserId: 'groupOwnerUserId',
            openConversationId: 'openConversationId',
            status: 'status',
            syncToDingpan: 'syncToDingpan',
            templateId: 'templateId',
            templateName: 'templateName',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            groupAdminsCount: 'number',
            groupCreateTime: 'number',
            groupLastActiveTime: 'number',
            groupLastActiveTimeShow: 'string',
            groupMembersCount: 'number',
            groupName: 'string',
            groupOwner: 'string',
            groupOwnerUserId: 'string',
            openConversationId: 'string',
            status: 'number',
            syncToDingpan: 'number',
            templateId: 'string',
            templateName: 'string',
            usedQuota: 'number',
        };
    }
}
exports.SearchOrgInnerGroupInfoResponseBodyItems = SearchOrgInnerGroupInfoResponseBodyItems;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.mobileNum)) {
            body["mobileNum"] = request.mobileNum;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddOrg",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/orgnizations`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddOrgResponse({}));
    }
    async addOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddOrgHeaders({});
        return await this.addOrgWithOptions(request, headers, runtime);
    }
    async approveProcessCallbackWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.request)) {
            body["request"] = request.request;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ApproveProcessCallback",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/approvalResults/callback`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ApproveProcessCallbackResponse({}));
    }
    async approveProcessCallback(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ApproveProcessCallbackHeaders({});
        return await this.approveProcessCallbackWithOptions(request, headers, runtime);
    }
    async banOrOpenGroupWordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.banWordsType)) {
            body["banWordsType"] = request.banWordsType;
        }
        if (!tea_util_1.default.isUnset(request.openConverationId)) {
            body["openConverationId"] = request.openConverationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BanOrOpenGroupWords",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/enterpriseSecurities/banOrOpenGroupWords`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BanOrOpenGroupWordsResponse({}));
    }
    async banOrOpenGroupWords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BanOrOpenGroupWordsHeaders({});
        return await this.banOrOpenGroupWordsWithOptions(request, headers, runtime);
    }
    async createCategoryAndBindingGroupsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.categoryName)) {
            body["categoryName"] = request.categoryName;
        }
        if (!tea_util_1.default.isUnset(request.groupIds)) {
            body["groupIds"] = request.groupIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCategoryAndBindingGroups",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/categories/createAndBind`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCategoryAndBindingGroupsResponse({}));
    }
    async createCategoryAndBindingGroups(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCategoryAndBindingGroupsHeaders({});
        return await this.createCategoryAndBindingGroupsWithOptions(request, headers, runtime);
    }
    async createMessageCategoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.categoryName)) {
            body["categoryName"] = request.categoryName;
        }
        if (!tea_util_1.default.isUnset(request.groupIds)) {
            body["groupIds"] = request.groupIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateMessageCategory",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/categories/create`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateMessageCategoryResponse({}));
    }
    async createMessageCategory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateMessageCategoryHeaders({});
        return await this.createMessageCategoryWithOptions(request, headers, runtime);
    }
    async createRuleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.customPlan)) {
            body["customPlan"] = request.customPlan;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateRule",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/rules`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateRuleResponse({}));
    }
    async createRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateRuleHeaders({});
        return await this.createRuleWithOptions(request, headers, runtime);
    }
    async createTrustedDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.did)) {
            body["did"] = request.did;
        }
        if (!tea_util_1.default.isUnset(request.macAddress)) {
            body["macAddress"] = request.macAddress;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTrustedDevice",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trustedDevices`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTrustedDeviceResponse({}));
    }
    async createTrustedDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTrustedDeviceHeaders({});
        return await this.createTrustedDeviceWithOptions(request, headers, runtime);
    }
    async createTrustedDeviceBatchWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.macAddressList)) {
            body["macAddressList"] = request.macAddressList;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTrustedDeviceBatch",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trusts/devices`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTrustedDeviceBatchResponse({}));
    }
    async createTrustedDeviceBatch(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTrustedDeviceBatchHeaders({});
        return await this.createTrustedDeviceBatchWithOptions(request, headers, runtime);
    }
    async deleteAcrossCloudStroageConfigsWithOptions(targetCorpId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteAcrossCloudStroageConfigs",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/acrossClouds/configurations/${targetCorpId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteAcrossCloudStroageConfigsResponse({}));
    }
    async deleteAcrossCloudStroageConfigs(targetCorpId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteAcrossCloudStroageConfigsHeaders({});
        return await this.deleteAcrossCloudStroageConfigsWithOptions(targetCorpId, headers, runtime);
    }
    async deleteCommentWithOptions(publisherId, commentId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteComment",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/publishers/${publisherId}/comments/${commentId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "boolean",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteCommentResponse({}));
    }
    async deleteComment(publisherId, commentId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteCommentHeaders({});
        return await this.deleteCommentWithOptions(publisherId, commentId, headers, runtime);
    }
    async deleteTrustedDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.kickOff)) {
            body["kickOff"] = request.kickOff;
        }
        if (!tea_util_1.default.isUnset(request.macAddress)) {
            body["macAddress"] = request.macAddress;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteTrustedDevice",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trustedDevices/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteTrustedDeviceResponse({}));
    }
    async deleteTrustedDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteTrustedDeviceHeaders({});
        return await this.deleteTrustedDeviceWithOptions(request, headers, runtime);
    }
    async distributePartnerAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.subCorpId)) {
            body["subCorpId"] = request.subCorpId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DistributePartnerApp",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partners/applications/distribute`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DistributePartnerAppResponse({}));
    }
    async distributePartnerApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DistributePartnerAppHeaders({});
        return await this.distributePartnerAppWithOptions(request, headers, runtime);
    }
    async exclusiveCreateDingPortalWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.dingPortalName)) {
            body["dingPortalName"] = request.dingPortalName;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.templateAppUuid)) {
            body["templateAppUuid"] = request.templateAppUuid;
        }
        if (!tea_util_1.default.isUnset(request.templateCorpId)) {
            body["templateCorpId"] = request.templateCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ExclusiveCreateDingPortal",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/workbenches/templates/spread`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExclusiveCreateDingPortalResponse({}));
    }
    async exclusiveCreateDingPortal(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExclusiveCreateDingPortalHeaders({});
        return await this.exclusiveCreateDingPortalWithOptions(request, headers, runtime);
    }
    async fileStorageActiveStorageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.oss)) {
            body["oss"] = request.oss;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageActiveStorage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/active`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageActiveStorageResponse({}));
    }
    async fileStorageActiveStorage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageActiveStorageHeaders({});
        return await this.fileStorageActiveStorageWithOptions(request, headers, runtime);
    }
    async fileStorageCheckConnectionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.oss)) {
            body["oss"] = request.oss;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageCheckConnection",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/connections/check`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageCheckConnectionResponse({}));
    }
    async fileStorageCheckConnection(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageCheckConnectionHeaders({});
        return await this.fileStorageCheckConnectionWithOptions(request, headers, runtime);
    }
    async fileStorageGetQuotaDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageGetQuotaData",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/quotaDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageGetQuotaDataResponse({}));
    }
    async fileStorageGetQuotaData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageGetQuotaDataHeaders({});
        return await this.fileStorageGetQuotaDataWithOptions(request, headers, runtime);
    }
    async fileStorageGetStorageStateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageGetStorageState",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/states`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageGetStorageStateResponse({}));
    }
    async fileStorageGetStorageState(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageGetStorageStateHeaders({});
        return await this.fileStorageGetStorageStateWithOptions(request, headers, runtime);
    }
    async fileStorageUpdateStorageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "FileStorageUpdateStorage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/configurations`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FileStorageUpdateStorageResponse({}));
    }
    async fileStorageUpdateStorage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FileStorageUpdateStorageHeaders({});
        return await this.fileStorageUpdateStorageWithOptions(request, headers, runtime);
    }
    async generateDarkWaterMarkWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GenerateDarkWaterMark",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/enterpriseSecurities/darkWatermarks/generate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GenerateDarkWaterMarkResponse({}));
    }
    async generateDarkWaterMark(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GenerateDarkWaterMarkHeaders({});
        return await this.generateDarkWaterMarkWithOptions(request, headers, runtime);
    }
    async getAccountTransferListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAccountTransferList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/dataTransfer/accounts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAccountTransferListResponse({}));
    }
    async getAccountTransferList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAccountTransferListHeaders({});
        return await this.getAccountTransferListWithOptions(request, headers, runtime);
    }
    async getActiveUserSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetActiveUserSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/dau/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetActiveUserSummaryResponse({}));
    }
    async getActiveUserSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetActiveUserSummaryHeaders({});
        return await this.getActiveUserSummaryWithOptions(dataId, headers, runtime);
    }
    async getAgentIdByRelatedAppIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            query["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAgentIdByRelatedAppId",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/exclusiveDesigns/agentId`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAgentIdByRelatedAppIdResponse({}));
    }
    async getAgentIdByRelatedAppId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAgentIdByRelatedAppIdHeaders({});
        return await this.getAgentIdByRelatedAppIdWithOptions(request, headers, runtime);
    }
    async getAllLabelableDeptsWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetAllLabelableDepts",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAllLabelableDeptsResponse({}));
    }
    async getAllLabelableDepts() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAllLabelableDeptsHeaders({});
        return await this.getAllLabelableDeptsWithOptions(headers, runtime);
    }
    async getAppDispatchInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAppDispatchInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/apps/distributionInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAppDispatchInfoResponse({}));
    }
    async getAppDispatchInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAppDispatchInfoHeaders({});
        return await this.getAppDispatchInfoWithOptions(request, headers, runtime);
    }
    async getCalenderSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetCalenderSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/calendar/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCalenderSummaryResponse({}));
    }
    async getCalenderSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCalenderSummaryHeaders({});
        return await this.getCalenderSummaryWithOptions(dataId, headers, runtime);
    }
    async getCommentListWithOptions(publisherId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCommentList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/publishers/${publisherId}/comments/list`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCommentListResponse({}));
    }
    async getCommentList(publisherId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCommentListHeaders({});
        return await this.getCommentListWithOptions(publisherId, request, headers, runtime);
    }
    async getConfBaseInfoByLogicalIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.logicalConferenceId)) {
            query["logicalConferenceId"] = request.logicalConferenceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetConfBaseInfoByLogicalId",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/conferences`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetConfBaseInfoByLogicalIdResponse({}));
    }
    async getConfBaseInfoByLogicalId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetConfBaseInfoByLogicalIdHeaders({});
        return await this.getConfBaseInfoByLogicalIdWithOptions(request, headers, runtime);
    }
    async getConferenceDetailWithOptions(conferenceId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetConferenceDetail",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/conferences/${conferenceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetConferenceDetailResponse({}));
    }
    async getConferenceDetail(conferenceId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetConferenceDetailHeaders({});
        return await this.getConferenceDetailWithOptions(conferenceId, headers, runtime);
    }
    async getDingReportDeptSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDingReportDeptSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/report/dept/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDingReportDeptSummaryResponse({}));
    }
    async getDingReportDeptSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDingReportDeptSummaryHeaders({});
        return await this.getDingReportDeptSummaryWithOptions(dataId, request, headers, runtime);
    }
    async getDingReportSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetDingReportSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/datas/${dataId}/reports/organizations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDingReportSummaryResponse({}));
    }
    async getDingReportSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDingReportSummaryHeaders({});
        return await this.getDingReportSummaryWithOptions(dataId, headers, runtime);
    }
    async getDocCreatedDeptSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDocCreatedDeptSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/doc/dept/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDocCreatedDeptSummaryResponse({}));
    }
    async getDocCreatedDeptSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDocCreatedDeptSummaryHeaders({});
        return await this.getDocCreatedDeptSummaryWithOptions(dataId, request, headers, runtime);
    }
    async getDocCreatedSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetDocCreatedSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/doc/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDocCreatedSummaryResponse({}));
    }
    async getDocCreatedSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDocCreatedSummaryHeaders({});
        return await this.getDocCreatedSummaryWithOptions(dataId, headers, runtime);
    }
    async getExclusiveAccountAllOrgListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetExclusiveAccountAllOrgList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/exclusiveAccounts/organizations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetExclusiveAccountAllOrgListResponse({}));
    }
    async getExclusiveAccountAllOrgList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetExclusiveAccountAllOrgListHeaders({});
        return await this.getExclusiveAccountAllOrgListWithOptions(request, headers, runtime);
    }
    async getGeneralFormCreatedDeptSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetGeneralFormCreatedDeptSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/generalForm/dept/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetGeneralFormCreatedDeptSummaryResponse({}));
    }
    async getGeneralFormCreatedDeptSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetGeneralFormCreatedDeptSummaryHeaders({});
        return await this.getGeneralFormCreatedDeptSummaryWithOptions(dataId, request, headers, runtime);
    }
    async getGeneralFormCreatedSummaryWithOptions(dataId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetGeneralFormCreatedSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/generalForm/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetGeneralFormCreatedSummaryResponse({}));
    }
    async getGeneralFormCreatedSummary(dataId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetGeneralFormCreatedSummaryHeaders({});
        return await this.getGeneralFormCreatedSummaryWithOptions(dataId, headers, runtime);
    }
    async getGroupActiveInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dingGroupId)) {
            query["dingGroupId"] = request.dingGroupId;
        }
        if (!tea_util_1.default.isUnset(request.groupType)) {
            query["groupType"] = request.groupType;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetGroupActiveInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/activeGroups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetGroupActiveInfoResponse({}));
    }
    async getGroupActiveInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetGroupActiveInfoHeaders({});
        return await this.getGroupActiveInfoWithOptions(request, headers, runtime);
    }
    async getInActiveUserListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.statDate)) {
            body["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetInActiveUserList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/inactives/users/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInActiveUserListResponse({}));
    }
    async getInActiveUserList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInActiveUserListHeaders({});
        return await this.getInActiveUserListWithOptions(request, headers, runtime);
    }
    async getLastOrgAuthDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetLastOrgAuthData",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/organizations/authInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetLastOrgAuthDataResponse({}));
    }
    async getLastOrgAuthData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetLastOrgAuthDataHeaders({});
        return await this.getLastOrgAuthDataWithOptions(request, headers, runtime);
    }
    async getOaOperatorLogListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.categoryList)) {
            body["categoryList"] = request.categoryList;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetOaOperatorLogList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/oaOperatorLogs/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOaOperatorLogListResponse({}));
    }
    async getOaOperatorLogList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOaOperatorLogListHeaders({});
        return await this.getOaOperatorLogListWithOptions(request, headers, runtime);
    }
    async getOutGroupsByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetOutGroupsByPage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/audits/outsideGroups/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOutGroupsByPageResponse({}));
    }
    async getOutGroupsByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOutGroupsByPageHeaders({});
        return await this.getOutGroupsByPageWithOptions(request, headers, runtime);
    }
    async getOutsideAuditGroupMessageByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetOutsideAuditGroupMessageByPage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/audits/outsideGroups/messages/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOutsideAuditGroupMessageByPageResponse({}));
    }
    async getOutsideAuditGroupMessageByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOutsideAuditGroupMessageByPageHeaders({});
        return await this.getOutsideAuditGroupMessageByPageWithOptions(request, headers, runtime);
    }
    async getPartnerTypeByParentIdWithOptions(parentId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetPartnerTypeByParentId",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerLabels/${parentId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPartnerTypeByParentIdResponse({}));
    }
    async getPartnerTypeByParentId(parentId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPartnerTypeByParentIdHeaders({});
        return await this.getPartnerTypeByParentIdWithOptions(parentId, headers, runtime);
    }
    async getPublicDevicesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.macAddress)) {
            query["macAddress"] = request.macAddress;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            query["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            query["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPublicDevices",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trusts/publicDevices`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPublicDevicesResponse({}));
    }
    async getPublicDevices(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPublicDevicesHeaders({});
        return await this.getPublicDevicesWithOptions(request, headers, runtime);
    }
    async getPublisherSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPublisherSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/publisher/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPublisherSummaryResponse({}));
    }
    async getPublisherSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPublisherSummaryHeaders({});
        return await this.getPublisherSummaryWithOptions(dataId, request, headers, runtime);
    }
    async getRealPeopleRecordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            body["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.fromTime)) {
            body["fromTime"] = request.fromTime;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.personIdentification)) {
            body["personIdentification"] = request.personIdentification;
        }
        if (!tea_util_1.default.isUnset(request.scene)) {
            body["scene"] = request.scene;
        }
        if (!tea_util_1.default.isUnset(request.toTime)) {
            body["toTime"] = request.toTime;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetRealPeopleRecords",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/persons/identificationRecords/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRealPeopleRecordsResponse({}));
    }
    async getRealPeopleRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRealPeopleRecordsHeaders({});
        return await this.getRealPeopleRecordsWithOptions(request, headers, runtime);
    }
    async getRecognizeRecordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            body["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.faceCompareResult)) {
            body["faceCompareResult"] = request.faceCompareResult;
        }
        if (!tea_util_1.default.isUnset(request.fromTime)) {
            body["fromTime"] = request.fromTime;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.toTime)) {
            body["toTime"] = request.toTime;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetRecognizeRecords",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/faces/recognizeRecords/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRecognizeRecordsResponse({}));
    }
    async getRecognizeRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRecognizeRecordsHeaders({});
        return await this.getRecognizeRecordsWithOptions(request, headers, runtime);
    }
    async getSignedDetailByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.signStatus)) {
            query["signStatus"] = request.signStatus;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSignedDetailByPage",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/audits/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSignedDetailByPageResponse({}));
    }
    async getSignedDetailByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSignedDetailByPageHeaders({});
        return await this.getSignedDetailByPageWithOptions(request, headers, runtime);
    }
    async getTrustDeviceListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetTrustDeviceList",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/trustedDevices/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTrustDeviceListResponse({}));
    }
    async getTrustDeviceList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTrustDeviceListHeaders({});
        return await this.getTrustDeviceListWithOptions(request, headers, runtime);
    }
    async getUserAppVersionSummaryWithOptions(dataId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUserAppVersionSummary",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/appVersion/org/${dataId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserAppVersionSummaryResponse({}));
    }
    async getUserAppVersionSummary(dataId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserAppVersionSummaryHeaders({});
        return await this.getUserAppVersionSummaryWithOptions(dataId, request, headers, runtime);
    }
    async getUserFaceStateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetUserFaceState",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/faces/recognizeStates/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserFaceStateResponse({}));
    }
    async getUserFaceState(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserFaceStateHeaders({});
        return await this.getUserFaceStateWithOptions(request, headers, runtime);
    }
    async getUserRealPeopleStateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetUserRealPeopleState",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/persons/identificationStates/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserRealPeopleStateResponse({}));
    }
    async getUserRealPeopleState(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserRealPeopleStateHeaders({});
        return await this.getUserRealPeopleStateWithOptions(request, headers, runtime);
    }
    async getUserStayLengthWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUserStayLength",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/data/users/stayTimes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserStayLengthResponse({}));
    }
    async getUserStayLength(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserStayLengthHeaders({});
        return await this.getUserStayLengthWithOptions(request, headers, runtime);
    }
    async listAuditLogWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endDate)) {
            query["endDate"] = request.endDate;
        }
        if (!tea_util_1.default.isUnset(request.nextBizId)) {
            query["nextBizId"] = request.nextBizId;
        }
        if (!tea_util_1.default.isUnset(request.nextGmtCreate)) {
            query["nextGmtCreate"] = request.nextGmtCreate;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startDate)) {
            query["startDate"] = request.startDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListAuditLog",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileAuditLogs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAuditLogResponse({}));
    }
    async listAuditLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAuditLogHeaders({});
        return await this.listAuditLogWithOptions(request, headers, runtime);
    }
    async listCategorysWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new ListCategorysShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListCategorys",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/categories/listCategories`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListCategorysResponse({}));
    }
    async listCategorys(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListCategorysHeaders({});
        return await this.listCategorysWithOptions(request, headers, runtime);
    }
    async listJoinOrgInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListJoinOrgInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/exclusiveAccounts/organizations/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListJoinOrgInfoResponse({}));
    }
    async listJoinOrgInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListJoinOrgInfoHeaders({});
        return await this.listJoinOrgInfoWithOptions(request, headers, runtime);
    }
    async listMiniAppAvailableVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.versionTypeSet)) {
            body["versionTypeSet"] = request.versionTypeSet;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListMiniAppAvailableVersion",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/versions/availableLists`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListMiniAppAvailableVersionResponse({}));
    }
    async listMiniAppAvailableVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListMiniAppAvailableVersionHeaders({});
        return await this.listMiniAppAvailableVersionWithOptions(request, headers, runtime);
    }
    async listMiniAppHistoryVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            query["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListMiniAppHistoryVersion",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/versions/historyLists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListMiniAppHistoryVersionResponse({}));
    }
    async listMiniAppHistoryVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListMiniAppHistoryVersionHeaders({});
        return await this.listMiniAppHistoryVersionWithOptions(request, headers, runtime);
    }
    async listPartnerRolesWithOptions(parentId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListPartnerRoles",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partners/roles/${parentId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListPartnerRolesResponse({}));
    }
    async listPartnerRoles(parentId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListPartnerRolesHeaders({});
        return await this.listPartnerRolesWithOptions(parentId, headers, runtime);
    }
    async listPunchScheduleByConditionWithPagingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizInstanceId)) {
            body["bizInstanceId"] = request.bizInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.scheduleDateEnd)) {
            body["scheduleDateEnd"] = request.scheduleDateEnd;
        }
        if (!tea_util_1.default.isUnset(request.scheduleDateStart)) {
            body["scheduleDateStart"] = request.scheduleDateStart;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListPunchScheduleByConditionWithPaging",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/punchSchedules/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListPunchScheduleByConditionWithPagingResponse({}));
    }
    async listPunchScheduleByConditionWithPaging(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListPunchScheduleByConditionWithPagingHeaders({});
        return await this.listPunchScheduleByConditionWithPagingWithOptions(request, headers, runtime);
    }
    async listRulesWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new ListRulesShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListRules",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/rules/listRules`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListRulesResponse({}));
    }
    async listRules(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListRulesHeaders({});
        return await this.listRulesWithOptions(request, headers, runtime);
    }
    async logoutWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deviceType)) {
            body["deviceType"] = request.deviceType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Logout",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/users/logout`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LogoutResponse({}));
    }
    async logout(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LogoutHeaders({});
        return await this.logoutWithOptions(request, headers, runtime);
    }
    async publishFileChangeNoticeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.fileId)) {
            body["fileId"] = request.fileId;
        }
        if (!tea_util_1.default.isUnset(request.operateType)) {
            body["operateType"] = request.operateType;
        }
        if (!tea_util_1.default.isUnset(request.operatorUnionId)) {
            body["operatorUnionId"] = request.operatorUnionId;
        }
        if (!tea_util_1.default.isUnset(request.spaceId)) {
            body["spaceId"] = request.spaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PublishFileChangeNotice",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/comments/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PublishFileChangeNoticeResponse({}));
    }
    async publishFileChangeNotice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PublishFileChangeNoticeHeaders({});
        return await this.publishFileChangeNoticeWithOptions(request, headers, runtime);
    }
    async publishRuleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PublishRule",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/rules/publish`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PublishRuleResponse({}));
    }
    async publishRule(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PublishRuleHeaders({});
        return await this.publishRuleWithOptions(request, headers, runtime);
    }
    async pushBadgeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            body["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.badgeItems)) {
            body["badgeItems"] = request.badgeItems;
        }
        if (!tea_util_1.default.isUnset(request.pushType)) {
            body["pushType"] = request.pushType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PushBadge",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/exclusiveDesigns/redPoints/push`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PushBadgeResponse({}));
    }
    async pushBadge(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PushBadgeHeaders({});
        return await this.pushBadgeWithOptions(request, headers, runtime);
    }
    async queryAcrossCloudStroageConfigsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.targetCloudType)) {
            query["targetCloudType"] = request.targetCloudType;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAcrossCloudStroageConfigs",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/acrossClouds/configurations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAcrossCloudStroageConfigsResponse({}));
    }
    async queryAcrossCloudStroageConfigs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAcrossCloudStroageConfigsHeaders({});
        return await this.queryAcrossCloudStroageConfigsWithOptions(request, headers, runtime);
    }
    async queryPartnerInfoWithOptions(userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryPartnerInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partners/users/${userId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPartnerInfoResponse({}));
    }
    async queryPartnerInfo(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPartnerInfoHeaders({});
        return await this.queryPartnerInfoWithOptions(userId, headers, runtime);
    }
    async queryUserBehaviorWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.platform)) {
            body["platform"] = request.platform;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserBehavior",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/enterpriseSecurities/userBehaviors/screenshots/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserBehaviorResponse({}));
    }
    async queryUserBehavior(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserBehaviorHeaders({});
        return await this.queryUserBehaviorWithOptions(request, headers, runtime);
    }
    async rollbackMiniAppVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.rollbackVersion)) {
            body["rollbackVersion"] = request.rollbackVersion;
        }
        if (!tea_util_1.default.isUnset(request.targetVersion)) {
            body["targetVersion"] = request.targetVersion;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RollbackMiniAppVersion",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/versions/rollback`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RollbackMiniAppVersionResponse({}));
    }
    async rollbackMiniAppVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RollbackMiniAppVersionHeaders({});
        return await this.rollbackMiniAppVersionWithOptions(request, headers, runtime);
    }
    async saveAcrossCloudStroageConfigsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKeyId)) {
            body["accessKeyId"] = request.accessKeyId;
        }
        if (!tea_util_1.default.isUnset(request.accessKeySecret)) {
            body["accessKeySecret"] = request.accessKeySecret;
        }
        if (!tea_util_1.default.isUnset(request.bucketName)) {
            body["bucketName"] = request.bucketName;
        }
        if (!tea_util_1.default.isUnset(request.cloudType)) {
            body["cloudType"] = request.cloudType;
        }
        if (!tea_util_1.default.isUnset(request.endpoint)) {
            body["endpoint"] = request.endpoint;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveAcrossCloudStroageConfigs",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/acrossClouds/configurations`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveAcrossCloudStroageConfigsResponse({}));
    }
    async saveAcrossCloudStroageConfigs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveAcrossCloudStroageConfigsHeaders({});
        return await this.saveAcrossCloudStroageConfigsWithOptions(request, headers, runtime);
    }
    async saveAndSubmitAuthInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.applyRemark)) {
            body["applyRemark"] = request.applyRemark;
        }
        if (!tea_util_1.default.isUnset(request.authorizeMediaId)) {
            body["authorizeMediaId"] = request.authorizeMediaId;
        }
        if (!tea_util_1.default.isUnset(request.industry)) {
            body["industry"] = request.industry;
        }
        if (!tea_util_1.default.isUnset(request.legalPerson)) {
            body["legalPerson"] = request.legalPerson;
        }
        if (!tea_util_1.default.isUnset(request.legalPersonIdCard)) {
            body["legalPersonIdCard"] = request.legalPersonIdCard;
        }
        if (!tea_util_1.default.isUnset(request.licenseMediaId)) {
            body["licenseMediaId"] = request.licenseMediaId;
        }
        if (!tea_util_1.default.isUnset(request.locCity)) {
            body["locCity"] = request.locCity;
        }
        if (!tea_util_1.default.isUnset(request.locCityName)) {
            body["locCityName"] = request.locCityName;
        }
        if (!tea_util_1.default.isUnset(request.locProvince)) {
            body["locProvince"] = request.locProvince;
        }
        if (!tea_util_1.default.isUnset(request.locProvinceName)) {
            body["locProvinceName"] = request.locProvinceName;
        }
        if (!tea_util_1.default.isUnset(request.mobileNum)) {
            body["mobileNum"] = request.mobileNum;
        }
        if (!tea_util_1.default.isUnset(request.orgName)) {
            body["orgName"] = request.orgName;
        }
        if (!tea_util_1.default.isUnset(request.organizationCode)) {
            body["organizationCode"] = request.organizationCode;
        }
        if (!tea_util_1.default.isUnset(request.organizationCodeMediaId)) {
            body["organizationCodeMediaId"] = request.organizationCodeMediaId;
        }
        if (!tea_util_1.default.isUnset(request.registLocation)) {
            body["registLocation"] = request.registLocation;
        }
        if (!tea_util_1.default.isUnset(request.registNum)) {
            body["registNum"] = request.registNum;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        if (!tea_util_1.default.isUnset(request.unifiedSocialCredit)) {
            body["unifiedSocialCredit"] = request.unifiedSocialCredit;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveAndSubmitAuthInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/ognizations/authInfos/saveAndSubmit`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveAndSubmitAuthInfoResponse({}));
    }
    async saveAndSubmitAuthInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveAndSubmitAuthInfoHeaders({});
        return await this.saveAndSubmitAuthInfoWithOptions(request, headers, runtime);
    }
    async saveOpenTerminalInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.logSource)) {
            body["logSource"] = request.logSource;
        }
        if (!tea_util_1.default.isUnset(request.logType)) {
            body["logType"] = request.logType;
        }
        if (!tea_util_1.default.isUnset(request.openExt)) {
            body["openExt"] = request.openExt;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveOpenTerminalInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/externalLogs/terminalInfos/save`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveOpenTerminalInfoResponse({}));
    }
    async saveOpenTerminalInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveOpenTerminalInfoHeaders({});
        return await this.saveOpenTerminalInfoWithOptions(request, headers, runtime);
    }
    async saveWhiteAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentIdList)) {
            body["agentIdList"] = request.agentIdList;
        }
        if (!tea_util_1.default.isUnset(request.agentIdMap)) {
            body["agentIdMap"] = request.agentIdMap;
        }
        if (!tea_util_1.default.isUnset(request.operation)) {
            body["operation"] = request.operation;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveWhiteApp",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/whiteLists/save`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveWhiteAppResponse({}));
    }
    async saveWhiteApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveWhiteAppHeaders({});
        return await this.saveWhiteAppWithOptions(request, headers, runtime);
    }
    async searchOrgInnerGroupInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.createTimeEnd)) {
            query["createTimeEnd"] = request.createTimeEnd;
        }
        if (!tea_util_1.default.isUnset(request.createTimeStart)) {
            query["createTimeStart"] = request.createTimeStart;
        }
        if (!tea_util_1.default.isUnset(request.groupMembersCountEnd)) {
            query["groupMembersCountEnd"] = request.groupMembersCountEnd;
        }
        if (!tea_util_1.default.isUnset(request.groupMembersCountStart)) {
            query["groupMembersCountStart"] = request.groupMembersCountStart;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            query["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.groupOwner)) {
            query["groupOwner"] = request.groupOwner;
        }
        if (!tea_util_1.default.isUnset(request.lastActiveTimeEnd)) {
            query["lastActiveTimeEnd"] = request.lastActiveTimeEnd;
        }
        if (!tea_util_1.default.isUnset(request.lastActiveTimeStart)) {
            query["lastActiveTimeStart"] = request.lastActiveTimeStart;
        }
        if (!tea_util_1.default.isUnset(request.operatorUserId)) {
            query["operatorUserId"] = request.operatorUserId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.pageStart)) {
            query["pageStart"] = request.pageStart;
        }
        if (!tea_util_1.default.isUnset(request.syncToDingpan)) {
            query["syncToDingpan"] = request.syncToDingpan;
        }
        if (!tea_util_1.default.isUnset(request.uuid)) {
            query["uuid"] = request.uuid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchOrgInnerGroupInfo",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/securities/orgGroupInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchOrgInnerGroupInfoResponse({}));
    }
    async searchOrgInnerGroupInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchOrgInnerGroupInfoHeaders({});
        return await this.searchOrgInnerGroupInfoWithOptions(request, headers, runtime);
    }
    async sendAppDingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.userids)) {
            body["userids"] = request.userids;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendAppDing",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/appDings/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendAppDingResponse({}));
    }
    async sendAppDing(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendAppDingHeaders({});
        return await this.sendAppDingWithOptions(request, headers, runtime);
    }
    async sendInvitationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.orgAlias)) {
            body["orgAlias"] = request.orgAlias;
        }
        if (!tea_util_1.default.isUnset(request.partnerLabelId)) {
            body["partnerLabelId"] = request.partnerLabelId;
        }
        if (!tea_util_1.default.isUnset(request.partnerNum)) {
            body["partnerNum"] = request.partnerNum;
        }
        if (!tea_util_1.default.isUnset(request.phone)) {
            body["phone"] = request.phone;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendInvitation",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments/invitations/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendInvitationResponse({}));
    }
    async sendInvitation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendInvitationHeaders({});
        return await this.sendInvitationWithOptions(request, headers, runtime);
    }
    async sendPhoneDingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.userids)) {
            body["userids"] = request.userids;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendPhoneDing",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/phoneDings/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendPhoneDingResponse({}));
    }
    async sendPhoneDing(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendPhoneDingHeaders({});
        return await this.sendPhoneDingWithOptions(request, headers, runtime);
    }
    async setDeptPartnerTypeAndNumWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.labelIds)) {
            body["labelIds"] = request.labelIds;
        }
        if (!tea_util_1.default.isUnset(request.partnerNum)) {
            body["partnerNum"] = request.partnerNum;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetDeptPartnerTypeAndNum",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetDeptPartnerTypeAndNumResponse({}));
    }
    async setDeptPartnerTypeAndNum(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetDeptPartnerTypeAndNumHeaders({});
        return await this.setDeptPartnerTypeAndNumWithOptions(request, headers, runtime);
    }
    async updateCategoryNameWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.currentCategoryName)) {
            body["currentCategoryName"] = request.currentCategoryName;
        }
        if (!tea_util_1.default.isUnset(request.targetCategoryName)) {
            body["targetCategoryName"] = request.targetCategoryName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCategoryName",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/messageCategories/categories/names`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCategoryNameResponse({}));
    }
    async updateCategoryName(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCategoryNameHeaders({});
        return await this.updateCategoryNameWithOptions(request, headers, runtime);
    }
    async updateFileStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.requestIds)) {
            body["requestIds"] = request.requestIds;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateFileStatus",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/sending/files/status`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateFileStatusResponse({}));
    }
    async updateFileStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateFileStatusHeaders({});
        return await this.updateFileStatusWithOptions(request, headers, runtime);
    }
    async updateMiniAppVersionStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        if (!tea_util_1.default.isUnset(request.versionType)) {
            body["versionType"] = request.versionType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateMiniAppVersionStatus",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/miniApps/versions/versionStatus`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateMiniAppVersionStatusResponse({}));
    }
    async updateMiniAppVersionStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateMiniAppVersionStatusHeaders({});
        return await this.updateMiniAppVersionStatusWithOptions(request, headers, runtime);
    }
    async updatePartnerVisibilityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.labelId)) {
            body["labelId"] = request.labelId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdatePartnerVisibility",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments/visibilityPartners`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "boolean",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdatePartnerVisibilityResponse({}));
    }
    async updatePartnerVisibility(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdatePartnerVisibilityHeaders({});
        return await this.updatePartnerVisibilityWithOptions(request, headers, runtime);
    }
    async updateRoleVisibilityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.labelId)) {
            body["labelId"] = request.labelId;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateRoleVisibility",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/partnerDepartments/visibilityRoles`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "boolean",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateRoleVisibilityResponse({}));
    }
    async updateRoleVisibility(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateRoleVisibilityHeaders({});
        return await this.updateRoleVisibilityWithOptions(request, headers, runtime);
    }
    async updateStorageModeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.fileStorageMode)) {
            body["fileStorageMode"] = request.fileStorageMode;
        }
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            body["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateStorageMode",
            version: "exclusive_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/exclusive/fileStorages/acrossClouds/storageModes`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateStorageModeResponse({}));
    }
    async updateStorageMode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateStorageModeHeaders({});
        return await this.updateStorageModeWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map