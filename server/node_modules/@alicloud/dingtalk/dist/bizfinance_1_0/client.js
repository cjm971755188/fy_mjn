"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class RoleMemberMapValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleCode: 'roleCode',
            memberList: 'memberList',
        };
    }
    static types() {
        return {
            roleCode: 'string',
            memberList: { 'type': 'array', 'itemType': RoleMemberMapValueMemberList },
        };
    }
}
exports.RoleMemberMapValue = RoleMemberMapValue;
class AppendRolePermissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AppendRolePermissionHeaders = AppendRolePermissionHeaders;
class AppendRolePermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            rolePermissionItemList: 'rolePermissionItemList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            rolePermissionItemList: { 'type': 'array', 'itemType': AppendRolePermissionRequestRolePermissionItemList },
            userId: 'string',
        };
    }
}
exports.AppendRolePermissionRequest = AppendRolePermissionRequest;
class AppendRolePermissionShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            rolePermissionItemListShrink: 'rolePermissionItemList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            rolePermissionItemListShrink: 'string',
            userId: 'string',
        };
    }
}
exports.AppendRolePermissionShrinkRequest = AppendRolePermissionShrinkRequest;
class AppendRolePermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.AppendRolePermissionResponseBody = AppendRolePermissionResponseBody;
class AppendRolePermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AppendRolePermissionResponseBody,
        };
    }
}
exports.AppendRolePermissionResponse = AppendRolePermissionResponse;
class BatchAddInvoiceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchAddInvoiceHeaders = BatchAddInvoiceHeaders;
class BatchAddInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyCode: 'companyCode',
            generalInvoiceVOList: 'generalInvoiceVOList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            generalInvoiceVOList: { 'type': 'array', 'itemType': BatchAddInvoiceRequestGeneralInvoiceVOList },
            operator: 'string',
        };
    }
}
exports.BatchAddInvoiceRequest = BatchAddInvoiceRequest;
class BatchAddInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorResult: 'errorResult',
            successResult: 'successResult',
        };
    }
    static types() {
        return {
            errorResult: { 'type': 'array', 'itemType': BatchAddInvoiceResponseBodyErrorResult },
            successResult: { 'type': 'array', 'itemType': BatchAddInvoiceResponseBodySuccessResult },
        };
    }
}
exports.BatchAddInvoiceResponseBody = BatchAddInvoiceResponseBody;
class BatchAddInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchAddInvoiceResponseBody,
        };
    }
}
exports.BatchAddInvoiceResponse = BatchAddInvoiceResponse;
class BatchCreateCustomerHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchCreateCustomerHeaders = BatchCreateCustomerHeaders;
class BatchCreateCustomerRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createCustomerRequestList: 'createCustomerRequestList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            createCustomerRequestList: { 'type': 'array', 'itemType': BatchCreateCustomerRequestCreateCustomerRequestList },
            operator: 'string',
        };
    }
}
exports.BatchCreateCustomerRequest = BatchCreateCustomerRequest;
class BatchCreateCustomerResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorResult: 'errorResult',
            success: 'success',
        };
    }
    static types() {
        return {
            errorResult: { 'type': 'array', 'itemType': BatchCreateCustomerResponseBodyErrorResult },
            success: 'boolean',
        };
    }
}
exports.BatchCreateCustomerResponseBody = BatchCreateCustomerResponseBody;
class BatchCreateCustomerResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchCreateCustomerResponseBody,
        };
    }
}
exports.BatchCreateCustomerResponse = BatchCreateCustomerResponse;
class BindCompanyAccountantBookHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BindCompanyAccountantBookHeaders = BindCompanyAccountantBookHeaders;
class BindCompanyAccountantBookRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            companyCode: 'companyCode',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            companyCode: 'string',
        };
    }
}
exports.BindCompanyAccountantBookRequest = BindCompanyAccountantBookRequest;
class BindCompanyAccountantBookResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.BindCompanyAccountantBookResponseBody = BindCompanyAccountantBookResponseBody;
class BindCompanyAccountantBookResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BindCompanyAccountantBookResponseBody,
        };
    }
}
exports.BindCompanyAccountantBookResponse = BindCompanyAccountantBookResponse;
class CheckVoucherStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CheckVoucherStatusHeaders = CheckVoucherStatusHeaders;
class CheckVoucherStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyCode: 'companyCode',
            endTime: 'endTime',
            financeType: 'financeType',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startTime: 'startTime',
            taxNo: 'taxNo',
            verifyStatus: 'verifyStatus',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            endTime: 'number',
            financeType: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startTime: 'number',
            taxNo: 'string',
            verifyStatus: 'string',
        };
    }
}
exports.CheckVoucherStatusRequest = CheckVoucherStatusRequest;
class CheckVoucherStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
}
exports.CheckVoucherStatusResponseBody = CheckVoucherStatusResponseBody;
class CheckVoucherStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckVoucherStatusResponseBody,
        };
    }
}
exports.CheckVoucherStatusResponse = CheckVoucherStatusResponse;
class CreateCustomerHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateCustomerHeaders = CreateCustomerHeaders;
class CreateCustomerRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            creator: 'creator',
            description: 'description',
            drawerEmail: 'drawerEmail',
            drawerTelephone: 'drawerTelephone',
            name: 'name',
            purchaserAccount: 'purchaserAccount',
            purchaserAddress: 'purchaserAddress',
            purchaserBankName: 'purchaserBankName',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
        };
    }
    static types() {
        return {
            creator: 'string',
            description: 'string',
            drawerEmail: 'string',
            drawerTelephone: 'string',
            name: 'string',
            purchaserAccount: 'string',
            purchaserAddress: 'string',
            purchaserBankName: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
        };
    }
}
exports.CreateCustomerRequest = CreateCustomerRequest;
class CreateCustomerResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            customerCode: 'customerCode',
        };
    }
    static types() {
        return {
            customerCode: 'string',
        };
    }
}
exports.CreateCustomerResponseBody = CreateCustomerResponseBody;
class CreateCustomerResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCustomerResponseBody,
        };
    }
}
exports.CreateCustomerResponse = CreateCustomerResponse;
class CreateReceiptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateReceiptHeaders = CreateReceiptHeaders;
class CreateReceiptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            receipts: 'receipts',
        };
    }
    static types() {
        return {
            receipts: { 'type': 'array', 'itemType': CreateReceiptRequestReceipts },
        };
    }
}
exports.CreateReceiptRequest = CreateReceiptRequest;
class CreateReceiptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            results: 'results',
        };
    }
    static types() {
        return {
            results: { 'type': 'array', 'itemType': CreateReceiptResponseBodyResults },
        };
    }
}
exports.CreateReceiptResponseBody = CreateReceiptResponseBody;
class CreateReceiptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateReceiptResponseBody,
        };
    }
}
exports.CreateReceiptResponse = CreateReceiptResponse;
class DeleteReceiptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteReceiptHeaders = DeleteReceiptHeaders;
class DeleteReceiptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            receipts: 'receipts',
        };
    }
    static types() {
        return {
            receipts: { 'type': 'array', 'itemType': DeleteReceiptRequestReceipts },
        };
    }
}
exports.DeleteReceiptRequest = DeleteReceiptRequest;
class DeleteReceiptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            results: 'results',
        };
    }
    static types() {
        return {
            results: { 'type': 'array', 'itemType': DeleteReceiptResponseBodyResults },
        };
    }
}
exports.DeleteReceiptResponseBody = DeleteReceiptResponseBody;
class DeleteReceiptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteReceiptResponseBody,
        };
    }
}
exports.DeleteReceiptResponse = DeleteReceiptResponse;
class GetBookkeepingUserListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetBookkeepingUserListHeaders = GetBookkeepingUserListHeaders;
class GetBookkeepingUserListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetBookkeepingUserListResponseBody = GetBookkeepingUserListResponseBody;
class GetBookkeepingUserListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetBookkeepingUserListResponseBody,
        };
    }
}
exports.GetBookkeepingUserListResponse = GetBookkeepingUserListResponse;
class GetCategoryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCategoryHeaders = GetCategoryHeaders;
class GetCategoryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
}
exports.GetCategoryRequest = GetCategoryRequest;
class GetCategoryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            isDir: 'isDir',
            name: 'name',
            parentCode: 'parentCode',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            isDir: 'boolean',
            name: 'string',
            parentCode: 'string',
            status: 'string',
            type: 'string',
        };
    }
}
exports.GetCategoryResponseBody = GetCategoryResponseBody;
class GetCategoryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCategoryResponseBody,
        };
    }
}
exports.GetCategoryResponse = GetCategoryResponse;
class GetCustomerHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCustomerHeaders = GetCustomerHeaders;
class GetCustomerRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
}
exports.GetCustomerRequest = GetCustomerRequest;
class GetCustomerResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.GetCustomerResponseBody = GetCustomerResponseBody;
class GetCustomerResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCustomerResponseBody,
        };
    }
}
exports.GetCustomerResponse = GetCustomerResponse;
class GetFinanceAccountHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetFinanceAccountHeaders = GetFinanceAccountHeaders;
class GetFinanceAccountRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountCode: 'accountCode',
        };
    }
    static types() {
        return {
            accountCode: 'string',
        };
    }
}
exports.GetFinanceAccountRequest = GetFinanceAccountRequest;
class GetFinanceAccountResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountCode: 'accountCode',
            accountId: 'accountId',
            accountName: 'accountName',
            accountRemark: 'accountRemark',
            accountType: 'accountType',
            accountantBookIdList: 'accountantBookIdList',
            amount: 'amount',
            bankCode: 'bankCode',
            bankName: 'bankName',
            createTime: 'createTime',
            creator: 'creator',
        };
    }
    static types() {
        return {
            accountCode: 'string',
            accountId: 'string',
            accountName: 'string',
            accountRemark: 'string',
            accountType: 'string',
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            amount: 'string',
            bankCode: 'string',
            bankName: 'string',
            createTime: 'number',
            creator: 'string',
        };
    }
}
exports.GetFinanceAccountResponseBody = GetFinanceAccountResponseBody;
class GetFinanceAccountResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFinanceAccountResponseBody,
        };
    }
}
exports.GetFinanceAccountResponse = GetFinanceAccountResponse;
class GetInvoiceByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetInvoiceByPageHeaders = GetInvoiceByPageHeaders;
class GetInvoiceByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            request: 'request',
        };
    }
    static types() {
        return {
            request: GetInvoiceByPageRequestRequest,
        };
    }
}
exports.GetInvoiceByPageRequest = GetInvoiceByPageRequest;
class GetInvoiceByPageShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestShrink: 'request',
        };
    }
    static types() {
        return {
            requestShrink: 'string',
        };
    }
}
exports.GetInvoiceByPageShrinkRequest = GetInvoiceByPageShrinkRequest;
class GetInvoiceByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorCode: 'errorCode',
            errorMsg: 'errorMsg',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            errorCode: 'string',
            errorMsg: 'string',
            result: GetInvoiceByPageResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.GetInvoiceByPageResponseBody = GetInvoiceByPageResponseBody;
class GetInvoiceByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInvoiceByPageResponseBody,
        };
    }
}
exports.GetInvoiceByPageResponse = GetInvoiceByPageResponse;
class GetIsNewVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetIsNewVersionHeaders = GetIsNewVersionHeaders;
class GetIsNewVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
}
exports.GetIsNewVersionResponseBody = GetIsNewVersionResponseBody;
class GetIsNewVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetIsNewVersionResponseBody,
        };
    }
}
exports.GetIsNewVersionResponse = GetIsNewVersionResponse;
class GetMultiCompanyInfoByCodeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetMultiCompanyInfoByCodeHeaders = GetMultiCompanyInfoByCodeHeaders;
class GetMultiCompanyInfoByCodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            advancedSettingList: 'advancedSettingList',
            companyCode: 'companyCode',
            companyName: 'companyName',
            remark: 'remark',
            status: 'status',
            taxNature: 'taxNature',
            taxNo: 'taxNo',
        };
    }
    static types() {
        return {
            advancedSettingList: { 'type': 'array', 'itemType': GetMultiCompanyInfoByCodeResponseBodyAdvancedSettingList },
            companyCode: 'string',
            companyName: 'string',
            remark: 'string',
            status: 'string',
            taxNature: 'string',
            taxNo: 'string',
        };
    }
}
exports.GetMultiCompanyInfoByCodeResponseBody = GetMultiCompanyInfoByCodeResponseBody;
class GetMultiCompanyInfoByCodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMultiCompanyInfoByCodeResponseBody,
        };
    }
}
exports.GetMultiCompanyInfoByCodeResponse = GetMultiCompanyInfoByCodeResponse;
class GetProductHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetProductHeaders = GetProductHeaders;
class GetProductRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
}
exports.GetProductRequest = GetProductRequest;
class GetProductResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            specification: 'specification',
            status: 'status',
            unit: 'unit',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            specification: 'string',
            status: 'string',
            unit: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.GetProductResponseBody = GetProductResponseBody;
class GetProductResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetProductResponseBody,
        };
    }
}
exports.GetProductResponse = GetProductResponse;
class GetProjectHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetProjectHeaders = GetProjectHeaders;
class GetProjectRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
}
exports.GetProjectRequest = GetProjectRequest;
class GetProjectResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            creator: 'creator',
            description: 'description',
            name: 'name',
            projectCode: 'projectCode',
            projectName: 'projectName',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            creator: 'string',
            description: 'string',
            name: 'string',
            projectCode: 'string',
            projectName: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.GetProjectResponseBody = GetProjectResponseBody;
class GetProjectResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetProjectResponseBody,
        };
    }
}
exports.GetProjectResponse = GetProjectResponse;
class GetReceiptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetReceiptHeaders = GetReceiptHeaders;
class GetReceiptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            modelId: 'modelId',
        };
    }
    static types() {
        return {
            code: 'string',
            modelId: 'string',
        };
    }
}
exports.GetReceiptRequest = GetReceiptRequest;
class GetReceiptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            data: 'data',
            modelId: 'modelId',
            source: 'source',
        };
    }
    static types() {
        return {
            appId: 'string',
            data: 'string',
            modelId: 'string',
            source: 'string',
        };
    }
}
exports.GetReceiptResponseBody = GetReceiptResponseBody;
class GetReceiptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetReceiptResponseBody,
        };
    }
}
exports.GetReceiptResponse = GetReceiptResponse;
class GetSupplierHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSupplierHeaders = GetSupplierHeaders;
class GetSupplierRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
}
exports.GetSupplierRequest = GetSupplierRequest;
class GetSupplierResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.GetSupplierResponseBody = GetSupplierResponseBody;
class GetSupplierResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSupplierResponseBody,
        };
    }
}
exports.GetSupplierResponse = GetSupplierResponse;
class GetYongYouOpenApiTokenHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetYongYouOpenApiTokenHeaders = GetYongYouOpenApiTokenHeaders;
class GetYongYouOpenApiTokenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.GetYongYouOpenApiTokenRequest = GetYongYouOpenApiTokenRequest;
class GetYongYouOpenApiTokenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessToken: 'accessToken',
            appName: 'appName',
            expiresIn: 'expiresIn',
            refreshExpiresIn: 'refreshExpiresIn',
            refreshToken: 'refreshToken',
            scope: 'scope',
            sid: 'sid',
            yongyouOrgId: 'yongyouOrgId',
            yongyouUserId: 'yongyouUserId',
        };
    }
    static types() {
        return {
            accessToken: 'string',
            appName: 'string',
            expiresIn: 'string',
            refreshExpiresIn: 'string',
            refreshToken: 'string',
            scope: 'string',
            sid: 'string',
            yongyouOrgId: 'string',
            yongyouUserId: 'string',
        };
    }
}
exports.GetYongYouOpenApiTokenResponseBody = GetYongYouOpenApiTokenResponseBody;
class GetYongYouOpenApiTokenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetYongYouOpenApiTokenResponseBody,
        };
    }
}
exports.GetYongYouOpenApiTokenResponse = GetYongYouOpenApiTokenResponse;
class GetYongYouOrgRelationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetYongYouOrgRelationHeaders = GetYongYouOrgRelationHeaders;
class GetYongYouOrgRelationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chanjetCorpId: 'chanjetCorpId',
            chanjetUserId: 'chanjetUserId',
            corpId: 'corpId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            chanjetCorpId: 'string',
            chanjetUserId: 'string',
            corpId: 'string',
            userId: 'string',
        };
    }
}
exports.GetYongYouOrgRelationResponseBody = GetYongYouOrgRelationResponseBody;
class GetYongYouOrgRelationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetYongYouOrgRelationResponseBody,
        };
    }
}
exports.GetYongYouOrgRelationResponse = GetYongYouOrgRelationResponse;
class ProfessionBenefitConsumeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ProfessionBenefitConsumeHeaders = ProfessionBenefitConsumeHeaders;
class ProfessionBenefitConsumeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            benefitCode: 'benefitCode',
            bizRequestId: 'bizRequestId',
            quota: 'quota',
        };
    }
    static types() {
        return {
            benefitCode: 'string',
            bizRequestId: 'string',
            quota: 'number',
        };
    }
}
exports.ProfessionBenefitConsumeRequest = ProfessionBenefitConsumeRequest;
class ProfessionBenefitConsumeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.ProfessionBenefitConsumeResponseBody = ProfessionBenefitConsumeResponseBody;
class ProfessionBenefitConsumeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ProfessionBenefitConsumeResponseBody,
        };
    }
}
exports.ProfessionBenefitConsumeResponse = ProfessionBenefitConsumeResponse;
class QueryCategoryByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCategoryByPageHeaders = QueryCategoryByPageHeaders;
class QueryCategoryByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            type: 'type',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            type: 'string',
        };
    }
}
exports.QueryCategoryByPageRequest = QueryCategoryByPageRequest;
class QueryCategoryByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCategoryByPageResponseBodyList },
        };
    }
}
exports.QueryCategoryByPageResponseBody = QueryCategoryByPageResponseBody;
class QueryCategoryByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCategoryByPageResponseBody,
        };
    }
}
exports.QueryCategoryByPageResponse = QueryCategoryByPageResponse;
class QueryCompanyInvoiceRelationCountHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCompanyInvoiceRelationCountHeaders = QueryCompanyInvoiceRelationCountHeaders;
class QueryCompanyInvoiceRelationCountRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyCode: 'companyCode',
        };
    }
    static types() {
        return {
            companyCode: 'string',
        };
    }
}
exports.QueryCompanyInvoiceRelationCountRequest = QueryCompanyInvoiceRelationCountRequest;
class QueryCompanyInvoiceRelationCountResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            relationCountMap: 'relationCountMap',
        };
    }
    static types() {
        return {
            relationCountMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'number' },
        };
    }
}
exports.QueryCompanyInvoiceRelationCountResponseBody = QueryCompanyInvoiceRelationCountResponseBody;
class QueryCompanyInvoiceRelationCountResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCompanyInvoiceRelationCountResponseBody,
        };
    }
}
exports.QueryCompanyInvoiceRelationCountResponse = QueryCompanyInvoiceRelationCountResponse;
class QueryCustomerByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCustomerByPageHeaders = QueryCustomerByPageHeaders;
class QueryCustomerByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryCustomerByPageRequest = QueryCustomerByPageRequest;
class QueryCustomerByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCustomerByPageResponseBodyList },
        };
    }
}
exports.QueryCustomerByPageResponseBody = QueryCustomerByPageResponseBody;
class QueryCustomerByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCustomerByPageResponseBody,
        };
    }
}
exports.QueryCustomerByPageResponse = QueryCustomerByPageResponse;
class QueryCustomerInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCustomerInfoHeaders = QueryCustomerInfoHeaders;
class QueryCustomerInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            keyword: 'keyword',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            keyword: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryCustomerInfoRequest = QueryCustomerInfoRequest;
class QueryCustomerInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCustomerInfoResponseBodyList },
            totalCount: 'number',
        };
    }
}
exports.QueryCustomerInfoResponseBody = QueryCustomerInfoResponseBody;
class QueryCustomerInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCustomerInfoResponseBody,
        };
    }
}
exports.QueryCustomerInfoResponse = QueryCustomerInfoResponse;
class QueryEnterpriseAccountByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryEnterpriseAccountByPageHeaders = QueryEnterpriseAccountByPageHeaders;
class QueryEnterpriseAccountByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryEnterpriseAccountByPageRequest = QueryEnterpriseAccountByPageRequest;
class QueryEnterpriseAccountByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryEnterpriseAccountByPageResponseBodyList },
        };
    }
}
exports.QueryEnterpriseAccountByPageResponseBody = QueryEnterpriseAccountByPageResponseBody;
class QueryEnterpriseAccountByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryEnterpriseAccountByPageResponseBody,
        };
    }
}
exports.QueryEnterpriseAccountByPageResponse = QueryEnterpriseAccountByPageResponse;
class QueryFinanceCompanyInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryFinanceCompanyInfoHeaders = QueryFinanceCompanyInfoHeaders;
class QueryFinanceCompanyInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyName: 'companyName',
            taxNature: 'taxNature',
            taxNo: 'taxNo',
        };
    }
    static types() {
        return {
            companyName: 'string',
            taxNature: 'string',
            taxNo: 'string',
        };
    }
}
exports.QueryFinanceCompanyInfoResponseBody = QueryFinanceCompanyInfoResponseBody;
class QueryFinanceCompanyInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryFinanceCompanyInfoResponseBody,
        };
    }
}
exports.QueryFinanceCompanyInfoResponse = QueryFinanceCompanyInfoResponse;
class QueryInvoiceRelationCountHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryInvoiceRelationCountHeaders = QueryInvoiceRelationCountHeaders;
class QueryInvoiceRelationCountResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            relationCountMap: 'relationCountMap',
        };
    }
    static types() {
        return {
            relationCountMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'number' },
        };
    }
}
exports.QueryInvoiceRelationCountResponseBody = QueryInvoiceRelationCountResponseBody;
class QueryInvoiceRelationCountResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryInvoiceRelationCountResponseBody,
        };
    }
}
exports.QueryInvoiceRelationCountResponse = QueryInvoiceRelationCountResponse;
class QueryMultiCompanyInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMultiCompanyInfoHeaders = QueryMultiCompanyInfoHeaders;
class QueryMultiCompanyInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': QueryMultiCompanyInfoResponseBodyList },
        };
    }
}
exports.QueryMultiCompanyInfoResponseBody = QueryMultiCompanyInfoResponseBody;
class QueryMultiCompanyInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMultiCompanyInfoResponseBody,
        };
    }
}
exports.QueryMultiCompanyInfoResponse = QueryMultiCompanyInfoResponse;
class QueryPermissionByUserIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryPermissionByUserIdHeaders = QueryPermissionByUserIdHeaders;
class QueryPermissionByUserIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.QueryPermissionByUserIdRequest = QueryPermissionByUserIdRequest;
class QueryPermissionByUserIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            permissionDTOList: 'permissionDTOList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            permissionDTOList: { 'type': 'array', 'itemType': QueryPermissionByUserIdResponseBodyPermissionDTOList },
            userId: 'string',
        };
    }
}
exports.QueryPermissionByUserIdResponseBody = QueryPermissionByUserIdResponseBody;
class QueryPermissionByUserIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPermissionByUserIdResponseBody,
        };
    }
}
exports.QueryPermissionByUserIdResponse = QueryPermissionByUserIdResponse;
class QueryPermissionRoleMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryPermissionRoleMemberHeaders = QueryPermissionRoleMemberHeaders;
class QueryPermissionRoleMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleCodeList: 'roleCodeList',
        };
    }
    static types() {
        return {
            roleCodeList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryPermissionRoleMemberRequest = QueryPermissionRoleMemberRequest;
class QueryPermissionRoleMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleMemberMap: 'roleMemberMap',
        };
    }
    static types() {
        return {
            roleMemberMap: { 'type': 'map', 'keyType': 'string', 'valueType': RoleMemberMapValue },
        };
    }
}
exports.QueryPermissionRoleMemberResponseBody = QueryPermissionRoleMemberResponseBody;
class QueryPermissionRoleMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPermissionRoleMemberResponseBody,
        };
    }
}
exports.QueryPermissionRoleMemberResponse = QueryPermissionRoleMemberResponse;
class QueryProductByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryProductByPageHeaders = QueryProductByPageHeaders;
class QueryProductByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryProductByPageRequest = QueryProductByPageRequest;
class QueryProductByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryProductByPageResponseBodyList },
        };
    }
}
exports.QueryProductByPageResponseBody = QueryProductByPageResponseBody;
class QueryProductByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryProductByPageResponseBody,
        };
    }
}
exports.QueryProductByPageResponse = QueryProductByPageResponse;
class QueryProjectByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryProjectByPageHeaders = QueryProjectByPageHeaders;
class QueryProjectByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QueryProjectByPageRequest = QueryProjectByPageRequest;
class QueryProjectByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryProjectByPageResponseBodyList },
        };
    }
}
exports.QueryProjectByPageResponseBody = QueryProjectByPageResponseBody;
class QueryProjectByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryProjectByPageResponseBody,
        };
    }
}
exports.QueryProjectByPageResponse = QueryProjectByPageResponse;
class QueryReceiptDetailForInvoiceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryReceiptDetailForInvoiceHeaders = QueryReceiptDetailForInvoiceHeaders;
class QueryReceiptDetailForInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
        };
    }
}
exports.QueryReceiptDetailForInvoiceRequest = QueryReceiptDetailForInvoiceRequest;
class QueryReceiptDetailForInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryReceiptDetailForInvoiceResponseBodyResult,
        };
    }
}
exports.QueryReceiptDetailForInvoiceResponseBody = QueryReceiptDetailForInvoiceResponseBody;
class QueryReceiptDetailForInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryReceiptDetailForInvoiceResponseBody,
        };
    }
}
exports.QueryReceiptDetailForInvoiceResponse = QueryReceiptDetailForInvoiceResponse;
class QueryReceiptForInvoiceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryReceiptForInvoiceHeaders = QueryReceiptForInvoiceHeaders;
class QueryReceiptForInvoiceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            applyStatusList: 'applyStatusList',
            bizStatusList: 'bizStatusList',
            companyCode: 'companyCode',
            endTime: 'endTime',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            receiptStatusList: 'receiptStatusList',
            searchParams: 'searchParams',
            startTime: 'startTime',
            title: 'title',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            applyStatusList: { 'type': 'array', 'itemType': 'string' },
            bizStatusList: { 'type': 'array', 'itemType': 'string' },
            companyCode: 'string',
            endTime: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            receiptStatusList: { 'type': 'array', 'itemType': 'string' },
            searchParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            startTime: 'number',
            title: 'string',
        };
    }
}
exports.QueryReceiptForInvoiceRequest = QueryReceiptForInvoiceRequest;
class QueryReceiptForInvoiceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'string',
            list: { 'type': 'array', 'itemType': QueryReceiptForInvoiceResponseBodyList },
            totalCount: 'number',
        };
    }
}
exports.QueryReceiptForInvoiceResponseBody = QueryReceiptForInvoiceResponseBody;
class QueryReceiptForInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryReceiptForInvoiceResponseBody,
        };
    }
}
exports.QueryReceiptForInvoiceResponse = QueryReceiptForInvoiceResponse;
class QueryReceiptsBaseInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryReceiptsBaseInfoHeaders = QueryReceiptsBaseInfoHeaders;
class QueryReceiptsBaseInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            companyCode: 'companyCode',
            endTime: 'endTime',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startTime: 'startTime',
            timeFilterField: 'timeFilterField',
            title: 'title',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            companyCode: 'string',
            endTime: 'number',
            pageNumber: 'number',
            pageSize: 'number',
            startTime: 'number',
            timeFilterField: 'string',
            title: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.QueryReceiptsBaseInfoRequest = QueryReceiptsBaseInfoRequest;
class QueryReceiptsBaseInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'string',
            list: { 'type': 'array', 'itemType': QueryReceiptsBaseInfoResponseBodyList },
            totalCount: 'number',
        };
    }
}
exports.QueryReceiptsBaseInfoResponseBody = QueryReceiptsBaseInfoResponseBody;
class QueryReceiptsBaseInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryReceiptsBaseInfoResponseBody,
        };
    }
}
exports.QueryReceiptsBaseInfoResponse = QueryReceiptsBaseInfoResponse;
class QueryReceiptsByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryReceiptsByPageHeaders = QueryReceiptsByPageHeaders;
class QueryReceiptsByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            modelId: 'modelId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startTime: 'startTime',
            timeFilterField: 'timeFilterField',
        };
    }
    static types() {
        return {
            endTime: 'number',
            modelId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startTime: 'number',
            timeFilterField: 'string',
        };
    }
}
exports.QueryReceiptsByPageRequest = QueryReceiptsByPageRequest;
class QueryReceiptsByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'string',
            list: { 'type': 'array', 'itemType': QueryReceiptsByPageResponseBodyList },
        };
    }
}
exports.QueryReceiptsByPageResponseBody = QueryReceiptsByPageResponseBody;
class QueryReceiptsByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryReceiptsByPageResponseBody,
        };
    }
}
exports.QueryReceiptsByPageResponse = QueryReceiptsByPageResponse;
class QueryRoleMemberByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryRoleMemberByPageHeaders = QueryRoleMemberByPageHeaders;
class QueryRoleMemberByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            maxResults: 'string',
            nextToken: 'string',
            roleCode: 'string',
        };
    }
}
exports.QueryRoleMemberByPageRequest = QueryRoleMemberByPageRequest;
class QueryRoleMemberByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryRoleMemberByPageResponseBodyList },
            nextToken: 'number',
            totalCount: 'number',
        };
    }
}
exports.QueryRoleMemberByPageResponseBody = QueryRoleMemberByPageResponseBody;
class QueryRoleMemberByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryRoleMemberByPageResponseBody,
        };
    }
}
exports.QueryRoleMemberByPageResponse = QueryRoleMemberByPageResponse;
class QuerySupplierByPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QuerySupplierByPageHeaders = QuerySupplierByPageHeaders;
class QuerySupplierByPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.QuerySupplierByPageRequest = QuerySupplierByPageRequest;
class QuerySupplierByPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QuerySupplierByPageResponseBodyList },
        };
    }
}
exports.QuerySupplierByPageResponseBody = QuerySupplierByPageResponseBody;
class QuerySupplierByPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySupplierByPageResponseBody,
        };
    }
}
exports.QuerySupplierByPageResponse = QuerySupplierByPageResponse;
class QueryUserRoleListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserRoleListHeaders = QueryUserRoleListHeaders;
class QueryUserRoleListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.QueryUserRoleListRequest = QueryUserRoleListRequest;
class QueryUserRoleListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleVOList: 'roleVOList',
        };
    }
    static types() {
        return {
            roleVOList: { 'type': 'array', 'itemType': QueryUserRoleListResponseBodyRoleVOList },
        };
    }
}
exports.QueryUserRoleListResponseBody = QueryUserRoleListResponseBody;
class QueryUserRoleListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserRoleListResponseBody,
        };
    }
}
exports.QueryUserRoleListResponse = QueryUserRoleListResponse;
class UnbindApplyReceiptAndInvoiceRelatedHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UnbindApplyReceiptAndInvoiceRelatedHeaders = UnbindApplyReceiptAndInvoiceRelatedHeaders;
class UnbindApplyReceiptAndInvoiceRelatedRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'instanceId',
            invoiceKeyVOList: 'invoiceKeyVOList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            invoiceKeyVOList: { 'type': 'array', 'itemType': UnbindApplyReceiptAndInvoiceRelatedRequestInvoiceKeyVOList },
            operator: 'string',
        };
    }
}
exports.UnbindApplyReceiptAndInvoiceRelatedRequest = UnbindApplyReceiptAndInvoiceRelatedRequest;
class UnbindApplyReceiptAndInvoiceRelatedResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            batchUpdateInvoiceResponse: 'batchUpdateInvoiceResponse',
            errorInvoiceKeyVOList: 'errorInvoiceKeyVOList',
            success: 'success',
        };
    }
    static types() {
        return {
            batchUpdateInvoiceResponse: UnbindApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponse,
            errorInvoiceKeyVOList: { 'type': 'array', 'itemType': UnbindApplyReceiptAndInvoiceRelatedResponseBodyErrorInvoiceKeyVOList },
            success: 'boolean',
        };
    }
}
exports.UnbindApplyReceiptAndInvoiceRelatedResponseBody = UnbindApplyReceiptAndInvoiceRelatedResponseBody;
class UnbindApplyReceiptAndInvoiceRelatedResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnbindApplyReceiptAndInvoiceRelatedResponseBody,
        };
    }
}
exports.UnbindApplyReceiptAndInvoiceRelatedResponse = UnbindApplyReceiptAndInvoiceRelatedResponse;
class UpdateApplyReceiptAndInvoiceRelatedHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedHeaders = UpdateApplyReceiptAndInvoiceRelatedHeaders;
class UpdateApplyReceiptAndInvoiceRelatedRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            generalInvoiceVOList: 'generalInvoiceVOList',
            instanceId: 'instanceId',
            operator: 'operator',
        };
    }
    static types() {
        return {
            generalInvoiceVOList: { 'type': 'array', 'itemType': UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOList },
            instanceId: 'string',
            operator: 'string',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedRequest = UpdateApplyReceiptAndInvoiceRelatedRequest;
class UpdateApplyReceiptAndInvoiceRelatedResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            batchUpdateInvoiceResponse: 'batchUpdateInvoiceResponse',
            errorInvoiceKeyVOList: 'errorInvoiceKeyVOList',
            success: 'success',
        };
    }
    static types() {
        return {
            batchUpdateInvoiceResponse: UpdateApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponse,
            errorInvoiceKeyVOList: { 'type': 'array', 'itemType': UpdateApplyReceiptAndInvoiceRelatedResponseBodyErrorInvoiceKeyVOList },
            success: 'boolean',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedResponseBody = UpdateApplyReceiptAndInvoiceRelatedResponseBody;
class UpdateApplyReceiptAndInvoiceRelatedResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateApplyReceiptAndInvoiceRelatedResponseBody,
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedResponse = UpdateApplyReceiptAndInvoiceRelatedResponse;
class UpdateDigitalInvoiceOrgInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateDigitalInvoiceOrgInfoHeaders = UpdateDigitalInvoiceOrgInfoHeaders;
class UpdateDigitalInvoiceOrgInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            digitalInvoiceType: 'digitalInvoiceType',
            isDigitalOrg: 'isDigitalOrg',
            location: 'location',
            operator: 'operator',
        };
    }
    static types() {
        return {
            digitalInvoiceType: { 'type': 'array', 'itemType': 'string' },
            isDigitalOrg: 'boolean',
            location: 'string',
            operator: 'string',
        };
    }
}
exports.UpdateDigitalInvoiceOrgInfoRequest = UpdateDigitalInvoiceOrgInfoRequest;
class UpdateDigitalInvoiceOrgInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateDigitalInvoiceOrgInfoResponseBody = UpdateDigitalInvoiceOrgInfoResponseBody;
class UpdateDigitalInvoiceOrgInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateDigitalInvoiceOrgInfoResponseBody,
        };
    }
}
exports.UpdateDigitalInvoiceOrgInfoResponse = UpdateDigitalInvoiceOrgInfoResponse;
class UpdateFinanceCompanyInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateFinanceCompanyInfoHeaders = UpdateFinanceCompanyInfoHeaders;
class UpdateFinanceCompanyInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyName: 'companyName',
            taxNature: 'taxNature',
            taxNo: 'taxNo',
            userId: 'userId',
        };
    }
    static types() {
        return {
            companyName: 'string',
            taxNature: 'string',
            taxNo: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateFinanceCompanyInfoRequest = UpdateFinanceCompanyInfoRequest;
class UpdateFinanceCompanyInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateFinanceCompanyInfoResponseBody = UpdateFinanceCompanyInfoResponseBody;
class UpdateFinanceCompanyInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateFinanceCompanyInfoResponseBody,
        };
    }
}
exports.UpdateFinanceCompanyInfoResponse = UpdateFinanceCompanyInfoResponse;
class UpdateFinanceMultiCompanyInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateFinanceMultiCompanyInfoHeaders = UpdateFinanceMultiCompanyInfoHeaders;
class UpdateFinanceMultiCompanyInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyCode: 'companyCode',
            companyName: 'companyName',
            taxNature: 'taxNature',
            taxNo: 'taxNo',
            userId: 'userId',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            companyName: 'string',
            taxNature: 'string',
            taxNo: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateFinanceMultiCompanyInfoRequest = UpdateFinanceMultiCompanyInfoRequest;
class UpdateFinanceMultiCompanyInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateFinanceMultiCompanyInfoResponseBody = UpdateFinanceMultiCompanyInfoResponseBody;
class UpdateFinanceMultiCompanyInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateFinanceMultiCompanyInfoResponseBody,
        };
    }
}
exports.UpdateFinanceMultiCompanyInfoResponse = UpdateFinanceMultiCompanyInfoResponse;
class UpdateInvoiceAbandonStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusHeaders = UpdateInvoiceAbandonStatusHeaders;
class UpdateInvoiceAbandonStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blueGeneralInvoiceVO: 'blueGeneralInvoiceVO',
            blueInvoiceCode: 'blueInvoiceCode',
            blueInvoiceNo: 'blueInvoiceNo',
            blueInvoiceStatus: 'blueInvoiceStatus',
            companyCode: 'companyCode',
            operator: 'operator',
            redGeneralInvoiceVO: 'redGeneralInvoiceVO',
            redInvoiceCode: 'redInvoiceCode',
            redInvoiceNo: 'redInvoiceNo',
            redInvoiceStatus: 'redInvoiceStatus',
            targetInvoice: 'targetInvoice',
        };
    }
    static types() {
        return {
            blueGeneralInvoiceVO: UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVO,
            blueInvoiceCode: 'string',
            blueInvoiceNo: 'string',
            blueInvoiceStatus: 'string',
            companyCode: 'string',
            operator: 'string',
            redGeneralInvoiceVO: UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVO,
            redInvoiceCode: 'string',
            redInvoiceNo: 'string',
            redInvoiceStatus: 'string',
            targetInvoice: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequest = UpdateInvoiceAbandonStatusRequest;
class UpdateInvoiceAbandonStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateInvoiceAbandonStatusResponseBody = UpdateInvoiceAbandonStatusResponseBody;
class UpdateInvoiceAbandonStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceAbandonStatusResponseBody,
        };
    }
}
exports.UpdateInvoiceAbandonStatusResponse = UpdateInvoiceAbandonStatusResponse;
class UpdateInvoiceAccountPeriodHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodHeaders = UpdateInvoiceAccountPeriodHeaders;
class UpdateInvoiceAccountPeriodRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            companyCode: 'companyCode',
            generalInvoiceVOList: 'generalInvoiceVOList',
            invoiceKeyVOList: 'invoiceKeyVOList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            companyCode: 'string',
            generalInvoiceVOList: { 'type': 'array', 'itemType': UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOList },
            invoiceKeyVOList: { 'type': 'array', 'itemType': UpdateInvoiceAccountPeriodRequestInvoiceKeyVOList },
            operator: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodRequest = UpdateInvoiceAccountPeriodRequest;
class UpdateInvoiceAccountPeriodResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorResult: 'errorResult',
            successResult: 'successResult',
        };
    }
    static types() {
        return {
            errorResult: { 'type': 'array', 'itemType': UpdateInvoiceAccountPeriodResponseBodyErrorResult },
            successResult: { 'type': 'array', 'itemType': UpdateInvoiceAccountPeriodResponseBodySuccessResult },
        };
    }
}
exports.UpdateInvoiceAccountPeriodResponseBody = UpdateInvoiceAccountPeriodResponseBody;
class UpdateInvoiceAccountPeriodResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceAccountPeriodResponseBody,
        };
    }
}
exports.UpdateInvoiceAccountPeriodResponse = UpdateInvoiceAccountPeriodResponse;
class UpdateInvoiceAccountingPeriodDateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInvoiceAccountingPeriodDateHeaders = UpdateInvoiceAccountingPeriodDateHeaders;
class UpdateInvoiceAccountingPeriodDateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyCode: 'companyCode',
            invoiceFinanceInfoVOList: 'invoiceFinanceInfoVOList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            invoiceFinanceInfoVOList: { 'type': 'array', 'itemType': UpdateInvoiceAccountingPeriodDateRequestInvoiceFinanceInfoVOList },
            operator: 'string',
        };
    }
}
exports.UpdateInvoiceAccountingPeriodDateRequest = UpdateInvoiceAccountingPeriodDateRequest;
class UpdateInvoiceAccountingPeriodDateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateInvoiceAccountingPeriodDateResponseBodyResult,
        };
    }
}
exports.UpdateInvoiceAccountingPeriodDateResponseBody = UpdateInvoiceAccountingPeriodDateResponseBody;
class UpdateInvoiceAccountingPeriodDateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceAccountingPeriodDateResponseBody,
        };
    }
}
exports.UpdateInvoiceAccountingPeriodDateResponse = UpdateInvoiceAccountingPeriodDateResponse;
class UpdateInvoiceAccountingStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInvoiceAccountingStatusHeaders = UpdateInvoiceAccountingStatusHeaders;
class UpdateInvoiceAccountingStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyCode: 'companyCode',
            invoiceFinanceInfoVOList: 'invoiceFinanceInfoVOList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            invoiceFinanceInfoVOList: { 'type': 'array', 'itemType': UpdateInvoiceAccountingStatusRequestInvoiceFinanceInfoVOList },
            operator: 'string',
        };
    }
}
exports.UpdateInvoiceAccountingStatusRequest = UpdateInvoiceAccountingStatusRequest;
class UpdateInvoiceAccountingStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateInvoiceAccountingStatusResponseBodyResult,
        };
    }
}
exports.UpdateInvoiceAccountingStatusResponseBody = UpdateInvoiceAccountingStatusResponseBody;
class UpdateInvoiceAccountingStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceAccountingStatusResponseBody,
        };
    }
}
exports.UpdateInvoiceAccountingStatusResponse = UpdateInvoiceAccountingStatusResponse;
class UpdateInvoiceAndReceiptRelatedHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedHeaders = UpdateInvoiceAndReceiptRelatedHeaders;
class UpdateInvoiceAndReceiptRelatedRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            generalInvoiceVO: 'generalInvoiceVO',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            operator: 'operator',
            receiptCode: 'receiptCode',
        };
    }
    static types() {
        return {
            generalInvoiceVO: UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVO,
            invoiceCode: 'string',
            invoiceNo: 'string',
            operator: 'string',
            receiptCode: 'string',
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedRequest = UpdateInvoiceAndReceiptRelatedRequest;
class UpdateInvoiceAndReceiptRelatedResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedResponseBody = UpdateInvoiceAndReceiptRelatedResponseBody;
class UpdateInvoiceAndReceiptRelatedResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceAndReceiptRelatedResponseBody,
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedResponse = UpdateInvoiceAndReceiptRelatedResponse;
class UpdateInvoiceIgnoreStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInvoiceIgnoreStatusHeaders = UpdateInvoiceIgnoreStatusHeaders;
class UpdateInvoiceIgnoreStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'instanceId',
            operator: 'operator',
            status: 'status',
        };
    }
    static types() {
        return {
            instanceId: 'string',
            operator: 'string',
            status: 'string',
        };
    }
}
exports.UpdateInvoiceIgnoreStatusRequest = UpdateInvoiceIgnoreStatusRequest;
class UpdateInvoiceIgnoreStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateInvoiceIgnoreStatusResponseBody = UpdateInvoiceIgnoreStatusResponseBody;
class UpdateInvoiceIgnoreStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceIgnoreStatusResponseBody,
        };
    }
}
exports.UpdateInvoiceIgnoreStatusResponse = UpdateInvoiceIgnoreStatusResponse;
class UpdateInvoiceVerifyStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusHeaders = UpdateInvoiceVerifyStatusHeaders;
class UpdateInvoiceVerifyStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            companyCode: 'companyCode',
            deductStatus: 'deductStatus',
            generalInvoiceVOList: 'generalInvoiceVOList',
            invoiceKeyVOList: 'invoiceKeyVOList',
            operator: 'operator',
            verifyStatus: 'verifyStatus',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            deductStatus: 'string',
            generalInvoiceVOList: { 'type': 'array', 'itemType': UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOList },
            invoiceKeyVOList: { 'type': 'array', 'itemType': UpdateInvoiceVerifyStatusRequestInvoiceKeyVOList },
            operator: 'string',
            verifyStatus: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusRequest = UpdateInvoiceVerifyStatusRequest;
class UpdateInvoiceVerifyStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateInvoiceVerifyStatusResponseBody = UpdateInvoiceVerifyStatusResponseBody;
class UpdateInvoiceVerifyStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceVerifyStatusResponseBody,
        };
    }
}
exports.UpdateInvoiceVerifyStatusResponse = UpdateInvoiceVerifyStatusResponse;
class UpdateInvoiceVoucherStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInvoiceVoucherStatusHeaders = UpdateInvoiceVoucherStatusHeaders;
class UpdateInvoiceVoucherStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            actionType: 'actionType',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            operator: 'operator',
            voucherId: 'voucherId',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            actionType: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            operator: 'string',
            voucherId: 'string',
        };
    }
}
exports.UpdateInvoiceVoucherStatusRequest = UpdateInvoiceVoucherStatusRequest;
class UpdateInvoiceVoucherStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
}
exports.UpdateInvoiceVoucherStatusResponseBody = UpdateInvoiceVoucherStatusResponseBody;
class UpdateInvoiceVoucherStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInvoiceVoucherStatusResponseBody,
        };
    }
}
exports.UpdateInvoiceVoucherStatusResponse = UpdateInvoiceVoucherStatusResponse;
class UpdateReceiptHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateReceiptHeaders = UpdateReceiptHeaders;
class UpdateReceiptRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            receipts: 'receipts',
        };
    }
    static types() {
        return {
            receipts: { 'type': 'array', 'itemType': UpdateReceiptRequestReceipts },
        };
    }
}
exports.UpdateReceiptRequest = UpdateReceiptRequest;
class UpdateReceiptResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            results: 'results',
        };
    }
    static types() {
        return {
            results: { 'type': 'array', 'itemType': UpdateReceiptResponseBodyResults },
        };
    }
}
exports.UpdateReceiptResponseBody = UpdateReceiptResponseBody;
class UpdateReceiptResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateReceiptResponseBody,
        };
    }
}
exports.UpdateReceiptResponse = UpdateReceiptResponse;
class UpdateReceiptVoucherStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateReceiptVoucherStatusHeaders = UpdateReceiptVoucherStatusHeaders;
class UpdateReceiptVoucherStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            actionType: 'actionType',
            operatorId: 'operatorId',
            receiptId: 'receiptId',
            voucherCode: 'voucherCode',
            voucherId: 'voucherId',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            actionType: 'string',
            operatorId: 'string',
            receiptId: 'string',
            voucherCode: 'string',
            voucherId: 'string',
        };
    }
}
exports.UpdateReceiptVoucherStatusRequest = UpdateReceiptVoucherStatusRequest;
class UpdateReceiptVoucherStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateReceiptVoucherStatusResponseBody = UpdateReceiptVoucherStatusResponseBody;
class UpdateReceiptVoucherStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateReceiptVoucherStatusResponseBody,
        };
    }
}
exports.UpdateReceiptVoucherStatusResponse = UpdateReceiptVoucherStatusResponse;
class RoleMemberMapValueMemberList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
            nick: 'nick',
            avatarUrl: 'avatarUrl',
        };
    }
    static types() {
        return {
            userId: 'string',
            nick: 'string',
            avatarUrl: 'string',
        };
    }
}
exports.RoleMemberMapValueMemberList = RoleMemberMapValueMemberList;
class AppendRolePermissionRequestRolePermissionItemListPermissionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionIdList: 'actionIdList',
            resourceIdentity: 'resourceIdentity',
        };
    }
    static types() {
        return {
            actionIdList: { 'type': 'array', 'itemType': 'string' },
            resourceIdentity: 'string',
        };
    }
}
exports.AppendRolePermissionRequestRolePermissionItemListPermissionList = AppendRolePermissionRequestRolePermissionItemListPermissionList;
class AppendRolePermissionRequestRolePermissionItemList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            permissionList: 'permissionList',
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            permissionList: { 'type': 'array', 'itemType': AppendRolePermissionRequestRolePermissionItemListPermissionList },
            roleCode: 'string',
        };
    }
}
exports.AppendRolePermissionRequestRolePermissionItemList = AppendRolePermissionRequestRolePermissionItemList;
class BatchAddInvoiceRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            goodsName: 'goodsName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            specification: 'specification',
            taxAmount: 'taxAmount',
            taxPre: 'taxPre',
            taxPreType: 'taxPreType',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPrice: 'unitPrice',
        };
    }
    static types() {
        return {
            amount: 'string',
            goodsName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            specification: 'string',
            taxAmount: 'string',
            taxPre: 'string',
            taxPreType: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPrice: 'string',
        };
    }
}
exports.BatchAddInvoiceRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList = BatchAddInvoiceRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList;
class BatchAddInvoiceRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            cardNo: 'cardNo',
            endDate: 'endDate',
            goodsName: 'goodsName',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            startDate: 'startDate',
            taxAmount: 'taxAmount',
            taxRate: 'taxRate',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            amount: 'string',
            cardNo: 'string',
            endDate: 'string',
            goodsName: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            startDate: 'string',
            taxAmount: 'string',
            taxRate: 'string',
            vehicleType: 'string',
        };
    }
}
exports.BatchAddInvoiceRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList = BatchAddInvoiceRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList;
class BatchAddInvoiceRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auctionUnit: 'auctionUnit',
            auctionUnitAddress: 'auctionUnitAddress',
            auctionUnitBank: 'auctionUnitBank',
            auctionUnitTaxNo: 'auctionUnitTaxNo',
            auctionUtilTel: 'auctionUtilTel',
            carModel: 'carModel',
            cardNo: 'cardNo',
            registration: 'registration',
            transferVehicle: 'transferVehicle',
            usedCarAddress: 'usedCarAddress',
            usedCarMarket: 'usedCarMarket',
            usedCarMarketBank: 'usedCarMarketBank',
            usedCarMarketPhone: 'usedCarMarketPhone',
            usedCarMarketTaxNo: 'usedCarMarketTaxNo',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            auctionUnit: 'string',
            auctionUnitAddress: 'string',
            auctionUnitBank: 'string',
            auctionUnitTaxNo: 'string',
            auctionUtilTel: 'string',
            carModel: 'string',
            cardNo: 'string',
            registration: 'string',
            transferVehicle: 'string',
            usedCarAddress: 'string',
            usedCarMarket: 'string',
            usedCarMarketBank: 'string',
            usedCarMarketPhone: 'string',
            usedCarMarketTaxNo: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.BatchAddInvoiceRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList = BatchAddInvoiceRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList;
class BatchAddInvoiceRequestGeneralInvoiceVOListVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brand: 'brand',
            certificateNo: 'certificateNo',
            engineNo: 'engineNo',
            idCardNo: 'idCardNo',
            importCertificateNo: 'importCertificateNo',
            inspectionListNo: 'inspectionListNo',
            maxPassengers: 'maxPassengers',
            originPlace: 'originPlace',
            paymentVoucherNo: 'paymentVoucherNo',
            taxAuthorityName: 'taxAuthorityName',
            taxAuthorityNo: 'taxAuthorityNo',
            taxRate: 'taxRate',
            tonnage: 'tonnage',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            brand: 'string',
            certificateNo: 'string',
            engineNo: 'string',
            idCardNo: 'string',
            importCertificateNo: 'string',
            inspectionListNo: 'string',
            maxPassengers: 'string',
            originPlace: 'string',
            paymentVoucherNo: 'string',
            taxAuthorityName: 'string',
            taxAuthorityNo: 'string',
            taxRate: 'string',
            tonnage: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.BatchAddInvoiceRequestGeneralInvoiceVOListVehicleSaleDetailVOList = BatchAddInvoiceRequestGeneralInvoiceVOListVehicleSaleDetailVOList;
class BatchAddInvoiceRequestGeneralInvoiceVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            amount: 'amount',
            amountWithTax: 'amountWithTax',
            checkCode: 'checkCode',
            checkTime: 'checkTime',
            drawerName: 'drawerName',
            drewDate: 'drewDate',
            electronicUrl: 'electronicUrl',
            financeType: 'financeType',
            fundType: 'fundType',
            generalInvoiceDetailVOList: 'generalInvoiceDetailVOList',
            imageUrl: 'imageUrl',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceStatus: 'invoiceStatus',
            invoiceType: 'invoiceType',
            machineCode: 'machineCode',
            oilFlag: 'oilFlag',
            payee: 'payee',
            processInstCode: 'processInstCode',
            processInstType: 'processInstType',
            purchaserAddress: 'purchaserAddress',
            purchaserBankAccount: 'purchaserBankAccount',
            purchaserBankNameAccount: 'purchaserBankNameAccount',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            reviewer: 'reviewer',
            secondHandCarInvoiceDetailList: 'secondHandCarInvoiceDetailList',
            sellerAddress: 'sellerAddress',
            sellerBankAccount: 'sellerBankAccount',
            sellerBankNameAccount: 'sellerBankNameAccount',
            sellerName: 'sellerName',
            sellerTaxNo: 'sellerTaxNo',
            sellerTel: 'sellerTel',
            supplySign: 'supplySign',
            taxAmount: 'taxAmount',
            usedVehicleSaleDetailVOList: 'usedVehicleSaleDetailVOList',
            vehicleSaleDetailVOList: 'vehicleSaleDetailVOList',
            verifyStatus: 'verifyStatus',
            voucherCode: 'voucherCode',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            amount: 'string',
            amountWithTax: 'string',
            checkCode: 'string',
            checkTime: 'string',
            drawerName: 'string',
            drewDate: 'string',
            electronicUrl: 'string',
            financeType: 'string',
            fundType: 'string',
            generalInvoiceDetailVOList: { 'type': 'array', 'itemType': BatchAddInvoiceRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList },
            imageUrl: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceStatus: 'string',
            invoiceType: 'string',
            machineCode: 'string',
            oilFlag: 'string',
            payee: 'string',
            processInstCode: 'string',
            processInstType: 'string',
            purchaserAddress: 'string',
            purchaserBankAccount: 'string',
            purchaserBankNameAccount: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            remark: 'string',
            reviewer: 'string',
            secondHandCarInvoiceDetailList: { 'type': 'array', 'itemType': BatchAddInvoiceRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList },
            sellerAddress: 'string',
            sellerBankAccount: 'string',
            sellerBankNameAccount: 'string',
            sellerName: 'string',
            sellerTaxNo: 'string',
            sellerTel: 'string',
            supplySign: 'string',
            taxAmount: 'string',
            usedVehicleSaleDetailVOList: { 'type': 'array', 'itemType': BatchAddInvoiceRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList },
            vehicleSaleDetailVOList: { 'type': 'array', 'itemType': BatchAddInvoiceRequestGeneralInvoiceVOListVehicleSaleDetailVOList },
            verifyStatus: 'string',
            voucherCode: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.BatchAddInvoiceRequestGeneralInvoiceVOList = BatchAddInvoiceRequestGeneralInvoiceVOList;
class BatchAddInvoiceResponseBodyErrorResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorKey: 'errorKey',
            errorMsg: 'errorMsg',
        };
    }
    static types() {
        return {
            errorKey: 'string',
            errorMsg: 'string',
        };
    }
}
exports.BatchAddInvoiceResponseBodyErrorResult = BatchAddInvoiceResponseBodyErrorResult;
class BatchAddInvoiceResponseBodySuccessResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.BatchAddInvoiceResponseBodySuccessResult = BatchAddInvoiceResponseBodySuccessResult;
class BatchCreateCustomerRequestCreateCustomerRequestList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            drawerEmail: 'drawerEmail',
            drawerTelephone: 'drawerTelephone',
            name: 'name',
            purchaserAccount: 'purchaserAccount',
            purchaserAddress: 'purchaserAddress',
            purchaserBankName: 'purchaserBankName',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
        };
    }
    static types() {
        return {
            description: 'string',
            drawerEmail: 'string',
            drawerTelephone: 'string',
            name: 'string',
            purchaserAccount: 'string',
            purchaserAddress: 'string',
            purchaserBankName: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
        };
    }
}
exports.BatchCreateCustomerRequestCreateCustomerRequestList = BatchCreateCustomerRequestCreateCustomerRequestList;
class BatchCreateCustomerResponseBodyErrorResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorKey: 'errorKey',
            errorMsg: 'errorMsg',
        };
    }
    static types() {
        return {
            errorKey: 'string',
            errorMsg: 'string',
        };
    }
}
exports.BatchCreateCustomerResponseBodyErrorResult = BatchCreateCustomerResponseBodyErrorResult;
class CreateReceiptRequestReceipts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            categoryCode: 'categoryCode',
            code: 'code',
            createTime: 'createTime',
            createUserId: 'createUserId',
            customerCode: 'customerCode',
            enterpriseAcountCode: 'enterpriseAcountCode',
            occurDate: 'occurDate',
            principalId: 'principalId',
            projectCode: 'projectCode',
            receiptType: 'receiptType',
            remark: 'remark',
            supplierCode: 'supplierCode',
            title: 'title',
        };
    }
    static types() {
        return {
            amount: 'string',
            categoryCode: 'string',
            code: 'string',
            createTime: 'number',
            createUserId: 'string',
            customerCode: 'string',
            enterpriseAcountCode: 'string',
            occurDate: 'number',
            principalId: 'string',
            projectCode: 'string',
            receiptType: 'number',
            remark: 'string',
            supplierCode: 'string',
            title: 'string',
        };
    }
}
exports.CreateReceiptRequestReceipts = CreateReceiptRequestReceipts;
class CreateReceiptResponseBodyResults extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            errorCode: 'errorCode',
            errorMsg: 'errorMsg',
            success: 'success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorCode: 'string',
            errorMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateReceiptResponseBodyResults = CreateReceiptResponseBodyResults;
class DeleteReceiptRequestReceipts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            deleteUserId: 'deleteUserId',
            receiptType: 'receiptType',
        };
    }
    static types() {
        return {
            code: 'string',
            deleteUserId: 'string',
            receiptType: 'number',
        };
    }
}
exports.DeleteReceiptRequestReceipts = DeleteReceiptRequestReceipts;
class DeleteReceiptResponseBodyResults extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            errorCode: 'errorCode',
            errorMsg: 'errorMsg',
            success: 'success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorCode: 'string',
            errorMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.DeleteReceiptResponseBodyResults = DeleteReceiptResponseBodyResults;
class GetInvoiceByPageRequestRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            companyCode: 'companyCode',
            endTime: 'endTime',
            financeType: 'financeType',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            startTime: 'startTime',
            taxNo: 'taxNo',
            verifyStatus: 'verifyStatus',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            companyCode: 'string',
            endTime: 'number',
            financeType: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            startTime: 'number',
            taxNo: 'string',
            verifyStatus: 'string',
        };
    }
}
exports.GetInvoiceByPageRequestRequest = GetInvoiceByPageRequestRequest;
class GetInvoiceByPageResponseBodyResultListGeneralInvoiceDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            goodsName: 'goodsName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            specification: 'specification',
            taxAmount: 'taxAmount',
            taxPre: 'taxPre',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPrice: 'unitPrice',
        };
    }
    static types() {
        return {
            amount: 'string',
            goodsName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            specification: 'string',
            taxAmount: 'string',
            taxPre: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPrice: 'string',
        };
    }
}
exports.GetInvoiceByPageResponseBodyResultListGeneralInvoiceDetailVOList = GetInvoiceByPageResponseBodyResultListGeneralInvoiceDetailVOList;
class GetInvoiceByPageResponseBodyResultListTransportFeeDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            cardNo: 'cardNo',
            endDate: 'endDate',
            goodsName: 'goodsName',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            startDate: 'startDate',
            taxAmount: 'taxAmount',
            taxRate: 'taxRate',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            amount: 'string',
            cardNo: 'string',
            endDate: 'string',
            goodsName: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            startDate: 'string',
            taxAmount: 'string',
            taxRate: 'string',
            vehicleType: 'string',
        };
    }
}
exports.GetInvoiceByPageResponseBodyResultListTransportFeeDetailVOList = GetInvoiceByPageResponseBodyResultListTransportFeeDetailVOList;
class GetInvoiceByPageResponseBodyResultListUsedVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auctionUnit: 'auctionUnit',
            auctionUnitAddress: 'auctionUnitAddress',
            auctionUnitBank: 'auctionUnitBank',
            auctionUnitTaxNo: 'auctionUnitTaxNo',
            auctionUtilTel: 'auctionUtilTel',
            carModel: 'carModel',
            cardNo: 'cardNo',
            registration: 'registration',
            transferVehicle: 'transferVehicle',
            usedCarAddress: 'usedCarAddress',
            usedCarMarket: 'usedCarMarket',
            usedCarMarketBank: 'usedCarMarketBank',
            usedCarMarketPhone: 'usedCarMarketPhone',
            usedCarMarketTaxNo: 'usedCarMarketTaxNo',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            auctionUnit: 'string',
            auctionUnitAddress: 'string',
            auctionUnitBank: 'string',
            auctionUnitTaxNo: 'string',
            auctionUtilTel: 'string',
            carModel: 'string',
            cardNo: 'string',
            registration: 'string',
            transferVehicle: 'string',
            usedCarAddress: 'string',
            usedCarMarket: 'string',
            usedCarMarketBank: 'string',
            usedCarMarketPhone: 'string',
            usedCarMarketTaxNo: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.GetInvoiceByPageResponseBodyResultListUsedVehicleSaleDetailVOList = GetInvoiceByPageResponseBodyResultListUsedVehicleSaleDetailVOList;
class GetInvoiceByPageResponseBodyResultListVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brand: 'brand',
            certificateNo: 'certificateNo',
            engineNo: 'engineNo',
            idCardNo: 'idCardNo',
            importCertificateNo: 'importCertificateNo',
            maxPassengers: 'maxPassengers',
            originPlace: 'originPlace',
            paymentVoucherNo: 'paymentVoucherNo',
            taxAuthorityName: 'taxAuthorityName',
            taxAuthorityNo: 'taxAuthorityNo',
            taxRate: 'taxRate',
            tonnage: 'tonnage',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            brand: 'string',
            certificateNo: 'string',
            engineNo: 'string',
            idCardNo: 'string',
            importCertificateNo: 'string',
            maxPassengers: 'string',
            originPlace: 'string',
            paymentVoucherNo: 'string',
            taxAuthorityName: 'string',
            taxAuthorityNo: 'string',
            taxRate: 'string',
            tonnage: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.GetInvoiceByPageResponseBodyResultListVehicleSaleDetailVOList = GetInvoiceByPageResponseBodyResultListVehicleSaleDetailVOList;
class GetInvoiceByPageResponseBodyResultList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            amount: 'amount',
            amountWithTax: 'amountWithTax',
            checkCode: 'checkCode',
            checkTime: 'checkTime',
            drewDate: 'drewDate',
            electronicUrl: 'electronicUrl',
            financeType: 'financeType',
            fundType: 'fundType',
            generalInvoiceDetailVOList: 'generalInvoiceDetailVOList',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceStatus: 'invoiceStatus',
            invoiceType: 'invoiceType',
            machineCode: 'machineCode',
            oilFlag: 'oilFlag',
            payee: 'payee',
            processInstCode: 'processInstCode',
            processInstType: 'processInstType',
            purchaserAddress: 'purchaserAddress',
            purchaserBankNameAccount: 'purchaserBankNameAccount',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            sellerAddress: 'sellerAddress',
            sellerBankNameAccount: 'sellerBankNameAccount',
            sellerName: 'sellerName',
            sellerTaxNo: 'sellerTaxNo',
            sellerTel: 'sellerTel',
            status: 'status',
            supplySign: 'supplySign',
            taxAmount: 'taxAmount',
            transportFeeDetailVOList: 'transportFeeDetailVOList',
            usedVehicleSaleDetailVOList: 'usedVehicleSaleDetailVOList',
            vehicleSaleDetailVOList: 'vehicleSaleDetailVOList',
            verifyStatus: 'verifyStatus',
            voucherCode: 'voucherCode',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            amount: 'string',
            amountWithTax: 'string',
            checkCode: 'string',
            checkTime: 'string',
            drewDate: 'string',
            electronicUrl: 'string',
            financeType: 'string',
            fundType: 'string',
            generalInvoiceDetailVOList: { 'type': 'array', 'itemType': GetInvoiceByPageResponseBodyResultListGeneralInvoiceDetailVOList },
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceStatus: 'string',
            invoiceType: 'string',
            machineCode: 'string',
            oilFlag: 'string',
            payee: 'string',
            processInstCode: 'string',
            processInstType: 'string',
            purchaserAddress: 'string',
            purchaserBankNameAccount: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            remark: 'string',
            sellerAddress: 'string',
            sellerBankNameAccount: 'string',
            sellerName: 'string',
            sellerTaxNo: 'string',
            sellerTel: 'string',
            status: 'string',
            supplySign: 'string',
            taxAmount: 'string',
            transportFeeDetailVOList: { 'type': 'array', 'itemType': GetInvoiceByPageResponseBodyResultListTransportFeeDetailVOList },
            usedVehicleSaleDetailVOList: { 'type': 'array', 'itemType': GetInvoiceByPageResponseBodyResultListUsedVehicleSaleDetailVOList },
            vehicleSaleDetailVOList: { 'type': 'array', 'itemType': GetInvoiceByPageResponseBodyResultListVehicleSaleDetailVOList },
            verifyStatus: 'string',
            voucherCode: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.GetInvoiceByPageResponseBodyResultList = GetInvoiceByPageResponseBodyResultList;
class GetInvoiceByPageResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'string',
            list: { 'type': 'array', 'itemType': GetInvoiceByPageResponseBodyResultList },
            nextCursor: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetInvoiceByPageResponseBodyResult = GetInvoiceByPageResponseBodyResult;
class GetMultiCompanyInfoByCodeResponseBodyAdvancedSettingList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            advancedSettingKey: 'advancedSettingKey',
            advancedSettingName: 'advancedSettingName',
            endDate: 'endDate',
            value: 'value',
        };
    }
    static types() {
        return {
            advancedSettingKey: 'string',
            advancedSettingName: 'string',
            endDate: 'number',
            value: 'boolean',
        };
    }
}
exports.GetMultiCompanyInfoByCodeResponseBodyAdvancedSettingList = GetMultiCompanyInfoByCodeResponseBodyAdvancedSettingList;
class QueryCategoryByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            isDir: 'isDir',
            name: 'name',
            parentCode: 'parentCode',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            isDir: 'boolean',
            name: 'string',
            parentCode: 'string',
            status: 'string',
            type: 'string',
        };
    }
}
exports.QueryCategoryByPageResponseBodyList = QueryCategoryByPageResponseBodyList;
class QueryCustomerByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.QueryCustomerByPageResponseBodyList = QueryCustomerByPageResponseBodyList;
class QueryCustomerInfoResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            contactAddress: 'contactAddress',
            contactCompanyTelephone: 'contactCompanyTelephone',
            contactEmail: 'contactEmail',
            contactName: 'contactName',
            contactTelephone: 'contactTelephone',
            description: 'description',
            drawerEmail: 'drawerEmail',
            drawerTelephone: 'drawerTelephone',
            name: 'name',
            purchaserAccount: 'purchaserAccount',
            purchaserAddress: 'purchaserAddress',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            purchaserrBankName: 'purchaserrBankName',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            contactAddress: 'string',
            contactCompanyTelephone: 'string',
            contactEmail: 'string',
            contactName: 'string',
            contactTelephone: 'string',
            description: 'string',
            drawerEmail: 'string',
            drawerTelephone: 'string',
            name: 'string',
            purchaserAccount: 'string',
            purchaserAddress: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            purchaserrBankName: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.QueryCustomerInfoResponseBodyList = QueryCustomerInfoResponseBodyList;
class QueryEnterpriseAccountByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountCode: 'accountCode',
            accountId: 'accountId',
            accountName: 'accountName',
            accountRemark: 'accountRemark',
            accountType: 'accountType',
            amount: 'amount',
            bankCode: 'bankCode',
            bankName: 'bankName',
            createTime: 'createTime',
            creator: 'creator',
        };
    }
    static types() {
        return {
            accountCode: 'string',
            accountId: 'string',
            accountName: 'string',
            accountRemark: 'string',
            accountType: 'string',
            amount: 'string',
            bankCode: 'string',
            bankName: 'string',
            createTime: 'number',
            creator: 'string',
        };
    }
}
exports.QueryEnterpriseAccountByPageResponseBodyList = QueryEnterpriseAccountByPageResponseBodyList;
class QueryMultiCompanyInfoResponseBodyListAdvancedSettingList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            advancedSettingKey: 'advancedSettingKey',
            advancedSettingName: 'advancedSettingName',
            endDate: 'endDate',
            value: 'value',
        };
    }
    static types() {
        return {
            advancedSettingKey: 'string',
            advancedSettingName: 'string',
            endDate: 'number',
            value: 'boolean',
        };
    }
}
exports.QueryMultiCompanyInfoResponseBodyListAdvancedSettingList = QueryMultiCompanyInfoResponseBodyListAdvancedSettingList;
class QueryMultiCompanyInfoResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            advancedSettingList: 'advancedSettingList',
            companyCode: 'companyCode',
            companyName: 'companyName',
            createTime: 'createTime',
            remark: 'remark',
            status: 'status',
            taxNature: 'taxNature',
            taxNo: 'taxNo',
        };
    }
    static types() {
        return {
            advancedSettingList: { 'type': 'array', 'itemType': QueryMultiCompanyInfoResponseBodyListAdvancedSettingList },
            companyCode: 'string',
            companyName: 'string',
            createTime: 'string',
            remark: 'string',
            status: 'string',
            taxNature: 'string',
            taxNo: 'string',
        };
    }
}
exports.QueryMultiCompanyInfoResponseBodyList = QueryMultiCompanyInfoResponseBodyList;
class QueryPermissionByUserIdResponseBodyPermissionDTOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionIdList: 'actionIdList',
            resourceIdentity: 'resourceIdentity',
        };
    }
    static types() {
        return {
            actionIdList: { 'type': 'array', 'itemType': 'string' },
            resourceIdentity: 'string',
        };
    }
}
exports.QueryPermissionByUserIdResponseBodyPermissionDTOList = QueryPermissionByUserIdResponseBodyPermissionDTOList;
class QueryProductByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            specification: 'specification',
            status: 'status',
            unit: 'unit',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            specification: 'string',
            status: 'string',
            unit: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.QueryProductByPageResponseBodyList = QueryProductByPageResponseBodyList;
class QueryProjectByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            caode: 'caode',
            code: 'code',
            createTime: 'createTime',
            creator: 'creator',
            description: 'description',
            name: 'name',
            projectCode: 'projectCode',
            projectName: 'projectName',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            caode: 'string',
            code: 'string',
            createTime: 'number',
            creator: 'string',
            description: 'string',
            name: 'string',
            projectCode: 'string',
            projectName: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.QueryProjectByPageResponseBodyList = QueryProjectByPageResponseBodyList;
class QueryReceiptDetailForInvoiceResponseBodyResultCreator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            nick: 'nick',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            nick: 'string',
            userId: 'string',
        };
    }
}
exports.QueryReceiptDetailForInvoiceResponseBodyResultCreator = QueryReceiptDetailForInvoiceResponseBodyResultCreator;
class QueryReceiptDetailForInvoiceResponseBodyResultCustomer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
}
exports.QueryReceiptDetailForInvoiceResponseBodyResultCustomer = QueryReceiptDetailForInvoiceResponseBodyResultCustomer;
class QueryReceiptDetailForInvoiceResponseBodyResultProductInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amountWithTax: 'amountWithTax',
            amountWithoutTax: 'amountWithoutTax',
            discountAmount: 'discountAmount',
            name: 'name',
            quantity: 'quantity',
            specification: 'specification',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPriceWithTax: 'unitPriceWithTax',
            unitPriceWithoutTax: 'unitPriceWithoutTax',
            withTax: 'withTax',
        };
    }
    static types() {
        return {
            amountWithTax: 'string',
            amountWithoutTax: 'string',
            discountAmount: 'string',
            name: 'string',
            quantity: 'string',
            specification: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPriceWithTax: 'string',
            unitPriceWithoutTax: 'string',
            withTax: 'boolean',
        };
    }
}
exports.QueryReceiptDetailForInvoiceResponseBodyResultProductInfoList = QueryReceiptDetailForInvoiceResponseBodyResultProductInfoList;
class QueryReceiptDetailForInvoiceResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            amount: 'amount',
            applyStatus: 'applyStatus',
            bizStatus: 'bizStatus',
            businessId: 'businessId',
            companyCode: 'companyCode',
            createTime: 'createTime',
            creator: 'creator',
            customer: 'customer',
            drawerEmail: 'drawerEmail',
            drawerTelephone: 'drawerTelephone',
            invoiceType: 'invoiceType',
            modelId: 'modelId',
            productInfoList: 'productInfoList',
            purchaserAccount: 'purchaserAccount',
            purchaserAddress: 'purchaserAddress',
            purchaserBankName: 'purchaserBankName',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            receiptId: 'receiptId',
            recordTime: 'recordTime',
            remark: 'remark',
            source: 'source',
            status: 'status',
            title: 'title',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            amount: 'string',
            applyStatus: 'string',
            bizStatus: 'string',
            businessId: 'string',
            companyCode: 'string',
            createTime: 'string',
            creator: QueryReceiptDetailForInvoiceResponseBodyResultCreator,
            customer: QueryReceiptDetailForInvoiceResponseBodyResultCustomer,
            drawerEmail: 'string',
            drawerTelephone: 'string',
            invoiceType: 'string',
            modelId: 'string',
            productInfoList: { 'type': 'array', 'itemType': QueryReceiptDetailForInvoiceResponseBodyResultProductInfoList },
            purchaserAccount: 'string',
            purchaserAddress: 'string',
            purchaserBankName: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            receiptId: 'string',
            recordTime: 'string',
            remark: 'string',
            source: 'string',
            status: 'string',
            title: 'string',
        };
    }
}
exports.QueryReceiptDetailForInvoiceResponseBodyResult = QueryReceiptDetailForInvoiceResponseBodyResult;
class QueryReceiptForInvoiceResponseBodyListCreator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            nick: 'nick',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            nick: 'string',
            userId: 'string',
        };
    }
}
exports.QueryReceiptForInvoiceResponseBodyListCreator = QueryReceiptForInvoiceResponseBodyListCreator;
class QueryReceiptForInvoiceResponseBodyListCustomer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
}
exports.QueryReceiptForInvoiceResponseBodyListCustomer = QueryReceiptForInvoiceResponseBodyListCustomer;
class QueryReceiptForInvoiceResponseBodyListProductInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amountWithTax: 'amountWithTax',
            amountWithoutTax: 'amountWithoutTax',
            discountAmount: 'discountAmount',
            name: 'name',
            quantity: 'quantity',
            specification: 'specification',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPriceWithTax: 'unitPriceWithTax',
            unitPriceWithoutTax: 'unitPriceWithoutTax',
            withTax: 'withTax',
        };
    }
    static types() {
        return {
            amountWithTax: 'string',
            amountWithoutTax: 'string',
            discountAmount: 'string',
            name: 'string',
            quantity: 'string',
            specification: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPriceWithTax: 'string',
            unitPriceWithoutTax: 'string',
            withTax: 'boolean',
        };
    }
}
exports.QueryReceiptForInvoiceResponseBodyListProductInfoList = QueryReceiptForInvoiceResponseBodyListProductInfoList;
class QueryReceiptForInvoiceResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            amount: 'amount',
            applyStatus: 'applyStatus',
            bizStatus: 'bizStatus',
            businessId: 'businessId',
            companyCode: 'companyCode',
            createTime: 'createTime',
            creator: 'creator',
            customer: 'customer',
            drawerEmail: 'drawerEmail',
            drawerTelephone: 'drawerTelephone',
            invoiceType: 'invoiceType',
            modelId: 'modelId',
            productInfoList: 'productInfoList',
            purchaserAccount: 'purchaserAccount',
            purchaserAddress: 'purchaserAddress',
            purchaserBankName: 'purchaserBankName',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            receiptId: 'receiptId',
            recordTime: 'recordTime',
            remark: 'remark',
            source: 'source',
            status: 'status',
            title: 'title',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            amount: 'string',
            applyStatus: 'string',
            bizStatus: 'string',
            businessId: 'string',
            companyCode: 'string',
            createTime: 'string',
            creator: QueryReceiptForInvoiceResponseBodyListCreator,
            customer: QueryReceiptForInvoiceResponseBodyListCustomer,
            drawerEmail: 'string',
            drawerTelephone: 'string',
            invoiceType: 'string',
            modelId: 'string',
            productInfoList: { 'type': 'array', 'itemType': QueryReceiptForInvoiceResponseBodyListProductInfoList },
            purchaserAccount: 'string',
            purchaserAddress: 'string',
            purchaserBankName: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            receiptId: 'string',
            recordTime: 'string',
            remark: 'string',
            source: 'string',
            status: 'string',
            title: 'string',
        };
    }
}
exports.QueryReceiptForInvoiceResponseBodyList = QueryReceiptForInvoiceResponseBodyList;
class QueryReceiptsBaseInfoResponseBodyListCreator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            nick: 'nick',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            nick: 'string',
            userId: 'string',
        };
    }
}
exports.QueryReceiptsBaseInfoResponseBodyListCreator = QueryReceiptsBaseInfoResponseBodyListCreator;
class QueryReceiptsBaseInfoResponseBodyListCustomer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
}
exports.QueryReceiptsBaseInfoResponseBodyListCustomer = QueryReceiptsBaseInfoResponseBodyListCustomer;
class QueryReceiptsBaseInfoResponseBodyListPrincipal extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            nick: 'nick',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            nick: 'string',
            userId: 'string',
        };
    }
}
exports.QueryReceiptsBaseInfoResponseBodyListPrincipal = QueryReceiptsBaseInfoResponseBodyListPrincipal;
class QueryReceiptsBaseInfoResponseBodyListProject extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
}
exports.QueryReceiptsBaseInfoResponseBodyListProject = QueryReceiptsBaseInfoResponseBodyListProject;
class QueryReceiptsBaseInfoResponseBodyListSupplier extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
}
exports.QueryReceiptsBaseInfoResponseBodyListSupplier = QueryReceiptsBaseInfoResponseBodyListSupplier;
class QueryReceiptsBaseInfoResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountantBookId: 'accountantBookId',
            amount: 'amount',
            businessId: 'businessId',
            companyCode: 'companyCode',
            createTime: 'createTime',
            creator: 'creator',
            customer: 'customer',
            modelId: 'modelId',
            principal: 'principal',
            project: 'project',
            receiptId: 'receiptId',
            recordTime: 'recordTime',
            remark: 'remark',
            source: 'source',
            status: 'status',
            supplier: 'supplier',
            title: 'title',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountantBookId: 'string',
            amount: 'string',
            businessId: 'string',
            companyCode: 'string',
            createTime: 'string',
            creator: QueryReceiptsBaseInfoResponseBodyListCreator,
            customer: QueryReceiptsBaseInfoResponseBodyListCustomer,
            modelId: 'string',
            principal: QueryReceiptsBaseInfoResponseBodyListPrincipal,
            project: QueryReceiptsBaseInfoResponseBodyListProject,
            receiptId: 'string',
            recordTime: 'string',
            remark: 'string',
            source: 'string',
            status: 'string',
            supplier: QueryReceiptsBaseInfoResponseBodyListSupplier,
            title: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.QueryReceiptsBaseInfoResponseBodyList = QueryReceiptsBaseInfoResponseBodyList;
class QueryReceiptsByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            data: 'data',
            modelId: 'modelId',
            source: 'source',
        };
    }
    static types() {
        return {
            appId: 'string',
            data: 'string',
            modelId: 'string',
            source: 'string',
        };
    }
}
exports.QueryReceiptsByPageResponseBodyList = QueryReceiptsByPageResponseBodyList;
class QueryRoleMemberByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            nick: 'nick',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            nick: 'string',
            userId: 'string',
        };
    }
}
exports.QueryRoleMemberByPageResponseBodyList = QueryRoleMemberByPageResponseBodyList;
class QuerySupplierByPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
}
exports.QuerySupplierByPageResponseBodyList = QuerySupplierByPageResponseBodyList;
class QueryUserRoleListResponseBodyRoleVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleCode: 'roleCode',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            roleCode: 'string',
            roleName: 'string',
        };
    }
}
exports.QueryUserRoleListResponseBodyRoleVOList = QueryUserRoleListResponseBodyRoleVOList;
class UnbindApplyReceiptAndInvoiceRelatedRequestInvoiceKeyVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UnbindApplyReceiptAndInvoiceRelatedRequestInvoiceKeyVOList = UnbindApplyReceiptAndInvoiceRelatedRequestInvoiceKeyVOList;
class UnbindApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponseInvoiceKeyVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UnbindApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponseInvoiceKeyVOList = UnbindApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponseInvoiceKeyVOList;
class UnbindApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceKeyVOList: 'invoiceKeyVOList',
        };
    }
    static types() {
        return {
            invoiceKeyVOList: { 'type': 'array', 'itemType': UnbindApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponseInvoiceKeyVOList },
        };
    }
}
exports.UnbindApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponse = UnbindApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponse;
class UnbindApplyReceiptAndInvoiceRelatedResponseBodyErrorInvoiceKeyVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UnbindApplyReceiptAndInvoiceRelatedResponseBodyErrorInvoiceKeyVOList = UnbindApplyReceiptAndInvoiceRelatedResponseBodyErrorInvoiceKeyVOList;
class UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            goodsName: 'goodsName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            specification: 'specification',
            taxAmount: 'taxAmount',
            taxPre: 'taxPre',
            taxPreType: 'taxPreType',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPrice: 'unitPrice',
        };
    }
    static types() {
        return {
            amount: 'string',
            goodsName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            specification: 'string',
            taxAmount: 'string',
            taxPre: 'string',
            taxPreType: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPrice: 'string',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList = UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList;
class UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            cardNo: 'cardNo',
            endDate: 'endDate',
            goodsName: 'goodsName',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            startDate: 'startDate',
            taxAmount: 'taxAmount',
            taxRate: 'taxRate',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            amount: 'string',
            cardNo: 'string',
            endDate: 'string',
            goodsName: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            startDate: 'string',
            taxAmount: 'string',
            taxRate: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList = UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList;
class UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auctionUnit: 'auctionUnit',
            auctionUnitAddress: 'auctionUnitAddress',
            auctionUnitBank: 'auctionUnitBank',
            auctionUnitTaxNo: 'auctionUnitTaxNo',
            auctionUtilTel: 'auctionUtilTel',
            carModel: 'carModel',
            cardNo: 'cardNo',
            registration: 'registration',
            transferVehicle: 'transferVehicle',
            usedCarAddress: 'usedCarAddress',
            usedCarMarket: 'usedCarMarket',
            usedCarMarketBank: 'usedCarMarketBank',
            usedCarMarketPhone: 'usedCarMarketPhone',
            usedCarMarketTaxNo: 'usedCarMarketTaxNo',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            auctionUnit: 'string',
            auctionUnitAddress: 'string',
            auctionUnitBank: 'string',
            auctionUnitTaxNo: 'string',
            auctionUtilTel: 'string',
            carModel: 'string',
            cardNo: 'string',
            registration: 'string',
            transferVehicle: 'string',
            usedCarAddress: 'string',
            usedCarMarket: 'string',
            usedCarMarketBank: 'string',
            usedCarMarketPhone: 'string',
            usedCarMarketTaxNo: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList = UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList;
class UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brand: 'brand',
            certificateNo: 'certificateNo',
            engineNo: 'engineNo',
            idCardNo: 'idCardNo',
            importCertificateNo: 'importCertificateNo',
            inspectionListNo: 'inspectionListNo',
            maxPassengers: 'maxPassengers',
            originPlace: 'originPlace',
            paymentVoucherNo: 'paymentVoucherNo',
            taxAuthorityName: 'taxAuthorityName',
            taxAuthorityNo: 'taxAuthorityNo',
            taxRate: 'taxRate',
            tonnage: 'tonnage',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            brand: 'string',
            certificateNo: 'string',
            engineNo: 'string',
            idCardNo: 'string',
            importCertificateNo: 'string',
            inspectionListNo: 'string',
            maxPassengers: 'string',
            originPlace: 'string',
            paymentVoucherNo: 'string',
            taxAuthorityName: 'string',
            taxAuthorityNo: 'string',
            taxRate: 'string',
            tonnage: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListVehicleSaleDetailVOList = UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListVehicleSaleDetailVOList;
class UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            amount: 'amount',
            amountWithTax: 'amountWithTax',
            checkCode: 'checkCode',
            checkTime: 'checkTime',
            drawerName: 'drawerName',
            drewDate: 'drewDate',
            electronicUrl: 'electronicUrl',
            financeType: 'financeType',
            fundType: 'fundType',
            generalInvoiceDetailVOList: 'generalInvoiceDetailVOList',
            imageUrl: 'imageUrl',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceStatus: 'invoiceStatus',
            invoiceType: 'invoiceType',
            machineCode: 'machineCode',
            oilFlag: 'oilFlag',
            payee: 'payee',
            processInstCode: 'processInstCode',
            processInstType: 'processInstType',
            purchaserAddress: 'purchaserAddress',
            purchaserBankAccount: 'purchaserBankAccount',
            purchaserBankNameAccount: 'purchaserBankNameAccount',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            secondHandCarInvoiceDetailList: 'secondHandCarInvoiceDetailList',
            sellerAddress: 'sellerAddress',
            sellerBankAccount: 'sellerBankAccount',
            sellerBankNameAccount: 'sellerBankNameAccount',
            sellerName: 'sellerName',
            sellerTaxNo: 'sellerTaxNo',
            sellerTel: 'sellerTel',
            supplySign: 'supplySign',
            taxAmount: 'taxAmount',
            usedVehicleSaleDetailVOList: 'usedVehicleSaleDetailVOList',
            vehicleSaleDetailVOList: 'vehicleSaleDetailVOList',
            verifyStatus: 'verifyStatus',
            voucherCode: 'voucherCode',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            amount: 'string',
            amountWithTax: 'string',
            checkCode: 'string',
            checkTime: 'string',
            drawerName: 'string',
            drewDate: 'string',
            electronicUrl: 'string',
            financeType: 'string',
            fundType: 'string',
            generalInvoiceDetailVOList: { 'type': 'array', 'itemType': UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList },
            imageUrl: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceStatus: 'string',
            invoiceType: 'string',
            machineCode: 'string',
            oilFlag: 'string',
            payee: 'string',
            processInstCode: 'string',
            processInstType: 'string',
            purchaserAddress: 'string',
            purchaserBankAccount: 'string',
            purchaserBankNameAccount: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            remark: 'string',
            secondHandCarInvoiceDetailList: { 'type': 'array', 'itemType': UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList },
            sellerAddress: 'string',
            sellerBankAccount: 'string',
            sellerBankNameAccount: 'string',
            sellerName: 'string',
            sellerTaxNo: 'string',
            sellerTel: 'string',
            supplySign: 'string',
            taxAmount: 'string',
            usedVehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList },
            vehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOListVehicleSaleDetailVOList },
            verifyStatus: 'string',
            voucherCode: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOList = UpdateApplyReceiptAndInvoiceRelatedRequestGeneralInvoiceVOList;
class UpdateApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponseInvoiceKeyVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponseInvoiceKeyVOList = UpdateApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponseInvoiceKeyVOList;
class UpdateApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceKeyVOList: 'invoiceKeyVOList',
        };
    }
    static types() {
        return {
            invoiceKeyVOList: { 'type': 'array', 'itemType': UpdateApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponseInvoiceKeyVOList },
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponse = UpdateApplyReceiptAndInvoiceRelatedResponseBodyBatchUpdateInvoiceResponse;
class UpdateApplyReceiptAndInvoiceRelatedResponseBodyErrorInvoiceKeyVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UpdateApplyReceiptAndInvoiceRelatedResponseBodyErrorInvoiceKeyVOList = UpdateApplyReceiptAndInvoiceRelatedResponseBodyErrorInvoiceKeyVOList;
class UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOGeneralInvoiceDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            goodsName: 'goodsName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            specification: 'specification',
            taxAmount: 'taxAmount',
            taxPre: 'taxPre',
            taxPreType: 'taxPreType',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPrice: 'unitPrice',
        };
    }
    static types() {
        return {
            amount: 'string',
            goodsName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            specification: 'string',
            taxAmount: 'string',
            taxPre: 'string',
            taxPreType: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPrice: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOGeneralInvoiceDetailVOList = UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOGeneralInvoiceDetailVOList;
class UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOSecondHandCarInvoiceDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            cardNo: 'cardNo',
            endDate: 'endDate',
            goodsName: 'goodsName',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            startDate: 'startDate',
            taxAmount: 'taxAmount',
            taxRate: 'taxRate',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            amount: 'string',
            cardNo: 'string',
            endDate: 'string',
            goodsName: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            startDate: 'string',
            taxAmount: 'string',
            taxRate: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOSecondHandCarInvoiceDetailList = UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOSecondHandCarInvoiceDetailList;
class UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOUsedVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auctionUnit: 'auctionUnit',
            auctionUnitAddress: 'auctionUnitAddress',
            auctionUnitBank: 'auctionUnitBank',
            auctionUnitTaxNo: 'auctionUnitTaxNo',
            auctionUtilTel: 'auctionUtilTel',
            carModel: 'carModel',
            cardNo: 'cardNo',
            registration: 'registration',
            transferVehicle: 'transferVehicle',
            usedCarAddress: 'usedCarAddress',
            usedCarMarket: 'usedCarMarket',
            usedCarMarketBank: 'usedCarMarketBank',
            usedCarMarketPhone: 'usedCarMarketPhone',
            usedCarMarketTaxNo: 'usedCarMarketTaxNo',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            auctionUnit: 'string',
            auctionUnitAddress: 'string',
            auctionUnitBank: 'string',
            auctionUnitTaxNo: 'string',
            auctionUtilTel: 'string',
            carModel: 'string',
            cardNo: 'string',
            registration: 'string',
            transferVehicle: 'string',
            usedCarAddress: 'string',
            usedCarMarket: 'string',
            usedCarMarketBank: 'string',
            usedCarMarketPhone: 'string',
            usedCarMarketTaxNo: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOUsedVehicleSaleDetailVOList = UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOUsedVehicleSaleDetailVOList;
class UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brand: 'brand',
            certificateNo: 'certificateNo',
            engineNo: 'engineNo',
            idCardNo: 'idCardNo',
            importCertificateNo: 'importCertificateNo',
            inspectionListNo: 'inspectionListNo',
            maxPassengers: 'maxPassengers',
            originPlace: 'originPlace',
            paymentVoucherNo: 'paymentVoucherNo',
            taxAuthorityName: 'taxAuthorityName',
            taxAuthorityNo: 'taxAuthorityNo',
            taxRate: 'taxRate',
            tonnage: 'tonnage',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            brand: 'string',
            certificateNo: 'string',
            engineNo: 'string',
            idCardNo: 'string',
            importCertificateNo: 'string',
            inspectionListNo: 'string',
            maxPassengers: 'string',
            originPlace: 'string',
            paymentVoucherNo: 'string',
            taxAuthorityName: 'string',
            taxAuthorityNo: 'string',
            taxRate: 'string',
            tonnage: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOVehicleSaleDetailVOList = UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOVehicleSaleDetailVOList;
class UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            amount: 'amount',
            amountWithTax: 'amountWithTax',
            checkCode: 'checkCode',
            checkTime: 'checkTime',
            drawerName: 'drawerName',
            drewDate: 'drewDate',
            electronicUrl: 'electronicUrl',
            financeType: 'financeType',
            fundType: 'fundType',
            generalInvoiceDetailVOList: 'generalInvoiceDetailVOList',
            imageUrl: 'imageUrl',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceStatus: 'invoiceStatus',
            invoiceType: 'invoiceType',
            machineCode: 'machineCode',
            oilFlag: 'oilFlag',
            payee: 'payee',
            processInstCode: 'processInstCode',
            processInstType: 'processInstType',
            purchaserAddress: 'purchaserAddress',
            purchaserBankAccount: 'purchaserBankAccount',
            purchaserBankNameAccount: 'purchaserBankNameAccount',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            secondHandCarInvoiceDetailList: 'secondHandCarInvoiceDetailList',
            sellerAddress: 'sellerAddress',
            sellerBankAccount: 'sellerBankAccount',
            sellerBankNameAccount: 'sellerBankNameAccount',
            sellerName: 'sellerName',
            sellerTaxNo: 'sellerTaxNo',
            sellerTel: 'sellerTel',
            supplySign: 'supplySign',
            taxAmount: 'taxAmount',
            usedVehicleSaleDetailVOList: 'usedVehicleSaleDetailVOList',
            vehicleSaleDetailVOList: 'vehicleSaleDetailVOList',
            verifyStatus: 'verifyStatus',
            voucherCode: 'voucherCode',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            amount: 'string',
            amountWithTax: 'string',
            checkCode: 'string',
            checkTime: 'string',
            drawerName: 'string',
            drewDate: 'string',
            electronicUrl: 'string',
            financeType: 'string',
            fundType: 'string',
            generalInvoiceDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOGeneralInvoiceDetailVOList },
            imageUrl: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceStatus: 'string',
            invoiceType: 'string',
            machineCode: 'string',
            oilFlag: 'string',
            payee: 'string',
            processInstCode: 'string',
            processInstType: 'string',
            purchaserAddress: 'string',
            purchaserBankAccount: 'string',
            purchaserBankNameAccount: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            remark: 'string',
            secondHandCarInvoiceDetailList: { 'type': 'array', 'itemType': UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOSecondHandCarInvoiceDetailList },
            sellerAddress: 'string',
            sellerBankAccount: 'string',
            sellerBankNameAccount: 'string',
            sellerName: 'string',
            sellerTaxNo: 'string',
            sellerTel: 'string',
            supplySign: 'string',
            taxAmount: 'string',
            usedVehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOUsedVehicleSaleDetailVOList },
            vehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVOVehicleSaleDetailVOList },
            verifyStatus: 'string',
            voucherCode: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVO = UpdateInvoiceAbandonStatusRequestBlueGeneralInvoiceVO;
class UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOGeneralInvoiceDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            goodsName: 'goodsName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            specification: 'specification',
            taxAmount: 'taxAmount',
            taxPre: 'taxPre',
            taxPreType: 'taxPreType',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPrice: 'unitPrice',
        };
    }
    static types() {
        return {
            amount: 'string',
            goodsName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            specification: 'string',
            taxAmount: 'string',
            taxPre: 'string',
            taxPreType: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPrice: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOGeneralInvoiceDetailVOList = UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOGeneralInvoiceDetailVOList;
class UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOSecondHandCarInvoiceDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            cardNo: 'cardNo',
            endDate: 'endDate',
            goodsName: 'goodsName',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            startDate: 'startDate',
            taxAmount: 'taxAmount',
            taxRate: 'taxRate',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            amount: 'string',
            cardNo: 'string',
            endDate: 'string',
            goodsName: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            startDate: 'string',
            taxAmount: 'string',
            taxRate: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOSecondHandCarInvoiceDetailList = UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOSecondHandCarInvoiceDetailList;
class UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOUsedVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auctionUnit: 'auctionUnit',
            auctionUnitAddress: 'auctionUnitAddress',
            auctionUnitBank: 'auctionUnitBank',
            auctionUnitTaxNo: 'auctionUnitTaxNo',
            auctionUtilTel: 'auctionUtilTel',
            carModel: 'carModel',
            cardNo: 'cardNo',
            registration: 'registration',
            transferVehicle: 'transferVehicle',
            usedCarAddress: 'usedCarAddress',
            usedCarMarket: 'usedCarMarket',
            usedCarMarketBank: 'usedCarMarketBank',
            usedCarMarketPhone: 'usedCarMarketPhone',
            usedCarMarketTaxNo: 'usedCarMarketTaxNo',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            auctionUnit: 'string',
            auctionUnitAddress: 'string',
            auctionUnitBank: 'string',
            auctionUnitTaxNo: 'string',
            auctionUtilTel: 'string',
            carModel: 'string',
            cardNo: 'string',
            registration: 'string',
            transferVehicle: 'string',
            usedCarAddress: 'string',
            usedCarMarket: 'string',
            usedCarMarketBank: 'string',
            usedCarMarketPhone: 'string',
            usedCarMarketTaxNo: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOUsedVehicleSaleDetailVOList = UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOUsedVehicleSaleDetailVOList;
class UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brand: 'brand',
            certificateNo: 'certificateNo',
            engineNo: 'engineNo',
            idCardNo: 'idCardNo',
            importCertificateNo: 'importCertificateNo',
            inspectionListNo: 'inspectionListNo',
            maxPassengers: 'maxPassengers',
            originPlace: 'originPlace',
            paymentVoucherNo: 'paymentVoucherNo',
            taxAuthorityName: 'taxAuthorityName',
            taxAuthorityNo: 'taxAuthorityNo',
            taxRate: 'taxRate',
            tonnage: 'tonnage',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            brand: 'string',
            certificateNo: 'string',
            engineNo: 'string',
            idCardNo: 'string',
            importCertificateNo: 'string',
            inspectionListNo: 'string',
            maxPassengers: 'string',
            originPlace: 'string',
            paymentVoucherNo: 'string',
            taxAuthorityName: 'string',
            taxAuthorityNo: 'string',
            taxRate: 'string',
            tonnage: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOVehicleSaleDetailVOList = UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOVehicleSaleDetailVOList;
class UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            amount: 'amount',
            amountWithTax: 'amountWithTax',
            checkCode: 'checkCode',
            checkTime: 'checkTime',
            drawerName: 'drawerName',
            drewDate: 'drewDate',
            electronicUrl: 'electronicUrl',
            financeType: 'financeType',
            fundType: 'fundType',
            generalInvoiceDetailVOList: 'generalInvoiceDetailVOList',
            imageUrl: 'imageUrl',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceStatus: 'invoiceStatus',
            invoiceType: 'invoiceType',
            machineCode: 'machineCode',
            oilFlag: 'oilFlag',
            payee: 'payee',
            processInstCode: 'processInstCode',
            processInstType: 'processInstType',
            purchaserAddress: 'purchaserAddress',
            purchaserBankAccount: 'purchaserBankAccount',
            purchaserBankNameAccount: 'purchaserBankNameAccount',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            secondHandCarInvoiceDetailList: 'secondHandCarInvoiceDetailList',
            sellerAddress: 'sellerAddress',
            sellerBankAccount: 'sellerBankAccount',
            sellerBankNameAccount: 'sellerBankNameAccount',
            sellerName: 'sellerName',
            sellerTaxNo: 'sellerTaxNo',
            sellerTel: 'sellerTel',
            supplySign: 'supplySign',
            taxAmount: 'taxAmount',
            usedVehicleSaleDetailVOList: 'usedVehicleSaleDetailVOList',
            vehicleSaleDetailVOList: 'vehicleSaleDetailVOList',
            verifyStatus: 'verifyStatus',
            voucherCode: 'voucherCode',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            amount: 'string',
            amountWithTax: 'string',
            checkCode: 'string',
            checkTime: 'string',
            drawerName: 'string',
            drewDate: 'string',
            electronicUrl: 'string',
            financeType: 'string',
            fundType: 'string',
            generalInvoiceDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOGeneralInvoiceDetailVOList },
            imageUrl: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceStatus: 'string',
            invoiceType: 'string',
            machineCode: 'string',
            oilFlag: 'string',
            payee: 'string',
            processInstCode: 'string',
            processInstType: 'string',
            purchaserAddress: 'string',
            purchaserBankAccount: 'string',
            purchaserBankNameAccount: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            remark: 'string',
            secondHandCarInvoiceDetailList: { 'type': 'array', 'itemType': UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOSecondHandCarInvoiceDetailList },
            sellerAddress: 'string',
            sellerBankAccount: 'string',
            sellerBankNameAccount: 'string',
            sellerName: 'string',
            sellerTaxNo: 'string',
            sellerTel: 'string',
            supplySign: 'string',
            taxAmount: 'string',
            usedVehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOUsedVehicleSaleDetailVOList },
            vehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVOVehicleSaleDetailVOList },
            verifyStatus: 'string',
            voucherCode: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVO = UpdateInvoiceAbandonStatusRequestRedGeneralInvoiceVO;
class UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            goodsName: 'goodsName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            specification: 'specification',
            taxAmount: 'taxAmount',
            taxPre: 'taxPre',
            taxPreType: 'taxPreType',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPrice: 'unitPrice',
        };
    }
    static types() {
        return {
            amount: 'string',
            goodsName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            specification: 'string',
            taxAmount: 'string',
            taxPre: 'string',
            taxPreType: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPrice: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList = UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList;
class UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            cardNo: 'cardNo',
            endDate: 'endDate',
            goodsName: 'goodsName',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            startDate: 'startDate',
            taxAmount: 'taxAmount',
            taxRate: 'taxRate',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            amount: 'string',
            cardNo: 'string',
            endDate: 'string',
            goodsName: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            startDate: 'string',
            taxAmount: 'string',
            taxRate: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList = UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList;
class UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auctionUnit: 'auctionUnit',
            auctionUnitAddress: 'auctionUnitAddress',
            auctionUnitBank: 'auctionUnitBank',
            auctionUnitTaxNo: 'auctionUnitTaxNo',
            auctionUtilTel: 'auctionUtilTel',
            carModel: 'carModel',
            cardNo: 'cardNo',
            registration: 'registration',
            transferVehicle: 'transferVehicle',
            usedCarAddress: 'usedCarAddress',
            usedCarMarket: 'usedCarMarket',
            usedCarMarketBank: 'usedCarMarketBank',
            usedCarMarketPhone: 'usedCarMarketPhone',
            usedCarMarketTaxNo: 'usedCarMarketTaxNo',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            auctionUnit: 'string',
            auctionUnitAddress: 'string',
            auctionUnitBank: 'string',
            auctionUnitTaxNo: 'string',
            auctionUtilTel: 'string',
            carModel: 'string',
            cardNo: 'string',
            registration: 'string',
            transferVehicle: 'string',
            usedCarAddress: 'string',
            usedCarMarket: 'string',
            usedCarMarketBank: 'string',
            usedCarMarketPhone: 'string',
            usedCarMarketTaxNo: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList = UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList;
class UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brand: 'brand',
            certificateNo: 'certificateNo',
            engineNo: 'engineNo',
            idCardNo: 'idCardNo',
            importCertificateNo: 'importCertificateNo',
            inspectionListNo: 'inspectionListNo',
            maxPassengers: 'maxPassengers',
            originPlace: 'originPlace',
            paymentVoucherNo: 'paymentVoucherNo',
            taxAuthorityName: 'taxAuthorityName',
            taxAuthorityNo: 'taxAuthorityNo',
            taxRate: 'taxRate',
            tonnage: 'tonnage',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            brand: 'string',
            certificateNo: 'string',
            engineNo: 'string',
            idCardNo: 'string',
            importCertificateNo: 'string',
            inspectionListNo: 'string',
            maxPassengers: 'string',
            originPlace: 'string',
            paymentVoucherNo: 'string',
            taxAuthorityName: 'string',
            taxAuthorityNo: 'string',
            taxRate: 'string',
            tonnage: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListVehicleSaleDetailVOList = UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListVehicleSaleDetailVOList;
class UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            amount: 'amount',
            amountWithTax: 'amountWithTax',
            checkCode: 'checkCode',
            checkTime: 'checkTime',
            drawerName: 'drawerName',
            drewDate: 'drewDate',
            electronicUrl: 'electronicUrl',
            financeType: 'financeType',
            fundType: 'fundType',
            generalInvoiceDetailVOList: 'generalInvoiceDetailVOList',
            imageUrl: 'imageUrl',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceStatus: 'invoiceStatus',
            invoiceType: 'invoiceType',
            machineCode: 'machineCode',
            oilFlag: 'oilFlag',
            payee: 'payee',
            processInstCode: 'processInstCode',
            processInstType: 'processInstType',
            purchaserAddress: 'purchaserAddress',
            purchaserBankAccount: 'purchaserBankAccount',
            purchaserBankNameAccount: 'purchaserBankNameAccount',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            secondHandCarInvoiceDetailList: 'secondHandCarInvoiceDetailList',
            sellerAddress: 'sellerAddress',
            sellerBankAccount: 'sellerBankAccount',
            sellerBankNameAccount: 'sellerBankNameAccount',
            sellerName: 'sellerName',
            sellerTaxNo: 'sellerTaxNo',
            sellerTel: 'sellerTel',
            supplySign: 'supplySign',
            taxAmount: 'taxAmount',
            usedVehicleSaleDetailVOList: 'usedVehicleSaleDetailVOList',
            vehicleSaleDetailVOList: 'vehicleSaleDetailVOList',
            verifyStatus: 'verifyStatus',
            voucherCode: 'voucherCode',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            amount: 'string',
            amountWithTax: 'string',
            checkCode: 'string',
            checkTime: 'string',
            drawerName: 'string',
            drewDate: 'string',
            electronicUrl: 'string',
            financeType: 'string',
            fundType: 'string',
            generalInvoiceDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList },
            imageUrl: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceStatus: 'string',
            invoiceType: 'string',
            machineCode: 'string',
            oilFlag: 'string',
            payee: 'string',
            processInstCode: 'string',
            processInstType: 'string',
            purchaserAddress: 'string',
            purchaserBankAccount: 'string',
            purchaserBankNameAccount: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            remark: 'string',
            secondHandCarInvoiceDetailList: { 'type': 'array', 'itemType': UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList },
            sellerAddress: 'string',
            sellerBankAccount: 'string',
            sellerBankNameAccount: 'string',
            sellerName: 'string',
            sellerTaxNo: 'string',
            sellerTel: 'string',
            supplySign: 'string',
            taxAmount: 'string',
            usedVehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList },
            vehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOListVehicleSaleDetailVOList },
            verifyStatus: 'string',
            voucherCode: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOList = UpdateInvoiceAccountPeriodRequestGeneralInvoiceVOList;
class UpdateInvoiceAccountPeriodRequestInvoiceKeyVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodRequestInvoiceKeyVOList = UpdateInvoiceAccountPeriodRequestInvoiceKeyVOList;
class UpdateInvoiceAccountPeriodResponseBodyErrorResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorKey: 'errorKey',
            errorMsg: 'errorMsg',
        };
    }
    static types() {
        return {
            errorKey: 'string',
            errorMsg: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodResponseBodyErrorResult = UpdateInvoiceAccountPeriodResponseBodyErrorResult;
class UpdateInvoiceAccountPeriodResponseBodySuccessResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UpdateInvoiceAccountPeriodResponseBodySuccessResult = UpdateInvoiceAccountPeriodResponseBodySuccessResult;
class UpdateInvoiceAccountingPeriodDateRequestInvoiceFinanceInfoVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountingPeriodData: 'accountingPeriodData',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceType: 'invoiceType',
        };
    }
    static types() {
        return {
            accountingPeriodData: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceType: 'string',
        };
    }
}
exports.UpdateInvoiceAccountingPeriodDateRequestInvoiceFinanceInfoVOList = UpdateInvoiceAccountingPeriodDateRequestInvoiceFinanceInfoVOList;
class UpdateInvoiceAccountingPeriodDateResponseBodyResultFailInvoices extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorCode: 'errorCode',
            errorMsg: 'errorMsg',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            errorCode: 'string',
            errorMsg: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UpdateInvoiceAccountingPeriodDateResponseBodyResultFailInvoices = UpdateInvoiceAccountingPeriodDateResponseBodyResultFailInvoices;
class UpdateInvoiceAccountingPeriodDateResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failCount: 'failCount',
            failInvoices: 'failInvoices',
            success: 'success',
        };
    }
    static types() {
        return {
            failCount: 'number',
            failInvoices: { 'type': 'array', 'itemType': UpdateInvoiceAccountingPeriodDateResponseBodyResultFailInvoices },
            success: 'boolean',
        };
    }
}
exports.UpdateInvoiceAccountingPeriodDateResponseBodyResult = UpdateInvoiceAccountingPeriodDateResponseBodyResult;
class UpdateInvoiceAccountingStatusRequestInvoiceFinanceInfoVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountingStatus: 'accountingStatus',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceType: 'invoiceType',
        };
    }
    static types() {
        return {
            accountingStatus: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceType: 'string',
        };
    }
}
exports.UpdateInvoiceAccountingStatusRequestInvoiceFinanceInfoVOList = UpdateInvoiceAccountingStatusRequestInvoiceFinanceInfoVOList;
class UpdateInvoiceAccountingStatusResponseBodyResultFailInvoices extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            errorCode: 'errorCode',
            errorMsg: 'errorMsg',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            errorCode: 'string',
            errorMsg: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UpdateInvoiceAccountingStatusResponseBodyResultFailInvoices = UpdateInvoiceAccountingStatusResponseBodyResultFailInvoices;
class UpdateInvoiceAccountingStatusResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failCount: 'failCount',
            failInvoices: 'failInvoices',
            success: 'success',
        };
    }
    static types() {
        return {
            failCount: 'number',
            failInvoices: { 'type': 'array', 'itemType': UpdateInvoiceAccountingStatusResponseBodyResultFailInvoices },
            success: 'boolean',
        };
    }
}
exports.UpdateInvoiceAccountingStatusResponseBodyResult = UpdateInvoiceAccountingStatusResponseBodyResult;
class UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOFlightItineraryDetails extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            carrier: 'carrier',
            flightNumber: 'flightNumber',
            flyDate: 'flyDate',
            flyFrom: 'flyFrom',
            flyTime: 'flyTime',
            flyTo: 'flyTo',
            seat: 'seat',
        };
    }
    static types() {
        return {
            carrier: 'string',
            flightNumber: 'string',
            flyDate: 'string',
            flyFrom: 'string',
            flyTime: 'string',
            flyTo: 'string',
            seat: 'string',
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOFlightItineraryDetails = UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOFlightItineraryDetails;
class UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOGeneralInvoiceDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            goodsName: 'goodsName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            specification: 'specification',
            taxAmount: 'taxAmount',
            taxPre: 'taxPre',
            taxPreType: 'taxPreType',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPrice: 'unitPrice',
        };
    }
    static types() {
        return {
            amount: 'string',
            goodsName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            specification: 'string',
            taxAmount: 'string',
            taxPre: 'string',
            taxPreType: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPrice: 'string',
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOGeneralInvoiceDetailVOList = UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOGeneralInvoiceDetailVOList;
class UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOSecondHandCarInvoiceDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            cardNo: 'cardNo',
            endDate: 'endDate',
            goodsName: 'goodsName',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            startDate: 'startDate',
            taxAmount: 'taxAmount',
            taxRate: 'taxRate',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            amount: 'string',
            cardNo: 'string',
            endDate: 'string',
            goodsName: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            startDate: 'string',
            taxAmount: 'string',
            taxRate: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOSecondHandCarInvoiceDetailList = UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOSecondHandCarInvoiceDetailList;
class UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOUsedVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auctionUnit: 'auctionUnit',
            auctionUnitAddress: 'auctionUnitAddress',
            auctionUnitBank: 'auctionUnitBank',
            auctionUnitTaxNo: 'auctionUnitTaxNo',
            auctionUtilTel: 'auctionUtilTel',
            carModel: 'carModel',
            cardNo: 'cardNo',
            registration: 'registration',
            transferVehicle: 'transferVehicle',
            usedCarAddress: 'usedCarAddress',
            usedCarMarket: 'usedCarMarket',
            usedCarMarketBank: 'usedCarMarketBank',
            usedCarMarketPhone: 'usedCarMarketPhone',
            usedCarMarketTaxNo: 'usedCarMarketTaxNo',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            auctionUnit: 'string',
            auctionUnitAddress: 'string',
            auctionUnitBank: 'string',
            auctionUnitTaxNo: 'string',
            auctionUtilTel: 'string',
            carModel: 'string',
            cardNo: 'string',
            registration: 'string',
            transferVehicle: 'string',
            usedCarAddress: 'string',
            usedCarMarket: 'string',
            usedCarMarketBank: 'string',
            usedCarMarketPhone: 'string',
            usedCarMarketTaxNo: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOUsedVehicleSaleDetailVOList = UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOUsedVehicleSaleDetailVOList;
class UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brand: 'brand',
            certificateNo: 'certificateNo',
            engineNo: 'engineNo',
            idCardNo: 'idCardNo',
            importCertificateNo: 'importCertificateNo',
            inspectionListNo: 'inspectionListNo',
            maxPassengers: 'maxPassengers',
            originPlace: 'originPlace',
            paymentVoucherNo: 'paymentVoucherNo',
            taxAuthorityName: 'taxAuthorityName',
            taxAuthorityNo: 'taxAuthorityNo',
            taxRate: 'taxRate',
            tonnage: 'tonnage',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            brand: 'string',
            certificateNo: 'string',
            engineNo: 'string',
            idCardNo: 'string',
            importCertificateNo: 'string',
            inspectionListNo: 'string',
            maxPassengers: 'string',
            originPlace: 'string',
            paymentVoucherNo: 'string',
            taxAuthorityName: 'string',
            taxAuthorityNo: 'string',
            taxRate: 'string',
            tonnage: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOVehicleSaleDetailVOList = UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOVehicleSaleDetailVOList;
class UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            agentCode: 'agentCode',
            amount: 'amount',
            amountWithTax: 'amountWithTax',
            caacDevelopmentFund: 'caacDevelopmentFund',
            checkCode: 'checkCode',
            checkTime: 'checkTime',
            city: 'city',
            destination: 'destination',
            distance: 'distance',
            drawerName: 'drawerName',
            drewDate: 'drewDate',
            electronicUrl: 'electronicUrl',
            entrance: 'entrance',
            exit: 'exit',
            financeType: 'financeType',
            flightItineraryDetails: 'flightItineraryDetails',
            fuelSurcharge: 'fuelSurcharge',
            fundType: 'fundType',
            generalInvoiceDetailVOList: 'generalInvoiceDetailVOList',
            getOffTime: 'getOffTime',
            getOnTime: 'getOnTime',
            imageUrl: 'imageUrl',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceStatus: 'invoiceStatus',
            invoiceType: 'invoiceType',
            issueBy: 'issueBy',
            machineCode: 'machineCode',
            oilFlag: 'oilFlag',
            origin: 'origin',
            passenger: 'passenger',
            passengerUserId: 'passengerUserId',
            payee: 'payee',
            printSerialNumber: 'printSerialNumber',
            processInstCode: 'processInstCode',
            processInstType: 'processInstType',
            purchaserAddress: 'purchaserAddress',
            purchaserBankAccount: 'purchaserBankAccount',
            purchaserBankNameAccount: 'purchaserBankNameAccount',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            seatClass: 'seatClass',
            secondHandCarInvoiceDetailList: 'secondHandCarInvoiceDetailList',
            sellerAddress: 'sellerAddress',
            sellerBankAccount: 'sellerBankAccount',
            sellerBankNameAccount: 'sellerBankNameAccount',
            sellerName: 'sellerName',
            sellerTaxNo: 'sellerTaxNo',
            sellerTel: 'sellerTel',
            serialNo: 'serialNo',
            startTime: 'startTime',
            supplySign: 'supplySign',
            surcharge: 'surcharge',
            taxAmount: 'taxAmount',
            trainNo: 'trainNo',
            travelDate: 'travelDate',
            usedVehicleSaleDetailVOList: 'usedVehicleSaleDetailVOList',
            vehicleSaleDetailVOList: 'vehicleSaleDetailVOList',
            verifyStatus: 'verifyStatus',
            voucherCode: 'voucherCode',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            agentCode: 'string',
            amount: 'string',
            amountWithTax: 'string',
            caacDevelopmentFund: 'string',
            checkCode: 'string',
            checkTime: 'string',
            city: 'string',
            destination: 'string',
            distance: 'string',
            drawerName: 'string',
            drewDate: 'string',
            electronicUrl: 'string',
            entrance: 'string',
            exit: 'string',
            financeType: 'string',
            flightItineraryDetails: { 'type': 'array', 'itemType': UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOFlightItineraryDetails },
            fuelSurcharge: 'string',
            fundType: 'string',
            generalInvoiceDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOGeneralInvoiceDetailVOList },
            getOffTime: 'string',
            getOnTime: 'string',
            imageUrl: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceStatus: 'string',
            invoiceType: 'string',
            issueBy: 'string',
            machineCode: 'string',
            oilFlag: 'string',
            origin: 'string',
            passenger: 'string',
            passengerUserId: 'string',
            payee: 'string',
            printSerialNumber: 'string',
            processInstCode: 'string',
            processInstType: 'string',
            purchaserAddress: 'string',
            purchaserBankAccount: 'string',
            purchaserBankNameAccount: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            remark: 'string',
            seatClass: 'string',
            secondHandCarInvoiceDetailList: { 'type': 'array', 'itemType': UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOSecondHandCarInvoiceDetailList },
            sellerAddress: 'string',
            sellerBankAccount: 'string',
            sellerBankNameAccount: 'string',
            sellerName: 'string',
            sellerTaxNo: 'string',
            sellerTel: 'string',
            serialNo: 'string',
            startTime: 'string',
            supplySign: 'string',
            surcharge: 'string',
            taxAmount: 'string',
            trainNo: 'string',
            travelDate: 'string',
            usedVehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOUsedVehicleSaleDetailVOList },
            vehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVOVehicleSaleDetailVOList },
            verifyStatus: 'string',
            voucherCode: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVO = UpdateInvoiceAndReceiptRelatedRequestGeneralInvoiceVO;
class UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            goodsName: 'goodsName',
            quantity: 'quantity',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            specification: 'specification',
            taxAmount: 'taxAmount',
            taxPre: 'taxPre',
            taxPreType: 'taxPreType',
            taxRate: 'taxRate',
            unit: 'unit',
            unitPrice: 'unitPrice',
        };
    }
    static types() {
        return {
            amount: 'string',
            goodsName: 'string',
            quantity: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            specification: 'string',
            taxAmount: 'string',
            taxPre: 'string',
            taxPreType: 'string',
            taxRate: 'string',
            unit: 'string',
            unitPrice: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList = UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList;
class UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            cardNo: 'cardNo',
            endDate: 'endDate',
            goodsName: 'goodsName',
            revenueCode: 'revenueCode',
            rowNo: 'rowNo',
            startDate: 'startDate',
            taxAmount: 'taxAmount',
            taxRate: 'taxRate',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            amount: 'string',
            cardNo: 'string',
            endDate: 'string',
            goodsName: 'string',
            revenueCode: 'string',
            rowNo: 'string',
            startDate: 'string',
            taxAmount: 'string',
            taxRate: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList = UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList;
class UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auctionUnit: 'auctionUnit',
            auctionUnitAddress: 'auctionUnitAddress',
            auctionUnitBank: 'auctionUnitBank',
            auctionUnitTaxNo: 'auctionUnitTaxNo',
            auctionUtilTel: 'auctionUtilTel',
            carModel: 'carModel',
            cardNo: 'cardNo',
            registration: 'registration',
            transferVehicle: 'transferVehicle',
            usedCarAddress: 'usedCarAddress',
            usedCarMarket: 'usedCarMarket',
            usedCarMarketBank: 'usedCarMarketBank',
            usedCarMarketPhone: 'usedCarMarketPhone',
            usedCarMarketTaxNo: 'usedCarMarketTaxNo',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            auctionUnit: 'string',
            auctionUnitAddress: 'string',
            auctionUnitBank: 'string',
            auctionUnitTaxNo: 'string',
            auctionUtilTel: 'string',
            carModel: 'string',
            cardNo: 'string',
            registration: 'string',
            transferVehicle: 'string',
            usedCarAddress: 'string',
            usedCarMarket: 'string',
            usedCarMarketBank: 'string',
            usedCarMarketPhone: 'string',
            usedCarMarketTaxNo: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList = UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList;
class UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListVehicleSaleDetailVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            brand: 'brand',
            certificateNo: 'certificateNo',
            engineNo: 'engineNo',
            idCardNo: 'idCardNo',
            importCertificateNo: 'importCertificateNo',
            inspectionListNo: 'inspectionListNo',
            maxPassengers: 'maxPassengers',
            originPlace: 'originPlace',
            paymentVoucherNo: 'paymentVoucherNo',
            taxAuthorityName: 'taxAuthorityName',
            taxAuthorityNo: 'taxAuthorityNo',
            taxRate: 'taxRate',
            tonnage: 'tonnage',
            vehicleNo: 'vehicleNo',
            vehicleType: 'vehicleType',
        };
    }
    static types() {
        return {
            brand: 'string',
            certificateNo: 'string',
            engineNo: 'string',
            idCardNo: 'string',
            importCertificateNo: 'string',
            inspectionListNo: 'string',
            maxPassengers: 'string',
            originPlace: 'string',
            paymentVoucherNo: 'string',
            taxAuthorityName: 'string',
            taxAuthorityNo: 'string',
            taxRate: 'string',
            tonnage: 'string',
            vehicleNo: 'string',
            vehicleType: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListVehicleSaleDetailVOList = UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListVehicleSaleDetailVOList;
class UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountPeriod: 'accountPeriod',
            amount: 'amount',
            amountWithTax: 'amountWithTax',
            checkCode: 'checkCode',
            checkTime: 'checkTime',
            drawerName: 'drawerName',
            drewDate: 'drewDate',
            electronicUrl: 'electronicUrl',
            financeType: 'financeType',
            fundType: 'fundType',
            generalInvoiceDetailVOList: 'generalInvoiceDetailVOList',
            imageUrl: 'imageUrl',
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
            invoiceStatus: 'invoiceStatus',
            invoiceType: 'invoiceType',
            machineCode: 'machineCode',
            oilFlag: 'oilFlag',
            payee: 'payee',
            processInstCode: 'processInstCode',
            processInstType: 'processInstType',
            purchaserAddress: 'purchaserAddress',
            purchaserBankAccount: 'purchaserBankAccount',
            purchaserBankNameAccount: 'purchaserBankNameAccount',
            purchaserName: 'purchaserName',
            purchaserTaxNo: 'purchaserTaxNo',
            purchaserTel: 'purchaserTel',
            remark: 'remark',
            secondHandCarInvoiceDetailList: 'secondHandCarInvoiceDetailList',
            sellerAddress: 'sellerAddress',
            sellerBankAccount: 'sellerBankAccount',
            sellerBankNameAccount: 'sellerBankNameAccount',
            sellerName: 'sellerName',
            sellerTaxNo: 'sellerTaxNo',
            sellerTel: 'sellerTel',
            supplySign: 'supplySign',
            taxAmount: 'taxAmount',
            usedVehicleSaleDetailVOList: 'usedVehicleSaleDetailVOList',
            vehicleSaleDetailVOList: 'vehicleSaleDetailVOList',
            verifyStatus: 'verifyStatus',
            voucherCode: 'voucherCode',
            voucherStatus: 'voucherStatus',
        };
    }
    static types() {
        return {
            accountPeriod: 'string',
            amount: 'string',
            amountWithTax: 'string',
            checkCode: 'string',
            checkTime: 'string',
            drawerName: 'string',
            drewDate: 'string',
            electronicUrl: 'string',
            financeType: 'string',
            fundType: 'string',
            generalInvoiceDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListGeneralInvoiceDetailVOList },
            imageUrl: 'string',
            invoiceCode: 'string',
            invoiceNo: 'string',
            invoiceStatus: 'string',
            invoiceType: 'string',
            machineCode: 'string',
            oilFlag: 'string',
            payee: 'string',
            processInstCode: 'string',
            processInstType: 'string',
            purchaserAddress: 'string',
            purchaserBankAccount: 'string',
            purchaserBankNameAccount: 'string',
            purchaserName: 'string',
            purchaserTaxNo: 'string',
            purchaserTel: 'string',
            remark: 'string',
            secondHandCarInvoiceDetailList: { 'type': 'array', 'itemType': UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListSecondHandCarInvoiceDetailList },
            sellerAddress: 'string',
            sellerBankAccount: 'string',
            sellerBankNameAccount: 'string',
            sellerName: 'string',
            sellerTaxNo: 'string',
            sellerTel: 'string',
            supplySign: 'string',
            taxAmount: 'string',
            usedVehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListUsedVehicleSaleDetailVOList },
            vehicleSaleDetailVOList: { 'type': 'array', 'itemType': UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOListVehicleSaleDetailVOList },
            verifyStatus: 'string',
            voucherCode: 'string',
            voucherStatus: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOList = UpdateInvoiceVerifyStatusRequestGeneralInvoiceVOList;
class UpdateInvoiceVerifyStatusRequestInvoiceKeyVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            invoiceCode: 'invoiceCode',
            invoiceNo: 'invoiceNo',
        };
    }
    static types() {
        return {
            invoiceCode: 'string',
            invoiceNo: 'string',
        };
    }
}
exports.UpdateInvoiceVerifyStatusRequestInvoiceKeyVOList = UpdateInvoiceVerifyStatusRequestInvoiceKeyVOList;
class UpdateReceiptRequestReceipts extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            amount: 'amount',
            categoryCode: 'categoryCode',
            code: 'code',
            customerCode: 'customerCode',
            enterpriseAcountCode: 'enterpriseAcountCode',
            occurDate: 'occurDate',
            principalId: 'principalId',
            projectCode: 'projectCode',
            receiptType: 'receiptType',
            remark: 'remark',
            supplierCode: 'supplierCode',
            title: 'title',
            updateTime: 'updateTime',
            updateUserId: 'updateUserId',
        };
    }
    static types() {
        return {
            amount: 'string',
            categoryCode: 'string',
            code: 'string',
            customerCode: 'string',
            enterpriseAcountCode: 'string',
            occurDate: 'number',
            principalId: 'string',
            projectCode: 'string',
            receiptType: 'number',
            remark: 'string',
            supplierCode: 'string',
            title: 'string',
            updateTime: 'number',
            updateUserId: 'string',
        };
    }
}
exports.UpdateReceiptRequestReceipts = UpdateReceiptRequestReceipts;
class UpdateReceiptResponseBodyResults extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            errorCode: 'errorCode',
            errorMsg: 'errorMsg',
            success: 'success',
        };
    }
    static types() {
        return {
            code: 'string',
            errorCode: 'string',
            errorMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.UpdateReceiptResponseBodyResults = UpdateReceiptResponseBodyResults;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async appendRolePermissionWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new AppendRolePermissionShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.rolePermissionItemList)) {
            request.rolePermissionItemListShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.rolePermissionItemList, "rolePermissionItemList", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.rolePermissionItemListShrink)) {
            query["rolePermissionItemList"] = request.rolePermissionItemListShrink;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AppendRolePermission",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/roles/permissions`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AppendRolePermissionResponse({}));
    }
    async appendRolePermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AppendRolePermissionHeaders({});
        return await this.appendRolePermissionWithOptions(request, headers, runtime);
    }
    async batchAddInvoiceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.generalInvoiceVOList)) {
            body["generalInvoiceVOList"] = request.generalInvoiceVOList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchAddInvoice",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchAddInvoiceResponse({}));
    }
    async batchAddInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchAddInvoiceHeaders({});
        return await this.batchAddInvoiceWithOptions(request, headers, runtime);
    }
    async batchCreateCustomerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.createCustomerRequestList)) {
            body["createCustomerRequestList"] = request.createCustomerRequestList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchCreateCustomer",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/auxiliaries/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchCreateCustomerResponse({}));
    }
    async batchCreateCustomer(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchCreateCustomerHeaders({});
        return await this.batchCreateCustomerWithOptions(request, headers, runtime);
    }
    async bindCompanyAccountantBookWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accountantBookId)) {
            query["accountantBookId"] = request.accountantBookId;
        }
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            query["companyCode"] = request.companyCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "BindCompanyAccountantBook",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/companies/accountantBooks/bind`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BindCompanyAccountantBookResponse({}));
    }
    async bindCompanyAccountantBook(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BindCompanyAccountantBookHeaders({});
        return await this.bindCompanyAccountantBookWithOptions(request, headers, runtime);
    }
    async checkVoucherStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.financeType)) {
            body["financeType"] = request.financeType;
        }
        if (!tea_util_1.default.isUnset(request.invoiceCode)) {
            body["invoiceCode"] = request.invoiceCode;
        }
        if (!tea_util_1.default.isUnset(request.invoiceNo)) {
            body["invoiceNo"] = request.invoiceNo;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.taxNo)) {
            body["taxNo"] = request.taxNo;
        }
        if (!tea_util_1.default.isUnset(request.verifyStatus)) {
            body["verifyStatus"] = request.verifyStatus;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CheckVoucherStatus",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/checkVoucherStatus/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CheckVoucherStatusResponse({}));
    }
    async checkVoucherStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckVoucherStatusHeaders({});
        return await this.checkVoucherStatusWithOptions(request, headers, runtime);
    }
    async createCustomerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.creator)) {
            body["creator"] = request.creator;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.drawerEmail)) {
            body["drawerEmail"] = request.drawerEmail;
        }
        if (!tea_util_1.default.isUnset(request.drawerTelephone)) {
            body["drawerTelephone"] = request.drawerTelephone;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.purchaserAccount)) {
            body["purchaserAccount"] = request.purchaserAccount;
        }
        if (!tea_util_1.default.isUnset(request.purchaserAddress)) {
            body["purchaserAddress"] = request.purchaserAddress;
        }
        if (!tea_util_1.default.isUnset(request.purchaserBankName)) {
            body["purchaserBankName"] = request.purchaserBankName;
        }
        if (!tea_util_1.default.isUnset(request.purchaserName)) {
            body["purchaserName"] = request.purchaserName;
        }
        if (!tea_util_1.default.isUnset(request.purchaserTaxNo)) {
            body["purchaserTaxNo"] = request.purchaserTaxNo;
        }
        if (!tea_util_1.default.isUnset(request.purchaserTel)) {
            body["purchaserTel"] = request.purchaserTel;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCustomer",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/auxiliaries/customers`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCustomerResponse({}));
    }
    async createCustomer(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCustomerHeaders({});
        return await this.createCustomerWithOptions(request, headers, runtime);
    }
    async createReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.receipts)) {
            body["receipts"] = request.receipts;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateReceipt",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/receipts`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateReceiptResponse({}));
    }
    async createReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateReceiptHeaders({});
        return await this.createReceiptWithOptions(request, headers, runtime);
    }
    async deleteReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.receipts)) {
            body["receipts"] = request.receipts;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteReceipt",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/receipts/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteReceiptResponse({}));
    }
    async deleteReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteReceiptHeaders({});
        return await this.deleteReceiptWithOptions(request, headers, runtime);
    }
    async getBookkeepingUserListWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetBookkeepingUserList",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/bookkeeping/users`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetBookkeepingUserListResponse({}));
    }
    async getBookkeepingUserList() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetBookkeepingUserListHeaders({});
        return await this.getBookkeepingUserListWithOptions(headers, runtime);
    }
    async getCategoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCategory",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/categories/get`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCategoryResponse({}));
    }
    async getCategory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCategoryHeaders({});
        return await this.getCategoryWithOptions(request, headers, runtime);
    }
    async getCustomerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCustomer",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/customers/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCustomerResponse({}));
    }
    async getCustomer(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCustomerHeaders({});
        return await this.getCustomerWithOptions(request, headers, runtime);
    }
    async getFinanceAccountWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accountCode)) {
            query["accountCode"] = request.accountCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFinanceAccount",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/financeAccounts/get`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFinanceAccountResponse({}));
    }
    async getFinanceAccount(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFinanceAccountHeaders({});
        return await this.getFinanceAccountWithOptions(request, headers, runtime);
    }
    async getInvoiceByPageWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new GetInvoiceByPageShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.request)) {
            request.requestShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.request, "request", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.requestShrink)) {
            query["request"] = request.requestShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetInvoiceByPage",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInvoiceByPageResponse({}));
    }
    async getInvoiceByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInvoiceByPageHeaders({});
        return await this.getInvoiceByPageWithOptions(request, headers, runtime);
    }
    async getIsNewVersionWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetIsNewVersion",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/accounts/uses`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetIsNewVersionResponse({}));
    }
    async getIsNewVersion() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetIsNewVersionHeaders({});
        return await this.getIsNewVersionWithOptions(headers, runtime);
    }
    async getMultiCompanyInfoByCodeWithOptions(companyCode, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetMultiCompanyInfoByCode",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/multiCompanies/${companyCode}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMultiCompanyInfoByCodeResponse({}));
    }
    async getMultiCompanyInfoByCode(companyCode) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMultiCompanyInfoByCodeHeaders({});
        return await this.getMultiCompanyInfoByCodeWithOptions(companyCode, headers, runtime);
    }
    async getProductWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetProduct",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/products`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetProductResponse({}));
    }
    async getProduct(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetProductHeaders({});
        return await this.getProductWithOptions(request, headers, runtime);
    }
    async getProjectWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetProject",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/projects/get`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetProjectResponse({}));
    }
    async getProject(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetProjectHeaders({});
        return await this.getProjectWithOptions(request, headers, runtime);
    }
    async getReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.modelId)) {
            query["modelId"] = request.modelId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetReceipt",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/receipts/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetReceiptResponse({}));
    }
    async getReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetReceiptHeaders({});
        return await this.getReceiptWithOptions(request, headers, runtime);
    }
    async getSupplierWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSupplier",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/suppliers/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSupplierResponse({}));
    }
    async getSupplier(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSupplierHeaders({});
        return await this.getSupplierWithOptions(request, headers, runtime);
    }
    async getYongYouOpenApiTokenWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetYongYouOpenApiToken",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/yongyou/token`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetYongYouOpenApiTokenResponse({}));
    }
    async getYongYouOpenApiToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetYongYouOpenApiTokenHeaders({});
        return await this.getYongYouOpenApiTokenWithOptions(request, headers, runtime);
    }
    async getYongYouOrgRelationWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetYongYouOrgRelation",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/yongyou/relations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetYongYouOrgRelationResponse({}));
    }
    async getYongYouOrgRelation() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetYongYouOrgRelationHeaders({});
        return await this.getYongYouOrgRelationWithOptions(headers, runtime);
    }
    async professionBenefitConsumeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.benefitCode)) {
            body["benefitCode"] = request.benefitCode;
        }
        if (!tea_util_1.default.isUnset(request.bizRequestId)) {
            body["bizRequestId"] = request.bizRequestId;
        }
        if (!tea_util_1.default.isUnset(request.quota)) {
            body["quota"] = request.quota;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ProfessionBenefitConsume",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/professions/benefits/consume`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ProfessionBenefitConsumeResponse({}));
    }
    async professionBenefitConsume(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ProfessionBenefitConsumeHeaders({});
        return await this.professionBenefitConsumeWithOptions(request, headers, runtime);
    }
    async queryCategoryByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCategoryByPage",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/categories/list`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCategoryByPageResponse({}));
    }
    async queryCategoryByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCategoryByPageHeaders({});
        return await this.queryCategoryByPageWithOptions(request, headers, runtime);
    }
    async queryCompanyInvoiceRelationCountWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            query["companyCode"] = request.companyCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCompanyInvoiceRelationCount",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/companyRelationReceipts/counts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCompanyInvoiceRelationCountResponse({}));
    }
    async queryCompanyInvoiceRelationCount(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCompanyInvoiceRelationCountHeaders({});
        return await this.queryCompanyInvoiceRelationCountWithOptions(request, headers, runtime);
    }
    async queryCustomerByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCustomerByPage",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/customers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCustomerByPageResponse({}));
    }
    async queryCustomerByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCustomerByPageHeaders({});
        return await this.queryCustomerByPageWithOptions(request, headers, runtime);
    }
    async queryCustomerInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCustomerInfo",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/auxiliaries/customers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCustomerInfoResponse({}));
    }
    async queryCustomerInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCustomerInfoHeaders({});
        return await this.queryCustomerInfoWithOptions(request, headers, runtime);
    }
    async queryEnterpriseAccountByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEnterpriseAccountByPage",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/financeAccounts/list`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryEnterpriseAccountByPageResponse({}));
    }
    async queryEnterpriseAccountByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryEnterpriseAccountByPageHeaders({});
        return await this.queryEnterpriseAccountByPageWithOptions(request, headers, runtime);
    }
    async queryFinanceCompanyInfoWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryFinanceCompanyInfo",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/companies`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryFinanceCompanyInfoResponse({}));
    }
    async queryFinanceCompanyInfo() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryFinanceCompanyInfoHeaders({});
        return await this.queryFinanceCompanyInfoWithOptions(headers, runtime);
    }
    async queryInvoiceRelationCountWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryInvoiceRelationCount",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/relationReceipts/counts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryInvoiceRelationCountResponse({}));
    }
    async queryInvoiceRelationCount() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryInvoiceRelationCountHeaders({});
        return await this.queryInvoiceRelationCountWithOptions(headers, runtime);
    }
    async queryMultiCompanyInfoWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryMultiCompanyInfo",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/multiCompanies`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMultiCompanyInfoResponse({}));
    }
    async queryMultiCompanyInfo() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMultiCompanyInfoHeaders({});
        return await this.queryMultiCompanyInfoWithOptions(headers, runtime);
    }
    async queryPermissionByUserIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryPermissionByUserId",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/permissions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPermissionByUserIdResponse({}));
    }
    async queryPermissionByUserId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPermissionByUserIdHeaders({});
        return await this.queryPermissionByUserIdWithOptions(request, headers, runtime);
    }
    async queryPermissionRoleMemberWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.roleCodeList)) {
            body["roleCodeList"] = request.roleCodeList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryPermissionRoleMember",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/roles/members/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPermissionRoleMemberResponse({}));
    }
    async queryPermissionRoleMember(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPermissionRoleMemberHeaders({});
        return await this.queryPermissionRoleMemberWithOptions(request, headers, runtime);
    }
    async queryProductByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProductByPage",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/products/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryProductByPageResponse({}));
    }
    async queryProductByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryProductByPageHeaders({});
        return await this.queryProductByPageWithOptions(request, headers, runtime);
    }
    async queryProjectByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProjectByPage",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/projects/list`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryProjectByPageResponse({}));
    }
    async queryProjectByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryProjectByPageHeaders({});
        return await this.queryProjectByPageWithOptions(request, headers, runtime);
    }
    async queryReceiptDetailForInvoiceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryReceiptDetailForInvoice",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/receipts/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryReceiptDetailForInvoiceResponse({}));
    }
    async queryReceiptDetailForInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryReceiptDetailForInvoiceHeaders({});
        return await this.queryReceiptDetailForInvoiceWithOptions(request, headers, runtime);
    }
    async queryReceiptForInvoiceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accountantBookId)) {
            body["accountantBookId"] = request.accountantBookId;
        }
        if (!tea_util_1.default.isUnset(request.applyStatusList)) {
            body["applyStatusList"] = request.applyStatusList;
        }
        if (!tea_util_1.default.isUnset(request.bizStatusList)) {
            body["bizStatusList"] = request.bizStatusList;
        }
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.receiptStatusList)) {
            body["receiptStatusList"] = request.receiptStatusList;
        }
        if (!tea_util_1.default.isUnset(request.searchParams)) {
            body["searchParams"] = request.searchParams;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryReceiptForInvoice",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/receipts/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryReceiptForInvoiceResponse({}));
    }
    async queryReceiptForInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryReceiptForInvoiceHeaders({});
        return await this.queryReceiptForInvoiceWithOptions(request, headers, runtime);
    }
    async queryReceiptsBaseInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accountantBookId)) {
            query["accountantBookId"] = request.accountantBookId;
        }
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            query["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.timeFilterField)) {
            query["timeFilterField"] = request.timeFilterField;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            query["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.voucherStatus)) {
            query["voucherStatus"] = request.voucherStatus;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryReceiptsBaseInfo",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/receipts/dataInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryReceiptsBaseInfoResponse({}));
    }
    async queryReceiptsBaseInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryReceiptsBaseInfoHeaders({});
        return await this.queryReceiptsBaseInfoWithOptions(request, headers, runtime);
    }
    async queryReceiptsByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.modelId)) {
            query["modelId"] = request.modelId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.timeFilterField)) {
            query["timeFilterField"] = request.timeFilterField;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryReceiptsByPage",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/receipts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryReceiptsByPageResponse({}));
    }
    async queryReceiptsByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryReceiptsByPageHeaders({});
        return await this.queryReceiptsByPageWithOptions(request, headers, runtime);
    }
    async queryRoleMemberByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.roleCode)) {
            query["roleCode"] = request.roleCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryRoleMemberByPage",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/roles/members`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryRoleMemberByPageResponse({}));
    }
    async queryRoleMemberByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRoleMemberByPageHeaders({});
        return await this.queryRoleMemberByPageWithOptions(request, headers, runtime);
    }
    async querySupplierByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySupplierByPage",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/suppliers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySupplierByPageResponse({}));
    }
    async querySupplierByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySupplierByPageHeaders({});
        return await this.querySupplierByPageWithOptions(request, headers, runtime);
    }
    async queryUserRoleListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserRoleList",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/users/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserRoleListResponse({}));
    }
    async queryUserRoleList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserRoleListHeaders({});
        return await this.queryUserRoleListWithOptions(request, headers, runtime);
    }
    async unbindApplyReceiptAndInvoiceRelatedWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.invoiceKeyVOList)) {
            body["invoiceKeyVOList"] = request.invoiceKeyVOList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UnbindApplyReceiptAndInvoiceRelated",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/unbind`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UnbindApplyReceiptAndInvoiceRelatedResponse({}));
    }
    async unbindApplyReceiptAndInvoiceRelated(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnbindApplyReceiptAndInvoiceRelatedHeaders({});
        return await this.unbindApplyReceiptAndInvoiceRelatedWithOptions(request, headers, runtime);
    }
    async updateApplyReceiptAndInvoiceRelatedWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.generalInvoiceVOList)) {
            body["generalInvoiceVOList"] = request.generalInvoiceVOList;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateApplyReceiptAndInvoiceRelated",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/applyReceipts/relate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateApplyReceiptAndInvoiceRelatedResponse({}));
    }
    async updateApplyReceiptAndInvoiceRelated(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateApplyReceiptAndInvoiceRelatedHeaders({});
        return await this.updateApplyReceiptAndInvoiceRelatedWithOptions(request, headers, runtime);
    }
    async updateDigitalInvoiceOrgInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.digitalInvoiceType)) {
            body["digitalInvoiceType"] = request.digitalInvoiceType;
        }
        if (!tea_util_1.default.isUnset(request.isDigitalOrg)) {
            body["isDigitalOrg"] = request.isDigitalOrg;
        }
        if (!tea_util_1.default.isUnset(request.location)) {
            body["location"] = request.location;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateDigitalInvoiceOrgInfo",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/organizationInfos`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateDigitalInvoiceOrgInfoResponse({}));
    }
    async updateDigitalInvoiceOrgInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateDigitalInvoiceOrgInfoHeaders({});
        return await this.updateDigitalInvoiceOrgInfoWithOptions(request, headers, runtime);
    }
    async updateFinanceCompanyInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.companyName)) {
            query["companyName"] = request.companyName;
        }
        if (!tea_util_1.default.isUnset(request.taxNature)) {
            query["taxNature"] = request.taxNature;
        }
        if (!tea_util_1.default.isUnset(request.taxNo)) {
            query["taxNo"] = request.taxNo;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateFinanceCompanyInfo",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/companies`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateFinanceCompanyInfoResponse({}));
    }
    async updateFinanceCompanyInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateFinanceCompanyInfoHeaders({});
        return await this.updateFinanceCompanyInfoWithOptions(request, headers, runtime);
    }
    async updateFinanceMultiCompanyInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            query["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.companyName)) {
            query["companyName"] = request.companyName;
        }
        if (!tea_util_1.default.isUnset(request.taxNature)) {
            query["taxNature"] = request.taxNature;
        }
        if (!tea_util_1.default.isUnset(request.taxNo)) {
            query["taxNo"] = request.taxNo;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateFinanceMultiCompanyInfo",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/multiCompanies`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateFinanceMultiCompanyInfoResponse({}));
    }
    async updateFinanceMultiCompanyInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateFinanceMultiCompanyInfoHeaders({});
        return await this.updateFinanceMultiCompanyInfoWithOptions(request, headers, runtime);
    }
    async updateInvoiceAbandonStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.blueGeneralInvoiceVO)) {
            body["blueGeneralInvoiceVO"] = request.blueGeneralInvoiceVO;
        }
        if (!tea_util_1.default.isUnset(request.blueInvoiceCode)) {
            body["blueInvoiceCode"] = request.blueInvoiceCode;
        }
        if (!tea_util_1.default.isUnset(request.blueInvoiceNo)) {
            body["blueInvoiceNo"] = request.blueInvoiceNo;
        }
        if (!tea_util_1.default.isUnset(request.blueInvoiceStatus)) {
            body["blueInvoiceStatus"] = request.blueInvoiceStatus;
        }
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.redGeneralInvoiceVO)) {
            body["redGeneralInvoiceVO"] = request.redGeneralInvoiceVO;
        }
        if (!tea_util_1.default.isUnset(request.redInvoiceCode)) {
            body["redInvoiceCode"] = request.redInvoiceCode;
        }
        if (!tea_util_1.default.isUnset(request.redInvoiceNo)) {
            body["redInvoiceNo"] = request.redInvoiceNo;
        }
        if (!tea_util_1.default.isUnset(request.redInvoiceStatus)) {
            body["redInvoiceStatus"] = request.redInvoiceStatus;
        }
        if (!tea_util_1.default.isUnset(request.targetInvoice)) {
            body["targetInvoice"] = request.targetInvoice;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceAbandonStatus",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/abandonStatus`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceAbandonStatusResponse({}));
    }
    async updateInvoiceAbandonStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceAbandonStatusHeaders({});
        return await this.updateInvoiceAbandonStatusWithOptions(request, headers, runtime);
    }
    async updateInvoiceAccountPeriodWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accountPeriod)) {
            body["accountPeriod"] = request.accountPeriod;
        }
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.generalInvoiceVOList)) {
            body["generalInvoiceVOList"] = request.generalInvoiceVOList;
        }
        if (!tea_util_1.default.isUnset(request.invoiceKeyVOList)) {
            body["invoiceKeyVOList"] = request.invoiceKeyVOList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceAccountPeriod",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/accountPeriods`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceAccountPeriodResponse({}));
    }
    async updateInvoiceAccountPeriod(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceAccountPeriodHeaders({});
        return await this.updateInvoiceAccountPeriodWithOptions(request, headers, runtime);
    }
    async updateInvoiceAccountingPeriodDateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.invoiceFinanceInfoVOList)) {
            body["invoiceFinanceInfoVOList"] = request.invoiceFinanceInfoVOList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceAccountingPeriodDate",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/accounts/periodDates`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceAccountingPeriodDateResponse({}));
    }
    async updateInvoiceAccountingPeriodDate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceAccountingPeriodDateHeaders({});
        return await this.updateInvoiceAccountingPeriodDateWithOptions(request, headers, runtime);
    }
    async updateInvoiceAccountingStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.invoiceFinanceInfoVOList)) {
            body["invoiceFinanceInfoVOList"] = request.invoiceFinanceInfoVOList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceAccountingStatus",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/accounts/statuses`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceAccountingStatusResponse({}));
    }
    async updateInvoiceAccountingStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceAccountingStatusHeaders({});
        return await this.updateInvoiceAccountingStatusWithOptions(request, headers, runtime);
    }
    async updateInvoiceAndReceiptRelatedWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.generalInvoiceVO)) {
            body["generalInvoiceVO"] = request.generalInvoiceVO;
        }
        if (!tea_util_1.default.isUnset(request.invoiceCode)) {
            body["invoiceCode"] = request.invoiceCode;
        }
        if (!tea_util_1.default.isUnset(request.invoiceNo)) {
            body["invoiceNo"] = request.invoiceNo;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.receiptCode)) {
            body["receiptCode"] = request.receiptCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceAndReceiptRelated",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/approvalReceipts`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceAndReceiptRelatedResponse({}));
    }
    async updateInvoiceAndReceiptRelated(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceAndReceiptRelatedHeaders({});
        return await this.updateInvoiceAndReceiptRelatedWithOptions(request, headers, runtime);
    }
    async updateInvoiceIgnoreStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceIgnoreStatus",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/ignoreStatus`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceIgnoreStatusResponse({}));
    }
    async updateInvoiceIgnoreStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceIgnoreStatusHeaders({});
        return await this.updateInvoiceIgnoreStatusWithOptions(request, headers, runtime);
    }
    async updateInvoiceVerifyStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            body["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.deductStatus)) {
            body["deductStatus"] = request.deductStatus;
        }
        if (!tea_util_1.default.isUnset(request.generalInvoiceVOList)) {
            body["generalInvoiceVOList"] = request.generalInvoiceVOList;
        }
        if (!tea_util_1.default.isUnset(request.invoiceKeyVOList)) {
            body["invoiceKeyVOList"] = request.invoiceKeyVOList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.verifyStatus)) {
            body["verifyStatus"] = request.verifyStatus;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceVerifyStatus",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/verifyStatus`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceVerifyStatusResponse({}));
    }
    async updateInvoiceVerifyStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceVerifyStatusHeaders({});
        return await this.updateInvoiceVerifyStatusWithOptions(request, headers, runtime);
    }
    async updateInvoiceVoucherStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accountantBookId)) {
            body["accountantBookId"] = request.accountantBookId;
        }
        if (!tea_util_1.default.isUnset(request.actionType)) {
            body["actionType"] = request.actionType;
        }
        if (!tea_util_1.default.isUnset(request.invoiceCode)) {
            body["invoiceCode"] = request.invoiceCode;
        }
        if (!tea_util_1.default.isUnset(request.invoiceNo)) {
            body["invoiceNo"] = request.invoiceNo;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.voucherId)) {
            body["voucherId"] = request.voucherId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInvoiceVoucherStatus",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/invoices/vouchers/states`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInvoiceVoucherStatusResponse({}));
    }
    async updateInvoiceVoucherStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInvoiceVoucherStatusHeaders({});
        return await this.updateInvoiceVoucherStatusWithOptions(request, headers, runtime);
    }
    async updateReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.receipts)) {
            body["receipts"] = request.receipts;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateReceipt",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/receipts`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateReceiptResponse({}));
    }
    async updateReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateReceiptHeaders({});
        return await this.updateReceiptWithOptions(request, headers, runtime);
    }
    async updateReceiptVoucherStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accountPeriod)) {
            body["accountPeriod"] = request.accountPeriod;
        }
        if (!tea_util_1.default.isUnset(request.actionType)) {
            body["actionType"] = request.actionType;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.receiptId)) {
            body["receiptId"] = request.receiptId;
        }
        if (!tea_util_1.default.isUnset(request.voucherCode)) {
            body["voucherCode"] = request.voucherCode;
        }
        if (!tea_util_1.default.isUnset(request.voucherId)) {
            body["voucherId"] = request.voucherId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateReceiptVoucherStatus",
            version: "bizfinance_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/bizfinance/vouchers/recepits`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateReceiptVoucherStatusResponse({}));
    }
    async updateReceiptVoucherStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateReceiptVoucherStatusHeaders({});
        return await this.updateReceiptVoucherStatusWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map