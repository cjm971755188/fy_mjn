"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CheckInCrowdsByMobileRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            crowdIds: 'crowdIds',
            mobile: 'mobile',
        };
    }
    static types() {
        return {
            crowdIds: 'Buffer',
            mobile: 'string',
        };
    }
}
exports.CheckInCrowdsByMobileRequest = CheckInCrowdsByMobileRequest;
class CheckInCrowdsByMobileResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'boolean',
            success: 'boolean',
            total: 'number',
        };
    }
}
exports.CheckInCrowdsByMobileResponseBody = CheckInCrowdsByMobileResponseBody;
class CheckInCrowdsByMobileResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckInCrowdsByMobileResponseBody,
        };
    }
}
exports.CheckInCrowdsByMobileResponse = CheckInCrowdsByMobileResponse;
class ConsumePointHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ConsumePointHeaders = ConsumePointHeaders;
class ConsumePointRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: ConsumePointRequestBody,
        };
    }
}
exports.ConsumePointRequest = ConsumePointRequest;
class ConsumePointShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bodyShrink: 'body',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
        };
    }
}
exports.ConsumePointShrinkRequest = ConsumePointShrinkRequest;
class ConsumePointResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: ConsumePointResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.ConsumePointResponseBody = ConsumePointResponseBody;
class ConsumePointResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ConsumePointResponseBody,
        };
    }
}
exports.ConsumePointResponse = ConsumePointResponse;
class GetPointInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPointInfoHeaders = GetPointInfoHeaders;
class GetPointInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pointPoolCode: 'pointPoolCode',
        };
    }
    static types() {
        return {
            pointPoolCode: 'string',
        };
    }
}
exports.GetPointInfoRequest = GetPointInfoRequest;
class GetPointInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetPointInfoResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.GetPointInfoResponseBody = GetPointInfoResponseBody;
class GetPointInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPointInfoResponseBody,
        };
    }
}
exports.GetPointInfoResponse = GetPointInfoResponse;
class RevertPointHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RevertPointHeaders = RevertPointHeaders;
class RevertPointRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: RevertPointRequestBody,
        };
    }
}
exports.RevertPointRequest = RevertPointRequest;
class RevertPointShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bodyShrink: 'body',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
        };
    }
}
exports.RevertPointShrinkRequest = RevertPointShrinkRequest;
class RevertPointResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: RevertPointResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.RevertPointResponseBody = RevertPointResponseBody;
class RevertPointResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RevertPointResponseBody,
        };
    }
}
exports.RevertPointResponse = RevertPointResponse;
class SendBannerHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendBannerHeaders = SendBannerHeaders;
class SendBannerRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            endTime: 'endTime',
            startTime: 'startTime',
            userId: 'userId',
        };
    }
    static types() {
        return {
            content: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            endTime: 'number',
            startTime: 'number',
            userId: 'string',
        };
    }
}
exports.SendBannerRequest = SendBannerRequest;
class SendBannerResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            arguments: 'arguments',
            success: 'success',
        };
    }
    static types() {
        return {
            arguments: { 'type': 'array', 'itemType': 'any' },
            success: 'boolean',
        };
    }
}
exports.SendBannerResponseBody = SendBannerResponseBody;
class SendBannerResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendBannerResponseBody,
        };
    }
}
exports.SendBannerResponse = SendBannerResponse;
class SendPopupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendPopupHeaders = SendPopupHeaders;
class SendPopupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            endTime: 'endTime',
            startTime: 'startTime',
            userId: 'userId',
        };
    }
    static types() {
        return {
            content: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            endTime: 'number',
            startTime: 'number',
            userId: 'string',
        };
    }
}
exports.SendPopupRequest = SendPopupRequest;
class SendPopupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            arguments: 'arguments',
            success: 'success',
        };
    }
    static types() {
        return {
            arguments: { 'type': 'array', 'itemType': 'any' },
            success: 'boolean',
        };
    }
}
exports.SendPopupResponseBody = SendPopupResponseBody;
class SendPopupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendPopupResponseBody,
        };
    }
}
exports.SendPopupResponse = SendPopupResponse;
class SendSearchShadeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SendSearchShadeHeaders = SendSearchShadeHeaders;
class SendSearchShadeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            endTime: 'endTime',
            startTime: 'startTime',
            userId: 'userId',
        };
    }
    static types() {
        return {
            content: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            endTime: 'number',
            startTime: 'number',
            userId: 'string',
        };
    }
}
exports.SendSearchShadeRequest = SendSearchShadeRequest;
class SendSearchShadeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            arguments: 'arguments',
            success: 'success',
        };
    }
    static types() {
        return {
            arguments: { 'type': 'array', 'itemType': 'any' },
            success: 'boolean',
        };
    }
}
exports.SendSearchShadeResponseBody = SendSearchShadeResponseBody;
class SendSearchShadeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendSearchShadeResponseBody,
        };
    }
}
exports.SendSearchShadeResponse = SendSearchShadeResponse;
class ConsumePointRequestBodyConsumeDetailBenefit extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            benefitId: 'benefitId',
            name: 'name',
            supplierName: 'supplierName',
            useUrl: 'useUrl',
        };
    }
    static types() {
        return {
            benefitId: 'string',
            name: 'string',
            supplierName: 'string',
            useUrl: 'string',
        };
    }
}
exports.ConsumePointRequestBodyConsumeDetailBenefit = ConsumePointRequestBodyConsumeDetailBenefit;
class ConsumePointRequestBodyConsumeDetail extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            benefit: 'benefit',
            type: 'type',
        };
    }
    static types() {
        return {
            benefit: ConsumePointRequestBodyConsumeDetailBenefit,
            type: 'string',
        };
    }
}
exports.ConsumePointRequestBodyConsumeDetail = ConsumePointRequestBodyConsumeDetail;
class ConsumePointRequestBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            consumeDetail: 'consumeDetail',
            pointPoolCode: 'pointPoolCode',
            points: 'points',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            consumeDetail: ConsumePointRequestBodyConsumeDetail,
            pointPoolCode: 'string',
            points: 'number',
            requestId: 'string',
        };
    }
}
exports.ConsumePointRequestBody = ConsumePointRequestBody;
class ConsumePointResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            consumedPoints: 'consumedPoints',
        };
    }
    static types() {
        return {
            consumedPoints: 'number',
        };
    }
}
exports.ConsumePointResponseBodyResult = ConsumePointResponseBodyResult;
class GetPointInfoResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userPoints: 'userPoints',
        };
    }
    static types() {
        return {
            userPoints: 'number',
        };
    }
}
exports.GetPointInfoResponseBodyResult = GetPointInfoResponseBodyResult;
class RevertPointRequestBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pointPoolCode: 'pointPoolCode',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            pointPoolCode: 'string',
            requestId: 'string',
        };
    }
}
exports.RevertPointRequestBody = RevertPointRequestBody;
class RevertPointResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            revertedPoints: 'revertedPoints',
        };
    }
    static types() {
        return {
            revertedPoints: 'number',
        };
    }
}
exports.RevertPointResponseBodyResult = RevertPointResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._signatureAlgorithm = "v2";
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async checkInCrowdsByMobileWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.crowdIds)) {
            query["crowdIds"] = request.crowdIds;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CheckInCrowdsByMobile",
            version: "watt_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/watt/crowdIdentifications/query`,
            method: "POST",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CheckInCrowdsByMobileResponse({}));
    }
    async checkInCrowdsByMobile(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.checkInCrowdsByMobileWithOptions(request, headers, runtime);
    }
    async consumePointWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new ConsumePointShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ConsumePoint",
            version: "watt_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/watt/points/consume`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ConsumePointResponse({}));
    }
    async consumePoint(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ConsumePointHeaders({});
        return await this.consumePointWithOptions(request, headers, runtime);
    }
    async getPointInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pointPoolCode)) {
            query["pointPoolCode"] = request.pointPoolCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPointInfo",
            version: "watt_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/watt/points`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPointInfoResponse({}));
    }
    async getPointInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPointInfoHeaders({});
        return await this.getPointInfoWithOptions(request, headers, runtime);
    }
    async revertPointWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new RevertPointShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RevertPoint",
            version: "watt_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/watt/points/revert`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RevertPointResponse({}));
    }
    async revertPoint(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RevertPointHeaders({});
        return await this.revertPointWithOptions(request, headers, runtime);
    }
    async sendBannerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendBanner",
            version: "watt_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/watt/banners/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendBannerResponse({}));
    }
    async sendBanner(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendBannerHeaders({});
        return await this.sendBannerWithOptions(request, headers, runtime);
    }
    async sendPopupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendPopup",
            version: "watt_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/watt/popups/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendPopupResponse({}));
    }
    async sendPopup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendPopupHeaders({});
        return await this.sendPopupWithOptions(request, headers, runtime);
    }
    async sendSearchShadeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SendSearchShade",
            version: "watt_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/watt/searchShades/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendSearchShadeResponse({}));
    }
    async sendSearchShade(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendSearchShadeHeaders({});
        return await this.sendSearchShadeWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map