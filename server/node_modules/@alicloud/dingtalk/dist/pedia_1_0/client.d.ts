/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class PediaWordsAddHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsAddRequest extends $tea.Model {
    contactList?: PediaWordsAddRequestContactList[];
    highLightWordAlias?: string[];
    picList?: PediaWordsAddRequestPicList[];
    relatedDoc?: PediaWordsAddRequestRelatedDoc[];
    relatedLink?: PediaWordsAddRequestRelatedLink[];
    userId?: string;
    wordAlias?: string[];
    wordName?: string;
    wordParaphrase?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsAddResponseBody extends $tea.Model {
    success?: boolean;
    uuid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsAddResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PediaWordsAddResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsApproveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsApproveRequest extends $tea.Model {
    approveReason?: string;
    approveStatus?: string;
    imHighLight?: boolean;
    simHighLight?: boolean;
    userId?: string;
    uuid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsApproveResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsApproveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PediaWordsApproveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsDeleteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsDeleteRequest extends $tea.Model {
    userId?: string;
    uuid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsDeleteResponseBody extends $tea.Model {
    success?: boolean;
    uuid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsDeleteResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PediaWordsDeleteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryRequest extends $tea.Model {
    userId?: string;
    uuid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryResponseBody extends $tea.Model {
    data?: PediaWordsQueryResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PediaWordsQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    status?: string;
    userId?: string;
    wordName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchResponseBody extends $tea.Model {
    data?: PediaWordsSearchResponseBodyData[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PediaWordsSearchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsUpdateRequest extends $tea.Model {
    appLink?: PediaWordsUpdateRequestAppLink[];
    contactList?: PediaWordsUpdateRequestContactList[];
    highLightWordAlias?: string[];
    picList?: PediaWordsUpdateRequestPicList[];
    relatedDoc?: PediaWordsUpdateRequestRelatedDoc[];
    relatedLink?: PediaWordsUpdateRequestRelatedLink[];
    userId?: string;
    uuid?: number;
    wordAlias?: string[];
    wordName?: string;
    wordParaphrase?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsUpdateResponseBody extends $tea.Model {
    success?: boolean;
    uuid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsUpdateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PediaWordsUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsAddRequestContactList extends $tea.Model {
    avatarMediaId?: string;
    nickName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsAddRequestPicList extends $tea.Model {
    mediaIdUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsAddRequestRelatedDoc extends $tea.Model {
    link?: string;
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsAddRequestRelatedLink extends $tea.Model {
    link?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryResponseBodyDataAppLink extends $tea.Model {
    appName?: string;
    iconLink?: string;
    pcLink?: string;
    phoneLink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryResponseBodyDataContactList extends $tea.Model {
    avatarMediaId?: string;
    nickName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryResponseBodyDataPicList extends $tea.Model {
    mediaIdUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryResponseBodyDataRelatedDoc extends $tea.Model {
    link?: string;
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryResponseBodyDataRelatedLink extends $tea.Model {
    link?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsQueryResponseBodyData extends $tea.Model {
    appLink?: PediaWordsQueryResponseBodyDataAppLink[];
    approveName?: string;
    contactList?: PediaWordsQueryResponseBodyDataContactList[];
    contacts?: string[];
    creatorName?: string;
    gmtCreate?: number;
    gmtModify?: number;
    highLightWordAlias?: string[];
    imHighLight?: boolean;
    parentUuid?: number;
    picList?: PediaWordsQueryResponseBodyDataPicList[];
    relatedDoc?: PediaWordsQueryResponseBodyDataRelatedDoc[];
    relatedLink?: PediaWordsQueryResponseBodyDataRelatedLink[];
    simHighLight?: boolean;
    simpleWordParaphrase?: string;
    tagsList?: string[];
    updaterName?: string;
    userId?: string;
    uuid?: number;
    wordAlias?: string[];
    wordName?: string;
    wordParaphrase?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchResponseBodyDataAppLink extends $tea.Model {
    appName?: string;
    iconLink?: string;
    pcLink?: string;
    phoneLink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchResponseBodyDataContactList extends $tea.Model {
    avatarMediaId?: string;
    nickName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchResponseBodyDataPicList extends $tea.Model {
    mediaIdUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchResponseBodyDataRelatedDoc extends $tea.Model {
    link?: string;
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchResponseBodyDataRelatedLink extends $tea.Model {
    link?: string;
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsSearchResponseBodyData extends $tea.Model {
    appLink?: PediaWordsSearchResponseBodyDataAppLink[];
    approveName?: string;
    contactList?: PediaWordsSearchResponseBodyDataContactList[];
    contacts?: string[];
    creatorName?: string;
    gmtCreate?: number;
    gmtModify?: number;
    highLightWordAlias?: string[];
    imHighLight?: boolean;
    parentUuid?: number;
    picList?: PediaWordsSearchResponseBodyDataPicList[];
    relatedDoc?: PediaWordsSearchResponseBodyDataRelatedDoc[];
    relatedLink?: PediaWordsSearchResponseBodyDataRelatedLink[];
    simHighLight?: boolean;
    simpleWordParaphrase?: string;
    tagsList?: string[];
    updaterName?: string;
    userId?: string;
    uuid?: number;
    wordAlias?: string[];
    wordName?: string;
    wordParaphrase?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsUpdateRequestAppLink extends $tea.Model {
    appName?: string;
    iconLink?: string;
    pcLink?: string;
    phoneLink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsUpdateRequestContactList extends $tea.Model {
    avatarMediaId?: string;
    nickName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsUpdateRequestPicList extends $tea.Model {
    mediaIdUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsUpdateRequestRelatedDoc extends $tea.Model {
    link?: string;
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PediaWordsUpdateRequestRelatedLink extends $tea.Model {
    link?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    pediaWordsAddWithOptions(request: PediaWordsAddRequest, headers: PediaWordsAddHeaders, runtime: $Util.RuntimeOptions): Promise<PediaWordsAddResponse>;
    pediaWordsAdd(request: PediaWordsAddRequest): Promise<PediaWordsAddResponse>;
    pediaWordsApproveWithOptions(request: PediaWordsApproveRequest, headers: PediaWordsApproveHeaders, runtime: $Util.RuntimeOptions): Promise<PediaWordsApproveResponse>;
    pediaWordsApprove(request: PediaWordsApproveRequest): Promise<PediaWordsApproveResponse>;
    pediaWordsDeleteWithOptions(request: PediaWordsDeleteRequest, headers: PediaWordsDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<PediaWordsDeleteResponse>;
    pediaWordsDelete(request: PediaWordsDeleteRequest): Promise<PediaWordsDeleteResponse>;
    pediaWordsQueryWithOptions(request: PediaWordsQueryRequest, headers: PediaWordsQueryHeaders, runtime: $Util.RuntimeOptions): Promise<PediaWordsQueryResponse>;
    pediaWordsQuery(request: PediaWordsQueryRequest): Promise<PediaWordsQueryResponse>;
    pediaWordsSearchWithOptions(request: PediaWordsSearchRequest, headers: PediaWordsSearchHeaders, runtime: $Util.RuntimeOptions): Promise<PediaWordsSearchResponse>;
    pediaWordsSearch(request: PediaWordsSearchRequest): Promise<PediaWordsSearchResponse>;
    pediaWordsUpdateWithOptions(request: PediaWordsUpdateRequest, headers: PediaWordsUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<PediaWordsUpdateResponse>;
    pediaWordsUpdate(request: PediaWordsUpdateRequest): Promise<PediaWordsUpdateResponse>;
}
