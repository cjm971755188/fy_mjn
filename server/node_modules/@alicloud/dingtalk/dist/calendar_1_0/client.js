"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddAttendeeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddAttendeeHeaders = AddAttendeeHeaders;
class AddAttendeeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendeesToAdd: 'attendeesToAdd',
            chatNotification: 'chatNotification',
            pushNotification: 'pushNotification',
        };
    }
    static types() {
        return {
            attendeesToAdd: { 'type': 'array', 'itemType': AddAttendeeRequestAttendeesToAdd },
            chatNotification: 'boolean',
            pushNotification: 'boolean',
        };
    }
}
exports.AddAttendeeRequest = AddAttendeeRequest;
class AddAttendeeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.AddAttendeeResponse = AddAttendeeResponse;
class AddMeetingRoomsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddMeetingRoomsHeaders = AddMeetingRoomsHeaders;
class AddMeetingRoomsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            meetingRoomsToAdd: 'meetingRoomsToAdd',
        };
    }
    static types() {
        return {
            meetingRoomsToAdd: { 'type': 'array', 'itemType': AddMeetingRoomsRequestMeetingRoomsToAdd },
        };
    }
}
exports.AddMeetingRoomsRequest = AddMeetingRoomsRequest;
class AddMeetingRoomsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.AddMeetingRoomsResponseBody = AddMeetingRoomsResponseBody;
class AddMeetingRoomsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddMeetingRoomsResponseBody,
        };
    }
}
exports.AddMeetingRoomsResponse = AddMeetingRoomsResponse;
class CheckInHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CheckInHeaders = CheckInHeaders;
class CheckInResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            checkInTime: 'checkInTime',
        };
    }
    static types() {
        return {
            checkInTime: 'number',
        };
    }
}
exports.CheckInResponseBody = CheckInResponseBody;
class CheckInResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckInResponseBody,
        };
    }
}
exports.CheckInResponse = CheckInResponse;
class ConvertLegacyEventIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ConvertLegacyEventIdHeaders = ConvertLegacyEventIdHeaders;
class ConvertLegacyEventIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            legacyEventIds: 'legacyEventIds',
        };
    }
    static types() {
        return {
            legacyEventIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ConvertLegacyEventIdRequest = ConvertLegacyEventIdRequest;
class ConvertLegacyEventIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            legacyEventIdMap: 'legacyEventIdMap',
        };
    }
    static types() {
        return {
            legacyEventIdMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.ConvertLegacyEventIdResponseBody = ConvertLegacyEventIdResponseBody;
class ConvertLegacyEventIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ConvertLegacyEventIdResponseBody,
        };
    }
}
exports.ConvertLegacyEventIdResponse = ConvertLegacyEventIdResponse;
class CreateAclsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateAclsHeaders = CreateAclsHeaders;
class CreateAclsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            privilege: 'privilege',
            scope: 'scope',
            sendMsg: 'sendMsg',
        };
    }
    static types() {
        return {
            privilege: 'string',
            scope: CreateAclsRequestScope,
            sendMsg: 'boolean',
        };
    }
}
exports.CreateAclsRequest = CreateAclsRequest;
class CreateAclsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aclId: 'aclId',
            privilege: 'privilege',
            scope: 'scope',
        };
    }
    static types() {
        return {
            aclId: 'string',
            privilege: 'string',
            scope: CreateAclsResponseBodyScope,
        };
    }
}
exports.CreateAclsResponseBody = CreateAclsResponseBody;
class CreateAclsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateAclsResponseBody,
        };
    }
}
exports.CreateAclsResponse = CreateAclsResponse;
class CreateEventHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateEventHeaders = CreateEventHeaders;
class CreateEventRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            description: 'description',
            end: 'end',
            extra: 'extra',
            isAllDay: 'isAllDay',
            location: 'location',
            onlineMeetingInfo: 'onlineMeetingInfo',
            recurrence: 'recurrence',
            reminders: 'reminders',
            richTextDescription: 'richTextDescription',
            start: 'start',
            summary: 'summary',
            uiConfigs: 'uiConfigs',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': CreateEventRequestAttendees },
            description: 'string',
            end: CreateEventRequestEnd,
            extra: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            isAllDay: 'boolean',
            location: CreateEventRequestLocation,
            onlineMeetingInfo: CreateEventRequestOnlineMeetingInfo,
            recurrence: CreateEventRequestRecurrence,
            reminders: { 'type': 'array', 'itemType': CreateEventRequestReminders },
            richTextDescription: CreateEventRequestRichTextDescription,
            start: CreateEventRequestStart,
            summary: 'string',
            uiConfigs: { 'type': 'array', 'itemType': CreateEventRequestUiConfigs },
        };
    }
}
exports.CreateEventRequest = CreateEventRequest;
class CreateEventResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            createTime: 'createTime',
            description: 'description',
            end: 'end',
            id: 'id',
            isAllDay: 'isAllDay',
            location: 'location',
            onlineMeetingInfo: 'onlineMeetingInfo',
            organizer: 'organizer',
            recurrence: 'recurrence',
            reminders: 'reminders',
            richTextDescription: 'richTextDescription',
            start: 'start',
            summary: 'summary',
            uiConfigs: 'uiConfigs',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': CreateEventResponseBodyAttendees },
            createTime: 'string',
            description: 'string',
            end: CreateEventResponseBodyEnd,
            id: 'string',
            isAllDay: 'boolean',
            location: CreateEventResponseBodyLocation,
            onlineMeetingInfo: CreateEventResponseBodyOnlineMeetingInfo,
            organizer: CreateEventResponseBodyOrganizer,
            recurrence: CreateEventResponseBodyRecurrence,
            reminders: { 'type': 'array', 'itemType': CreateEventResponseBodyReminders },
            richTextDescription: CreateEventResponseBodyRichTextDescription,
            start: CreateEventResponseBodyStart,
            summary: 'string',
            uiConfigs: { 'type': 'array', 'itemType': CreateEventResponseBodyUiConfigs },
            updateTime: 'string',
        };
    }
}
exports.CreateEventResponseBody = CreateEventResponseBody;
class CreateEventResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateEventResponseBody,
        };
    }
}
exports.CreateEventResponse = CreateEventResponse;
class CreateEventByMeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateEventByMeHeaders = CreateEventByMeHeaders;
class CreateEventByMeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            description: 'description',
            end: 'end',
            extra: 'extra',
            isAllDay: 'isAllDay',
            location: 'location',
            onlineMeetingInfo: 'onlineMeetingInfo',
            recurrence: 'recurrence',
            reminders: 'reminders',
            richTextDescription: 'richTextDescription',
            start: 'start',
            summary: 'summary',
            uiConfigs: 'uiConfigs',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': CreateEventByMeRequestAttendees },
            description: 'string',
            end: CreateEventByMeRequestEnd,
            extra: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            isAllDay: 'boolean',
            location: CreateEventByMeRequestLocation,
            onlineMeetingInfo: CreateEventByMeRequestOnlineMeetingInfo,
            recurrence: CreateEventByMeRequestRecurrence,
            reminders: { 'type': 'array', 'itemType': CreateEventByMeRequestReminders },
            richTextDescription: CreateEventByMeRequestRichTextDescription,
            start: CreateEventByMeRequestStart,
            summary: 'string',
            uiConfigs: { 'type': 'array', 'itemType': CreateEventByMeRequestUiConfigs },
        };
    }
}
exports.CreateEventByMeRequest = CreateEventByMeRequest;
class CreateEventByMeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            createTime: 'createTime',
            description: 'description',
            end: 'end',
            id: 'id',
            isAllDay: 'isAllDay',
            location: 'location',
            onlineMeetingInfo: 'onlineMeetingInfo',
            organizer: 'organizer',
            recurrence: 'recurrence',
            reminders: 'reminders',
            richTextDescription: 'richTextDescription',
            start: 'start',
            summary: 'summary',
            uiConfigs: 'uiConfigs',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': CreateEventByMeResponseBodyAttendees },
            createTime: 'string',
            description: 'string',
            end: CreateEventByMeResponseBodyEnd,
            id: 'string',
            isAllDay: 'boolean',
            location: CreateEventByMeResponseBodyLocation,
            onlineMeetingInfo: CreateEventByMeResponseBodyOnlineMeetingInfo,
            organizer: CreateEventByMeResponseBodyOrganizer,
            recurrence: CreateEventByMeResponseBodyRecurrence,
            reminders: { 'type': 'array', 'itemType': CreateEventByMeResponseBodyReminders },
            richTextDescription: CreateEventByMeResponseBodyRichTextDescription,
            start: CreateEventByMeResponseBodyStart,
            summary: 'string',
            uiConfigs: { 'type': 'array', 'itemType': CreateEventByMeResponseBodyUiConfigs },
            updateTime: 'string',
        };
    }
}
exports.CreateEventByMeResponseBody = CreateEventByMeResponseBody;
class CreateEventByMeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateEventByMeResponseBody,
        };
    }
}
exports.CreateEventByMeResponse = CreateEventByMeResponse;
class CreateSubscribedCalendarHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateSubscribedCalendarHeaders = CreateSubscribedCalendarHeaders;
class CreateSubscribedCalendarRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            managers: 'managers',
            name: 'name',
            subscribeScope: 'subscribeScope',
        };
    }
    static types() {
        return {
            description: 'string',
            managers: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            subscribeScope: CreateSubscribedCalendarRequestSubscribeScope,
        };
    }
}
exports.CreateSubscribedCalendarRequest = CreateSubscribedCalendarRequest;
class CreateSubscribedCalendarResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            calendarId: 'calendarId',
        };
    }
    static types() {
        return {
            calendarId: 'string',
        };
    }
}
exports.CreateSubscribedCalendarResponseBody = CreateSubscribedCalendarResponseBody;
class CreateSubscribedCalendarResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateSubscribedCalendarResponseBody,
        };
    }
}
exports.CreateSubscribedCalendarResponse = CreateSubscribedCalendarResponse;
class DeleteAclHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteAclHeaders = DeleteAclHeaders;
class DeleteAclResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteAclResponse = DeleteAclResponse;
class DeleteEventHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteEventHeaders = DeleteEventHeaders;
class DeleteEventRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pushNotification: 'pushNotification',
        };
    }
    static types() {
        return {
            pushNotification: 'boolean',
        };
    }
}
exports.DeleteEventRequest = DeleteEventRequest;
class DeleteEventResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteEventResponse = DeleteEventResponse;
class DeleteSubscribedCalendarHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteSubscribedCalendarHeaders = DeleteSubscribedCalendarHeaders;
class DeleteSubscribedCalendarResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteSubscribedCalendarResponseBody = DeleteSubscribedCalendarResponseBody;
class DeleteSubscribedCalendarResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteSubscribedCalendarResponseBody,
        };
    }
}
exports.DeleteSubscribedCalendarResponse = DeleteSubscribedCalendarResponse;
class GenerateCaldavAccountHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            dingUid: 'dingUid',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dingUid: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GenerateCaldavAccountHeaders = GenerateCaldavAccountHeaders;
class GenerateCaldavAccountRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            device: 'device',
        };
    }
    static types() {
        return {
            device: 'string',
        };
    }
}
exports.GenerateCaldavAccountRequest = GenerateCaldavAccountRequest;
class GenerateCaldavAccountResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            password: 'password',
            serverAddress: 'serverAddress',
            username: 'username',
        };
    }
    static types() {
        return {
            password: 'string',
            serverAddress: 'string',
            username: 'string',
        };
    }
}
exports.GenerateCaldavAccountResponseBody = GenerateCaldavAccountResponseBody;
class GenerateCaldavAccountResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GenerateCaldavAccountResponseBody,
        };
    }
}
exports.GenerateCaldavAccountResponse = GenerateCaldavAccountResponse;
class GetEventHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetEventHeaders = GetEventHeaders;
class GetEventRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxAttendees: 'maxAttendees',
        };
    }
    static types() {
        return {
            maxAttendees: 'number',
        };
    }
}
exports.GetEventRequest = GetEventRequest;
class GetEventResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            categories: 'categories',
            createTime: 'createTime',
            description: 'description',
            end: 'end',
            extendedProperties: 'extendedProperties',
            id: 'id',
            isAllDay: 'isAllDay',
            location: 'location',
            meetingRooms: 'meetingRooms',
            onlineMeetingInfo: 'onlineMeetingInfo',
            organizer: 'organizer',
            originStart: 'originStart',
            recurrence: 'recurrence',
            reminders: 'reminders',
            richTextDescription: 'richTextDescription',
            seriesMasterId: 'seriesMasterId',
            start: 'start',
            status: 'status',
            summary: 'summary',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': GetEventResponseBodyAttendees },
            categories: { 'type': 'array', 'itemType': GetEventResponseBodyCategories },
            createTime: 'string',
            description: 'string',
            end: GetEventResponseBodyEnd,
            extendedProperties: GetEventResponseBodyExtendedProperties,
            id: 'string',
            isAllDay: 'boolean',
            location: GetEventResponseBodyLocation,
            meetingRooms: { 'type': 'array', 'itemType': GetEventResponseBodyMeetingRooms },
            onlineMeetingInfo: GetEventResponseBodyOnlineMeetingInfo,
            organizer: GetEventResponseBodyOrganizer,
            originStart: GetEventResponseBodyOriginStart,
            recurrence: GetEventResponseBodyRecurrence,
            reminders: { 'type': 'array', 'itemType': GetEventResponseBodyReminders },
            richTextDescription: GetEventResponseBodyRichTextDescription,
            seriesMasterId: 'string',
            start: GetEventResponseBodyStart,
            status: 'string',
            summary: 'string',
            updateTime: 'string',
        };
    }
}
exports.GetEventResponseBody = GetEventResponseBody;
class GetEventResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetEventResponseBody,
        };
    }
}
exports.GetEventResponse = GetEventResponse;
class GetMeetingRoomsScheduleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetMeetingRoomsScheduleHeaders = GetMeetingRoomsScheduleHeaders;
class GetMeetingRoomsScheduleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            roomIds: 'roomIds',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'string',
            roomIds: { 'type': 'array', 'itemType': 'string' },
            startTime: 'string',
        };
    }
}
exports.GetMeetingRoomsScheduleRequest = GetMeetingRoomsScheduleRequest;
class GetMeetingRoomsScheduleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            scheduleInformation: 'scheduleInformation',
        };
    }
    static types() {
        return {
            scheduleInformation: { 'type': 'array', 'itemType': GetMeetingRoomsScheduleResponseBodyScheduleInformation },
        };
    }
}
exports.GetMeetingRoomsScheduleResponseBody = GetMeetingRoomsScheduleResponseBody;
class GetMeetingRoomsScheduleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMeetingRoomsScheduleResponseBody,
        };
    }
}
exports.GetMeetingRoomsScheduleResponse = GetMeetingRoomsScheduleResponse;
class GetScheduleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetScheduleHeaders = GetScheduleHeaders;
class GetScheduleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            endTime: 'string',
            startTime: 'string',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetScheduleRequest = GetScheduleRequest;
class GetScheduleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            scheduleInformation: 'scheduleInformation',
        };
    }
    static types() {
        return {
            scheduleInformation: { 'type': 'array', 'itemType': GetScheduleResponseBodyScheduleInformation },
        };
    }
}
exports.GetScheduleResponseBody = GetScheduleResponseBody;
class GetScheduleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetScheduleResponseBody,
        };
    }
}
exports.GetScheduleResponse = GetScheduleResponse;
class GetSignInLinkHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSignInLinkHeaders = GetSignInLinkHeaders;
class GetSignInLinkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            signInLink: 'signInLink',
        };
    }
    static types() {
        return {
            signInLink: 'string',
        };
    }
}
exports.GetSignInLinkResponseBody = GetSignInLinkResponseBody;
class GetSignInLinkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSignInLinkResponseBody,
        };
    }
}
exports.GetSignInLinkResponse = GetSignInLinkResponse;
class GetSignInListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSignInListHeaders = GetSignInListHeaders;
class GetSignInListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            type: 'type',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            type: 'string',
        };
    }
}
exports.GetSignInListRequest = GetSignInListRequest;
class GetSignInListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            users: 'users',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            users: { 'type': 'array', 'itemType': GetSignInListResponseBodyUsers },
        };
    }
}
exports.GetSignInListResponseBody = GetSignInListResponseBody;
class GetSignInListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSignInListResponseBody,
        };
    }
}
exports.GetSignInListResponse = GetSignInListResponse;
class GetSignOutLinkHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSignOutLinkHeaders = GetSignOutLinkHeaders;
class GetSignOutLinkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            signOutLink: 'signOutLink',
        };
    }
    static types() {
        return {
            signOutLink: 'string',
        };
    }
}
exports.GetSignOutLinkResponseBody = GetSignOutLinkResponseBody;
class GetSignOutLinkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSignOutLinkResponseBody,
        };
    }
}
exports.GetSignOutLinkResponse = GetSignOutLinkResponse;
class GetSignOutListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSignOutListHeaders = GetSignOutListHeaders;
class GetSignOutListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            type: 'type',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            type: 'string',
        };
    }
}
exports.GetSignOutListRequest = GetSignOutListRequest;
class GetSignOutListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            users: 'users',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            users: { 'type': 'array', 'itemType': GetSignOutListResponseBodyUsers },
        };
    }
}
exports.GetSignOutListResponseBody = GetSignOutListResponseBody;
class GetSignOutListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSignOutListResponseBody,
        };
    }
}
exports.GetSignOutListResponse = GetSignOutListResponse;
class GetSubscribedCalendarHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSubscribedCalendarHeaders = GetSubscribedCalendarHeaders;
class GetSubscribedCalendarResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            author: 'author',
            calendarId: 'calendarId',
            description: 'description',
            managers: 'managers',
            name: 'name',
            subscribeScope: 'subscribeScope',
        };
    }
    static types() {
        return {
            author: 'string',
            calendarId: 'string',
            description: 'string',
            managers: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            subscribeScope: GetSubscribedCalendarResponseBodySubscribeScope,
        };
    }
}
exports.GetSubscribedCalendarResponseBody = GetSubscribedCalendarResponseBody;
class GetSubscribedCalendarResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSubscribedCalendarResponseBody,
        };
    }
}
exports.GetSubscribedCalendarResponse = GetSubscribedCalendarResponse;
class ListAclsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListAclsHeaders = ListAclsHeaders;
class ListAclsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            acls: 'acls',
        };
    }
    static types() {
        return {
            acls: { 'type': 'array', 'itemType': ListAclsResponseBodyAcls },
        };
    }
}
exports.ListAclsResponseBody = ListAclsResponseBody;
class ListAclsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAclsResponseBody,
        };
    }
}
exports.ListAclsResponse = ListAclsResponse;
class ListAttendeesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListAttendeesHeaders = ListAttendeesHeaders;
class ListAttendeesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
        };
    }
}
exports.ListAttendeesRequest = ListAttendeesRequest;
class ListAttendeesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': ListAttendeesResponseBodyAttendees },
            nextToken: 'string',
        };
    }
}
exports.ListAttendeesResponseBody = ListAttendeesResponseBody;
class ListAttendeesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAttendeesResponseBody,
        };
    }
}
exports.ListAttendeesResponse = ListAttendeesResponse;
class ListCalendarsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListCalendarsHeaders = ListCalendarsHeaders;
class ListCalendarsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            response: 'response',
        };
    }
    static types() {
        return {
            response: ListCalendarsResponseBodyResponse,
        };
    }
}
exports.ListCalendarsResponseBody = ListCalendarsResponseBody;
class ListCalendarsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListCalendarsResponseBody,
        };
    }
}
exports.ListCalendarsResponse = ListCalendarsResponse;
class ListEventsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListEventsHeaders = ListEventsHeaders;
class ListEventsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxAttendees: 'maxAttendees',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            seriesMasterId: 'seriesMasterId',
            showDeleted: 'showDeleted',
            syncToken: 'syncToken',
            timeMax: 'timeMax',
            timeMin: 'timeMin',
        };
    }
    static types() {
        return {
            maxAttendees: 'number',
            maxResults: 'number',
            nextToken: 'string',
            seriesMasterId: 'string',
            showDeleted: 'boolean',
            syncToken: 'string',
            timeMax: 'string',
            timeMin: 'string',
        };
    }
}
exports.ListEventsRequest = ListEventsRequest;
class ListEventsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            events: 'events',
            nextToken: 'nextToken',
            syncToken: 'syncToken',
        };
    }
    static types() {
        return {
            events: { 'type': 'array', 'itemType': ListEventsResponseBodyEvents },
            nextToken: 'string',
            syncToken: 'string',
        };
    }
}
exports.ListEventsResponseBody = ListEventsResponseBody;
class ListEventsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListEventsResponseBody,
        };
    }
}
exports.ListEventsResponse = ListEventsResponse;
class ListEventsInstancesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListEventsInstancesHeaders = ListEventsInstancesHeaders;
class ListEventsInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxAttendees: 'maxAttendees',
            maxResults: 'maxResults',
            seriesMasterId: 'seriesMasterId',
            startRecurrenceId: 'startRecurrenceId',
        };
    }
    static types() {
        return {
            maxAttendees: 'number',
            maxResults: 'number',
            seriesMasterId: 'string',
            startRecurrenceId: 'string',
        };
    }
}
exports.ListEventsInstancesRequest = ListEventsInstancesRequest;
class ListEventsInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            events: 'events',
        };
    }
    static types() {
        return {
            events: { 'type': 'array', 'itemType': ListEventsInstancesResponseBodyEvents },
        };
    }
}
exports.ListEventsInstancesResponseBody = ListEventsInstancesResponseBody;
class ListEventsInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListEventsInstancesResponseBody,
        };
    }
}
exports.ListEventsInstancesResponse = ListEventsInstancesResponse;
class ListEventsViewHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListEventsViewHeaders = ListEventsViewHeaders;
class ListEventsViewRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxAttendees: 'maxAttendees',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            timeMax: 'timeMax',
            timeMin: 'timeMin',
        };
    }
    static types() {
        return {
            maxAttendees: 'number',
            maxResults: 'number',
            nextToken: 'string',
            timeMax: 'string',
            timeMin: 'string',
        };
    }
}
exports.ListEventsViewRequest = ListEventsViewRequest;
class ListEventsViewResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            events: 'events',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            events: { 'type': 'array', 'itemType': ListEventsViewResponseBodyEvents },
            nextToken: 'string',
        };
    }
}
exports.ListEventsViewResponseBody = ListEventsViewResponseBody;
class ListEventsViewResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListEventsViewResponseBody,
        };
    }
}
exports.ListEventsViewResponse = ListEventsViewResponse;
class ListInstancesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListInstancesHeaders = ListInstancesHeaders;
class ListInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxAttendees: 'maxAttendees',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            timeMax: 'timeMax',
            timeMin: 'timeMin',
        };
    }
    static types() {
        return {
            maxAttendees: 'number',
            maxResults: 'number',
            nextToken: 'string',
            timeMax: 'string',
            timeMin: 'string',
        };
    }
}
exports.ListInstancesRequest = ListInstancesRequest;
class ListInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            events: 'events',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            events: { 'type': 'array', 'itemType': ListInstancesResponseBodyEvents },
            nextToken: 'string',
        };
    }
}
exports.ListInstancesResponseBody = ListInstancesResponseBody;
class ListInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListInstancesResponseBody,
        };
    }
}
exports.ListInstancesResponse = ListInstancesResponse;
class PatchEventHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PatchEventHeaders = PatchEventHeaders;
class PatchEventRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            description: 'description',
            end: 'end',
            extra: 'extra',
            id: 'id',
            isAllDay: 'isAllDay',
            location: 'location',
            onlineMeetingInfo: 'onlineMeetingInfo',
            recurrence: 'recurrence',
            reminders: 'reminders',
            richTextDescription: 'richTextDescription',
            start: 'start',
            summary: 'summary',
            uiConfigs: 'uiConfigs',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': PatchEventRequestAttendees },
            description: 'string',
            end: PatchEventRequestEnd,
            extra: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            id: 'string',
            isAllDay: 'boolean',
            location: PatchEventRequestLocation,
            onlineMeetingInfo: PatchEventRequestOnlineMeetingInfo,
            recurrence: PatchEventRequestRecurrence,
            reminders: { 'type': 'array', 'itemType': PatchEventRequestReminders },
            richTextDescription: PatchEventRequestRichTextDescription,
            start: PatchEventRequestStart,
            summary: 'string',
            uiConfigs: { 'type': 'array', 'itemType': PatchEventRequestUiConfigs },
        };
    }
}
exports.PatchEventRequest = PatchEventRequest;
class PatchEventResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            createTime: 'createTime',
            description: 'description',
            end: 'end',
            id: 'id',
            isAllDay: 'isAllDay',
            location: 'location',
            onlineMeetingInfo: 'onlineMeetingInfo',
            organizer: 'organizer',
            recurrence: 'recurrence',
            reminders: 'reminders',
            richTextDescription: 'richTextDescription',
            start: 'start',
            summary: 'summary',
            uiConfigs: 'uiConfigs',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': PatchEventResponseBodyAttendees },
            createTime: 'string',
            description: 'string',
            end: PatchEventResponseBodyEnd,
            id: 'string',
            isAllDay: 'boolean',
            location: PatchEventResponseBodyLocation,
            onlineMeetingInfo: PatchEventResponseBodyOnlineMeetingInfo,
            organizer: PatchEventResponseBodyOrganizer,
            recurrence: PatchEventResponseBodyRecurrence,
            reminders: { 'type': 'array', 'itemType': PatchEventResponseBodyReminders },
            richTextDescription: PatchEventResponseBodyRichTextDescription,
            start: PatchEventResponseBodyStart,
            summary: 'string',
            uiConfigs: { 'type': 'array', 'itemType': PatchEventResponseBodyUiConfigs },
            updateTime: 'string',
        };
    }
}
exports.PatchEventResponseBody = PatchEventResponseBody;
class PatchEventResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PatchEventResponseBody,
        };
    }
}
exports.PatchEventResponse = PatchEventResponse;
class RemoveAttendeeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveAttendeeHeaders = RemoveAttendeeHeaders;
class RemoveAttendeeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendeesToRemove: 'attendeesToRemove',
        };
    }
    static types() {
        return {
            attendeesToRemove: { 'type': 'array', 'itemType': RemoveAttendeeRequestAttendeesToRemove },
        };
    }
}
exports.RemoveAttendeeRequest = RemoveAttendeeRequest;
class RemoveAttendeeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.RemoveAttendeeResponse = RemoveAttendeeResponse;
class RemoveMeetingRoomsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveMeetingRoomsHeaders = RemoveMeetingRoomsHeaders;
class RemoveMeetingRoomsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            meetingRoomsToRemove: 'meetingRoomsToRemove',
        };
    }
    static types() {
        return {
            meetingRoomsToRemove: { 'type': 'array', 'itemType': RemoveMeetingRoomsRequestMeetingRoomsToRemove },
        };
    }
}
exports.RemoveMeetingRoomsRequest = RemoveMeetingRoomsRequest;
class RemoveMeetingRoomsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.RemoveMeetingRoomsResponseBody = RemoveMeetingRoomsResponseBody;
class RemoveMeetingRoomsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveMeetingRoomsResponseBody,
        };
    }
}
exports.RemoveMeetingRoomsResponse = RemoveMeetingRoomsResponse;
class RespondEventHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RespondEventHeaders = RespondEventHeaders;
class RespondEventRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            responseStatus: 'responseStatus',
        };
    }
    static types() {
        return {
            responseStatus: 'string',
        };
    }
}
exports.RespondEventRequest = RespondEventRequest;
class RespondEventResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.RespondEventResponse = RespondEventResponse;
class SignInHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SignInHeaders = SignInHeaders;
class SignInResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            checkInTime: 'checkInTime',
        };
    }
    static types() {
        return {
            checkInTime: 'number',
        };
    }
}
exports.SignInResponseBody = SignInResponseBody;
class SignInResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SignInResponseBody,
        };
    }
}
exports.SignInResponse = SignInResponse;
class SignOutHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SignOutHeaders = SignOutHeaders;
class SignOutResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            checkOutTime: 'checkOutTime',
        };
    }
    static types() {
        return {
            checkOutTime: 'number',
        };
    }
}
exports.SignOutResponseBody = SignOutResponseBody;
class SignOutResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SignOutResponseBody,
        };
    }
}
exports.SignOutResponse = SignOutResponse;
class SubscribeCalendarHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SubscribeCalendarHeaders = SubscribeCalendarHeaders;
class SubscribeCalendarResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.SubscribeCalendarResponse = SubscribeCalendarResponse;
class TransferEventHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xClientToken: 'x-client-token',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xClientToken: 'string',
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.TransferEventHeaders = TransferEventHeaders;
class TransferEventRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isExitCalendar: 'isExitCalendar',
            needNotifyViaO2O: 'needNotifyViaO2O',
            newOrganizerId: 'newOrganizerId',
        };
    }
    static types() {
        return {
            isExitCalendar: 'boolean',
            needNotifyViaO2O: 'boolean',
            newOrganizerId: 'string',
        };
    }
}
exports.TransferEventRequest = TransferEventRequest;
class TransferEventResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.TransferEventResponseBody = TransferEventResponseBody;
class TransferEventResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TransferEventResponseBody,
        };
    }
}
exports.TransferEventResponse = TransferEventResponse;
class UnsubscribeCalendarHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UnsubscribeCalendarHeaders = UnsubscribeCalendarHeaders;
class UnsubscribeCalendarResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UnsubscribeCalendarResponseBody = UnsubscribeCalendarResponseBody;
class UnsubscribeCalendarResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnsubscribeCalendarResponseBody,
        };
    }
}
exports.UnsubscribeCalendarResponse = UnsubscribeCalendarResponse;
class UpdateSubscribedCalendarsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateSubscribedCalendarsHeaders = UpdateSubscribedCalendarsHeaders;
class UpdateSubscribedCalendarsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            managers: 'managers',
            name: 'name',
            subscribeScope: 'subscribeScope',
        };
    }
    static types() {
        return {
            description: 'string',
            managers: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            subscribeScope: UpdateSubscribedCalendarsRequestSubscribeScope,
        };
    }
}
exports.UpdateSubscribedCalendarsRequest = UpdateSubscribedCalendarsRequest;
class UpdateSubscribedCalendarsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateSubscribedCalendarsResponseBody = UpdateSubscribedCalendarsResponseBody;
class UpdateSubscribedCalendarsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateSubscribedCalendarsResponseBody,
        };
    }
}
exports.UpdateSubscribedCalendarsResponse = UpdateSubscribedCalendarsResponse;
class AddAttendeeRequestAttendeesToAdd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            isOptional: 'isOptional',
        };
    }
    static types() {
        return {
            id: 'string',
            isOptional: 'boolean',
        };
    }
}
exports.AddAttendeeRequestAttendeesToAdd = AddAttendeeRequestAttendeesToAdd;
class AddMeetingRoomsRequestMeetingRoomsToAdd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roomId: 'roomId',
        };
    }
    static types() {
        return {
            roomId: 'string',
        };
    }
}
exports.AddMeetingRoomsRequestMeetingRoomsToAdd = AddMeetingRoomsRequestMeetingRoomsToAdd;
class CreateAclsRequestScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            scopeType: 'scopeType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            scopeType: 'string',
            userId: 'string',
        };
    }
}
exports.CreateAclsRequestScope = CreateAclsRequestScope;
class CreateAclsResponseBodyScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            scopeType: 'scopeType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            scopeType: 'string',
            userId: 'string',
        };
    }
}
exports.CreateAclsResponseBodyScope = CreateAclsResponseBodyScope;
class CreateEventRequestAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            isOptional: 'isOptional',
        };
    }
    static types() {
        return {
            id: 'string',
            isOptional: 'boolean',
        };
    }
}
exports.CreateEventRequestAttendees = CreateEventRequestAttendees;
class CreateEventRequestEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.CreateEventRequestEnd = CreateEventRequestEnd;
class CreateEventRequestLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            displayName: 'string',
        };
    }
}
exports.CreateEventRequestLocation = CreateEventRequestLocation;
class CreateEventRequestOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'type',
        };
    }
    static types() {
        return {
            type: 'string',
        };
    }
}
exports.CreateEventRequestOnlineMeetingInfo = CreateEventRequestOnlineMeetingInfo;
class CreateEventRequestRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            firstDayOfWeek: 'firstDayOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            firstDayOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.CreateEventRequestRecurrencePattern = CreateEventRequestRecurrencePattern;
class CreateEventRequestRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.CreateEventRequestRecurrenceRange = CreateEventRequestRecurrenceRange;
class CreateEventRequestRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: CreateEventRequestRecurrencePattern,
            range: CreateEventRequestRecurrenceRange,
        };
    }
}
exports.CreateEventRequestRecurrence = CreateEventRequestRecurrence;
class CreateEventRequestReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'number',
        };
    }
}
exports.CreateEventRequestReminders = CreateEventRequestReminders;
class CreateEventRequestRichTextDescription extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
        };
    }
    static types() {
        return {
            text: 'string',
        };
    }
}
exports.CreateEventRequestRichTextDescription = CreateEventRequestRichTextDescription;
class CreateEventRequestStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.CreateEventRequestStart = CreateEventRequestStart;
class CreateEventRequestUiConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            uiName: 'uiName',
            uiStatus: 'uiStatus',
        };
    }
    static types() {
        return {
            uiName: 'string',
            uiStatus: 'string',
        };
    }
}
exports.CreateEventRequestUiConfigs = CreateEventRequestUiConfigs;
class CreateEventResponseBodyAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            isOptional: 'isOptional',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            isOptional: 'boolean',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.CreateEventResponseBodyAttendees = CreateEventResponseBodyAttendees;
class CreateEventResponseBodyEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.CreateEventResponseBodyEnd = CreateEventResponseBodyEnd;
class CreateEventResponseBodyLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            displayName: 'string',
        };
    }
}
exports.CreateEventResponseBodyLocation = CreateEventResponseBodyLocation;
class CreateEventResponseBodyOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conferenceId: 'conferenceId',
            extraInfo: 'extraInfo',
            type: 'type',
            url: 'url',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            extraInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            type: 'string',
            url: 'string',
        };
    }
}
exports.CreateEventResponseBodyOnlineMeetingInfo = CreateEventResponseBodyOnlineMeetingInfo;
class CreateEventResponseBodyOrganizer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.CreateEventResponseBodyOrganizer = CreateEventResponseBodyOrganizer;
class CreateEventResponseBodyRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            firstDayOfWeek: 'firstDayOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            firstDayOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.CreateEventResponseBodyRecurrencePattern = CreateEventResponseBodyRecurrencePattern;
class CreateEventResponseBodyRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.CreateEventResponseBodyRecurrenceRange = CreateEventResponseBodyRecurrenceRange;
class CreateEventResponseBodyRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: CreateEventResponseBodyRecurrencePattern,
            range: CreateEventResponseBodyRecurrenceRange,
        };
    }
}
exports.CreateEventResponseBodyRecurrence = CreateEventResponseBodyRecurrence;
class CreateEventResponseBodyReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'string',
        };
    }
}
exports.CreateEventResponseBodyReminders = CreateEventResponseBodyReminders;
class CreateEventResponseBodyRichTextDescription extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
        };
    }
    static types() {
        return {
            text: 'string',
        };
    }
}
exports.CreateEventResponseBodyRichTextDescription = CreateEventResponseBodyRichTextDescription;
class CreateEventResponseBodyStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.CreateEventResponseBodyStart = CreateEventResponseBodyStart;
class CreateEventResponseBodyUiConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            uiName: 'uiName',
            uiStatus: 'uiStatus',
        };
    }
    static types() {
        return {
            uiName: 'string',
            uiStatus: 'string',
        };
    }
}
exports.CreateEventResponseBodyUiConfigs = CreateEventResponseBodyUiConfigs;
class CreateEventByMeRequestAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            isOptional: 'isOptional',
        };
    }
    static types() {
        return {
            id: 'string',
            isOptional: 'boolean',
        };
    }
}
exports.CreateEventByMeRequestAttendees = CreateEventByMeRequestAttendees;
class CreateEventByMeRequestEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.CreateEventByMeRequestEnd = CreateEventByMeRequestEnd;
class CreateEventByMeRequestLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            displayName: 'string',
        };
    }
}
exports.CreateEventByMeRequestLocation = CreateEventByMeRequestLocation;
class CreateEventByMeRequestOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'type',
        };
    }
    static types() {
        return {
            type: 'string',
        };
    }
}
exports.CreateEventByMeRequestOnlineMeetingInfo = CreateEventByMeRequestOnlineMeetingInfo;
class CreateEventByMeRequestRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            firstDayOfWeek: 'firstDayOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            firstDayOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.CreateEventByMeRequestRecurrencePattern = CreateEventByMeRequestRecurrencePattern;
class CreateEventByMeRequestRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.CreateEventByMeRequestRecurrenceRange = CreateEventByMeRequestRecurrenceRange;
class CreateEventByMeRequestRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: CreateEventByMeRequestRecurrencePattern,
            range: CreateEventByMeRequestRecurrenceRange,
        };
    }
}
exports.CreateEventByMeRequestRecurrence = CreateEventByMeRequestRecurrence;
class CreateEventByMeRequestReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'number',
        };
    }
}
exports.CreateEventByMeRequestReminders = CreateEventByMeRequestReminders;
class CreateEventByMeRequestRichTextDescription extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
        };
    }
    static types() {
        return {
            text: 'string',
        };
    }
}
exports.CreateEventByMeRequestRichTextDescription = CreateEventByMeRequestRichTextDescription;
class CreateEventByMeRequestStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.CreateEventByMeRequestStart = CreateEventByMeRequestStart;
class CreateEventByMeRequestUiConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            uiName: 'uiName',
            uiStatus: 'uiStatus',
        };
    }
    static types() {
        return {
            uiName: 'string',
            uiStatus: 'string',
        };
    }
}
exports.CreateEventByMeRequestUiConfigs = CreateEventByMeRequestUiConfigs;
class CreateEventByMeResponseBodyAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            isOptional: 'isOptional',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            isOptional: 'boolean',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.CreateEventByMeResponseBodyAttendees = CreateEventByMeResponseBodyAttendees;
class CreateEventByMeResponseBodyEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.CreateEventByMeResponseBodyEnd = CreateEventByMeResponseBodyEnd;
class CreateEventByMeResponseBodyLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            displayName: 'string',
        };
    }
}
exports.CreateEventByMeResponseBodyLocation = CreateEventByMeResponseBodyLocation;
class CreateEventByMeResponseBodyOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conferenceId: 'conferenceId',
            extraInfo: 'extraInfo',
            type: 'type',
            url: 'url',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            extraInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            type: 'string',
            url: 'string',
        };
    }
}
exports.CreateEventByMeResponseBodyOnlineMeetingInfo = CreateEventByMeResponseBodyOnlineMeetingInfo;
class CreateEventByMeResponseBodyOrganizer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.CreateEventByMeResponseBodyOrganizer = CreateEventByMeResponseBodyOrganizer;
class CreateEventByMeResponseBodyRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            firstDayOfWeek: 'firstDayOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            firstDayOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.CreateEventByMeResponseBodyRecurrencePattern = CreateEventByMeResponseBodyRecurrencePattern;
class CreateEventByMeResponseBodyRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.CreateEventByMeResponseBodyRecurrenceRange = CreateEventByMeResponseBodyRecurrenceRange;
class CreateEventByMeResponseBodyRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: CreateEventByMeResponseBodyRecurrencePattern,
            range: CreateEventByMeResponseBodyRecurrenceRange,
        };
    }
}
exports.CreateEventByMeResponseBodyRecurrence = CreateEventByMeResponseBodyRecurrence;
class CreateEventByMeResponseBodyReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'string',
        };
    }
}
exports.CreateEventByMeResponseBodyReminders = CreateEventByMeResponseBodyReminders;
class CreateEventByMeResponseBodyRichTextDescription extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
        };
    }
    static types() {
        return {
            text: 'string',
        };
    }
}
exports.CreateEventByMeResponseBodyRichTextDescription = CreateEventByMeResponseBodyRichTextDescription;
class CreateEventByMeResponseBodyStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.CreateEventByMeResponseBodyStart = CreateEventByMeResponseBodyStart;
class CreateEventByMeResponseBodyUiConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            uiName: 'uiName',
            uiStatus: 'uiStatus',
        };
    }
    static types() {
        return {
            uiName: 'string',
            uiStatus: 'string',
        };
    }
}
exports.CreateEventByMeResponseBodyUiConfigs = CreateEventByMeResponseBodyUiConfigs;
class CreateSubscribedCalendarRequestSubscribeScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpIds: 'corpIds',
            openConversationIds: 'openConversationIds',
            unionIds: 'unionIds',
        };
    }
    static types() {
        return {
            corpIds: { 'type': 'array', 'itemType': 'string' },
            openConversationIds: { 'type': 'array', 'itemType': 'string' },
            unionIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateSubscribedCalendarRequestSubscribeScope = CreateSubscribedCalendarRequestSubscribeScope;
class GetEventResponseBodyAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            isOptional: 'isOptional',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            isOptional: 'boolean',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.GetEventResponseBodyAttendees = GetEventResponseBodyAttendees;
class GetEventResponseBodyCategories extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            displayName: 'string',
        };
    }
}
exports.GetEventResponseBodyCategories = GetEventResponseBodyCategories;
class GetEventResponseBodyEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.GetEventResponseBodyEnd = GetEventResponseBodyEnd;
class GetEventResponseBodyExtendedPropertiesSharedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            belongCorpId: 'belongCorpId',
            sourceOpenCid: 'sourceOpenCid',
        };
    }
    static types() {
        return {
            belongCorpId: 'string',
            sourceOpenCid: 'string',
        };
    }
}
exports.GetEventResponseBodyExtendedPropertiesSharedProperties = GetEventResponseBodyExtendedPropertiesSharedProperties;
class GetEventResponseBodyExtendedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sharedProperties: 'sharedProperties',
        };
    }
    static types() {
        return {
            sharedProperties: GetEventResponseBodyExtendedPropertiesSharedProperties,
        };
    }
}
exports.GetEventResponseBodyExtendedProperties = GetEventResponseBodyExtendedProperties;
class GetEventResponseBodyLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            meetingRooms: 'meetingRooms',
        };
    }
    static types() {
        return {
            displayName: 'string',
            meetingRooms: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetEventResponseBodyLocation = GetEventResponseBodyLocation;
class GetEventResponseBodyMeetingRooms extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            responseStatus: 'responseStatus',
            roomId: 'roomId',
        };
    }
    static types() {
        return {
            displayName: 'string',
            responseStatus: 'string',
            roomId: 'string',
        };
    }
}
exports.GetEventResponseBodyMeetingRooms = GetEventResponseBodyMeetingRooms;
class GetEventResponseBodyOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conferenceId: 'conferenceId',
            extraInfo: 'extraInfo',
            type: 'type',
            url: 'url',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            extraInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            type: 'string',
            url: 'string',
        };
    }
}
exports.GetEventResponseBodyOnlineMeetingInfo = GetEventResponseBodyOnlineMeetingInfo;
class GetEventResponseBodyOrganizer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.GetEventResponseBodyOrganizer = GetEventResponseBodyOrganizer;
class GetEventResponseBodyOriginStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dateTime: 'dateTime',
        };
    }
    static types() {
        return {
            dateTime: 'string',
        };
    }
}
exports.GetEventResponseBodyOriginStart = GetEventResponseBodyOriginStart;
class GetEventResponseBodyRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            firstDayOfWeek: 'firstDayOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            firstDayOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.GetEventResponseBodyRecurrencePattern = GetEventResponseBodyRecurrencePattern;
class GetEventResponseBodyRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.GetEventResponseBodyRecurrenceRange = GetEventResponseBodyRecurrenceRange;
class GetEventResponseBodyRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: GetEventResponseBodyRecurrencePattern,
            range: GetEventResponseBodyRecurrenceRange,
        };
    }
}
exports.GetEventResponseBodyRecurrence = GetEventResponseBodyRecurrence;
class GetEventResponseBodyReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'string',
        };
    }
}
exports.GetEventResponseBodyReminders = GetEventResponseBodyReminders;
class GetEventResponseBodyRichTextDescription extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
        };
    }
    static types() {
        return {
            text: 'string',
        };
    }
}
exports.GetEventResponseBodyRichTextDescription = GetEventResponseBodyRichTextDescription;
class GetEventResponseBodyStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.GetEventResponseBodyStart = GetEventResponseBodyStart;
class GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd = GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd;
class GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer = GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer;
class GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart = GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart;
class GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            eventId: 'eventId',
            organizer: 'organizer',
            start: 'start',
            status: 'status',
        };
    }
    static types() {
        return {
            end: GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd,
            eventId: 'string',
            organizer: GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer,
            start: GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart,
            status: 'string',
        };
    }
}
exports.GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems = GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems;
class GetMeetingRoomsScheduleResponseBodyScheduleInformation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            error: 'error',
            roomId: 'roomId',
            scheduleItems: 'scheduleItems',
        };
    }
    static types() {
        return {
            error: 'string',
            roomId: 'string',
            scheduleItems: { 'type': 'array', 'itemType': GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems },
        };
    }
}
exports.GetMeetingRoomsScheduleResponseBodyScheduleInformation = GetMeetingRoomsScheduleResponseBodyScheduleInformation;
class GetScheduleResponseBodyScheduleInformationScheduleItemsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.GetScheduleResponseBodyScheduleInformationScheduleItemsEnd = GetScheduleResponseBodyScheduleInformationScheduleItemsEnd;
class GetScheduleResponseBodyScheduleInformationScheduleItemsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.GetScheduleResponseBodyScheduleInformationScheduleItemsStart = GetScheduleResponseBodyScheduleInformationScheduleItemsStart;
class GetScheduleResponseBodyScheduleInformationScheduleItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            end: 'end',
            start: 'start',
            status: 'status',
        };
    }
    static types() {
        return {
            end: GetScheduleResponseBodyScheduleInformationScheduleItemsEnd,
            start: GetScheduleResponseBodyScheduleInformationScheduleItemsStart,
            status: 'string',
        };
    }
}
exports.GetScheduleResponseBodyScheduleInformationScheduleItems = GetScheduleResponseBodyScheduleInformationScheduleItems;
class GetScheduleResponseBodyScheduleInformation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            error: 'error',
            scheduleItems: 'scheduleItems',
            userId: 'userId',
        };
    }
    static types() {
        return {
            error: 'string',
            scheduleItems: { 'type': 'array', 'itemType': GetScheduleResponseBodyScheduleInformationScheduleItems },
            userId: 'string',
        };
    }
}
exports.GetScheduleResponseBodyScheduleInformation = GetScheduleResponseBodyScheduleInformation;
class GetSignInListResponseBodyUsers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            checkInTime: 'checkInTime',
            displayName: 'displayName',
            userId: 'userId',
        };
    }
    static types() {
        return {
            checkInTime: 'number',
            displayName: 'string',
            userId: 'string',
        };
    }
}
exports.GetSignInListResponseBodyUsers = GetSignInListResponseBodyUsers;
class GetSignOutListResponseBodyUsers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            checkOutTime: 'checkOutTime',
            displayName: 'displayName',
            userId: 'userId',
        };
    }
    static types() {
        return {
            checkOutTime: 'number',
            displayName: 'string',
            userId: 'string',
        };
    }
}
exports.GetSignOutListResponseBodyUsers = GetSignOutListResponseBodyUsers;
class GetSubscribedCalendarResponseBodySubscribeScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpIds: 'corpIds',
            openConversationIds: 'openConversationIds',
            unionIds: 'unionIds',
        };
    }
    static types() {
        return {
            corpIds: { 'type': 'array', 'itemType': 'string' },
            openConversationIds: { 'type': 'array', 'itemType': 'string' },
            unionIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetSubscribedCalendarResponseBodySubscribeScope = GetSubscribedCalendarResponseBodySubscribeScope;
class ListAclsResponseBodyAclsScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            scopeType: 'scopeType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            scopeType: 'string',
            userId: 'string',
        };
    }
}
exports.ListAclsResponseBodyAclsScope = ListAclsResponseBodyAclsScope;
class ListAclsResponseBodyAcls extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aclId: 'aclId',
            privilege: 'privilege',
            scope: 'scope',
        };
    }
    static types() {
        return {
            aclId: 'string',
            privilege: 'string',
            scope: ListAclsResponseBodyAclsScope,
        };
    }
}
exports.ListAclsResponseBodyAcls = ListAclsResponseBodyAcls;
class ListAttendeesResponseBodyAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            isOptional: 'isOptional',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            isOptional: 'boolean',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.ListAttendeesResponseBodyAttendees = ListAttendeesResponseBodyAttendees;
class ListCalendarsResponseBodyResponseCalendars extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            eTag: 'eTag',
            id: 'id',
            privilege: 'privilege',
            summary: 'summary',
            timeZone: 'timeZone',
            type: 'type',
        };
    }
    static types() {
        return {
            description: 'string',
            eTag: 'string',
            id: 'string',
            privilege: 'string',
            summary: 'string',
            timeZone: 'string',
            type: 'string',
        };
    }
}
exports.ListCalendarsResponseBodyResponseCalendars = ListCalendarsResponseBodyResponseCalendars;
class ListCalendarsResponseBodyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            calendars: 'calendars',
        };
    }
    static types() {
        return {
            calendars: { 'type': 'array', 'itemType': ListCalendarsResponseBodyResponseCalendars },
        };
    }
}
exports.ListCalendarsResponseBodyResponse = ListCalendarsResponseBodyResponse;
class ListEventsResponseBodyEventsAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            isOptional: 'isOptional',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            isOptional: 'boolean',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.ListEventsResponseBodyEventsAttendees = ListEventsResponseBodyEventsAttendees;
class ListEventsResponseBodyEventsCategories extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            displayName: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsCategories = ListEventsResponseBodyEventsCategories;
class ListEventsResponseBodyEventsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsEnd = ListEventsResponseBodyEventsEnd;
class ListEventsResponseBodyEventsExtendedPropertiesSharedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            belongCorpId: 'belongCorpId',
            sourceOpenCid: 'sourceOpenCid',
        };
    }
    static types() {
        return {
            belongCorpId: 'string',
            sourceOpenCid: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsExtendedPropertiesSharedProperties = ListEventsResponseBodyEventsExtendedPropertiesSharedProperties;
class ListEventsResponseBodyEventsExtendedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sharedProperties: 'sharedProperties',
        };
    }
    static types() {
        return {
            sharedProperties: ListEventsResponseBodyEventsExtendedPropertiesSharedProperties,
        };
    }
}
exports.ListEventsResponseBodyEventsExtendedProperties = ListEventsResponseBodyEventsExtendedProperties;
class ListEventsResponseBodyEventsLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            meetingRooms: 'meetingRooms',
        };
    }
    static types() {
        return {
            displayName: 'string',
            meetingRooms: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListEventsResponseBodyEventsLocation = ListEventsResponseBodyEventsLocation;
class ListEventsResponseBodyEventsMeetingRooms extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            responseStatus: 'responseStatus',
            roomId: 'roomId',
        };
    }
    static types() {
        return {
            displayName: 'string',
            responseStatus: 'string',
            roomId: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsMeetingRooms = ListEventsResponseBodyEventsMeetingRooms;
class ListEventsResponseBodyEventsOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conferenceId: 'conferenceId',
            extraInfo: 'extraInfo',
            type: 'type',
            url: 'url',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            extraInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            type: 'string',
            url: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsOnlineMeetingInfo = ListEventsResponseBodyEventsOnlineMeetingInfo;
class ListEventsResponseBodyEventsOrganizer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.ListEventsResponseBodyEventsOrganizer = ListEventsResponseBodyEventsOrganizer;
class ListEventsResponseBodyEventsOriginStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dateTime: 'dateTime',
        };
    }
    static types() {
        return {
            dateTime: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsOriginStart = ListEventsResponseBodyEventsOriginStart;
class ListEventsResponseBodyEventsRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            firstDayOfWeek: 'firstDayOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            firstDayOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsRecurrencePattern = ListEventsResponseBodyEventsRecurrencePattern;
class ListEventsResponseBodyEventsRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsRecurrenceRange = ListEventsResponseBodyEventsRecurrenceRange;
class ListEventsResponseBodyEventsRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: ListEventsResponseBodyEventsRecurrencePattern,
            range: ListEventsResponseBodyEventsRecurrenceRange,
        };
    }
}
exports.ListEventsResponseBodyEventsRecurrence = ListEventsResponseBodyEventsRecurrence;
class ListEventsResponseBodyEventsReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsReminders = ListEventsResponseBodyEventsReminders;
class ListEventsResponseBodyEventsRichTextDescription extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
        };
    }
    static types() {
        return {
            text: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsRichTextDescription = ListEventsResponseBodyEventsRichTextDescription;
class ListEventsResponseBodyEventsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.ListEventsResponseBodyEventsStart = ListEventsResponseBodyEventsStart;
class ListEventsResponseBodyEvents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            categories: 'categories',
            createTime: 'createTime',
            description: 'description',
            end: 'end',
            extendedProperties: 'extendedProperties',
            id: 'id',
            isAllDay: 'isAllDay',
            location: 'location',
            meetingRooms: 'meetingRooms',
            onlineMeetingInfo: 'onlineMeetingInfo',
            organizer: 'organizer',
            originStart: 'originStart',
            recurrence: 'recurrence',
            reminders: 'reminders',
            richTextDescription: 'richTextDescription',
            seriesMasterId: 'seriesMasterId',
            start: 'start',
            status: 'status',
            summary: 'summary',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': ListEventsResponseBodyEventsAttendees },
            categories: { 'type': 'array', 'itemType': ListEventsResponseBodyEventsCategories },
            createTime: 'string',
            description: 'string',
            end: ListEventsResponseBodyEventsEnd,
            extendedProperties: ListEventsResponseBodyEventsExtendedProperties,
            id: 'string',
            isAllDay: 'boolean',
            location: ListEventsResponseBodyEventsLocation,
            meetingRooms: { 'type': 'array', 'itemType': ListEventsResponseBodyEventsMeetingRooms },
            onlineMeetingInfo: ListEventsResponseBodyEventsOnlineMeetingInfo,
            organizer: ListEventsResponseBodyEventsOrganizer,
            originStart: ListEventsResponseBodyEventsOriginStart,
            recurrence: ListEventsResponseBodyEventsRecurrence,
            reminders: { 'type': 'array', 'itemType': ListEventsResponseBodyEventsReminders },
            richTextDescription: ListEventsResponseBodyEventsRichTextDescription,
            seriesMasterId: 'string',
            start: ListEventsResponseBodyEventsStart,
            status: 'string',
            summary: 'string',
            updateTime: 'string',
        };
    }
}
exports.ListEventsResponseBodyEvents = ListEventsResponseBodyEvents;
class ListEventsInstancesResponseBodyEventsAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            isOptional: 'isOptional',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            isOptional: 'boolean',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsAttendees = ListEventsInstancesResponseBodyEventsAttendees;
class ListEventsInstancesResponseBodyEventsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsEnd = ListEventsInstancesResponseBodyEventsEnd;
class ListEventsInstancesResponseBodyEventsExtendedPropertiesSharedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sourceOpenCid: 'sourceOpenCid',
        };
    }
    static types() {
        return {
            sourceOpenCid: 'string',
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsExtendedPropertiesSharedProperties = ListEventsInstancesResponseBodyEventsExtendedPropertiesSharedProperties;
class ListEventsInstancesResponseBodyEventsExtendedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sharedProperties: 'sharedProperties',
        };
    }
    static types() {
        return {
            sharedProperties: ListEventsInstancesResponseBodyEventsExtendedPropertiesSharedProperties,
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsExtendedProperties = ListEventsInstancesResponseBodyEventsExtendedProperties;
class ListEventsInstancesResponseBodyEventsLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            meetingRooms: 'meetingRooms',
        };
    }
    static types() {
        return {
            displayName: 'string',
            meetingRooms: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsLocation = ListEventsInstancesResponseBodyEventsLocation;
class ListEventsInstancesResponseBodyEventsOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conferenceId: 'conferenceId',
            type: 'type',
            url: 'url',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            type: 'string',
            url: 'string',
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsOnlineMeetingInfo = ListEventsInstancesResponseBodyEventsOnlineMeetingInfo;
class ListEventsInstancesResponseBodyEventsOrganizer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsOrganizer = ListEventsInstancesResponseBodyEventsOrganizer;
class ListEventsInstancesResponseBodyEventsRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsRecurrencePattern = ListEventsInstancesResponseBodyEventsRecurrencePattern;
class ListEventsInstancesResponseBodyEventsRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsRecurrenceRange = ListEventsInstancesResponseBodyEventsRecurrenceRange;
class ListEventsInstancesResponseBodyEventsRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: ListEventsInstancesResponseBodyEventsRecurrencePattern,
            range: ListEventsInstancesResponseBodyEventsRecurrenceRange,
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsRecurrence = ListEventsInstancesResponseBodyEventsRecurrence;
class ListEventsInstancesResponseBodyEventsReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'string',
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsReminders = ListEventsInstancesResponseBodyEventsReminders;
class ListEventsInstancesResponseBodyEventsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.ListEventsInstancesResponseBodyEventsStart = ListEventsInstancesResponseBodyEventsStart;
class ListEventsInstancesResponseBodyEvents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            createTime: 'createTime',
            description: 'description',
            end: 'end',
            extendedProperties: 'extendedProperties',
            id: 'id',
            isAllDay: 'isAllDay',
            location: 'location',
            onlineMeetingInfo: 'onlineMeetingInfo',
            organizer: 'organizer',
            recurrence: 'recurrence',
            reminders: 'reminders',
            seriesMasterId: 'seriesMasterId',
            start: 'start',
            status: 'status',
            summary: 'summary',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': ListEventsInstancesResponseBodyEventsAttendees },
            createTime: 'string',
            description: 'string',
            end: ListEventsInstancesResponseBodyEventsEnd,
            extendedProperties: ListEventsInstancesResponseBodyEventsExtendedProperties,
            id: 'string',
            isAllDay: 'boolean',
            location: ListEventsInstancesResponseBodyEventsLocation,
            onlineMeetingInfo: ListEventsInstancesResponseBodyEventsOnlineMeetingInfo,
            organizer: ListEventsInstancesResponseBodyEventsOrganizer,
            recurrence: ListEventsInstancesResponseBodyEventsRecurrence,
            reminders: { 'type': 'array', 'itemType': ListEventsInstancesResponseBodyEventsReminders },
            seriesMasterId: 'string',
            start: ListEventsInstancesResponseBodyEventsStart,
            status: 'string',
            summary: 'string',
            updateTime: 'string',
        };
    }
}
exports.ListEventsInstancesResponseBodyEvents = ListEventsInstancesResponseBodyEvents;
class ListEventsViewResponseBodyEventsAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            isOptional: 'isOptional',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            isOptional: 'boolean',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.ListEventsViewResponseBodyEventsAttendees = ListEventsViewResponseBodyEventsAttendees;
class ListEventsViewResponseBodyEventsCategories extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            displayName: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsCategories = ListEventsViewResponseBodyEventsCategories;
class ListEventsViewResponseBodyEventsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsEnd = ListEventsViewResponseBodyEventsEnd;
class ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            belongCorpId: 'belongCorpId',
            sourceOpenCid: 'sourceOpenCid',
        };
    }
    static types() {
        return {
            belongCorpId: 'string',
            sourceOpenCid: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties = ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties;
class ListEventsViewResponseBodyEventsExtendedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sharedProperties: 'sharedProperties',
        };
    }
    static types() {
        return {
            sharedProperties: ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties,
        };
    }
}
exports.ListEventsViewResponseBodyEventsExtendedProperties = ListEventsViewResponseBodyEventsExtendedProperties;
class ListEventsViewResponseBodyEventsLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            meetingRooms: 'meetingRooms',
        };
    }
    static types() {
        return {
            displayName: 'string',
            meetingRooms: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListEventsViewResponseBodyEventsLocation = ListEventsViewResponseBodyEventsLocation;
class ListEventsViewResponseBodyEventsMeetingRooms extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            responseStatus: 'responseStatus',
            roomId: 'roomId',
        };
    }
    static types() {
        return {
            displayName: 'string',
            responseStatus: 'string',
            roomId: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsMeetingRooms = ListEventsViewResponseBodyEventsMeetingRooms;
class ListEventsViewResponseBodyEventsOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conferenceId: 'conferenceId',
            extraInfo: 'extraInfo',
            type: 'type',
            url: 'url',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            extraInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            type: 'string',
            url: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsOnlineMeetingInfo = ListEventsViewResponseBodyEventsOnlineMeetingInfo;
class ListEventsViewResponseBodyEventsOrganizer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.ListEventsViewResponseBodyEventsOrganizer = ListEventsViewResponseBodyEventsOrganizer;
class ListEventsViewResponseBodyEventsOriginStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dateTime: 'dateTime',
        };
    }
    static types() {
        return {
            dateTime: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsOriginStart = ListEventsViewResponseBodyEventsOriginStart;
class ListEventsViewResponseBodyEventsRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            firstDayOfWeek: 'firstDayOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            firstDayOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsRecurrencePattern = ListEventsViewResponseBodyEventsRecurrencePattern;
class ListEventsViewResponseBodyEventsRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsRecurrenceRange = ListEventsViewResponseBodyEventsRecurrenceRange;
class ListEventsViewResponseBodyEventsRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: ListEventsViewResponseBodyEventsRecurrencePattern,
            range: ListEventsViewResponseBodyEventsRecurrenceRange,
        };
    }
}
exports.ListEventsViewResponseBodyEventsRecurrence = ListEventsViewResponseBodyEventsRecurrence;
class ListEventsViewResponseBodyEventsRichTextDescription extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
        };
    }
    static types() {
        return {
            text: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsRichTextDescription = ListEventsViewResponseBodyEventsRichTextDescription;
class ListEventsViewResponseBodyEventsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEventsStart = ListEventsViewResponseBodyEventsStart;
class ListEventsViewResponseBodyEvents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            categories: 'categories',
            createTime: 'createTime',
            description: 'description',
            end: 'end',
            extendedProperties: 'extendedProperties',
            id: 'id',
            isAllDay: 'isAllDay',
            location: 'location',
            meetingRooms: 'meetingRooms',
            onlineMeetingInfo: 'onlineMeetingInfo',
            organizer: 'organizer',
            originStart: 'originStart',
            recurrence: 'recurrence',
            richTextDescription: 'richTextDescription',
            seriesMasterId: 'seriesMasterId',
            start: 'start',
            status: 'status',
            summary: 'summary',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': ListEventsViewResponseBodyEventsAttendees },
            categories: { 'type': 'array', 'itemType': ListEventsViewResponseBodyEventsCategories },
            createTime: 'string',
            description: 'string',
            end: ListEventsViewResponseBodyEventsEnd,
            extendedProperties: ListEventsViewResponseBodyEventsExtendedProperties,
            id: 'string',
            isAllDay: 'boolean',
            location: ListEventsViewResponseBodyEventsLocation,
            meetingRooms: { 'type': 'array', 'itemType': ListEventsViewResponseBodyEventsMeetingRooms },
            onlineMeetingInfo: ListEventsViewResponseBodyEventsOnlineMeetingInfo,
            organizer: ListEventsViewResponseBodyEventsOrganizer,
            originStart: ListEventsViewResponseBodyEventsOriginStart,
            recurrence: ListEventsViewResponseBodyEventsRecurrence,
            richTextDescription: ListEventsViewResponseBodyEventsRichTextDescription,
            seriesMasterId: 'string',
            start: ListEventsViewResponseBodyEventsStart,
            status: 'string',
            summary: 'string',
            updateTime: 'string',
        };
    }
}
exports.ListEventsViewResponseBodyEvents = ListEventsViewResponseBodyEvents;
class ListInstancesResponseBodyEventsAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            isOptional: 'isOptional',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            isOptional: 'boolean',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.ListInstancesResponseBodyEventsAttendees = ListInstancesResponseBodyEventsAttendees;
class ListInstancesResponseBodyEventsEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEventsEnd = ListInstancesResponseBodyEventsEnd;
class ListInstancesResponseBodyEventsExtendedPropertiesSharedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            belongCorpId: 'belongCorpId',
            sourceOpenCid: 'sourceOpenCid',
        };
    }
    static types() {
        return {
            belongCorpId: 'string',
            sourceOpenCid: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEventsExtendedPropertiesSharedProperties = ListInstancesResponseBodyEventsExtendedPropertiesSharedProperties;
class ListInstancesResponseBodyEventsExtendedProperties extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sharedProperties: 'sharedProperties',
        };
    }
    static types() {
        return {
            sharedProperties: ListInstancesResponseBodyEventsExtendedPropertiesSharedProperties,
        };
    }
}
exports.ListInstancesResponseBodyEventsExtendedProperties = ListInstancesResponseBodyEventsExtendedProperties;
class ListInstancesResponseBodyEventsLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            displayName: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEventsLocation = ListInstancesResponseBodyEventsLocation;
class ListInstancesResponseBodyEventsMeetingRooms extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            responseStatus: 'responseStatus',
            roomId: 'roomId',
        };
    }
    static types() {
        return {
            displayName: 'string',
            responseStatus: 'string',
            roomId: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEventsMeetingRooms = ListInstancesResponseBodyEventsMeetingRooms;
class ListInstancesResponseBodyEventsOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conferenceId: 'conferenceId',
            extraInfo: 'extraInfo',
            type: 'type',
            url: 'url',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            extraInfo: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            type: 'string',
            url: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEventsOnlineMeetingInfo = ListInstancesResponseBodyEventsOnlineMeetingInfo;
class ListInstancesResponseBodyEventsOrganizer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.ListInstancesResponseBodyEventsOrganizer = ListInstancesResponseBodyEventsOrganizer;
class ListInstancesResponseBodyEventsRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEventsRecurrencePattern = ListInstancesResponseBodyEventsRecurrencePattern;
class ListInstancesResponseBodyEventsRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEventsRecurrenceRange = ListInstancesResponseBodyEventsRecurrenceRange;
class ListInstancesResponseBodyEventsRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: ListInstancesResponseBodyEventsRecurrencePattern,
            range: ListInstancesResponseBodyEventsRecurrenceRange,
        };
    }
}
exports.ListInstancesResponseBodyEventsRecurrence = ListInstancesResponseBodyEventsRecurrence;
class ListInstancesResponseBodyEventsReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEventsReminders = ListInstancesResponseBodyEventsReminders;
class ListInstancesResponseBodyEventsStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEventsStart = ListInstancesResponseBodyEventsStart;
class ListInstancesResponseBodyEvents extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attendees: 'attendees',
            createTime: 'createTime',
            description: 'description',
            end: 'end',
            extendedProperties: 'extendedProperties',
            id: 'id',
            isAllDay: 'isAllDay',
            location: 'location',
            meetingRooms: 'meetingRooms',
            onlineMeetingInfo: 'onlineMeetingInfo',
            organizer: 'organizer',
            recurrence: 'recurrence',
            reminders: 'reminders',
            seriesMasterId: 'seriesMasterId',
            start: 'start',
            status: 'status',
            summary: 'summary',
            updateTime: 'updateTime',
        };
    }
    static types() {
        return {
            attendees: { 'type': 'array', 'itemType': ListInstancesResponseBodyEventsAttendees },
            createTime: 'string',
            description: 'string',
            end: ListInstancesResponseBodyEventsEnd,
            extendedProperties: ListInstancesResponseBodyEventsExtendedProperties,
            id: 'string',
            isAllDay: 'boolean',
            location: ListInstancesResponseBodyEventsLocation,
            meetingRooms: { 'type': 'array', 'itemType': ListInstancesResponseBodyEventsMeetingRooms },
            onlineMeetingInfo: ListInstancesResponseBodyEventsOnlineMeetingInfo,
            organizer: ListInstancesResponseBodyEventsOrganizer,
            recurrence: ListInstancesResponseBodyEventsRecurrence,
            reminders: { 'type': 'array', 'itemType': ListInstancesResponseBodyEventsReminders },
            seriesMasterId: 'string',
            start: ListInstancesResponseBodyEventsStart,
            status: 'string',
            summary: 'string',
            updateTime: 'string',
        };
    }
}
exports.ListInstancesResponseBodyEvents = ListInstancesResponseBodyEvents;
class PatchEventRequestAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            email: 'email',
            id: 'id',
            isOptional: 'isOptional',
        };
    }
    static types() {
        return {
            email: 'string',
            id: 'string',
            isOptional: 'boolean',
        };
    }
}
exports.PatchEventRequestAttendees = PatchEventRequestAttendees;
class PatchEventRequestEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.PatchEventRequestEnd = PatchEventRequestEnd;
class PatchEventRequestLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
        };
    }
    static types() {
        return {
            displayName: 'string',
        };
    }
}
exports.PatchEventRequestLocation = PatchEventRequestLocation;
class PatchEventRequestOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            type: 'type',
        };
    }
    static types() {
        return {
            type: 'string',
        };
    }
}
exports.PatchEventRequestOnlineMeetingInfo = PatchEventRequestOnlineMeetingInfo;
class PatchEventRequestRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            firstDayOfWeek: 'firstDayOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            firstDayOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.PatchEventRequestRecurrencePattern = PatchEventRequestRecurrencePattern;
class PatchEventRequestRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.PatchEventRequestRecurrenceRange = PatchEventRequestRecurrenceRange;
class PatchEventRequestRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: PatchEventRequestRecurrencePattern,
            range: PatchEventRequestRecurrenceRange,
        };
    }
}
exports.PatchEventRequestRecurrence = PatchEventRequestRecurrence;
class PatchEventRequestReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'number',
        };
    }
}
exports.PatchEventRequestReminders = PatchEventRequestReminders;
class PatchEventRequestRichTextDescription extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
        };
    }
    static types() {
        return {
            text: 'string',
        };
    }
}
exports.PatchEventRequestRichTextDescription = PatchEventRequestRichTextDescription;
class PatchEventRequestStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.PatchEventRequestStart = PatchEventRequestStart;
class PatchEventRequestUiConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            uiName: 'uiName',
            uiStatus: 'uiStatus',
        };
    }
    static types() {
        return {
            uiName: 'string',
            uiStatus: 'string',
        };
    }
}
exports.PatchEventRequestUiConfigs = PatchEventRequestUiConfigs;
class PatchEventResponseBodyAttendees extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            isOptional: 'isOptional',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            isOptional: 'boolean',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.PatchEventResponseBodyAttendees = PatchEventResponseBodyAttendees;
class PatchEventResponseBodyEnd extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.PatchEventResponseBodyEnd = PatchEventResponseBodyEnd;
class PatchEventResponseBodyLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            meetingRooms: 'meetingRooms',
        };
    }
    static types() {
        return {
            displayName: 'string',
            meetingRooms: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.PatchEventResponseBodyLocation = PatchEventResponseBodyLocation;
class PatchEventResponseBodyOnlineMeetingInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            conferenceId: 'conferenceId',
            type: 'type',
            url: 'url',
        };
    }
    static types() {
        return {
            conferenceId: 'string',
            type: 'string',
            url: 'string',
        };
    }
}
exports.PatchEventResponseBodyOnlineMeetingInfo = PatchEventResponseBodyOnlineMeetingInfo;
class PatchEventResponseBodyOrganizer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            displayName: 'displayName',
            id: 'id',
            responseStatus: 'responseStatus',
            self: 'self',
        };
    }
    static types() {
        return {
            displayName: 'string',
            id: 'string',
            responseStatus: 'string',
            self: 'boolean',
        };
    }
}
exports.PatchEventResponseBodyOrganizer = PatchEventResponseBodyOrganizer;
class PatchEventResponseBodyRecurrencePattern extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dayOfMonth: 'dayOfMonth',
            daysOfWeek: 'daysOfWeek',
            firstDayOfWeek: 'firstDayOfWeek',
            index: 'index',
            interval: 'interval',
            type: 'type',
        };
    }
    static types() {
        return {
            dayOfMonth: 'number',
            daysOfWeek: 'string',
            firstDayOfWeek: 'string',
            index: 'string',
            interval: 'number',
            type: 'string',
        };
    }
}
exports.PatchEventResponseBodyRecurrencePattern = PatchEventResponseBodyRecurrencePattern;
class PatchEventResponseBodyRecurrenceRange extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            numberOfOccurrences: 'numberOfOccurrences',
            type: 'type',
        };
    }
    static types() {
        return {
            endDate: 'string',
            numberOfOccurrences: 'number',
            type: 'string',
        };
    }
}
exports.PatchEventResponseBodyRecurrenceRange = PatchEventResponseBodyRecurrenceRange;
class PatchEventResponseBodyRecurrence extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pattern: 'pattern',
            range: 'range',
        };
    }
    static types() {
        return {
            pattern: PatchEventResponseBodyRecurrencePattern,
            range: PatchEventResponseBodyRecurrenceRange,
        };
    }
}
exports.PatchEventResponseBodyRecurrence = PatchEventResponseBodyRecurrence;
class PatchEventResponseBodyReminders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            method: 'method',
            minutes: 'minutes',
        };
    }
    static types() {
        return {
            method: 'string',
            minutes: 'string',
        };
    }
}
exports.PatchEventResponseBodyReminders = PatchEventResponseBodyReminders;
class PatchEventResponseBodyRichTextDescription extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            text: 'text',
        };
    }
    static types() {
        return {
            text: 'string',
        };
    }
}
exports.PatchEventResponseBodyRichTextDescription = PatchEventResponseBodyRichTextDescription;
class PatchEventResponseBodyStart extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            date: 'date',
            dateTime: 'dateTime',
            timeZone: 'timeZone',
        };
    }
    static types() {
        return {
            date: 'string',
            dateTime: 'string',
            timeZone: 'string',
        };
    }
}
exports.PatchEventResponseBodyStart = PatchEventResponseBodyStart;
class PatchEventResponseBodyUiConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            uiName: 'uiName',
            uiStatus: 'uiStatus',
        };
    }
    static types() {
        return {
            uiName: 'string',
            uiStatus: 'string',
        };
    }
}
exports.PatchEventResponseBodyUiConfigs = PatchEventResponseBodyUiConfigs;
class RemoveAttendeeRequestAttendeesToRemove extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.RemoveAttendeeRequestAttendeesToRemove = RemoveAttendeeRequestAttendeesToRemove;
class RemoveMeetingRoomsRequestMeetingRoomsToRemove extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roomId: 'roomId',
        };
    }
    static types() {
        return {
            roomId: 'string',
        };
    }
}
exports.RemoveMeetingRoomsRequestMeetingRoomsToRemove = RemoveMeetingRoomsRequestMeetingRoomsToRemove;
class UpdateSubscribedCalendarsRequestSubscribeScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpIds: 'corpIds',
            openConversationIds: 'openConversationIds',
            unionIds: 'unionIds',
        };
    }
    static types() {
        return {
            corpIds: { 'type': 'array', 'itemType': 'string' },
            openConversationIds: { 'type': 'array', 'itemType': 'string' },
            unionIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UpdateSubscribedCalendarsRequestSubscribeScope = UpdateSubscribedCalendarsRequestSubscribeScope;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addAttendeeWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attendeesToAdd)) {
            body["attendeesToAdd"] = request.attendeesToAdd;
        }
        if (!tea_util_1.default.isUnset(request.chatNotification)) {
            body["chatNotification"] = request.chatNotification;
        }
        if (!tea_util_1.default.isUnset(request.pushNotification)) {
            body["pushNotification"] = request.pushNotification;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddAttendee",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/attendees`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddAttendeeResponse({}));
    }
    async addAttendee(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddAttendeeHeaders({});
        return await this.addAttendeeWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async addMeetingRoomsWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.meetingRoomsToAdd)) {
            body["meetingRoomsToAdd"] = request.meetingRoomsToAdd;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddMeetingRooms",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/meetingRooms`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddMeetingRoomsResponse({}));
    }
    async addMeetingRooms(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddMeetingRoomsHeaders({});
        return await this.addMeetingRoomsWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async checkInWithOptions(userId, calendarId, eventId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "CheckIn",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/checkIn`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CheckInResponse({}));
    }
    async checkIn(userId, calendarId, eventId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckInHeaders({});
        return await this.checkInWithOptions(userId, calendarId, eventId, headers, runtime);
    }
    async convertLegacyEventIdWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.legacyEventIds)) {
            body["legacyEventIds"] = request.legacyEventIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ConvertLegacyEventId",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/legacyEventIds/convert`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ConvertLegacyEventIdResponse({}));
    }
    async convertLegacyEventId(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ConvertLegacyEventIdHeaders({});
        return await this.convertLegacyEventIdWithOptions(userId, request, headers, runtime);
    }
    async createAclsWithOptions(userId, calendarId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.privilege)) {
            body["privilege"] = request.privilege;
        }
        if (!tea_util_1.default.isUnset(request.scope)) {
            body["scope"] = request.scope;
        }
        if (!tea_util_1.default.isUnset(request.sendMsg)) {
            body["sendMsg"] = request.sendMsg;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateAcls",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/acls`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateAclsResponse({}));
    }
    async createAcls(userId, calendarId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateAclsHeaders({});
        return await this.createAclsWithOptions(userId, calendarId, request, headers, runtime);
    }
    async createEventWithOptions(userId, calendarId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attendees)) {
            body["attendees"] = request.attendees;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.end)) {
            body["end"] = request.end;
        }
        if (!tea_util_1.default.isUnset(request.extra)) {
            body["extra"] = request.extra;
        }
        if (!tea_util_1.default.isUnset(request.isAllDay)) {
            body["isAllDay"] = request.isAllDay;
        }
        if (!tea_util_1.default.isUnset(request.location)) {
            body["location"] = request.location;
        }
        if (!tea_util_1.default.isUnset(request.onlineMeetingInfo)) {
            body["onlineMeetingInfo"] = request.onlineMeetingInfo;
        }
        if (!tea_util_1.default.isUnset(request.recurrence)) {
            body["recurrence"] = request.recurrence;
        }
        if (!tea_util_1.default.isUnset(request.reminders)) {
            body["reminders"] = request.reminders;
        }
        if (!tea_util_1.default.isUnset(request.richTextDescription)) {
            body["richTextDescription"] = request.richTextDescription;
        }
        if (!tea_util_1.default.isUnset(request.start)) {
            body["start"] = request.start;
        }
        if (!tea_util_1.default.isUnset(request.summary)) {
            body["summary"] = request.summary;
        }
        if (!tea_util_1.default.isUnset(request.uiConfigs)) {
            body["uiConfigs"] = request.uiConfigs;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateEvent",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateEventResponse({}));
    }
    async createEvent(userId, calendarId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateEventHeaders({});
        return await this.createEventWithOptions(userId, calendarId, request, headers, runtime);
    }
    async createEventByMeWithOptions(calendarId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attendees)) {
            body["attendees"] = request.attendees;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.end)) {
            body["end"] = request.end;
        }
        if (!tea_util_1.default.isUnset(request.extra)) {
            body["extra"] = request.extra;
        }
        if (!tea_util_1.default.isUnset(request.isAllDay)) {
            body["isAllDay"] = request.isAllDay;
        }
        if (!tea_util_1.default.isUnset(request.location)) {
            body["location"] = request.location;
        }
        if (!tea_util_1.default.isUnset(request.onlineMeetingInfo)) {
            body["onlineMeetingInfo"] = request.onlineMeetingInfo;
        }
        if (!tea_util_1.default.isUnset(request.recurrence)) {
            body["recurrence"] = request.recurrence;
        }
        if (!tea_util_1.default.isUnset(request.reminders)) {
            body["reminders"] = request.reminders;
        }
        if (!tea_util_1.default.isUnset(request.richTextDescription)) {
            body["richTextDescription"] = request.richTextDescription;
        }
        if (!tea_util_1.default.isUnset(request.start)) {
            body["start"] = request.start;
        }
        if (!tea_util_1.default.isUnset(request.summary)) {
            body["summary"] = request.summary;
        }
        if (!tea_util_1.default.isUnset(request.uiConfigs)) {
            body["uiConfigs"] = request.uiConfigs;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateEventByMe",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/me/calendars/${calendarId}/events`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateEventByMeResponse({}));
    }
    async createEventByMe(calendarId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateEventByMeHeaders({});
        return await this.createEventByMeWithOptions(calendarId, request, headers, runtime);
    }
    async createSubscribedCalendarWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.managers)) {
            body["managers"] = request.managers;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.subscribeScope)) {
            body["subscribeScope"] = request.subscribeScope;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateSubscribedCalendar",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/subscribedCalendars`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateSubscribedCalendarResponse({}));
    }
    async createSubscribedCalendar(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSubscribedCalendarHeaders({});
        return await this.createSubscribedCalendarWithOptions(userId, request, headers, runtime);
    }
    async deleteAclWithOptions(userId, calendarId, aclId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteAcl",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/acls/${aclId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteAclResponse({}));
    }
    async deleteAcl(userId, calendarId, aclId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteAclHeaders({});
        return await this.deleteAclWithOptions(userId, calendarId, aclId, headers, runtime);
    }
    async deleteEventWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pushNotification)) {
            query["pushNotification"] = request.pushNotification;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteEvent",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteEventResponse({}));
    }
    async deleteEvent(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteEventHeaders({});
        return await this.deleteEventWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async deleteSubscribedCalendarWithOptions(userId, calendarId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteSubscribedCalendar",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/subscribedCalendars/${calendarId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteSubscribedCalendarResponse({}));
    }
    async deleteSubscribedCalendar(userId, calendarId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteSubscribedCalendarHeaders({});
        return await this.deleteSubscribedCalendarWithOptions(userId, calendarId, headers, runtime);
    }
    async generateCaldavAccountWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.device)) {
            body["device"] = request.device;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.dingUid)) {
            realHeaders["dingUid"] = tea_util_1.default.toJSONString(headers.dingUid);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GenerateCaldavAccount",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/caldavAccounts`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GenerateCaldavAccountResponse({}));
    }
    async generateCaldavAccount(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GenerateCaldavAccountHeaders({});
        return await this.generateCaldavAccountWithOptions(userId, request, headers, runtime);
    }
    async getEventWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxAttendees)) {
            query["maxAttendees"] = request.maxAttendees;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetEvent",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetEventResponse({}));
    }
    async getEvent(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetEventHeaders({});
        return await this.getEventWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async getMeetingRoomsScheduleWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.roomIds)) {
            body["roomIds"] = request.roomIds;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetMeetingRoomsSchedule",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/meetingRooms/schedules/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMeetingRoomsScheduleResponse({}));
    }
    async getMeetingRoomsSchedule(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMeetingRoomsScheduleHeaders({});
        return await this.getMeetingRoomsScheduleWithOptions(userId, request, headers, runtime);
    }
    async getScheduleWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetSchedule",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/querySchedule`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetScheduleResponse({}));
    }
    async getSchedule(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetScheduleHeaders({});
        return await this.getScheduleWithOptions(userId, request, headers, runtime);
    }
    async getSignInLinkWithOptions(calendarId, userId, eventId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetSignInLink",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/signInLinks`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSignInLinkResponse({}));
    }
    async getSignInLink(calendarId, userId, eventId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSignInLinkHeaders({});
        return await this.getSignInLinkWithOptions(calendarId, userId, eventId, headers, runtime);
    }
    async getSignInListWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSignInList",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/signin`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSignInListResponse({}));
    }
    async getSignInList(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSignInListHeaders({});
        return await this.getSignInListWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async getSignOutLinkWithOptions(calendarId, userId, eventId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetSignOutLink",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/signOutLinks`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSignOutLinkResponse({}));
    }
    async getSignOutLink(calendarId, userId, eventId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSignOutLinkHeaders({});
        return await this.getSignOutLinkWithOptions(calendarId, userId, eventId, headers, runtime);
    }
    async getSignOutListWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSignOutList",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/signOut`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSignOutListResponse({}));
    }
    async getSignOutList(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSignOutListHeaders({});
        return await this.getSignOutListWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async getSubscribedCalendarWithOptions(userId, calendarId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetSubscribedCalendar",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/subscribedCalendars/${calendarId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSubscribedCalendarResponse({}));
    }
    async getSubscribedCalendar(userId, calendarId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSubscribedCalendarHeaders({});
        return await this.getSubscribedCalendarWithOptions(userId, calendarId, headers, runtime);
    }
    async listAclsWithOptions(userId, calendarId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListAcls",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/acls`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAclsResponse({}));
    }
    async listAcls(userId, calendarId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAclsHeaders({});
        return await this.listAclsWithOptions(userId, calendarId, headers, runtime);
    }
    async listAttendeesWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListAttendees",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/attendees`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAttendeesResponse({}));
    }
    async listAttendees(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAttendeesHeaders({});
        return await this.listAttendeesWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async listCalendarsWithOptions(userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListCalendars",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListCalendarsResponse({}));
    }
    async listCalendars(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListCalendarsHeaders({});
        return await this.listCalendarsWithOptions(userId, headers, runtime);
    }
    async listEventsWithOptions(userId, calendarId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxAttendees)) {
            query["maxAttendees"] = request.maxAttendees;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.seriesMasterId)) {
            query["seriesMasterId"] = request.seriesMasterId;
        }
        if (!tea_util_1.default.isUnset(request.showDeleted)) {
            query["showDeleted"] = request.showDeleted;
        }
        if (!tea_util_1.default.isUnset(request.syncToken)) {
            query["syncToken"] = request.syncToken;
        }
        if (!tea_util_1.default.isUnset(request.timeMax)) {
            query["timeMax"] = request.timeMax;
        }
        if (!tea_util_1.default.isUnset(request.timeMin)) {
            query["timeMin"] = request.timeMin;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListEvents",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListEventsResponse({}));
    }
    async listEvents(userId, calendarId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListEventsHeaders({});
        return await this.listEventsWithOptions(userId, calendarId, request, headers, runtime);
    }
    async listEventsInstancesWithOptions(userId, calendarId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxAttendees)) {
            query["maxAttendees"] = request.maxAttendees;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.seriesMasterId)) {
            query["seriesMasterId"] = request.seriesMasterId;
        }
        if (!tea_util_1.default.isUnset(request.startRecurrenceId)) {
            query["startRecurrenceId"] = request.startRecurrenceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListEventsInstances",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/instances`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListEventsInstancesResponse({}));
    }
    async listEventsInstances(userId, calendarId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListEventsInstancesHeaders({});
        return await this.listEventsInstancesWithOptions(userId, calendarId, request, headers, runtime);
    }
    async listEventsViewWithOptions(userId, calendarId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxAttendees)) {
            query["maxAttendees"] = request.maxAttendees;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.timeMax)) {
            query["timeMax"] = request.timeMax;
        }
        if (!tea_util_1.default.isUnset(request.timeMin)) {
            query["timeMin"] = request.timeMin;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListEventsView",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/eventsview`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListEventsViewResponse({}));
    }
    async listEventsView(userId, calendarId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListEventsViewHeaders({});
        return await this.listEventsViewWithOptions(userId, calendarId, request, headers, runtime);
    }
    async listInstancesWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxAttendees)) {
            query["maxAttendees"] = request.maxAttendees;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.timeMax)) {
            query["timeMax"] = request.timeMax;
        }
        if (!tea_util_1.default.isUnset(request.timeMin)) {
            query["timeMin"] = request.timeMin;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListInstances",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/instances`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListInstancesResponse({}));
    }
    async listInstances(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListInstancesHeaders({});
        return await this.listInstancesWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async patchEventWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attendees)) {
            body["attendees"] = request.attendees;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.end)) {
            body["end"] = request.end;
        }
        if (!tea_util_1.default.isUnset(request.extra)) {
            body["extra"] = request.extra;
        }
        if (!tea_util_1.default.isUnset(request.id)) {
            body["id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.isAllDay)) {
            body["isAllDay"] = request.isAllDay;
        }
        if (!tea_util_1.default.isUnset(request.location)) {
            body["location"] = request.location;
        }
        if (!tea_util_1.default.isUnset(request.onlineMeetingInfo)) {
            body["onlineMeetingInfo"] = request.onlineMeetingInfo;
        }
        if (!tea_util_1.default.isUnset(request.recurrence)) {
            body["recurrence"] = request.recurrence;
        }
        if (!tea_util_1.default.isUnset(request.reminders)) {
            body["reminders"] = request.reminders;
        }
        if (!tea_util_1.default.isUnset(request.richTextDescription)) {
            body["richTextDescription"] = request.richTextDescription;
        }
        if (!tea_util_1.default.isUnset(request.start)) {
            body["start"] = request.start;
        }
        if (!tea_util_1.default.isUnset(request.summary)) {
            body["summary"] = request.summary;
        }
        if (!tea_util_1.default.isUnset(request.uiConfigs)) {
            body["uiConfigs"] = request.uiConfigs;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PatchEvent",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PatchEventResponse({}));
    }
    async patchEvent(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PatchEventHeaders({});
        return await this.patchEventWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async removeAttendeeWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attendeesToRemove)) {
            body["attendeesToRemove"] = request.attendeesToRemove;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RemoveAttendee",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/attendees/batchRemove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveAttendeeResponse({}));
    }
    async removeAttendee(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveAttendeeHeaders({});
        return await this.removeAttendeeWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async removeMeetingRoomsWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.meetingRoomsToRemove)) {
            body["meetingRoomsToRemove"] = request.meetingRoomsToRemove;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RemoveMeetingRooms",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/meetingRooms/batchRemove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveMeetingRoomsResponse({}));
    }
    async removeMeetingRooms(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveMeetingRoomsHeaders({});
        return await this.removeMeetingRoomsWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async respondEventWithOptions(userId, calendarId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.responseStatus)) {
            body["responseStatus"] = request.responseStatus;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RespondEvent",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/respond`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RespondEventResponse({}));
    }
    async respondEvent(userId, calendarId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RespondEventHeaders({});
        return await this.respondEventWithOptions(userId, calendarId, eventId, request, headers, runtime);
    }
    async signInWithOptions(userId, calendarId, eventId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "SignIn",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/signin`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SignInResponse({}));
    }
    async signIn(userId, calendarId, eventId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SignInHeaders({});
        return await this.signInWithOptions(userId, calendarId, eventId, headers, runtime);
    }
    async signOutWithOptions(userId, calendarId, eventId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "SignOut",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/signOut`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SignOutResponse({}));
    }
    async signOut(userId, calendarId, eventId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SignOutHeaders({});
        return await this.signOutWithOptions(userId, calendarId, eventId, headers, runtime);
    }
    async subscribeCalendarWithOptions(userId, calendarId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "SubscribeCalendar",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/subscribe`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SubscribeCalendarResponse({}));
    }
    async subscribeCalendar(userId, calendarId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SubscribeCalendarHeaders({});
        return await this.subscribeCalendarWithOptions(userId, calendarId, headers, runtime);
    }
    async transferEventWithOptions(calendarId, userId, eventId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.isExitCalendar)) {
            body["isExitCalendar"] = request.isExitCalendar;
        }
        if (!tea_util_1.default.isUnset(request.needNotifyViaO2O)) {
            body["needNotifyViaO2O"] = request.needNotifyViaO2O;
        }
        if (!tea_util_1.default.isUnset(request.newOrganizerId)) {
            body["newOrganizerId"] = request.newOrganizerId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xClientToken)) {
            realHeaders["x-client-token"] = tea_util_1.default.toJSONString(headers.xClientToken);
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TransferEvent",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/events/${eventId}/transfer`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TransferEventResponse({}));
    }
    async transferEvent(calendarId, userId, eventId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TransferEventHeaders({});
        return await this.transferEventWithOptions(calendarId, userId, eventId, request, headers, runtime);
    }
    async unsubscribeCalendarWithOptions(userId, calendarId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "UnsubscribeCalendar",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/calendars/${calendarId}/unsubscribe`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UnsubscribeCalendarResponse({}));
    }
    async unsubscribeCalendar(userId, calendarId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnsubscribeCalendarHeaders({});
        return await this.unsubscribeCalendarWithOptions(userId, calendarId, headers, runtime);
    }
    async updateSubscribedCalendarsWithOptions(calendarId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.managers)) {
            body["managers"] = request.managers;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.subscribeScope)) {
            body["subscribeScope"] = request.subscribeScope;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateSubscribedCalendars",
            version: "calendar_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/calendar/users/${userId}/subscribedCalendars/${calendarId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateSubscribedCalendarsResponse({}));
    }
    async updateSubscribedCalendars(calendarId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateSubscribedCalendarsHeaders({});
        return await this.updateSubscribedCalendarsWithOptions(calendarId, userId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map