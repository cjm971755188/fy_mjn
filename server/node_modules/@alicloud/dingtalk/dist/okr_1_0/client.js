"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class OpenKeyResultDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            krId: 'krId',
            progress: 'progress',
            status: 'status',
            title: 'title',
            titleMentions: 'titleMentions',
            type: 'type',
        };
    }
    static types() {
        return {
            krId: 'string',
            progress: 'number',
            status: 'number',
            title: 'string',
            titleMentions: { 'type': 'array', 'itemType': TitleMention },
            type: 'number',
        };
    }
}
exports.OpenKeyResultDTO = OpenKeyResultDTO;
class OpenObjectiveDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            executor: 'executor',
            keyResults: 'keyResults',
            objectiveId: 'objectiveId',
            period: 'period',
            progress: 'progress',
            status: 'status',
            teams: 'teams',
            title: 'title',
        };
    }
    static types() {
        return {
            executor: OpenUserDTO,
            keyResults: { 'type': 'array', 'itemType': OpenKeyResultDTO },
            objectiveId: 'string',
            period: OpenPeriodDTO,
            progress: 'number',
            status: 'number',
            teams: { 'type': 'array', 'itemType': OpenTeamDTO },
            title: 'string',
        };
    }
}
exports.OpenObjectiveDTO = OpenObjectiveDTO;
class OpenPeriodDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endDate: 'endDate',
            nameCn: 'nameCn',
            nameEn: 'nameEn',
            periodId: 'periodId',
            startDate: 'startDate',
            status: 'status',
        };
    }
    static types() {
        return {
            endDate: 'number',
            nameCn: 'string',
            nameEn: 'string',
            periodId: 'string',
            startDate: 'number',
            status: 'number',
        };
    }
}
exports.OpenPeriodDTO = OpenPeriodDTO;
class OpenTeamDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptUid: 'deptUid',
            dingDeptId: 'dingDeptId',
            name: 'name',
        };
    }
    static types() {
        return {
            deptUid: 'string',
            dingDeptId: 'string',
            name: 'string',
        };
    }
}
exports.OpenTeamDTO = OpenTeamDTO;
class OpenUserDTO extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingUserId: 'dingUserId',
            name: 'name',
            userUid: 'userUid',
        };
    }
    static types() {
        return {
            dingUserId: 'string',
            name: 'string',
            userUid: 'string',
        };
    }
}
exports.OpenUserDTO = OpenUserDTO;
class TitleMention extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            length: 'length',
            offset: 'offset',
            user: 'user',
        };
    }
    static types() {
        return {
            length: 'number',
            offset: 'number',
            user: OpenUserDTO,
        };
    }
}
exports.TitleMention = TitleMention;
class AlignObjectiveHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AlignObjectiveHeaders = AlignObjectiveHeaders;
class AlignObjectiveRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            periodId: 'periodId',
            targetId: 'targetId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            periodId: 'string',
            targetId: 'string',
            userId: 'string',
        };
    }
}
exports.AlignObjectiveRequest = AlignObjectiveRequest;
class AlignObjectiveResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: AlignObjectiveResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.AlignObjectiveResponseBody = AlignObjectiveResponseBody;
class AlignObjectiveResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AlignObjectiveResponseBody,
        };
    }
}
exports.AlignObjectiveResponse = AlignObjectiveResponse;
class BatchAddPermissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchAddPermissionHeaders = BatchAddPermissionHeaders;
class BatchAddPermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'list',
            targetId: 'targetId',
            targetType: 'targetType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': BatchAddPermissionRequestList },
            targetId: 'string',
            targetType: 'string',
            userId: 'string',
        };
    }
}
exports.BatchAddPermissionRequest = BatchAddPermissionRequest;
class BatchAddPermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: BatchAddPermissionResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.BatchAddPermissionResponseBody = BatchAddPermissionResponseBody;
class BatchAddPermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchAddPermissionResponseBody,
        };
    }
}
exports.BatchAddPermissionResponse = BatchAddPermissionResponse;
class BatchQueryObjectiveHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchQueryObjectiveHeaders = BatchQueryObjectiveHeaders;
class BatchQueryObjectiveRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            objectiveIds: 'objectiveIds',
            periodId: 'periodId',
            withAlign: 'withAlign',
            withKr: 'withKr',
            withProgress: 'withProgress',
            userId: 'userId',
        };
    }
    static types() {
        return {
            objectiveIds: { 'type': 'array', 'itemType': 'string' },
            periodId: 'string',
            withAlign: 'boolean',
            withKr: 'boolean',
            withProgress: 'boolean',
            userId: 'string',
        };
    }
}
exports.BatchQueryObjectiveRequest = BatchQueryObjectiveRequest;
class BatchQueryObjectiveResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': BatchQueryObjectiveResponseBodyData },
            success: 'boolean',
        };
    }
}
exports.BatchQueryObjectiveResponseBody = BatchQueryObjectiveResponseBody;
class BatchQueryObjectiveResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchQueryObjectiveResponseBody,
        };
    }
}
exports.BatchQueryObjectiveResponse = BatchQueryObjectiveResponse;
class BatchQueryUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchQueryUserHeaders = BatchQueryUserHeaders;
class BatchQueryUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            okrUserIds: 'okrUserIds',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            okrUserIds: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchQueryUserRequest = BatchQueryUserRequest;
class BatchQueryUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': BatchQueryUserResponseBodyData },
            success: 'boolean',
        };
    }
}
exports.BatchQueryUserResponseBody = BatchQueryUserResponseBody;
class BatchQueryUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchQueryUserResponseBody,
        };
    }
}
exports.BatchQueryUserResponse = BatchQueryUserResponse;
class CreateKeyResultHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateKeyResultHeaders = CreateKeyResultHeaders;
class CreateKeyResultRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            objectiveId: 'objectiveId',
            periodId: 'periodId',
            prevPosition: 'prevPosition',
            weight: 'weight',
            userId: 'userId',
        };
    }
    static types() {
        return {
            content: 'string',
            objectiveId: 'string',
            periodId: 'string',
            prevPosition: 'number',
            weight: 'number',
            userId: 'string',
        };
    }
}
exports.CreateKeyResultRequest = CreateKeyResultRequest;
class CreateKeyResultResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: CreateKeyResultResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.CreateKeyResultResponseBody = CreateKeyResultResponseBody;
class CreateKeyResultResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateKeyResultResponseBody,
        };
    }
}
exports.CreateKeyResultResponse = CreateKeyResultResponse;
class CreateObjectiveHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateObjectiveHeaders = CreateObjectiveHeaders;
class CreateObjectiveRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            periodId: 'periodId',
            prevPosition: 'prevPosition',
            userId: 'userId',
        };
    }
    static types() {
        return {
            content: 'string',
            periodId: 'string',
            prevPosition: 'string',
            userId: 'string',
        };
    }
}
exports.CreateObjectiveRequest = CreateObjectiveRequest;
class CreateObjectiveResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: CreateObjectiveResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.CreateObjectiveResponseBody = CreateObjectiveResponseBody;
class CreateObjectiveResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateObjectiveResponseBody,
        };
    }
}
exports.CreateObjectiveResponse = CreateObjectiveResponse;
class DeleteKeyResultHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteKeyResultHeaders = DeleteKeyResultHeaders;
class DeleteKeyResultRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            krId: 'krId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            krId: 'string',
            userId: 'string',
        };
    }
}
exports.DeleteKeyResultRequest = DeleteKeyResultRequest;
class DeleteKeyResultResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: 'boolean',
            success: 'boolean',
        };
    }
}
exports.DeleteKeyResultResponseBody = DeleteKeyResultResponseBody;
class DeleteKeyResultResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteKeyResultResponseBody,
        };
    }
}
exports.DeleteKeyResultResponse = DeleteKeyResultResponse;
class DeleteObjectiveHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteObjectiveHeaders = DeleteObjectiveHeaders;
class DeleteObjectiveRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.DeleteObjectiveRequest = DeleteObjectiveRequest;
class DeleteObjectiveResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: DeleteObjectiveResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.DeleteObjectiveResponseBody = DeleteObjectiveResponseBody;
class DeleteObjectiveResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteObjectiveResponseBody,
        };
    }
}
exports.DeleteObjectiveResponse = DeleteObjectiveResponse;
class DeletePermissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeletePermissionHeaders = DeletePermissionHeaders;
class DeletePermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            policyType: 'policyType',
            targetId: 'targetId',
            targetType: 'targetType',
            type: 'type',
            userId: 'userId',
        };
    }
    static types() {
        return {
            id: 'string',
            policyType: 'number',
            targetId: 'string',
            targetType: 'string',
            type: 'string',
            userId: 'string',
        };
    }
}
exports.DeletePermissionRequest = DeletePermissionRequest;
class DeletePermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: DeletePermissionResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.DeletePermissionResponseBody = DeletePermissionResponseBody;
class DeletePermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeletePermissionResponseBody,
        };
    }
}
exports.DeletePermissionResponse = DeletePermissionResponse;
class GetPeriodListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPeriodListHeaders = GetPeriodListHeaders;
class GetPeriodListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: GetPeriodListResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.GetPeriodListResponseBody = GetPeriodListResponseBody;
class GetPeriodListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPeriodListResponseBody,
        };
    }
}
exports.GetPeriodListResponse = GetPeriodListResponse;
class GetPermissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPermissionHeaders = GetPermissionHeaders;
class GetPermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetId: 'targetId',
            targetType: 'targetType',
            userId: 'userId',
            withKr: 'withKr',
            withObjective: 'withObjective',
        };
    }
    static types() {
        return {
            targetId: 'string',
            targetType: 'string',
            userId: 'string',
            withKr: 'boolean',
            withObjective: 'boolean',
        };
    }
}
exports.GetPermissionRequest = GetPermissionRequest;
class GetPermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: GetPermissionResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.GetPermissionResponseBody = GetPermissionResponseBody;
class GetPermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPermissionResponseBody,
        };
    }
}
exports.GetPermissionResponse = GetPermissionResponse;
class GetUserOkrHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserOkrHeaders = GetUserOkrHeaders;
class GetUserOkrRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            periodId: 'periodId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            periodId: 'string',
            userId: 'string',
        };
    }
}
exports.GetUserOkrRequest = GetUserOkrRequest;
class GetUserOkrResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: GetUserOkrResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.GetUserOkrResponseBody = GetUserOkrResponseBody;
class GetUserOkrResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserOkrResponseBody,
        };
    }
}
exports.GetUserOkrResponse = GetUserOkrResponse;
class OkrObjectivesBatchHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.OkrObjectivesBatchHeaders = OkrObjectivesBatchHeaders;
class OkrObjectivesBatchRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            goodsCode: 'goodsCode',
            objectiveIds: 'objectiveIds',
        };
    }
    static types() {
        return {
            goodsCode: 'string',
            objectiveIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.OkrObjectivesBatchRequest = OkrObjectivesBatchRequest;
class OkrObjectivesBatchResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            success: 'success',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': OpenObjectiveDTO },
            success: 'boolean',
        };
    }
}
exports.OkrObjectivesBatchResponseBody = OkrObjectivesBatchResponseBody;
class OkrObjectivesBatchResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OkrObjectivesBatchResponseBody,
        };
    }
}
exports.OkrObjectivesBatchResponse = OkrObjectivesBatchResponse;
class OkrObjectivesByUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.OkrObjectivesByUserHeaders = OkrObjectivesByUserHeaders;
class OkrObjectivesByUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            goodsCode: 'goodsCode',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            goodsCode: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.OkrObjectivesByUserRequest = OkrObjectivesByUserRequest;
class OkrObjectivesByUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: OkrObjectivesByUserResponseBodyContent,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.OkrObjectivesByUserResponseBody = OkrObjectivesByUserResponseBody;
class OkrObjectivesByUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OkrObjectivesByUserResponseBody,
        };
    }
}
exports.OkrObjectivesByUserResponse = OkrObjectivesByUserResponse;
class OkrPeriodsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.OkrPeriodsHeaders = OkrPeriodsHeaders;
class OkrPeriodsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            goodsCode: 'goodsCode',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            status: 'status',
        };
    }
    static types() {
        return {
            goodsCode: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            status: 'number',
        };
    }
}
exports.OkrPeriodsRequest = OkrPeriodsRequest;
class OkrPeriodsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            requestId: 'requestId',
            success: 'success',
        };
    }
    static types() {
        return {
            content: OkrPeriodsResponseBodyContent,
            requestId: 'string',
            success: 'boolean',
        };
    }
}
exports.OkrPeriodsResponseBody = OkrPeriodsResponseBody;
class OkrPeriodsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OkrPeriodsResponseBody,
        };
    }
}
exports.OkrPeriodsResponse = OkrPeriodsResponse;
class UnAlignObjectiveHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UnAlignObjectiveHeaders = UnAlignObjectiveHeaders;
class UnAlignObjectiveRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            periodId: 'periodId',
            targetId: 'targetId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            periodId: 'string',
            targetId: 'string',
            userId: 'string',
        };
    }
}
exports.UnAlignObjectiveRequest = UnAlignObjectiveRequest;
class UnAlignObjectiveResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: UnAlignObjectiveResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.UnAlignObjectiveResponseBody = UnAlignObjectiveResponseBody;
class UnAlignObjectiveResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnAlignObjectiveResponseBody,
        };
    }
}
exports.UnAlignObjectiveResponse = UnAlignObjectiveResponse;
class UpdateKROfContentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateKROfContentHeaders = UpdateKROfContentHeaders;
class UpdateKROfContentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            updateQuoteList: 'updateQuoteList',
            krId: 'krId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            content: 'string',
            updateQuoteList: { 'type': 'array', 'itemType': 'string' },
            krId: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateKROfContentRequest = UpdateKROfContentRequest;
class UpdateKROfContentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: 'boolean',
            success: 'boolean',
        };
    }
}
exports.UpdateKROfContentResponseBody = UpdateKROfContentResponseBody;
class UpdateKROfContentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateKROfContentResponseBody,
        };
    }
}
exports.UpdateKROfContentResponse = UpdateKROfContentResponse;
class UpdateKROfScoreHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateKROfScoreHeaders = UpdateKROfScoreHeaders;
class UpdateKROfScoreRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            score: 'score',
            krId: 'krId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            score: 'number',
            krId: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateKROfScoreRequest = UpdateKROfScoreRequest;
class UpdateKROfScoreResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: UpdateKROfScoreResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.UpdateKROfScoreResponseBody = UpdateKROfScoreResponseBody;
class UpdateKROfScoreResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateKROfScoreResponseBody,
        };
    }
}
exports.UpdateKROfScoreResponse = UpdateKROfScoreResponse;
class UpdateKROfWeightHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateKROfWeightHeaders = UpdateKROfWeightHeaders;
class UpdateKROfWeightRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            weight: 'weight',
            krId: 'krId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            weight: 'number',
            krId: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateKROfWeightRequest = UpdateKROfWeightRequest;
class UpdateKROfWeightResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: UpdateKROfWeightResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.UpdateKROfWeightResponseBody = UpdateKROfWeightResponseBody;
class UpdateKROfWeightResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateKROfWeightResponseBody,
        };
    }
}
exports.UpdateKROfWeightResponse = UpdateKROfWeightResponse;
class UpdateObjectiveHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateObjectiveHeaders = UpdateObjectiveHeaders;
class UpdateObjectiveRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            userId: 'userId',
        };
    }
    static types() {
        return {
            content: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateObjectiveRequest = UpdateObjectiveRequest;
class UpdateObjectiveResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: UpdateObjectiveResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.UpdateObjectiveResponseBody = UpdateObjectiveResponseBody;
class UpdateObjectiveResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateObjectiveResponseBody,
        };
    }
}
exports.UpdateObjectiveResponse = UpdateObjectiveResponse;
class UpdatePrivacyHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdatePrivacyHeaders = UpdatePrivacyHeaders;
class UpdatePrivacyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            privacy: 'privacy',
            targetId: 'targetId',
            targetType: 'targetType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            privacy: 'string',
            targetId: 'string',
            targetType: 'string',
            userId: 'string',
        };
    }
}
exports.UpdatePrivacyRequest = UpdatePrivacyRequest;
class UpdatePrivacyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            success: 'success',
        };
    }
    static types() {
        return {
            data: UpdatePrivacyResponseBodyData,
            success: 'boolean',
        };
    }
}
exports.UpdatePrivacyResponseBody = UpdatePrivacyResponseBody;
class UpdatePrivacyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdatePrivacyResponseBody,
        };
    }
}
exports.UpdatePrivacyResponse = UpdatePrivacyResponse;
class AlignObjectiveResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alignId: 'alignId',
            id: 'id',
        };
    }
    static types() {
        return {
            alignId: 'Readable',
            id: 'Readable',
        };
    }
}
exports.AlignObjectiveResponseBodyData = AlignObjectiveResponseBodyData;
class BatchAddPermissionRequestListMember extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            type: 'string',
        };
    }
}
exports.BatchAddPermissionRequestListMember = BatchAddPermissionRequestListMember;
class BatchAddPermissionRequestList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            member: 'member',
            policyType: 'policyType',
        };
    }
    static types() {
        return {
            member: BatchAddPermissionRequestListMember,
            policyType: 'number',
        };
    }
}
exports.BatchAddPermissionRequestList = BatchAddPermissionRequestList;
class BatchAddPermissionResponseBodyDataPermissionTreePolicyListMemberList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            nickname: 'nickname',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            nickname: 'string',
            type: 'string',
        };
    }
}
exports.BatchAddPermissionResponseBodyDataPermissionTreePolicyListMemberList = BatchAddPermissionResponseBodyDataPermissionTreePolicyListMemberList;
class BatchAddPermissionResponseBodyDataPermissionTreePolicyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberList: 'memberList',
            name: 'name',
            type: 'type',
        };
    }
    static types() {
        return {
            memberList: { 'type': 'array', 'itemType': BatchAddPermissionResponseBodyDataPermissionTreePolicyListMemberList },
            name: 'string',
            type: 'number',
        };
    }
}
exports.BatchAddPermissionResponseBodyDataPermissionTreePolicyList = BatchAddPermissionResponseBodyDataPermissionTreePolicyList;
class BatchAddPermissionResponseBodyDataPermissionTree extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            policyList: 'policyList',
            privacy: 'privacy',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            policyList: { 'type': 'array', 'itemType': BatchAddPermissionResponseBodyDataPermissionTreePolicyList },
            privacy: 'string',
            type: 'string',
        };
    }
}
exports.BatchAddPermissionResponseBodyDataPermissionTree = BatchAddPermissionResponseBodyDataPermissionTree;
class BatchAddPermissionResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasInvalidUser: 'hasInvalidUser',
            permissionTree: 'permissionTree',
        };
    }
    static types() {
        return {
            hasInvalidUser: 'boolean',
            permissionTree: BatchAddPermissionResponseBodyDataPermissionTree,
        };
    }
}
exports.BatchAddPermissionResponseBodyData = BatchAddPermissionResponseBodyData;
class BatchQueryObjectiveResponseBodyDataKrListProgress extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            percent: 'percent',
        };
    }
    static types() {
        return {
            percent: 'number',
        };
    }
}
exports.BatchQueryObjectiveResponseBodyDataKrListProgress = BatchQueryObjectiveResponseBodyDataKrListProgress;
class BatchQueryObjectiveResponseBodyDataKrList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            id: 'id',
            objectiveId: 'objectiveId',
            permission: 'permission',
            position: 'position',
            progress: 'progress',
            score: 'score',
            weight: 'weight',
        };
    }
    static types() {
        return {
            content: 'Readable',
            gmtCreate: 'number',
            gmtModified: 'number',
            id: 'Readable',
            objectiveId: 'Readable',
            permission: { 'type': 'array', 'itemType': 'number' },
            position: 'number',
            progress: BatchQueryObjectiveResponseBodyDataKrListProgress,
            score: 'number',
            weight: 'number',
        };
    }
}
exports.BatchQueryObjectiveResponseBodyDataKrList = BatchQueryObjectiveResponseBodyDataKrList;
class BatchQueryObjectiveResponseBodyDataOwner extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarMediaId: 'avatarMediaId',
            corpId: 'corpId',
            id: 'id',
            nickname: 'nickname',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarMediaId: 'Readable',
            corpId: 'Readable',
            id: 'Readable',
            nickname: 'Readable',
            userId: 'Readable',
        };
    }
}
exports.BatchQueryObjectiveResponseBodyDataOwner = BatchQueryObjectiveResponseBodyDataOwner;
class BatchQueryObjectiveResponseBodyDataProgress extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            percent: 'percent',
        };
    }
    static types() {
        return {
            percent: 'number',
        };
    }
}
exports.BatchQueryObjectiveResponseBodyDataProgress = BatchQueryObjectiveResponseBodyDataProgress;
class BatchQueryObjectiveResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alignFromIds: 'alignFromIds',
            alignToIds: 'alignToIds',
            content: 'content',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            id: 'id',
            krList: 'krList',
            owner: 'owner',
            periodId: 'periodId',
            permission: 'permission',
            position: 'position',
            progress: 'progress',
            progressPercent: 'progressPercent',
            published: 'published',
            score: 'score',
            status: 'status',
            userId: 'userId',
            weight: 'weight',
        };
    }
    static types() {
        return {
            alignFromIds: { 'type': 'array', 'itemType': 'Readable' },
            alignToIds: { 'type': 'array', 'itemType': 'Readable' },
            content: 'Readable',
            gmtCreate: 'number',
            gmtModified: 'number',
            id: 'Readable',
            krList: { 'type': 'array', 'itemType': BatchQueryObjectiveResponseBodyDataKrList },
            owner: BatchQueryObjectiveResponseBodyDataOwner,
            periodId: 'Readable',
            permission: { 'type': 'array', 'itemType': 'number' },
            position: 'number',
            progress: BatchQueryObjectiveResponseBodyDataProgress,
            progressPercent: 'number',
            published: 'boolean',
            score: 'number',
            status: 'number',
            userId: 'Readable',
            weight: 'number',
        };
    }
}
exports.BatchQueryObjectiveResponseBodyData = BatchQueryObjectiveResponseBodyData;
class BatchQueryUserResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarMediaId: 'avatarMediaId',
            avatarUrl: 'avatarUrl',
            corpId: 'corpId',
            id: 'id',
            nickname: 'nickname',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarMediaId: 'Readable',
            avatarUrl: 'Readable',
            corpId: 'Readable',
            id: 'Readable',
            nickname: 'Readable',
            userId: 'Readable',
        };
    }
}
exports.BatchQueryUserResponseBodyData = BatchQueryUserResponseBodyData;
class CreateKeyResultResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            position: 'position',
            weight: 'weight',
        };
    }
    static types() {
        return {
            id: 'Readable',
            position: 'number',
            weight: 'number',
        };
    }
}
exports.CreateKeyResultResponseBodyData = CreateKeyResultResponseBodyData;
class CreateObjectiveResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            position: 'position',
        };
    }
    static types() {
        return {
            id: 'string',
            position: 'string',
        };
    }
}
exports.CreateObjectiveResponseBodyData = CreateObjectiveResponseBodyData;
class DeleteObjectiveResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
        };
    }
    static types() {
        return {
            id: 'string',
        };
    }
}
exports.DeleteObjectiveResponseBodyData = DeleteObjectiveResponseBodyData;
class DeletePermissionResponseBodyDataPolicyListMemberList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            nickname: 'nickname',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            nickname: 'string',
            type: 'string',
        };
    }
}
exports.DeletePermissionResponseBodyDataPolicyListMemberList = DeletePermissionResponseBodyDataPolicyListMemberList;
class DeletePermissionResponseBodyDataPolicyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberList: 'memberList',
            name: 'name',
            type: 'type',
        };
    }
    static types() {
        return {
            memberList: { 'type': 'array', 'itemType': DeletePermissionResponseBodyDataPolicyListMemberList },
            name: 'string',
            type: 'number',
        };
    }
}
exports.DeletePermissionResponseBodyDataPolicyList = DeletePermissionResponseBodyDataPolicyList;
class DeletePermissionResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            policyList: 'policyList',
            privacy: 'privacy',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            policyList: { 'type': 'array', 'itemType': DeletePermissionResponseBodyDataPolicyList },
            privacy: 'string',
            type: 'string',
        };
    }
}
exports.DeletePermissionResponseBodyData = DeletePermissionResponseBodyData;
class GetPeriodListResponseBodyDataPeriodList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            id: 'id',
            isCurrent: 'isCurrent',
            isYearly: 'isYearly',
            name: 'name',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            id: 'Readable',
            isCurrent: 'boolean',
            isYearly: 'boolean',
            name: 'Readable',
            startTime: 'number',
        };
    }
}
exports.GetPeriodListResponseBodyDataPeriodList = GetPeriodListResponseBodyDataPeriodList;
class GetPeriodListResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            periodList: 'periodList',
        };
    }
    static types() {
        return {
            periodList: { 'type': 'array', 'itemType': GetPeriodListResponseBodyDataPeriodList },
        };
    }
}
exports.GetPeriodListResponseBodyData = GetPeriodListResponseBodyData;
class GetPermissionResponseBodyDataPolicyListMemberList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            nickname: 'nickname',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            nickname: 'string',
            type: 'string',
        };
    }
}
exports.GetPermissionResponseBodyDataPolicyListMemberList = GetPermissionResponseBodyDataPolicyListMemberList;
class GetPermissionResponseBodyDataPolicyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberList: 'memberList',
            name: 'name',
            type: 'type',
        };
    }
    static types() {
        return {
            memberList: { 'type': 'array', 'itemType': GetPermissionResponseBodyDataPolicyListMemberList },
            name: 'string',
            type: 'number',
        };
    }
}
exports.GetPermissionResponseBodyDataPolicyList = GetPermissionResponseBodyDataPolicyList;
class GetPermissionResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            policyList: 'policyList',
            privacy: 'privacy',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            policyList: { 'type': 'array', 'itemType': GetPermissionResponseBodyDataPolicyList },
            privacy: 'string',
            type: 'string',
        };
    }
}
exports.GetPermissionResponseBodyData = GetPermissionResponseBodyData;
class GetUserOkrResponseBodyDataListKrListProgress extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            percent: 'percent',
        };
    }
    static types() {
        return {
            percent: 'number',
        };
    }
}
exports.GetUserOkrResponseBodyDataListKrListProgress = GetUserOkrResponseBodyDataListKrListProgress;
class GetUserOkrResponseBodyDataListKrList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            id: 'id',
            objectiveId: 'objectiveId',
            permission: 'permission',
            position: 'position',
            progress: 'progress',
            score: 'score',
            weight: 'weight',
        };
    }
    static types() {
        return {
            content: 'Readable',
            gmtCreate: 'number',
            gmtModified: 'number',
            id: 'Readable',
            objectiveId: 'Readable',
            permission: { 'type': 'array', 'itemType': 'number' },
            position: 'number',
            progress: GetUserOkrResponseBodyDataListKrListProgress,
            score: 'number',
            weight: 'number',
        };
    }
}
exports.GetUserOkrResponseBodyDataListKrList = GetUserOkrResponseBodyDataListKrList;
class GetUserOkrResponseBodyDataListOwner extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarMediaId: 'avatarMediaId',
            corpId: 'corpId',
            id: 'id',
            nickname: 'nickname',
            userId: 'userId',
        };
    }
    static types() {
        return {
            avatarMediaId: 'Readable',
            corpId: 'Readable',
            id: 'Readable',
            nickname: 'Readable',
            userId: 'Readable',
        };
    }
}
exports.GetUserOkrResponseBodyDataListOwner = GetUserOkrResponseBodyDataListOwner;
class GetUserOkrResponseBodyDataListProgress extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            percent: 'percent',
        };
    }
    static types() {
        return {
            percent: 'number',
        };
    }
}
exports.GetUserOkrResponseBodyDataListProgress = GetUserOkrResponseBodyDataListProgress;
class GetUserOkrResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alignFromIds: 'alignFromIds',
            alignToIds: 'alignToIds',
            content: 'content',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            id: 'id',
            krList: 'krList',
            owner: 'owner',
            periodId: 'periodId',
            permission: 'permission',
            position: 'position',
            progress: 'progress',
            progressPercent: 'progressPercent',
            published: 'published',
            score: 'score',
            status: 'status',
            userId: 'userId',
            weight: 'weight',
        };
    }
    static types() {
        return {
            alignFromIds: { 'type': 'array', 'itemType': 'Readable' },
            alignToIds: { 'type': 'array', 'itemType': 'Readable' },
            content: 'Readable',
            gmtCreate: 'number',
            gmtModified: 'number',
            id: 'Readable',
            krList: { 'type': 'array', 'itemType': GetUserOkrResponseBodyDataListKrList },
            owner: GetUserOkrResponseBodyDataListOwner,
            periodId: 'Readable',
            permission: { 'type': 'array', 'itemType': 'number' },
            position: 'number',
            progress: GetUserOkrResponseBodyDataListProgress,
            progressPercent: 'number',
            published: 'boolean',
            score: 'number',
            status: 'number',
            userId: 'Readable',
            weight: 'number',
        };
    }
}
exports.GetUserOkrResponseBodyDataList = GetUserOkrResponseBodyDataList;
class GetUserOkrResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'list',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': GetUserOkrResponseBodyDataList },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetUserOkrResponseBodyData = GetUserOkrResponseBodyData;
class OkrObjectivesByUserResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': OpenObjectiveDTO },
            totalCount: 'number',
        };
    }
}
exports.OkrObjectivesByUserResponseBodyContent = OkrObjectivesByUserResponseBodyContent;
class OkrPeriodsResponseBodyContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            result: 'result',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            result: { 'type': 'array', 'itemType': OpenPeriodDTO },
            totalCount: 'number',
        };
    }
}
exports.OkrPeriodsResponseBodyContent = OkrPeriodsResponseBodyContent;
class UnAlignObjectiveResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            alignId: 'alignId',
            id: 'id',
        };
    }
    static types() {
        return {
            alignId: 'Readable',
            id: 'Readable',
        };
    }
}
exports.UnAlignObjectiveResponseBodyData = UnAlignObjectiveResponseBodyData;
class UpdateKROfScoreResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            objectiveScore: 'objectiveScore',
        };
    }
    static types() {
        return {
            objectiveScore: 'number',
        };
    }
}
exports.UpdateKROfScoreResponseBodyData = UpdateKROfScoreResponseBodyData;
class UpdateKROfWeightResponseBodyDataObjectiveProgress extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            percent: 'percent',
        };
    }
    static types() {
        return {
            percent: 'number',
        };
    }
}
exports.UpdateKROfWeightResponseBodyDataObjectiveProgress = UpdateKROfWeightResponseBodyDataObjectiveProgress;
class UpdateKROfWeightResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            objectiveProgress: 'objectiveProgress',
            objectiveScore: 'objectiveScore',
        };
    }
    static types() {
        return {
            objectiveProgress: UpdateKROfWeightResponseBodyDataObjectiveProgress,
            objectiveScore: 'number',
        };
    }
}
exports.UpdateKROfWeightResponseBodyData = UpdateKROfWeightResponseBodyData;
class UpdateObjectiveResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            position: 'position',
        };
    }
    static types() {
        return {
            id: 'string',
            position: 'number',
        };
    }
}
exports.UpdateObjectiveResponseBodyData = UpdateObjectiveResponseBodyData;
class UpdatePrivacyResponseBodyDataPolicyListMemberList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            nickname: 'nickname',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            nickname: 'string',
            type: 'string',
        };
    }
}
exports.UpdatePrivacyResponseBodyDataPolicyListMemberList = UpdatePrivacyResponseBodyDataPolicyListMemberList;
class UpdatePrivacyResponseBodyDataPolicyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberList: 'memberList',
            name: 'name',
            type: 'type',
        };
    }
    static types() {
        return {
            memberList: { 'type': 'array', 'itemType': UpdatePrivacyResponseBodyDataPolicyListMemberList },
            name: 'string',
            type: 'number',
        };
    }
}
exports.UpdatePrivacyResponseBodyDataPolicyList = UpdatePrivacyResponseBodyDataPolicyList;
class UpdatePrivacyResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            policyList: 'policyList',
            privacy: 'privacy',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            policyList: { 'type': 'array', 'itemType': UpdatePrivacyResponseBodyDataPolicyList },
            privacy: 'string',
            type: 'string',
        };
    }
}
exports.UpdatePrivacyResponseBodyData = UpdatePrivacyResponseBodyData;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async alignObjectiveWithOptions(objectiveId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.periodId)) {
            body["periodId"] = request.periodId;
        }
        if (!tea_util_1.default.isUnset(request.targetId)) {
            body["targetId"] = request.targetId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AlignObjective",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/objectives/${objectiveId}/alignments`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AlignObjectiveResponse({}));
    }
    async alignObjective(objectiveId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AlignObjectiveHeaders({});
        return await this.alignObjectiveWithOptions(objectiveId, request, headers, runtime);
    }
    async batchAddPermissionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.list)) {
            body["list"] = request.list;
        }
        if (!tea_util_1.default.isUnset(request.targetId)) {
            body["targetId"] = request.targetId;
        }
        if (!tea_util_1.default.isUnset(request.targetType)) {
            body["targetType"] = request.targetType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchAddPermission",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/permissions/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchAddPermissionResponse({}));
    }
    async batchAddPermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchAddPermissionHeaders({});
        return await this.batchAddPermissionWithOptions(request, headers, runtime);
    }
    async batchQueryObjectiveWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.objectiveIds)) {
            body["objectiveIds"] = request.objectiveIds;
        }
        if (!tea_util_1.default.isUnset(request.periodId)) {
            body["periodId"] = request.periodId;
        }
        if (!tea_util_1.default.isUnset(request.withAlign)) {
            body["withAlign"] = request.withAlign;
        }
        if (!tea_util_1.default.isUnset(request.withKr)) {
            body["withKr"] = request.withKr;
        }
        if (!tea_util_1.default.isUnset(request.withProgress)) {
            body["withProgress"] = request.withProgress;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchQueryObjective",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/objectives/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchQueryObjectiveResponse({}));
    }
    async batchQueryObjective(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchQueryObjectiveHeaders({});
        return await this.batchQueryObjectiveWithOptions(request, headers, runtime);
    }
    async batchQueryUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.okrUserIds)) {
            body["okrUserIds"] = request.okrUserIds;
        }
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchQueryUser",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/users/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchQueryUserResponse({}));
    }
    async batchQueryUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchQueryUserHeaders({});
        return await this.batchQueryUserWithOptions(request, headers, runtime);
    }
    async createKeyResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.objectiveId)) {
            body["objectiveId"] = request.objectiveId;
        }
        if (!tea_util_1.default.isUnset(request.periodId)) {
            body["periodId"] = request.periodId;
        }
        if (!tea_util_1.default.isUnset(request.prevPosition)) {
            body["prevPosition"] = request.prevPosition;
        }
        if (!tea_util_1.default.isUnset(request.weight)) {
            body["weight"] = request.weight;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateKeyResult",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/keyResults`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateKeyResultResponse({}));
    }
    async createKeyResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateKeyResultHeaders({});
        return await this.createKeyResultWithOptions(request, headers, runtime);
    }
    async createObjectiveWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.periodId)) {
            body["periodId"] = request.periodId;
        }
        if (!tea_util_1.default.isUnset(request.prevPosition)) {
            body["prevPosition"] = request.prevPosition;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateObjective",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/objectives`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateObjectiveResponse({}));
    }
    async createObjective(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateObjectiveHeaders({});
        return await this.createObjectiveWithOptions(request, headers, runtime);
    }
    async deleteKeyResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.krId)) {
            query["krId"] = request.krId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteKeyResult",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/keyResults`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteKeyResultResponse({}));
    }
    async deleteKeyResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteKeyResultHeaders({});
        return await this.deleteKeyResultWithOptions(request, headers, runtime);
    }
    async deleteObjectiveWithOptions(objectiveId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteObjective",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/objectives/${objectiveId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteObjectiveResponse({}));
    }
    async deleteObjective(objectiveId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteObjectiveHeaders({});
        return await this.deleteObjectiveWithOptions(objectiveId, request, headers, runtime);
    }
    async deletePermissionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.id)) {
            query["id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.policyType)) {
            query["policyType"] = request.policyType;
        }
        if (!tea_util_1.default.isUnset(request.targetId)) {
            query["targetId"] = request.targetId;
        }
        if (!tea_util_1.default.isUnset(request.targetType)) {
            query["targetType"] = request.targetType;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeletePermission",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/permissions/delete`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeletePermissionResponse({}));
    }
    async deletePermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeletePermissionHeaders({});
        return await this.deletePermissionWithOptions(request, headers, runtime);
    }
    async getPeriodListWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetPeriodList",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/periods`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPeriodListResponse({}));
    }
    async getPeriodList() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPeriodListHeaders({});
        return await this.getPeriodListWithOptions(headers, runtime);
    }
    async getPermissionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.targetId)) {
            query["targetId"] = request.targetId;
        }
        if (!tea_util_1.default.isUnset(request.targetType)) {
            query["targetType"] = request.targetType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.withKr)) {
            query["withKr"] = request.withKr;
        }
        if (!tea_util_1.default.isUnset(request.withObjective)) {
            query["withObjective"] = request.withObjective;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPermission",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/permissions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPermissionResponse({}));
    }
    async getPermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPermissionHeaders({});
        return await this.getPermissionWithOptions(request, headers, runtime);
    }
    async getUserOkrWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.periodId)) {
            query["periodId"] = request.periodId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUserOkr",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/users/okrs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserOkrResponse({}));
    }
    async getUserOkr(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserOkrHeaders({});
        return await this.getUserOkrWithOptions(request, headers, runtime);
    }
    async okrObjectivesBatchWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.goodsCode)) {
            body["goodsCode"] = request.goodsCode;
        }
        if (!tea_util_1.default.isUnset(request.objectiveIds)) {
            body["objectiveIds"] = request.objectiveIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "OkrObjectivesBatch",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/pro/objectives/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OkrObjectivesBatchResponse({}));
    }
    async okrObjectivesBatch(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OkrObjectivesBatchHeaders({});
        return await this.okrObjectivesBatchWithOptions(request, headers, runtime);
    }
    async okrObjectivesByUserWithOptions(dingUserId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.goodsCode)) {
            query["goodsCode"] = request.goodsCode;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "OkrObjectivesByUser",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/pro/users/${dingUserId}/objectives`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OkrObjectivesByUserResponse({}));
    }
    async okrObjectivesByUser(dingUserId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OkrObjectivesByUserHeaders({});
        return await this.okrObjectivesByUserWithOptions(dingUserId, request, headers, runtime);
    }
    async okrPeriodsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.goodsCode)) {
            query["goodsCode"] = request.goodsCode;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["status"] = request.status;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "OkrPeriods",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/pro/periods`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OkrPeriodsResponse({}));
    }
    async okrPeriods(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OkrPeriodsHeaders({});
        return await this.okrPeriodsWithOptions(request, headers, runtime);
    }
    async unAlignObjectiveWithOptions(objectiveId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.periodId)) {
            body["periodId"] = request.periodId;
        }
        if (!tea_util_1.default.isUnset(request.targetId)) {
            body["targetId"] = request.targetId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UnAlignObjective",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/objectives/${objectiveId}/alignments/cancel`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UnAlignObjectiveResponse({}));
    }
    async unAlignObjective(objectiveId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnAlignObjectiveHeaders({});
        return await this.unAlignObjectiveWithOptions(objectiveId, request, headers, runtime);
    }
    async updateKROfContentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.krId)) {
            query["krId"] = request.krId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.updateQuoteList)) {
            body["updateQuoteList"] = request.updateQuoteList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateKROfContent",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/keyResults/contents`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateKROfContentResponse({}));
    }
    async updateKROfContent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateKROfContentHeaders({});
        return await this.updateKROfContentWithOptions(request, headers, runtime);
    }
    async updateKROfScoreWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.krId)) {
            query["krId"] = request.krId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.score)) {
            body["score"] = request.score;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateKROfScore",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/keyResults/scores`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateKROfScoreResponse({}));
    }
    async updateKROfScore(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateKROfScoreHeaders({});
        return await this.updateKROfScoreWithOptions(request, headers, runtime);
    }
    async updateKROfWeightWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.krId)) {
            query["krId"] = request.krId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.weight)) {
            body["weight"] = request.weight;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateKROfWeight",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/keyResults/weights`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateKROfWeightResponse({}));
    }
    async updateKROfWeight(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateKROfWeightHeaders({});
        return await this.updateKROfWeightWithOptions(request, headers, runtime);
    }
    async updateObjectiveWithOptions(objectiveId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateObjective",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/objectives/${objectiveId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateObjectiveResponse({}));
    }
    async updateObjective(objectiveId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateObjectiveHeaders({});
        return await this.updateObjectiveWithOptions(objectiveId, request, headers, runtime);
    }
    async updatePrivacyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.privacy)) {
            body["privacy"] = request.privacy;
        }
        if (!tea_util_1.default.isUnset(request.targetId)) {
            body["targetId"] = request.targetId;
        }
        if (!tea_util_1.default.isUnset(request.targetType)) {
            body["targetType"] = request.targetType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdatePrivacy",
            version: "okr_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/okr/permissions/privacies`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdatePrivacyResponse({}));
    }
    async updatePrivacy(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdatePrivacyHeaders({});
        return await this.updatePrivacyWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map