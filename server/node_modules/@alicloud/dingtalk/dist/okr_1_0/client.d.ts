/// <reference types="node" />
/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';
export declare class OpenKeyResultDTO extends $tea.Model {
    krId?: string;
    progress?: number;
    status?: number;
    title?: string;
    titleMentions?: TitleMention[];
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenObjectiveDTO extends $tea.Model {
    executor?: OpenUserDTO;
    keyResults?: OpenKeyResultDTO[];
    objectiveId?: string;
    period?: OpenPeriodDTO;
    progress?: number;
    status?: number;
    teams?: OpenTeamDTO[];
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenPeriodDTO extends $tea.Model {
    endDate?: number;
    nameCn?: string;
    nameEn?: string;
    periodId?: string;
    startDate?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenTeamDTO extends $tea.Model {
    deptUid?: string;
    dingDeptId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenUserDTO extends $tea.Model {
    dingUserId?: string;
    name?: string;
    userUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TitleMention extends $tea.Model {
    length?: number;
    offset?: number;
    user?: OpenUserDTO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlignObjectiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlignObjectiveRequest extends $tea.Model {
    periodId?: string;
    targetId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlignObjectiveResponseBody extends $tea.Model {
    data?: AlignObjectiveResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlignObjectiveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AlignObjectiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionRequest extends $tea.Model {
    list?: BatchAddPermissionRequestList[];
    targetId?: string;
    targetType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionResponseBody extends $tea.Model {
    data?: BatchAddPermissionResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchAddPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryObjectiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryObjectiveRequest extends $tea.Model {
    objectiveIds?: string[];
    periodId?: string;
    withAlign?: boolean;
    withKr?: boolean;
    withProgress?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryObjectiveResponseBody extends $tea.Model {
    data?: BatchQueryObjectiveResponseBodyData[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryObjectiveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchQueryObjectiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryUserRequest extends $tea.Model {
    okrUserIds?: string[];
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryUserResponseBody extends $tea.Model {
    data?: BatchQueryUserResponseBodyData[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryUserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchQueryUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateKeyResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateKeyResultRequest extends $tea.Model {
    content?: string;
    objectiveId?: string;
    periodId?: string;
    prevPosition?: number;
    weight?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateKeyResultResponseBody extends $tea.Model {
    data?: CreateKeyResultResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateKeyResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateKeyResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateObjectiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateObjectiveRequest extends $tea.Model {
    content?: string;
    periodId?: string;
    prevPosition?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateObjectiveResponseBody extends $tea.Model {
    data?: CreateObjectiveResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateObjectiveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateObjectiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKeyResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKeyResultRequest extends $tea.Model {
    krId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKeyResultResponseBody extends $tea.Model {
    data?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKeyResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteKeyResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteObjectiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteObjectiveRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteObjectiveResponseBody extends $tea.Model {
    data?: DeleteObjectiveResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteObjectiveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteObjectiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionRequest extends $tea.Model {
    id?: string;
    policyType?: number;
    targetId?: string;
    targetType?: string;
    type?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponseBody extends $tea.Model {
    data?: DeletePermissionResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeletePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPeriodListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPeriodListResponseBody extends $tea.Model {
    data?: GetPeriodListResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPeriodListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPeriodListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionRequest extends $tea.Model {
    targetId?: string;
    targetType?: string;
    userId?: string;
    withKr?: boolean;
    withObjective?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionResponseBody extends $tea.Model {
    data?: GetPermissionResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    periodId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrResponseBody extends $tea.Model {
    data?: GetUserOkrResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetUserOkrResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrObjectivesBatchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrObjectivesBatchRequest extends $tea.Model {
    goodsCode?: string;
    objectiveIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrObjectivesBatchResponseBody extends $tea.Model {
    content?: OpenObjectiveDTO[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrObjectivesBatchResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OkrObjectivesBatchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrObjectivesByUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrObjectivesByUserRequest extends $tea.Model {
    goodsCode?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrObjectivesByUserResponseBody extends $tea.Model {
    content?: OkrObjectivesByUserResponseBodyContent;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrObjectivesByUserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OkrObjectivesByUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrPeriodsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrPeriodsRequest extends $tea.Model {
    goodsCode?: string;
    pageNumber?: number;
    pageSize?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrPeriodsResponseBody extends $tea.Model {
    content?: OkrPeriodsResponseBodyContent;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrPeriodsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OkrPeriodsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnAlignObjectiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnAlignObjectiveRequest extends $tea.Model {
    periodId?: string;
    targetId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnAlignObjectiveResponseBody extends $tea.Model {
    data?: UnAlignObjectiveResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnAlignObjectiveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnAlignObjectiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfContentRequest extends $tea.Model {
    content?: string;
    updateQuoteList?: string[];
    krId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfContentResponseBody extends $tea.Model {
    data?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfContentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateKROfContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfScoreHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfScoreRequest extends $tea.Model {
    score?: number;
    krId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfScoreResponseBody extends $tea.Model {
    data?: UpdateKROfScoreResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfScoreResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateKROfScoreResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfWeightHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfWeightRequest extends $tea.Model {
    weight?: number;
    krId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfWeightResponseBody extends $tea.Model {
    data?: UpdateKROfWeightResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfWeightResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateKROfWeightResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateObjectiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateObjectiveRequest extends $tea.Model {
    content?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateObjectiveResponseBody extends $tea.Model {
    data?: UpdateObjectiveResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateObjectiveResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateObjectiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrivacyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrivacyRequest extends $tea.Model {
    privacy?: string;
    targetId?: string;
    targetType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrivacyResponseBody extends $tea.Model {
    data?: UpdatePrivacyResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrivacyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdatePrivacyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AlignObjectiveResponseBodyData extends $tea.Model {
    alignId?: Readable;
    id?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionRequestListMember extends $tea.Model {
    id?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionRequestList extends $tea.Model {
    member?: BatchAddPermissionRequestListMember;
    policyType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionResponseBodyDataPermissionTreePolicyListMemberList extends $tea.Model {
    id?: string;
    nickname?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionResponseBodyDataPermissionTreePolicyList extends $tea.Model {
    memberList?: BatchAddPermissionResponseBodyDataPermissionTreePolicyListMemberList[];
    name?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionResponseBodyDataPermissionTree extends $tea.Model {
    id?: string;
    policyList?: BatchAddPermissionResponseBodyDataPermissionTreePolicyList[];
    privacy?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddPermissionResponseBodyData extends $tea.Model {
    hasInvalidUser?: boolean;
    permissionTree?: BatchAddPermissionResponseBodyDataPermissionTree;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryObjectiveResponseBodyDataKrListProgress extends $tea.Model {
    percent?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryObjectiveResponseBodyDataKrList extends $tea.Model {
    content?: Readable;
    gmtCreate?: number;
    gmtModified?: number;
    id?: Readable;
    objectiveId?: Readable;
    permission?: number[];
    position?: number;
    progress?: BatchQueryObjectiveResponseBodyDataKrListProgress;
    score?: number;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryObjectiveResponseBodyDataOwner extends $tea.Model {
    avatarMediaId?: Readable;
    corpId?: Readable;
    id?: Readable;
    nickname?: Readable;
    userId?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryObjectiveResponseBodyDataProgress extends $tea.Model {
    percent?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryObjectiveResponseBodyData extends $tea.Model {
    alignFromIds?: Readable[];
    alignToIds?: Readable[];
    content?: Readable;
    gmtCreate?: number;
    gmtModified?: number;
    id?: Readable;
    krList?: BatchQueryObjectiveResponseBodyDataKrList[];
    owner?: BatchQueryObjectiveResponseBodyDataOwner;
    periodId?: Readable;
    permission?: number[];
    position?: number;
    progress?: BatchQueryObjectiveResponseBodyDataProgress;
    progressPercent?: number;
    published?: boolean;
    score?: number;
    status?: number;
    userId?: Readable;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryUserResponseBodyData extends $tea.Model {
    avatarMediaId?: Readable;
    avatarUrl?: Readable;
    corpId?: Readable;
    id?: Readable;
    nickname?: Readable;
    userId?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateKeyResultResponseBodyData extends $tea.Model {
    id?: Readable;
    position?: number;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateObjectiveResponseBodyData extends $tea.Model {
    id?: string;
    position?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteObjectiveResponseBodyData extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponseBodyDataPolicyListMemberList extends $tea.Model {
    id?: string;
    nickname?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponseBodyDataPolicyList extends $tea.Model {
    memberList?: DeletePermissionResponseBodyDataPolicyListMemberList[];
    name?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePermissionResponseBodyData extends $tea.Model {
    id?: string;
    policyList?: DeletePermissionResponseBodyDataPolicyList[];
    privacy?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPeriodListResponseBodyDataPeriodList extends $tea.Model {
    endTime?: number;
    id?: Readable;
    isCurrent?: boolean;
    isYearly?: boolean;
    name?: Readable;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPeriodListResponseBodyData extends $tea.Model {
    periodList?: GetPeriodListResponseBodyDataPeriodList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionResponseBodyDataPolicyListMemberList extends $tea.Model {
    id?: string;
    nickname?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionResponseBodyDataPolicyList extends $tea.Model {
    memberList?: GetPermissionResponseBodyDataPolicyListMemberList[];
    name?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPermissionResponseBodyData extends $tea.Model {
    id?: string;
    policyList?: GetPermissionResponseBodyDataPolicyList[];
    privacy?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrResponseBodyDataListKrListProgress extends $tea.Model {
    percent?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrResponseBodyDataListKrList extends $tea.Model {
    content?: Readable;
    gmtCreate?: number;
    gmtModified?: number;
    id?: Readable;
    objectiveId?: Readable;
    permission?: number[];
    position?: number;
    progress?: GetUserOkrResponseBodyDataListKrListProgress;
    score?: number;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrResponseBodyDataListOwner extends $tea.Model {
    avatarMediaId?: Readable;
    corpId?: Readable;
    id?: Readable;
    nickname?: Readable;
    userId?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrResponseBodyDataListProgress extends $tea.Model {
    percent?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrResponseBodyDataList extends $tea.Model {
    alignFromIds?: Readable[];
    alignToIds?: Readable[];
    content?: Readable;
    gmtCreate?: number;
    gmtModified?: number;
    id?: Readable;
    krList?: GetUserOkrResponseBodyDataListKrList[];
    owner?: GetUserOkrResponseBodyDataListOwner;
    periodId?: Readable;
    permission?: number[];
    position?: number;
    progress?: GetUserOkrResponseBodyDataListProgress;
    progressPercent?: number;
    published?: boolean;
    score?: number;
    status?: number;
    userId?: Readable;
    weight?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserOkrResponseBodyData extends $tea.Model {
    list?: GetUserOkrResponseBodyDataList[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrObjectivesByUserResponseBodyContent extends $tea.Model {
    result?: OpenObjectiveDTO[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OkrPeriodsResponseBodyContent extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    result?: OpenPeriodDTO[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnAlignObjectiveResponseBodyData extends $tea.Model {
    alignId?: Readable;
    id?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfScoreResponseBodyData extends $tea.Model {
    objectiveScore?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfWeightResponseBodyDataObjectiveProgress extends $tea.Model {
    percent?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateKROfWeightResponseBodyData extends $tea.Model {
    objectiveProgress?: UpdateKROfWeightResponseBodyDataObjectiveProgress;
    objectiveScore?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateObjectiveResponseBodyData extends $tea.Model {
    id?: string;
    position?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrivacyResponseBodyDataPolicyListMemberList extends $tea.Model {
    id?: string;
    nickname?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrivacyResponseBodyDataPolicyList extends $tea.Model {
    memberList?: UpdatePrivacyResponseBodyDataPolicyListMemberList[];
    name?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePrivacyResponseBodyData extends $tea.Model {
    id?: string;
    policyList?: UpdatePrivacyResponseBodyDataPolicyList[];
    privacy?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    alignObjectiveWithOptions(objectiveId: string, request: AlignObjectiveRequest, headers: AlignObjectiveHeaders, runtime: $Util.RuntimeOptions): Promise<AlignObjectiveResponse>;
    alignObjective(objectiveId: string, request: AlignObjectiveRequest): Promise<AlignObjectiveResponse>;
    batchAddPermissionWithOptions(request: BatchAddPermissionRequest, headers: BatchAddPermissionHeaders, runtime: $Util.RuntimeOptions): Promise<BatchAddPermissionResponse>;
    batchAddPermission(request: BatchAddPermissionRequest): Promise<BatchAddPermissionResponse>;
    batchQueryObjectiveWithOptions(request: BatchQueryObjectiveRequest, headers: BatchQueryObjectiveHeaders, runtime: $Util.RuntimeOptions): Promise<BatchQueryObjectiveResponse>;
    batchQueryObjective(request: BatchQueryObjectiveRequest): Promise<BatchQueryObjectiveResponse>;
    batchQueryUserWithOptions(request: BatchQueryUserRequest, headers: BatchQueryUserHeaders, runtime: $Util.RuntimeOptions): Promise<BatchQueryUserResponse>;
    batchQueryUser(request: BatchQueryUserRequest): Promise<BatchQueryUserResponse>;
    createKeyResultWithOptions(request: CreateKeyResultRequest, headers: CreateKeyResultHeaders, runtime: $Util.RuntimeOptions): Promise<CreateKeyResultResponse>;
    createKeyResult(request: CreateKeyResultRequest): Promise<CreateKeyResultResponse>;
    createObjectiveWithOptions(request: CreateObjectiveRequest, headers: CreateObjectiveHeaders, runtime: $Util.RuntimeOptions): Promise<CreateObjectiveResponse>;
    createObjective(request: CreateObjectiveRequest): Promise<CreateObjectiveResponse>;
    deleteKeyResultWithOptions(request: DeleteKeyResultRequest, headers: DeleteKeyResultHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteKeyResultResponse>;
    deleteKeyResult(request: DeleteKeyResultRequest): Promise<DeleteKeyResultResponse>;
    deleteObjectiveWithOptions(objectiveId: string, request: DeleteObjectiveRequest, headers: DeleteObjectiveHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteObjectiveResponse>;
    deleteObjective(objectiveId: string, request: DeleteObjectiveRequest): Promise<DeleteObjectiveResponse>;
    deletePermissionWithOptions(request: DeletePermissionRequest, headers: DeletePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<DeletePermissionResponse>;
    deletePermission(request: DeletePermissionRequest): Promise<DeletePermissionResponse>;
    getPeriodListWithOptions(headers: GetPeriodListHeaders, runtime: $Util.RuntimeOptions): Promise<GetPeriodListResponse>;
    getPeriodList(): Promise<GetPeriodListResponse>;
    getPermissionWithOptions(request: GetPermissionRequest, headers: GetPermissionHeaders, runtime: $Util.RuntimeOptions): Promise<GetPermissionResponse>;
    getPermission(request: GetPermissionRequest): Promise<GetPermissionResponse>;
    getUserOkrWithOptions(request: GetUserOkrRequest, headers: GetUserOkrHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserOkrResponse>;
    getUserOkr(request: GetUserOkrRequest): Promise<GetUserOkrResponse>;
    okrObjectivesBatchWithOptions(request: OkrObjectivesBatchRequest, headers: OkrObjectivesBatchHeaders, runtime: $Util.RuntimeOptions): Promise<OkrObjectivesBatchResponse>;
    okrObjectivesBatch(request: OkrObjectivesBatchRequest): Promise<OkrObjectivesBatchResponse>;
    okrObjectivesByUserWithOptions(dingUserId: string, request: OkrObjectivesByUserRequest, headers: OkrObjectivesByUserHeaders, runtime: $Util.RuntimeOptions): Promise<OkrObjectivesByUserResponse>;
    okrObjectivesByUser(dingUserId: string, request: OkrObjectivesByUserRequest): Promise<OkrObjectivesByUserResponse>;
    okrPeriodsWithOptions(request: OkrPeriodsRequest, headers: OkrPeriodsHeaders, runtime: $Util.RuntimeOptions): Promise<OkrPeriodsResponse>;
    okrPeriods(request: OkrPeriodsRequest): Promise<OkrPeriodsResponse>;
    unAlignObjectiveWithOptions(objectiveId: string, request: UnAlignObjectiveRequest, headers: UnAlignObjectiveHeaders, runtime: $Util.RuntimeOptions): Promise<UnAlignObjectiveResponse>;
    unAlignObjective(objectiveId: string, request: UnAlignObjectiveRequest): Promise<UnAlignObjectiveResponse>;
    updateKROfContentWithOptions(request: UpdateKROfContentRequest, headers: UpdateKROfContentHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateKROfContentResponse>;
    updateKROfContent(request: UpdateKROfContentRequest): Promise<UpdateKROfContentResponse>;
    updateKROfScoreWithOptions(request: UpdateKROfScoreRequest, headers: UpdateKROfScoreHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateKROfScoreResponse>;
    updateKROfScore(request: UpdateKROfScoreRequest): Promise<UpdateKROfScoreResponse>;
    updateKROfWeightWithOptions(request: UpdateKROfWeightRequest, headers: UpdateKROfWeightHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateKROfWeightResponse>;
    updateKROfWeight(request: UpdateKROfWeightRequest): Promise<UpdateKROfWeightResponse>;
    updateObjectiveWithOptions(objectiveId: string, request: UpdateObjectiveRequest, headers: UpdateObjectiveHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateObjectiveResponse>;
    updateObjective(objectiveId: string, request: UpdateObjectiveRequest): Promise<UpdateObjectiveResponse>;
    updatePrivacyWithOptions(request: UpdatePrivacyRequest, headers: UpdatePrivacyHeaders, runtime: $Util.RuntimeOptions): Promise<UpdatePrivacyResponse>;
    updatePrivacy(request: UpdatePrivacyRequest): Promise<UpdatePrivacyResponse>;
}
