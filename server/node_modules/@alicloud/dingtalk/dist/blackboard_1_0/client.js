"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class QueryBlackboardReadUnReadHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryBlackboardReadUnReadHeaders = QueryBlackboardReadUnReadHeaders;
class QueryBlackboardReadUnReadRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blackboardId: 'blackboardId',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operationUserId: 'operationUserId',
        };
    }
    static types() {
        return {
            blackboardId: 'string',
            maxResults: 'number',
            nextToken: 'string',
            operationUserId: 'string',
        };
    }
}
exports.QueryBlackboardReadUnReadRequest = QueryBlackboardReadUnReadRequest;
class QueryBlackboardReadUnReadResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            users: 'users',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            users: { 'type': 'array', 'itemType': QueryBlackboardReadUnReadResponseBodyUsers },
        };
    }
}
exports.QueryBlackboardReadUnReadResponseBody = QueryBlackboardReadUnReadResponseBody;
class QueryBlackboardReadUnReadResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryBlackboardReadUnReadResponseBody,
        };
    }
}
exports.QueryBlackboardReadUnReadResponse = QueryBlackboardReadUnReadResponse;
class QueryBlackboardSpaceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryBlackboardSpaceHeaders = QueryBlackboardSpaceHeaders;
class QueryBlackboardSpaceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operationUserId: 'operationUserId',
        };
    }
    static types() {
        return {
            operationUserId: 'string',
        };
    }
}
exports.QueryBlackboardSpaceRequest = QueryBlackboardSpaceRequest;
class QueryBlackboardSpaceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            spaceId: 'string',
        };
    }
}
exports.QueryBlackboardSpaceResponseBody = QueryBlackboardSpaceResponseBody;
class QueryBlackboardSpaceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryBlackboardSpaceResponseBody,
        };
    }
}
exports.QueryBlackboardSpaceResponse = QueryBlackboardSpaceResponse;
class QueryBlackboardReadUnReadResponseBodyUsers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            read: 'read',
            readTimestamp: 'readTimestamp',
            userId: 'userId',
        };
    }
    static types() {
        return {
            read: 'string',
            readTimestamp: 'number',
            userId: 'string',
        };
    }
}
exports.QueryBlackboardReadUnReadResponseBodyUsers = QueryBlackboardReadUnReadResponseBodyUsers;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async queryBlackboardReadUnReadWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.blackboardId)) {
            query["blackboardId"] = request.blackboardId;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operationUserId)) {
            query["operationUserId"] = request.operationUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryBlackboardReadUnRead",
            version: "blackboard_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/blackboard/readers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryBlackboardReadUnReadResponse({}));
    }
    async queryBlackboardReadUnRead(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryBlackboardReadUnReadHeaders({});
        return await this.queryBlackboardReadUnReadWithOptions(request, headers, runtime);
    }
    async queryBlackboardSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operationUserId)) {
            query["operationUserId"] = request.operationUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryBlackboardSpace",
            version: "blackboard_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/blackboard/spaces`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryBlackboardSpaceResponse({}));
    }
    async queryBlackboardSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryBlackboardSpaceHeaders({});
        return await this.queryBlackboardSpaceWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map