/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class DentryModel extends $tea.Model {
    contentType?: string;
    createdTime?: number;
    creator?: DentryModelCreator;
    dentryId?: string;
    dentryType?: string;
    dentryUuid?: string;
    docKey?: string;
    extension?: string;
    hasChildren?: boolean;
    linkSourceInfo?: LinkSourceInfo;
    name?: string;
    path?: string;
    space?: SpaceModel;
    spaceId?: string;
    statisticalInfo?: DentryModelStatisticalInfo;
    updatedTime?: number;
    updater?: DentryModelUpdater;
    url?: string;
    visitorInfo?: DentryModelVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVO extends $tea.Model {
    contentType?: string;
    createdTime?: number;
    creator?: DentryVOCreator;
    dentryId?: string;
    dentryType?: string;
    dentryUuid?: string;
    docKey?: string;
    extension?: string;
    hasChildren?: boolean;
    linkSourceInfo?: LinkSourceInfo;
    name?: string;
    path?: string;
    space?: SpaceModel;
    spaceId?: string;
    updatedTime?: number;
    updater?: DentryVOUpdater;
    url?: string;
    visitorInfo?: DentryVOVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkSourceInfo extends $tea.Model {
    extension?: string;
    iconUrl?: LinkSourceInfoIconUrl;
    id?: string;
    linkType?: number;
    spaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenActionModel extends $tea.Model {
    name?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModel extends $tea.Model {
    cover?: string;
    description?: string;
    hdIconVO?: SpaceModelHdIconVO;
    iconVO?: SpaceModelIconVO;
    id?: string;
    name?: string;
    owner?: SpaceModelOwner;
    recentList?: DentryModel[];
    type?: number;
    url?: string;
    visitorInfo?: SpaceModelVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVO extends $tea.Model {
    cover?: string;
    description?: string;
    iconVO?: SpaceVOIconVO;
    id?: string;
    name?: string;
    owner?: SpaceVOOwner;
    type?: number;
    url?: string;
    visitorInfo?: SpaceVOVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModel extends $tea.Model {
    cover?: string;
    createdTime?: number;
    creator?: TeamModelCreator;
    description?: string;
    icon?: string;
    id?: string;
    name?: string;
    relatedDeptInfo?: TeamModelRelatedDeptInfo;
    status?: number;
    type?: number;
    updatedTime?: number;
    updater?: TeamModelUpdater;
    url?: string;
    visitInfo?: TeamModelVisitInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVO extends $tea.Model {
    cover?: string;
    createdTime?: number;
    creator?: TeamVOCreator;
    description?: string;
    icon?: string;
    id?: string;
    name?: string;
    relatedDeptInfo?: TeamVORelatedDeptInfo;
    shareScopeInfo?: TeamVOShareScopeInfo;
    status?: number;
    type?: number;
    updatedTime?: number;
    updater?: TeamVOUpdater;
    url?: string;
    visitInfo?: TeamVOVisitInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MapValue extends $tea.Model {
    templateId?: string;
    title?: string;
    type?: number;
    coverDownloadUrl?: string;
    description?: string;
    authorName?: string;
    createTime?: string;
    modifiedTime?: string;
    workspaceId?: string;
    workspaceName?: string;
    usedCount?: number;
    belong?: string;
    contentDownloadUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamRequest extends $tea.Model {
    param?: BatchCreateTeamRequestParam;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchCreateTeamResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteRecentsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteRecentsRequest extends $tea.Model {
    dentryUuids?: string[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteRecentsResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteRecentsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchDeleteRecentsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesRequest extends $tea.Model {
    option?: CategoriesTemplatesRequestOption;
    param?: CategoriesTemplatesRequestParam;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesResponseBody extends $tea.Model {
    map?: {
        [key: string]: MapValue[];
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CategoriesTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesRequest extends $tea.Model {
    option?: CategoryTemplatesRequestOption;
    param?: CategoryTemplatesRequestParam;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesResponseBody extends $tea.Model {
    list?: CategoryTemplatesResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CategoryTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryRequest extends $tea.Model {
    name?: string;
    operatorId?: string;
    targetSpaceId?: string;
    toNextDentryId?: string;
    toParentDentryId?: string;
    toPrevDentryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CopyDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDentryRequest extends $tea.Model {
    dentryType?: string;
    documentType?: number;
    name?: string;
    operatorId?: string;
    parentDentryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceRequest extends $tea.Model {
    description?: string;
    icon?: string;
    name?: string;
    operatorId?: string;
    sectionId?: string;
    shareScope?: CreateSpaceRequestShareScope;
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SpaceVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamRequest extends $tea.Model {
    cover?: string;
    description?: string;
    icon?: string;
    members?: CreateTeamRequestMembers[];
    name?: string;
    operatorId?: string;
    teamType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TeamVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateRequest extends $tea.Model {
    option?: CrossOrgMigrateRequestOption;
    param?: CrossOrgMigrateRequestParam;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CrossOrgMigrateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TeamVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentRequest extends $tea.Model {
    option?: DocContentRequestOption;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentResponseBody extends $tea.Model {
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DocContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentRequest extends $tea.Model {
    targetFormat?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentResponseBody extends $tea.Model {
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDocContentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDocContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSchemaHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSchemaRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSchemaResponseBody extends $tea.Model {
    revision?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSchemaResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSchemaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesRequest extends $tea.Model {
    dentryId?: string;
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesResponseBody extends $tea.Model {
    children?: DentryModel[];
    hasMore?: boolean;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceDirectoriesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSpaceDirectoriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStarInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStarInfoRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStarInfoResponseBody extends $tea.Model {
    starred?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetStarInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetStarInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TeamVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfDentriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfDentriesRequest extends $tea.Model {
    includeFolder?: boolean;
    operatorId?: string;
    spaceTypes?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfDentriesResponseBody extends $tea.Model {
    dentriesCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfDentriesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTotalNumberOfDentriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfSpacesRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfSpacesResponseBody extends $tea.Model {
    spacesCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTotalNumberOfSpacesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTotalNumberOfSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenRequest extends $tea.Model {
    docKey?: string;
    openToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenResponseBody extends $tea.Model {
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoByOpenTokenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetUserInfoByOpenTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsRequest extends $tea.Model {
    excludeFile?: boolean;
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsResponseBody extends $tea.Model {
    hasMore?: boolean;
    items?: ListFeedsResponseBodyItems[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListFeedsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListHotDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListHotDocsRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListHotDocsResponseBody extends $tea.Model {
    items?: DentryModel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListHotDocsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListHotDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesRequest extends $tea.Model {
    option?: ListPinSpacesRequestOption;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBody extends $tea.Model {
    nextToken?: string;
    resultItems?: ListPinSpacesResponseBodyResultItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListPinSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedSpaceTeamsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedSpaceTeamsRequest extends $tea.Model {
    operatorId?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedSpaceTeamsResponseBody extends $tea.Model {
    items?: TeamModel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedSpaceTeamsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListRelatedSpaceTeamsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedTeamsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedTeamsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedTeamsResponseBody extends $tea.Model {
    hasMore?: boolean;
    items?: TeamModel[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListRelatedTeamsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListRelatedTeamsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsResponseBody extends $tea.Model {
    items?: ListSpaceSectionsResponseBodyItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListSpaceSectionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsRequest extends $tea.Model {
    option?: ListStarsRequestOption;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBody extends $tea.Model {
    nextToken?: string;
    starList?: ListStarsResponseBodyStarList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListStarsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersResponseBody extends $tea.Model {
    members?: ListTeamMembersResponseBodyMembers[];
    teamName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListTeamMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MarkStarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MarkStarRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MarkStarResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MarkStarResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: MarkStarResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryRequest extends $tea.Model {
    operatorId?: string;
    targetSpaceId?: string;
    toNextDentryId?: string;
    toParentDentryId?: string;
    toPrevDentryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PinSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PinSpaceRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PinSpaceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PinSpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PinSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDentryRequest extends $tea.Model {
    includeSpace?: boolean;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocContentRequest extends $tea.Model {
    operatorId?: string;
    targetFormat?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocContentResponseBody extends $tea.Model {
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocContentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDocContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlRequest extends $tea.Model {
    operatorId?: string;
    url?: string;
    withStatisticalInfo?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlResponseBody extends $tea.Model {
    bizType?: string;
    dentry?: DentryModel;
    resourceType?: string;
    space?: QueryItemByUrlResponseBodySpace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryItemByUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMineSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMineSpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SpaceVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListRequest extends $tea.Model {
    creatorType?: number;
    fileType?: number;
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    recentType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    recentList?: QueryRecentListResponseBodyRecentList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryRecentListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpaceRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SpaceVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBody extends $tea.Model {
    hasMore?: boolean;
    items?: RelatedSpacesResponseBodyItems[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RelatedSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersRequest extends $tea.Model {
    members?: RemoveTeamMembersRequestMembers[];
    notify?: boolean;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersResponseBody extends $tea.Model {
    notInOrgMembers?: RemoveTeamMembersResponseBodyNotInOrgMembers[];
    saveSuccess?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RemoveTeamMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryRequest extends $tea.Model {
    name?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenameDentryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DentryVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersRequest extends $tea.Model {
    members?: SaveTeamMembersRequestMembers[];
    notify?: boolean;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersResponseBody extends $tea.Model {
    notInOrgMembers?: SaveTeamMembersResponseBodyNotInOrgMembers[];
    saveSuccess?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SaveTeamMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequest extends $tea.Model {
    dentryRequest?: SearchRequestDentryRequest;
    keyword?: string;
    operatorId?: string;
    spaceRequest?: SearchRequestSpaceRequest;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBody extends $tea.Model {
    dentryResult?: SearchResponseBodyDentryResult;
    spaceResult?: SearchResponseBodySpaceResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesRequest extends $tea.Model {
    option?: SearchTemplatesRequestOption;
    param?: SearchTemplatesRequestParam;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesResponseBody extends $tea.Model {
    nextToken?: string;
    templateList?: SearchTemplatesResponseBodyTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesRequest extends $tea.Model {
    option?: TeamTemplatesRequestOption;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesResponseBody extends $tea.Model {
    nextToken?: string;
    templateList?: TeamTemplatesResponseBodyTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TeamTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesRequest extends $tea.Model {
    option?: TemplateCategoriesRequestOption;
    param?: TemplateCategoriesRequestParam;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesResponseBody extends $tea.Model {
    list?: TemplateCategoriesResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TemplateCategoriesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnmarkStarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnmarkStarRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnmarkStarResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnmarkStarResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnmarkStarResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnpinSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnpinSpaceRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnpinSpaceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnpinSpaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UnpinSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTeamRequest extends $tea.Model {
    description?: string;
    name?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TeamVO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesRequest extends $tea.Model {
    option?: UserTemplatesRequestOption;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesResponseBody extends $tea.Model {
    nextToken?: string;
    templateList?: UserTemplatesResponseBodyTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UserTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelCreator extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelStatisticalInfo extends $tea.Model {
    wordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelUpdater extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryModelVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVOCreator extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVOUpdater extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DentryVOVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkSourceInfoIconUrl extends $tea.Model {
    line?: string;
    small?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelHdIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelOwner extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceModelVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVOIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVOOwner extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SpaceVOVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModelCreator extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModelRelatedDeptInfo extends $tea.Model {
    deptId?: string;
    deptName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModelUpdater extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamModelVisitInfo extends $tea.Model {
    joinTime?: string;
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVOCreator extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVORelatedDeptInfo extends $tea.Model {
    deptId?: string;
    deptName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVOShareScopeInfo extends $tea.Model {
    roleId?: string;
    scope?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVOUpdater extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamVOVisitInfo extends $tea.Model {
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamRequestParamCreateTeamParamList extends $tea.Model {
    adminUnionIdList?: string[];
    creatorUnionId?: string;
    deptId?: string;
    teamName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTeamRequestParam extends $tea.Model {
    createTeamParamList?: BatchCreateTeamRequestParamCreateTeamParamList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesRequestOption extends $tea.Model {
    categoryStatus?: number;
    queryPlatform?: string;
    size?: number;
    templateStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoriesTemplatesRequestParam extends $tea.Model {
    categoryIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesRequestOption extends $tea.Model {
    categoryStatus?: number;
    templateStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesRequestParam extends $tea.Model {
    categoryId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CategoryTemplatesResponseBodyList extends $tea.Model {
    authorName?: string;
    belong?: string;
    contentDownloadUrl?: string;
    coverDownloadUrl?: string;
    createTime?: string;
    description?: string;
    modifiedTime?: string;
    templateId?: string;
    title?: string;
    type?: number;
    usedCount?: number;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceRequestShareScope extends $tea.Model {
    scope?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTeamRequestMembers extends $tea.Model {
    memberId?: string;
    memberType?: number;
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateRequestOption extends $tea.Model {
    checkOperatorSourceRole?: boolean;
    deleteSource?: boolean;
    needRecycleFailedWorkspaceId?: boolean;
    relateTeamId?: number;
    relateTeamIdStr?: string;
    retainOrgGroup?: boolean;
    skipRole?: boolean;
    workspaceIdStrs?: string[];
    workspaceIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CrossOrgMigrateRequestParam extends $tea.Model {
    corpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocContentRequestOption extends $tea.Model {
    targetFormat?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFeedsResponseBodyItems extends $tea.Model {
    content?: string;
    time?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesRequestOption extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    withSpaceCreatorInfo?: boolean;
    withSpaceModifierInfo?: boolean;
    withSpacePermissionRole?: boolean;
    withTeamDetail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsSpaceInfoCreator extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsSpaceInfoIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsSpaceInfoModifier extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsSpaceInfo extends $tea.Model {
    cover?: string;
    createTime?: string;
    creator?: ListPinSpacesResponseBodyResultItemsSpaceInfoCreator;
    description?: string;
    iconVO?: ListPinSpacesResponseBodyResultItemsSpaceInfoIconVO;
    id?: string;
    mobileUrl?: string;
    modifiedTime?: string;
    modifier?: ListPinSpacesResponseBodyResultItemsSpaceInfoModifier;
    name?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItemsTeamInfo extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPinSpacesResponseBodyResultItems extends $tea.Model {
    createTime?: string;
    modifiedTime?: string;
    spaceInfo?: ListPinSpacesResponseBodyResultItemsSpaceInfo;
    spacePermissionRole?: string;
    teamInfo?: ListPinSpacesResponseBodyResultItemsTeamInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSpaceSectionsResponseBodyItems extends $tea.Model {
    displayType?: string;
    id?: string;
    name?: string;
    spaceNum?: number;
    spaces?: SpaceModel[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsRequestOption extends $tea.Model {
    contentTypeList?: string[];
    filterDocTypes?: string[];
    listV2?: boolean;
    maxResults?: number;
    nextToken?: string;
    order?: string;
    orderBy?: string;
    withDentryCreatorInfo?: boolean;
    withDentryModifierInfo?: boolean;
    withDentryPermissionRole?: boolean;
    withSpaceDetail?: boolean;
    withSpacePermissionRole?: boolean;
    withTeamDetail?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListDentryInfoCreator extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListDentryInfoModifier extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListDentryInfo extends $tea.Model {
    createTime?: string;
    creator?: ListStarsResponseBodyStarListDentryInfoCreator;
    extension?: string;
    id?: string;
    mobileUrl?: string;
    modifiedTime?: string;
    modifier?: ListStarsResponseBodyStarListDentryInfoModifier;
    name?: string;
    pcUrl?: string;
    spaceId?: string;
    status?: string;
    type?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListSpaceInfo extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarListTeamInfo extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListStarsResponseBodyStarList extends $tea.Model {
    createTime?: string;
    dentryInfo?: ListStarsResponseBodyStarListDentryInfo;
    dentryPermissionRole?: string;
    id?: string;
    isDeleted?: boolean;
    modifiedTime?: string;
    spaceInfo?: ListStarsResponseBodyStarListSpaceInfo;
    spacePermissionRole?: string;
    starType?: string;
    teamInfo?: ListStarsResponseBodyStarListTeamInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamMembersResponseBodyMembers extends $tea.Model {
    memberId?: string;
    memberType?: number;
    name?: string;
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlResponseBodySpaceOwner extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryItemByUrlResponseBodySpace extends $tea.Model {
    description?: string;
    id?: string;
    name?: string;
    owner?: QueryItemByUrlResponseBodySpaceOwner;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponseBodyRecentListTeam extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRecentListResponseBodyRecentList extends $tea.Model {
    deleted?: boolean;
    dentry?: DentryModel;
    recentTime?: number;
    team?: QueryRecentListResponseBodyRecentListTeam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItemsHdIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItemsIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItemsOwner extends $tea.Model {
    name?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItemsVisitorInfo extends $tea.Model {
    dentryActions?: string[];
    pinned?: boolean;
    roleCode?: string;
    spaceActions?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RelatedSpacesResponseBodyItems extends $tea.Model {
    cover?: string;
    description?: string;
    hdIconVO?: RelatedSpacesResponseBodyItemsHdIconVO;
    iconVO?: RelatedSpacesResponseBodyItemsIconVO;
    id?: string;
    name?: string;
    owner?: RelatedSpacesResponseBodyItemsOwner;
    recentList?: DentryModel[];
    type?: number;
    url?: string;
    visitorInfo?: RelatedSpacesResponseBodyItemsVisitorInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersRequestMembers extends $tea.Model {
    memberId?: string;
    memberType?: number;
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTeamMembersResponseBodyNotInOrgMembers extends $tea.Model {
    memberId?: string;
    memberType?: number;
    name?: string;
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersRequestMembers extends $tea.Model {
    memberId?: string;
    memberType?: number;
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveTeamMembersResponseBodyNotInOrgMembers extends $tea.Model {
    memberId?: string;
    memberType?: number;
    name?: string;
    roleCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequestDentryRequestVisitTimeRange extends $tea.Model {
    end?: number;
    start?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequestDentryRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    searchField?: number;
    searchFileType?: number;
    spaceId?: string;
    spaceIds?: string[];
    summaryLength?: number;
    visitTimeRange?: SearchRequestDentryRequestVisitTimeRange;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchRequestSpaceRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    withTeamInfo?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodyDentryResultItems extends $tea.Model {
    content?: string;
    creation?: OpenActionModel;
    dentryId?: string;
    dentryUuid?: string;
    extension?: string;
    iconUrl?: string;
    lastEdition?: OpenActionModel;
    name?: string;
    originName?: string;
    path?: string;
    sceneType?: number;
    searchFileType?: number;
    spaceId?: string;
    thumbnailUrl?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodyDentryResult extends $tea.Model {
    hasMore?: boolean;
    items?: SearchResponseBodyDentryResultItems[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResultItemsIconVO extends $tea.Model {
    icon?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResultItemsTeamVO extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResultItemsUserLastOperation extends $tea.Model {
    name?: string;
    time?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResultItems extends $tea.Model {
    iconVO?: SearchResponseBodySpaceResultItemsIconVO;
    name?: string;
    originName?: string;
    spaceId?: string;
    teamVO?: SearchResponseBodySpaceResultItemsTeamVO;
    url?: string;
    userLastOperation?: SearchResponseBodySpaceResultItemsUserLastOperation;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResponseBodySpaceResult extends $tea.Model {
    hasMore?: boolean;
    items?: SearchResponseBodySpaceResultItems[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesRequestOption extends $tea.Model {
    excludeWorkspaceIds?: string[];
    maxResults?: number;
    nextToken?: string;
    platform?: string;
    templateTypes?: number[];
    version?: number;
    workspaceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesRequestParam extends $tea.Model {
    belong?: string;
    searchName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTemplatesResponseBodyTemplateList extends $tea.Model {
    authorName?: string;
    belong?: string;
    contentDownloadUrl?: string;
    coverDownloadUrl?: string;
    createTime?: string;
    description?: string;
    modifiedTime?: string;
    templateId?: string;
    title?: string;
    type?: number;
    usedCount?: number;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesRequestOption extends $tea.Model {
    excludeWorkspaceIds?: string[];
    maxResults?: number;
    nextToken?: string;
    platform?: string;
    templateTypes?: number[];
    version?: number;
    workspaceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TeamTemplatesResponseBodyTemplateList extends $tea.Model {
    authorName?: string;
    belong?: string;
    contentDownloadUrl?: string;
    coverDownloadUrl?: string;
    createTime?: string;
    description?: string;
    modifiedTime?: string;
    templateId?: string;
    title?: string;
    type?: number;
    usedCount?: number;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesRequestOption extends $tea.Model {
    categoryStatus?: number;
    industryId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesRequestParam extends $tea.Model {
    tenantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TemplateCategoriesResponseBodyList extends $tea.Model {
    categoryId?: string;
    categoryName?: string;
    sort?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesRequestOption extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    platform?: string;
    templateTypes?: number[];
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTemplatesResponseBodyTemplateList extends $tea.Model {
    authorName?: string;
    belong?: string;
    contentDownloadUrl?: string;
    coverDownloadUrl?: string;
    createTime?: string;
    description?: string;
    modifiedTime?: string;
    templateId?: string;
    title?: string;
    type?: number;
    usedCount?: number;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    batchCreateTeamWithOptions(request: BatchCreateTeamRequest, headers: BatchCreateTeamHeaders, runtime: $Util.RuntimeOptions): Promise<BatchCreateTeamResponse>;
    batchCreateTeam(request: BatchCreateTeamRequest): Promise<BatchCreateTeamResponse>;
    batchDeleteRecentsWithOptions(request: BatchDeleteRecentsRequest, headers: BatchDeleteRecentsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchDeleteRecentsResponse>;
    batchDeleteRecents(request: BatchDeleteRecentsRequest): Promise<BatchDeleteRecentsResponse>;
    categoriesTemplatesWithOptions(request: CategoriesTemplatesRequest, headers: CategoriesTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<CategoriesTemplatesResponse>;
    categoriesTemplates(request: CategoriesTemplatesRequest): Promise<CategoriesTemplatesResponse>;
    categoryTemplatesWithOptions(request: CategoryTemplatesRequest, headers: CategoryTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<CategoryTemplatesResponse>;
    categoryTemplates(request: CategoryTemplatesRequest): Promise<CategoryTemplatesResponse>;
    copyDentryWithOptions(spaceId: string, dentryId: string, request: CopyDentryRequest, headers: CopyDentryHeaders, runtime: $Util.RuntimeOptions): Promise<CopyDentryResponse>;
    copyDentry(spaceId: string, dentryId: string, request: CopyDentryRequest): Promise<CopyDentryResponse>;
    createDentryWithOptions(spaceId: string, request: CreateDentryRequest, headers: CreateDentryHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDentryResponse>;
    createDentry(spaceId: string, request: CreateDentryRequest): Promise<CreateDentryResponse>;
    createSpaceWithOptions(request: CreateSpaceRequest, headers: CreateSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSpaceResponse>;
    createSpace(request: CreateSpaceRequest): Promise<CreateSpaceResponse>;
    createTeamWithOptions(request: CreateTeamRequest, headers: CreateTeamHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTeamResponse>;
    createTeam(request: CreateTeamRequest): Promise<CreateTeamResponse>;
    crossOrgMigrateWithOptions(request: CrossOrgMigrateRequest, headers: CrossOrgMigrateHeaders, runtime: $Util.RuntimeOptions): Promise<CrossOrgMigrateResponse>;
    crossOrgMigrate(request: CrossOrgMigrateRequest): Promise<CrossOrgMigrateResponse>;
    deleteTeamWithOptions(teamId: string, request: DeleteTeamRequest, headers: DeleteTeamHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteTeamResponse>;
    deleteTeam(teamId: string, request: DeleteTeamRequest): Promise<DeleteTeamResponse>;
    docContentWithOptions(dentryUuid: string, request: DocContentRequest, headers: DocContentHeaders, runtime: $Util.RuntimeOptions): Promise<DocContentResponse>;
    docContent(dentryUuid: string, request: DocContentRequest): Promise<DocContentResponse>;
    getDocContentWithOptions(dentryUuid: string, request: GetDocContentRequest, headers: GetDocContentHeaders, runtime: $Util.RuntimeOptions): Promise<GetDocContentResponse>;
    getDocContent(dentryUuid: string, request: GetDocContentRequest): Promise<GetDocContentResponse>;
    getSchemaWithOptions(teamId: string, request: GetSchemaRequest, headers: GetSchemaHeaders, runtime: $Util.RuntimeOptions): Promise<GetSchemaResponse>;
    getSchema(teamId: string, request: GetSchemaRequest): Promise<GetSchemaResponse>;
    getSpaceDirectoriesWithOptions(spaceId: string, request: GetSpaceDirectoriesRequest, headers: GetSpaceDirectoriesHeaders, runtime: $Util.RuntimeOptions): Promise<GetSpaceDirectoriesResponse>;
    getSpaceDirectories(spaceId: string, request: GetSpaceDirectoriesRequest): Promise<GetSpaceDirectoriesResponse>;
    getStarInfoWithOptions(dentryUuid: string, request: GetStarInfoRequest, headers: GetStarInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetStarInfoResponse>;
    getStarInfo(dentryUuid: string, request: GetStarInfoRequest): Promise<GetStarInfoResponse>;
    getTeamWithOptions(teamId: string, request: GetTeamRequest, headers: GetTeamHeaders, runtime: $Util.RuntimeOptions): Promise<GetTeamResponse>;
    getTeam(teamId: string, request: GetTeamRequest): Promise<GetTeamResponse>;
    getTotalNumberOfDentriesWithOptions(request: GetTotalNumberOfDentriesRequest, headers: GetTotalNumberOfDentriesHeaders, runtime: $Util.RuntimeOptions): Promise<GetTotalNumberOfDentriesResponse>;
    getTotalNumberOfDentries(request: GetTotalNumberOfDentriesRequest): Promise<GetTotalNumberOfDentriesResponse>;
    getTotalNumberOfSpacesWithOptions(request: GetTotalNumberOfSpacesRequest, headers: GetTotalNumberOfSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<GetTotalNumberOfSpacesResponse>;
    getTotalNumberOfSpaces(request: GetTotalNumberOfSpacesRequest): Promise<GetTotalNumberOfSpacesResponse>;
    getUserInfoByOpenTokenWithOptions(request: GetUserInfoByOpenTokenRequest, headers: GetUserInfoByOpenTokenHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserInfoByOpenTokenResponse>;
    getUserInfoByOpenToken(request: GetUserInfoByOpenTokenRequest): Promise<GetUserInfoByOpenTokenResponse>;
    listFeedsWithOptions(teamId: string, request: ListFeedsRequest, headers: ListFeedsHeaders, runtime: $Util.RuntimeOptions): Promise<ListFeedsResponse>;
    listFeeds(teamId: string, request: ListFeedsRequest): Promise<ListFeedsResponse>;
    listHotDocsWithOptions(teamId: string, request: ListHotDocsRequest, headers: ListHotDocsHeaders, runtime: $Util.RuntimeOptions): Promise<ListHotDocsResponse>;
    listHotDocs(teamId: string, request: ListHotDocsRequest): Promise<ListHotDocsResponse>;
    listPinSpacesWithOptions(request: ListPinSpacesRequest, headers: ListPinSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<ListPinSpacesResponse>;
    listPinSpaces(request: ListPinSpacesRequest): Promise<ListPinSpacesResponse>;
    listRelatedSpaceTeamsWithOptions(request: ListRelatedSpaceTeamsRequest, headers: ListRelatedSpaceTeamsHeaders, runtime: $Util.RuntimeOptions): Promise<ListRelatedSpaceTeamsResponse>;
    listRelatedSpaceTeams(request: ListRelatedSpaceTeamsRequest): Promise<ListRelatedSpaceTeamsResponse>;
    listRelatedTeamsWithOptions(request: ListRelatedTeamsRequest, headers: ListRelatedTeamsHeaders, runtime: $Util.RuntimeOptions): Promise<ListRelatedTeamsResponse>;
    listRelatedTeams(request: ListRelatedTeamsRequest): Promise<ListRelatedTeamsResponse>;
    listSpaceSectionsWithOptions(teamId: string, request: ListSpaceSectionsRequest, headers: ListSpaceSectionsHeaders, runtime: $Util.RuntimeOptions): Promise<ListSpaceSectionsResponse>;
    listSpaceSections(teamId: string, request: ListSpaceSectionsRequest): Promise<ListSpaceSectionsResponse>;
    listStarsWithOptions(request: ListStarsRequest, headers: ListStarsHeaders, runtime: $Util.RuntimeOptions): Promise<ListStarsResponse>;
    listStars(request: ListStarsRequest): Promise<ListStarsResponse>;
    listTeamMembersWithOptions(teamId: string, request: ListTeamMembersRequest, headers: ListTeamMembersHeaders, runtime: $Util.RuntimeOptions): Promise<ListTeamMembersResponse>;
    listTeamMembers(teamId: string, request: ListTeamMembersRequest): Promise<ListTeamMembersResponse>;
    markStarWithOptions(dentryUuid: string, request: MarkStarRequest, headers: MarkStarHeaders, runtime: $Util.RuntimeOptions): Promise<MarkStarResponse>;
    markStar(dentryUuid: string, request: MarkStarRequest): Promise<MarkStarResponse>;
    moveDentryWithOptions(spaceId: string, dentryId: string, request: MoveDentryRequest, headers: MoveDentryHeaders, runtime: $Util.RuntimeOptions): Promise<MoveDentryResponse>;
    moveDentry(spaceId: string, dentryId: string, request: MoveDentryRequest): Promise<MoveDentryResponse>;
    pinSpaceWithOptions(spaceId: string, request: PinSpaceRequest, headers: PinSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<PinSpaceResponse>;
    pinSpace(spaceId: string, request: PinSpaceRequest): Promise<PinSpaceResponse>;
    queryDentryWithOptions(spaceId: string, dentryId: string, request: QueryDentryRequest, headers: QueryDentryHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDentryResponse>;
    queryDentry(spaceId: string, dentryId: string, request: QueryDentryRequest): Promise<QueryDentryResponse>;
    queryDocContentWithOptions(dentryUuid: string, request: QueryDocContentRequest, headers: QueryDocContentHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDocContentResponse>;
    queryDocContent(dentryUuid: string, request: QueryDocContentRequest): Promise<QueryDocContentResponse>;
    queryItemByUrlWithOptions(request: QueryItemByUrlRequest, headers: QueryItemByUrlHeaders, runtime: $Util.RuntimeOptions): Promise<QueryItemByUrlResponse>;
    queryItemByUrl(request: QueryItemByUrlRequest): Promise<QueryItemByUrlResponse>;
    queryMineSpaceWithOptions(unionId: string, headers: QueryMineSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMineSpaceResponse>;
    queryMineSpace(unionId: string): Promise<QueryMineSpaceResponse>;
    queryRecentListWithOptions(request: QueryRecentListRequest, headers: QueryRecentListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRecentListResponse>;
    queryRecentList(request: QueryRecentListRequest): Promise<QueryRecentListResponse>;
    querySpaceWithOptions(spaceId: string, request: QuerySpaceRequest, headers: QuerySpaceHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySpaceResponse>;
    querySpace(spaceId: string, request: QuerySpaceRequest): Promise<QuerySpaceResponse>;
    relatedSpacesWithOptions(request: RelatedSpacesRequest, headers: RelatedSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<RelatedSpacesResponse>;
    relatedSpaces(request: RelatedSpacesRequest): Promise<RelatedSpacesResponse>;
    removeTeamMembersWithOptions(teamId: string, request: RemoveTeamMembersRequest, headers: RemoveTeamMembersHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveTeamMembersResponse>;
    removeTeamMembers(teamId: string, request: RemoveTeamMembersRequest): Promise<RemoveTeamMembersResponse>;
    renameDentryWithOptions(spaceId: string, dentryId: string, request: RenameDentryRequest, headers: RenameDentryHeaders, runtime: $Util.RuntimeOptions): Promise<RenameDentryResponse>;
    renameDentry(spaceId: string, dentryId: string, request: RenameDentryRequest): Promise<RenameDentryResponse>;
    saveTeamMembersWithOptions(teamId: string, request: SaveTeamMembersRequest, headers: SaveTeamMembersHeaders, runtime: $Util.RuntimeOptions): Promise<SaveTeamMembersResponse>;
    saveTeamMembers(teamId: string, request: SaveTeamMembersRequest): Promise<SaveTeamMembersResponse>;
    searchWithOptions(request: SearchRequest, headers: SearchHeaders, runtime: $Util.RuntimeOptions): Promise<SearchResponse>;
    search(request: SearchRequest): Promise<SearchResponse>;
    searchTemplatesWithOptions(request: SearchTemplatesRequest, headers: SearchTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<SearchTemplatesResponse>;
    searchTemplates(request: SearchTemplatesRequest): Promise<SearchTemplatesResponse>;
    teamTemplatesWithOptions(request: TeamTemplatesRequest, headers: TeamTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<TeamTemplatesResponse>;
    teamTemplates(request: TeamTemplatesRequest): Promise<TeamTemplatesResponse>;
    templateCategoriesWithOptions(request: TemplateCategoriesRequest, headers: TemplateCategoriesHeaders, runtime: $Util.RuntimeOptions): Promise<TemplateCategoriesResponse>;
    templateCategories(request: TemplateCategoriesRequest): Promise<TemplateCategoriesResponse>;
    unmarkStarWithOptions(dentryUuid: string, request: UnmarkStarRequest, headers: UnmarkStarHeaders, runtime: $Util.RuntimeOptions): Promise<UnmarkStarResponse>;
    unmarkStar(dentryUuid: string, request: UnmarkStarRequest): Promise<UnmarkStarResponse>;
    unpinSpaceWithOptions(spaceId: string, request: UnpinSpaceRequest, headers: UnpinSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<UnpinSpaceResponse>;
    unpinSpace(spaceId: string, request: UnpinSpaceRequest): Promise<UnpinSpaceResponse>;
    updateTeamWithOptions(teamId: string, request: UpdateTeamRequest, headers: UpdateTeamHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTeamResponse>;
    updateTeam(teamId: string, request: UpdateTeamRequest): Promise<UpdateTeamResponse>;
    userTemplatesWithOptions(request: UserTemplatesRequest, headers: UserTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<UserTemplatesResponse>;
    userTemplates(request: UserTemplatesRequest): Promise<UserTemplatesResponse>;
}
