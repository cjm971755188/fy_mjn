"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddRecentUserAppListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddRecentUserAppListHeaders = AddRecentUserAppListHeaders;
class AddRecentUserAppListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            usedAppDetailList: 'usedAppDetailList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            usedAppDetailList: { 'type': 'array', 'itemType': AddRecentUserAppListRequestUsedAppDetailList },
            userId: 'string',
        };
    }
}
exports.AddRecentUserAppListRequest = AddRecentUserAppListRequest;
class AddRecentUserAppListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.AddRecentUserAppListResponseBody = AddRecentUserAppListResponseBody;
class AddRecentUserAppListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddRecentUserAppListResponseBody,
        };
    }
}
exports.AddRecentUserAppListResponse = AddRecentUserAppListResponse;
class GetDingPortalDetailHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDingPortalDetailHeaders = GetDingPortalDetailHeaders;
class GetDingPortalDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUuid: 'appUuid',
            dingPortalName: 'dingPortalName',
            pages: 'pages',
        };
    }
    static types() {
        return {
            appUuid: 'string',
            dingPortalName: 'string',
            pages: { 'type': 'array', 'itemType': GetDingPortalDetailResponseBodyPages },
        };
    }
}
exports.GetDingPortalDetailResponseBody = GetDingPortalDetailResponseBody;
class GetDingPortalDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDingPortalDetailResponseBody,
        };
    }
}
exports.GetDingPortalDetailResponse = GetDingPortalDetailResponse;
class GetPluginPermissionPointHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPluginPermissionPointHeaders = GetPluginPermissionPointHeaders;
class GetPluginPermissionPointRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniAppId: 'miniAppId',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
        };
    }
}
exports.GetPluginPermissionPointRequest = GetPluginPermissionPointRequest;
class GetPluginPermissionPointResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            permissionPointList: 'permissionPointList',
        };
    }
    static types() {
        return {
            permissionPointList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetPluginPermissionPointResponseBody = GetPluginPermissionPointResponseBody;
class GetPluginPermissionPointResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPluginPermissionPointResponseBody,
        };
    }
}
exports.GetPluginPermissionPointResponse = GetPluginPermissionPointResponse;
class GetPluginRuleCheckInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPluginRuleCheckInfoHeaders = GetPluginRuleCheckInfoHeaders;
class GetPluginRuleCheckInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniAppId: 'miniAppId',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
        };
    }
}
exports.GetPluginRuleCheckInfoRequest = GetPluginRuleCheckInfoRequest;
class GetPluginRuleCheckInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            packCode: 'packCode',
            pluginRuleCheckDetail: 'pluginRuleCheckDetail',
        };
    }
    static types() {
        return {
            packCode: 'string',
            pluginRuleCheckDetail: 'string',
        };
    }
}
exports.GetPluginRuleCheckInfoResponseBody = GetPluginRuleCheckInfoResponseBody;
class GetPluginRuleCheckInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPluginRuleCheckInfoResponseBody,
        };
    }
}
exports.GetPluginRuleCheckInfoResponse = GetPluginRuleCheckInfoResponse;
class ListWorkBenchGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListWorkBenchGroupHeaders = ListWorkBenchGroupHeaders;
class ListWorkBenchGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ecologicalCorpId: 'ecologicalCorpId',
            groupType: 'groupType',
            opUnionId: 'opUnionId',
        };
    }
    static types() {
        return {
            ecologicalCorpId: 'string',
            groupType: 'string',
            opUnionId: 'string',
        };
    }
}
exports.ListWorkBenchGroupRequest = ListWorkBenchGroupRequest;
class ListWorkBenchGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupList: 'groupList',
        };
    }
    static types() {
        return {
            groupList: { 'type': 'array', 'itemType': ListWorkBenchGroupResponseBodyGroupList },
        };
    }
}
exports.ListWorkBenchGroupResponseBody = ListWorkBenchGroupResponseBody;
class ListWorkBenchGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListWorkBenchGroupResponseBody,
        };
    }
}
exports.ListWorkBenchGroupResponse = ListWorkBenchGroupResponse;
class ModifyWorkbenchBadgeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ModifyWorkbenchBadgeHeaders = ModifyWorkbenchBadgeHeaders;
class ModifyWorkbenchBadgeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizIdList: 'bizIdList',
            isAdded: 'isAdded',
            redDotRelationId: 'redDotRelationId',
            redDotType: 'redDotType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizIdList: { 'type': 'array', 'itemType': 'string' },
            isAdded: 'boolean',
            redDotRelationId: 'string',
            redDotType: 'string',
            userId: 'string',
        };
    }
}
exports.ModifyWorkbenchBadgeRequest = ModifyWorkbenchBadgeRequest;
class ModifyWorkbenchBadgeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.ModifyWorkbenchBadgeResponseBody = ModifyWorkbenchBadgeResponseBody;
class ModifyWorkbenchBadgeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ModifyWorkbenchBadgeResponseBody,
        };
    }
}
exports.ModifyWorkbenchBadgeResponse = ModifyWorkbenchBadgeResponse;
class QueryComponentScopesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryComponentScopesHeaders = QueryComponentScopesHeaders;
class QueryComponentScopesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptVisibleScopes: 'deptVisibleScopes',
            userVisibleScopes: 'userVisibleScopes',
        };
    }
    static types() {
        return {
            deptVisibleScopes: { 'type': 'array', 'itemType': 'number' },
            userVisibleScopes: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryComponentScopesResponseBody = QueryComponentScopesResponseBody;
class QueryComponentScopesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryComponentScopesResponseBody,
        };
    }
}
exports.QueryComponentScopesResponse = QueryComponentScopesResponse;
class QueryShortcutScopesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryShortcutScopesHeaders = QueryShortcutScopesHeaders;
class QueryShortcutScopesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptVisibleScopes: 'deptVisibleScopes',
            userVisibleScopes: 'userVisibleScopes',
        };
    }
    static types() {
        return {
            deptVisibleScopes: { 'type': 'array', 'itemType': 'number' },
            userVisibleScopes: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryShortcutScopesResponseBody = QueryShortcutScopesResponseBody;
class QueryShortcutScopesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryShortcutScopesResponseBody,
        };
    }
}
exports.QueryShortcutScopesResponse = QueryShortcutScopesResponse;
class UndoDeletionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UndoDeletionHeaders = UndoDeletionHeaders;
class UndoDeletionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizIdList: 'bizIdList',
            redDotRelationId: 'redDotRelationId',
            redDotType: 'redDotType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizIdList: { 'type': 'array', 'itemType': 'string' },
            redDotRelationId: 'string',
            redDotType: 'string',
            userId: 'string',
        };
    }
}
exports.UndoDeletionRequest = UndoDeletionRequest;
class UndoDeletionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UndoDeletionResponseBody = UndoDeletionResponseBody;
class UndoDeletionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UndoDeletionResponseBody,
        };
    }
}
exports.UndoDeletionResponse = UndoDeletionResponse;
class UpdateDingPortalPageScopeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateDingPortalPageScopeHeaders = UpdateDingPortalPageScopeHeaders;
class UpdateDingPortalPageScopeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            allVisible: 'allVisible',
            deptIds: 'deptIds',
            roleIds: 'roleIds',
            userids: 'userids',
        };
    }
    static types() {
        return {
            allVisible: 'boolean',
            deptIds: { 'type': 'array', 'itemType': 'number' },
            roleIds: { 'type': 'array', 'itemType': 'number' },
            userids: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.UpdateDingPortalPageScopeRequest = UpdateDingPortalPageScopeRequest;
class UpdateDingPortalPageScopeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateDingPortalPageScopeResponse = UpdateDingPortalPageScopeResponse;
class AddRecentUserAppListRequestUsedAppDetailList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
        };
    }
    static types() {
        return {
            agentId: 'string',
        };
    }
}
exports.AddRecentUserAppListRequestUsedAppDetailList = AddRecentUserAppListRequestUsedAppDetailList;
class GetDingPortalDetailResponseBodyPages extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            allVisible: 'allVisible',
            deptIds: 'deptIds',
            pageName: 'pageName',
            pageUuid: 'pageUuid',
            roleIds: 'roleIds',
            userids: 'userids',
        };
    }
    static types() {
        return {
            allVisible: 'boolean',
            deptIds: { 'type': 'array', 'itemType': 'number' },
            pageName: 'string',
            pageUuid: 'string',
            roleIds: { 'type': 'array', 'itemType': 'number' },
            userids: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetDingPortalDetailResponseBodyPages = GetDingPortalDetailResponseBodyPages;
class ListWorkBenchGroupResponseBodyGroupList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            componentId: 'componentId',
            name: 'name',
        };
    }
    static types() {
        return {
            componentId: 'string',
            name: 'string',
        };
    }
}
exports.ListWorkBenchGroupResponseBodyGroupList = ListWorkBenchGroupResponseBodyGroupList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addRecentUserAppListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.usedAppDetailList)) {
            body["usedAppDetailList"] = request.usedAppDetailList;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddRecentUserAppList",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/components/recentUsed/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddRecentUserAppListResponse({}));
    }
    async addRecentUserAppList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddRecentUserAppListHeaders({});
        return await this.addRecentUserAppListWithOptions(request, headers, runtime);
    }
    async getDingPortalDetailWithOptions(appUuid, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetDingPortalDetail",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/dingPortals/${appUuid}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDingPortalDetailResponse({}));
    }
    async getDingPortalDetail(appUuid) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDingPortalDetailHeaders({});
        return await this.getDingPortalDetailWithOptions(appUuid, headers, runtime);
    }
    async getPluginPermissionPointWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            query["miniAppId"] = request.miniAppId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPluginPermissionPoint",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/plugins/permissions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPluginPermissionPointResponse({}));
    }
    async getPluginPermissionPoint(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPluginPermissionPointHeaders({});
        return await this.getPluginPermissionPointWithOptions(request, headers, runtime);
    }
    async getPluginRuleCheckInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            query["miniAppId"] = request.miniAppId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPluginRuleCheckInfo",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/plugins/validationRules`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPluginRuleCheckInfoResponse({}));
    }
    async getPluginRuleCheckInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPluginRuleCheckInfoHeaders({});
        return await this.getPluginRuleCheckInfoWithOptions(request, headers, runtime);
    }
    async listWorkBenchGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ecologicalCorpId)) {
            query["ecologicalCorpId"] = request.ecologicalCorpId;
        }
        if (!tea_util_1.default.isUnset(request.groupType)) {
            query["groupType"] = request.groupType;
        }
        if (!tea_util_1.default.isUnset(request.opUnionId)) {
            query["opUnionId"] = request.opUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListWorkBenchGroup",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/groups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListWorkBenchGroupResponse({}));
    }
    async listWorkBenchGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListWorkBenchGroupHeaders({});
        return await this.listWorkBenchGroupWithOptions(request, headers, runtime);
    }
    async modifyWorkbenchBadgeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizIdList)) {
            body["bizIdList"] = request.bizIdList;
        }
        if (!tea_util_1.default.isUnset(request.isAdded)) {
            body["isAdded"] = request.isAdded;
        }
        if (!tea_util_1.default.isUnset(request.redDotRelationId)) {
            body["redDotRelationId"] = request.redDotRelationId;
        }
        if (!tea_util_1.default.isUnset(request.redDotType)) {
            body["redDotType"] = request.redDotType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ModifyWorkbenchBadge",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/badges/modify`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ModifyWorkbenchBadgeResponse({}));
    }
    async modifyWorkbenchBadge(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ModifyWorkbenchBadgeHeaders({});
        return await this.modifyWorkbenchBadgeWithOptions(request, headers, runtime);
    }
    async queryComponentScopesWithOptions(componentId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryComponentScopes",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/components/${componentId}/scopes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryComponentScopesResponse({}));
    }
    async queryComponentScopes(componentId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryComponentScopesHeaders({});
        return await this.queryComponentScopesWithOptions(componentId, headers, runtime);
    }
    async queryShortcutScopesWithOptions(shortcutKey, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryShortcutScopes",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/shortcuts/${shortcutKey}/scopes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryShortcutScopesResponse({}));
    }
    async queryShortcutScopes(shortcutKey) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryShortcutScopesHeaders({});
        return await this.queryShortcutScopesWithOptions(shortcutKey, headers, runtime);
    }
    async undoDeletionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizIdList)) {
            body["bizIdList"] = request.bizIdList;
        }
        if (!tea_util_1.default.isUnset(request.redDotRelationId)) {
            body["redDotRelationId"] = request.redDotRelationId;
        }
        if (!tea_util_1.default.isUnset(request.redDotType)) {
            body["redDotType"] = request.redDotType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UndoDeletion",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/badges/undoDeleted`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UndoDeletionResponse({}));
    }
    async undoDeletion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UndoDeletionHeaders({});
        return await this.undoDeletionWithOptions(request, headers, runtime);
    }
    async updateDingPortalPageScopeWithOptions(pageUuid, appUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.allVisible)) {
            body["allVisible"] = request.allVisible;
        }
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.roleIds)) {
            body["roleIds"] = request.roleIds;
        }
        if (!tea_util_1.default.isUnset(request.userids)) {
            body["userids"] = request.userids;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateDingPortalPageScope",
            version: "workbench_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/workbench/dingPortals/${appUuid}/pageScopes/${pageUuid}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateDingPortalPageScopeResponse({}));
    }
    async updateDingPortalPageScope(pageUuid, appUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateDingPortalPageScopeHeaders({});
        return await this.updateDingPortalPageScopeWithOptions(pageUuid, appUuid, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map