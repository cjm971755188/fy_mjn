/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CountTodoTasksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountTodoTasksRequest extends $tea.Model {
    category?: string;
    fromDueTime?: number;
    isDone?: boolean;
    isRecycled?: boolean;
    roleTypes?: string[][];
    toDueTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountTodoTasksResponseBody extends $tea.Model {
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CountTodoTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CountTodoTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskRequest extends $tea.Model {
    actionList?: CreateTodoTaskRequestActionList[];
    bizCategoryId?: string;
    contentFieldList?: CreateTodoTaskRequestContentFieldList[];
    creatorId?: string;
    description?: string;
    detailUrl?: CreateTodoTaskRequestDetailUrl;
    dueTime?: number;
    executorIds?: string[];
    isOnlyShowExecutor?: boolean;
    notifyConfigs?: CreateTodoTaskRequestNotifyConfigs;
    participantIds?: string[];
    priority?: number;
    sourceId?: string;
    subject?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskResponseBody extends $tea.Model {
    bizTag?: string;
    contentFieldList?: CreateTodoTaskResponseBodyContentFieldList[];
    createdTime?: number;
    creatorId?: string;
    description?: string;
    detailUrl?: CreateTodoTaskResponseBodyDetailUrl;
    done?: boolean;
    dueTime?: number;
    executorIds?: string[];
    finishTime?: number;
    id?: string;
    isOnlyShowExecutor?: boolean;
    modifiedTime?: number;
    modifierId?: string;
    notifyConfigs?: CreateTodoTaskResponseBodyNotifyConfigs;
    participantIds?: string[];
    priority?: number;
    requestId?: string;
    source?: string;
    sourceId?: string;
    startTime?: number;
    subject?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateTodoTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTypeConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTypeConfigRequest extends $tea.Model {
    actionList?: CreateTodoTypeConfigRequestActionList[];
    cardType?: number;
    contentFieldList?: CreateTodoTypeConfigRequestContentFieldList[];
    description?: string;
    icon?: string;
    pcDetailUrlOpenMode?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTypeConfigResponseBody extends $tea.Model {
    actionList?: CreateTodoTypeConfigResponseBodyActionList[];
    bizTag?: string;
    cardType?: number;
    contentFieldList?: CreateTodoTypeConfigResponseBodyContentFieldList[];
    createdTime?: number;
    creatorId?: string;
    description?: string;
    icon?: string;
    id?: string;
    modifiedTime?: number;
    modifierId?: string;
    pcDetailUrlOpenMode?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTypeConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateTodoTypeConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTodoTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTodoTaskRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTodoTaskResponseBody extends $tea.Model {
    requestId?: string;
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTodoTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteTodoTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskResponseBody extends $tea.Model {
    bizTag?: string;
    cardTypeId?: string;
    createdTime?: number;
    creatorId?: string;
    description?: string;
    detailUrl?: GetTodoTaskResponseBodyDetailUrl;
    done?: boolean;
    dueTime?: number;
    executorIds?: string[];
    finishTime?: number;
    id?: string;
    isOnlyShowExecutor?: boolean;
    modifiedTime?: number;
    modifierId?: string;
    participantIds?: string[];
    priority?: number;
    requestId?: string;
    source?: string;
    sourceId?: string;
    startTime?: number;
    subject?: string;
    tenantId?: string;
    tenantType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTodoTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskBySourceIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskBySourceIdResponseBody extends $tea.Model {
    bizTag?: string;
    createdTime?: number;
    creatorId?: string;
    description?: string;
    detailUrl?: GetTodoTaskBySourceIdResponseBodyDetailUrl;
    done?: boolean;
    dueTime?: number;
    executorIds?: string[];
    finishTime?: number;
    id?: string;
    isOnlyShowExecutor?: boolean;
    modifiedTime?: number;
    modifierId?: string;
    participantIds?: string[];
    priority?: number;
    requestId?: string;
    source?: string;
    sourceId?: string;
    startTime?: number;
    subject?: string;
    tenantId?: string;
    tenantType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskBySourceIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTodoTaskBySourceIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskDetailResponseBody extends $tea.Model {
    bizTag?: string;
    category?: string;
    createdTime?: number;
    creatorId?: string;
    description?: string;
    detailUrl?: GetTodoTaskDetailResponseBodyDetailUrl;
    done?: boolean;
    dueTime?: number;
    executorIds?: string[];
    executorStatus?: GetTodoTaskDetailResponseBodyExecutorStatus[];
    finishTime?: number;
    id?: string;
    isOnlyShowExecutor?: boolean;
    modifiedTime?: number;
    modifierId?: string;
    orgInfo?: GetTodoTaskDetailResponseBodyOrgInfo;
    participantIds?: string[];
    priority?: number;
    requestId?: string;
    source?: string;
    sourceId?: string;
    startTime?: number;
    subject?: string;
    tenantId?: string;
    tenantType?: string;
    todoCardView?: GetTodoTaskDetailResponseBodyTodoCardView;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTodoTaskDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTypeConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTypeConfigResponseBody extends $tea.Model {
    actionList?: GetTodoTypeConfigResponseBodyActionList[];
    bizTag?: string;
    cardType?: number;
    contentFieldList?: GetTodoTypeConfigResponseBodyContentFieldList[];
    createdTime?: number;
    creatorId?: string;
    description?: string;
    icon?: string;
    id?: string;
    modifiedTime?: number;
    modifierId?: string;
    pcDetailUrlOpenMode?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTypeConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTodoTypeConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoByUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoByUserRequest extends $tea.Model {
    fromDueTime?: number;
    isDone?: boolean;
    maxResults?: number;
    nextToken?: string;
    orderBy?: string;
    orderDirection?: string;
    roleTypes?: string[][];
    subject?: string;
    toDueTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoByUserResponseBody extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    todoCards?: QueryOrgTodoByUserResponseBodyTodoCards[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoByUserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryOrgTodoByUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoTasksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoTasksRequest extends $tea.Model {
    isDone?: boolean;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoTasksResponseBody extends $tea.Model {
    nextToken?: string;
    todoCards?: QueryOrgTodoTasksResponseBodyTodoCards[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryOrgTodoTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksRequest extends $tea.Model {
    category?: string;
    fromDueTime?: number;
    isDone?: boolean;
    isRecycled?: boolean;
    nextToken?: string;
    orderBy?: string;
    orderDirection?: string;
    roleTypes?: string[][];
    toDueTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksResponseBody extends $tea.Model {
    nextToken?: string;
    todoCards?: QueryTodoTasksResponseBodyTodoCards[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryTodoTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTaskRequest extends $tea.Model {
    description?: string;
    done?: boolean;
    dueTime?: number;
    executorIds?: string[];
    participantIds?: string[];
    subject?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTaskResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateTodoTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTaskExecutorStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTaskExecutorStatusRequest extends $tea.Model {
    executorStatusList?: UpdateTodoTaskExecutorStatusRequestExecutorStatusList[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTaskExecutorStatusResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTaskExecutorStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateTodoTaskExecutorStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTypeConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTypeConfigRequest extends $tea.Model {
    actionList?: UpdateTodoTypeConfigRequestActionList[];
    cardType?: number;
    contentFieldList?: UpdateTodoTypeConfigRequestContentFieldList[];
    description?: string;
    icon?: string;
    pcDetailUrlOpenMode?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTypeConfigResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTypeConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateTodoTypeConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskRequestActionListParam extends $tea.Model {
    body?: string;
    header?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskRequestActionList extends $tea.Model {
    actionKey?: string;
    actionType?: number;
    buttonStyleType?: number;
    param?: CreateTodoTaskRequestActionListParam;
    pcUrl?: string;
    title?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskRequestContentFieldList extends $tea.Model {
    fieldKey?: string;
    fieldValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskRequestDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskRequestNotifyConfigs extends $tea.Model {
    dingNotify?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskResponseBodyContentFieldList extends $tea.Model {
    fieldKey?: string;
    fieldValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskResponseBodyDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTaskResponseBodyNotifyConfigs extends $tea.Model {
    dingNotify?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTypeConfigRequestActionList extends $tea.Model {
    actionKey?: string;
    actionType?: number;
    buttonStyleType?: number;
    nameI18n?: {
        [key: string]: any;
    };
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTypeConfigRequestContentFieldList extends $tea.Model {
    fieldKey?: string;
    fieldType?: string;
    nameI18n?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTypeConfigResponseBodyActionList extends $tea.Model {
    actionKey?: string;
    actionType?: number;
    buttonStyleType?: number;
    nameI18n?: {
        [key: string]: any;
    };
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTodoTypeConfigResponseBodyContentFieldList extends $tea.Model {
    fieldKey?: string;
    fieldType?: string;
    nameI18n?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskResponseBodyDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskBySourceIdResponseBodyDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskDetailResponseBodyDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskDetailResponseBodyExecutorStatus extends $tea.Model {
    isDone?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskDetailResponseBodyOrgInfo extends $tea.Model {
    corpId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskDetailResponseBodyTodoCardViewTodoCardContentList extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTaskDetailResponseBodyTodoCardView extends $tea.Model {
    actionType?: string;
    cardType?: string;
    circleELType?: string;
    contentType?: string;
    icon?: string;
    todoCardContentList?: GetTodoTaskDetailResponseBodyTodoCardViewTodoCardContentList[];
    todoCardTitle?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTypeConfigResponseBodyActionList extends $tea.Model {
    actionKey?: string;
    actionType?: number;
    buttonStyleType?: number;
    nameI18n?: {
        [key: string]: any;
    };
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTodoTypeConfigResponseBodyContentFieldList extends $tea.Model {
    fieldKey?: string;
    fieldType?: string;
    nameI18n?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoByUserResponseBodyTodoCardsDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoByUserResponseBodyTodoCards extends $tea.Model {
    bizTag?: string;
    createdTime?: number;
    creatorId?: string;
    detailUrl?: QueryOrgTodoByUserResponseBodyTodoCardsDetailUrl;
    dueTime?: number;
    isDone?: boolean;
    modifiedTime?: number;
    priority?: number;
    sourceExt?: string;
    sourceId?: string;
    subject?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTodoTasksResponseBodyTodoCards extends $tea.Model {
    bizTag?: string;
    createdTime?: number;
    creatorId?: string;
    detailUrl?: QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl;
    dueTime?: number;
    isDone?: boolean;
    modifiedTime?: number;
    priority?: number;
    sourceId?: string;
    subject?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksResponseBodyTodoCardsDetailUrl extends $tea.Model {
    appUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksResponseBodyTodoCardsOrgInfo extends $tea.Model {
    corpId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksResponseBodyTodoCardsOriginalSource extends $tea.Model {
    sourceTitle?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksResponseBodyTodoCardsTodoCardViewTodoCardContentList extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksResponseBodyTodoCardsTodoCardView extends $tea.Model {
    actionType?: string;
    cardType?: string;
    circleELType?: string;
    contentType?: string;
    icon?: string;
    todoCardContentList?: QueryTodoTasksResponseBodyTodoCardsTodoCardViewTodoCardContentList[];
    todoCardTitle?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoTasksResponseBodyTodoCards extends $tea.Model {
    bizTag?: string;
    category?: string;
    createdTime?: number;
    creatorId?: string;
    detailUrl?: QueryTodoTasksResponseBodyTodoCardsDetailUrl;
    dueTime?: number;
    isDone?: boolean;
    modifiedTime?: number;
    orgInfo?: QueryTodoTasksResponseBodyTodoCardsOrgInfo;
    originalSource?: QueryTodoTasksResponseBodyTodoCardsOriginalSource;
    priority?: number;
    sourceId?: string;
    subject?: string;
    taskId?: string;
    todoCardView?: QueryTodoTasksResponseBodyTodoCardsTodoCardView;
    todoStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTaskExecutorStatusRequestExecutorStatusList extends $tea.Model {
    id?: string;
    isDone?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTypeConfigRequestActionList extends $tea.Model {
    actionKey?: string;
    actionType?: number;
    buttonStyleType?: number;
    nameI18n?: {
        [key: string]: any;
    };
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTodoTypeConfigRequestContentFieldList extends $tea.Model {
    fieldKey?: string;
    fieldType?: string;
    nameI18n?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    countTodoTasksWithOptions(unionId: string, request: CountTodoTasksRequest, headers: CountTodoTasksHeaders, runtime: $Util.RuntimeOptions): Promise<CountTodoTasksResponse>;
    countTodoTasks(unionId: string, request: CountTodoTasksRequest): Promise<CountTodoTasksResponse>;
    createTodoTaskWithOptions(unionId: string, request: CreateTodoTaskRequest, headers: CreateTodoTaskHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTodoTaskResponse>;
    createTodoTask(unionId: string, request: CreateTodoTaskRequest): Promise<CreateTodoTaskResponse>;
    createTodoTypeConfigWithOptions(unionId: string, request: CreateTodoTypeConfigRequest, headers: CreateTodoTypeConfigHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTodoTypeConfigResponse>;
    createTodoTypeConfig(unionId: string, request: CreateTodoTypeConfigRequest): Promise<CreateTodoTypeConfigResponse>;
    deleteTodoTaskWithOptions(unionId: string, taskId: string, request: DeleteTodoTaskRequest, headers: DeleteTodoTaskHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteTodoTaskResponse>;
    deleteTodoTask(unionId: string, taskId: string, request: DeleteTodoTaskRequest): Promise<DeleteTodoTaskResponse>;
    getTodoTaskWithOptions(unionId: string, taskId: string, headers: GetTodoTaskHeaders, runtime: $Util.RuntimeOptions): Promise<GetTodoTaskResponse>;
    getTodoTask(unionId: string, taskId: string): Promise<GetTodoTaskResponse>;
    getTodoTaskBySourceIdWithOptions(unionId: string, sourceId: string, headers: GetTodoTaskBySourceIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetTodoTaskBySourceIdResponse>;
    getTodoTaskBySourceId(unionId: string, sourceId: string): Promise<GetTodoTaskBySourceIdResponse>;
    getTodoTaskDetailWithOptions(taskId: string, unionId: string, headers: GetTodoTaskDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetTodoTaskDetailResponse>;
    getTodoTaskDetail(taskId: string, unionId: string): Promise<GetTodoTaskDetailResponse>;
    getTodoTypeConfigWithOptions(unionId: string, cardTypeId: string, headers: GetTodoTypeConfigHeaders, runtime: $Util.RuntimeOptions): Promise<GetTodoTypeConfigResponse>;
    getTodoTypeConfig(unionId: string, cardTypeId: string): Promise<GetTodoTypeConfigResponse>;
    queryOrgTodoByUserWithOptions(unionId: string, request: QueryOrgTodoByUserRequest, headers: QueryOrgTodoByUserHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOrgTodoByUserResponse>;
    queryOrgTodoByUser(unionId: string, request: QueryOrgTodoByUserRequest): Promise<QueryOrgTodoByUserResponse>;
    queryOrgTodoTasksWithOptions(unionId: string, request: QueryOrgTodoTasksRequest, headers: QueryOrgTodoTasksHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOrgTodoTasksResponse>;
    queryOrgTodoTasks(unionId: string, request: QueryOrgTodoTasksRequest): Promise<QueryOrgTodoTasksResponse>;
    queryTodoTasksWithOptions(unionId: string, request: QueryTodoTasksRequest, headers: QueryTodoTasksHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTodoTasksResponse>;
    queryTodoTasks(unionId: string, request: QueryTodoTasksRequest): Promise<QueryTodoTasksResponse>;
    updateTodoTaskWithOptions(unionId: string, taskId: string, request: UpdateTodoTaskRequest, headers: UpdateTodoTaskHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTodoTaskResponse>;
    updateTodoTask(unionId: string, taskId: string, request: UpdateTodoTaskRequest): Promise<UpdateTodoTaskResponse>;
    updateTodoTaskExecutorStatusWithOptions(unionId: string, taskId: string, request: UpdateTodoTaskExecutorStatusRequest, headers: UpdateTodoTaskExecutorStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTodoTaskExecutorStatusResponse>;
    updateTodoTaskExecutorStatus(unionId: string, taskId: string, request: UpdateTodoTaskExecutorStatusRequest): Promise<UpdateTodoTaskExecutorStatusResponse>;
    updateTodoTypeConfigWithOptions(unionId: string, cardTypeId: string, request: UpdateTodoTypeConfigRequest, headers: UpdateTodoTypeConfigHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTodoTypeConfigResponse>;
    updateTodoTypeConfig(unionId: string, cardTypeId: string, request: UpdateTodoTypeConfigRequest): Promise<UpdateTodoTypeConfigResponse>;
}
