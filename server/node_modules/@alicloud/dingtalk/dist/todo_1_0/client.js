"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CountTodoTasksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CountTodoTasksHeaders = CountTodoTasksHeaders;
class CountTodoTasksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            category: 'category',
            fromDueTime: 'fromDueTime',
            isDone: 'isDone',
            isRecycled: 'isRecycled',
            roleTypes: 'roleTypes',
            toDueTime: 'toDueTime',
        };
    }
    static types() {
        return {
            category: 'string',
            fromDueTime: 'number',
            isDone: 'boolean',
            isRecycled: 'boolean',
            roleTypes: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            toDueTime: 'number',
        };
    }
}
exports.CountTodoTasksRequest = CountTodoTasksRequest;
class CountTodoTasksResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
}
exports.CountTodoTasksResponseBody = CountTodoTasksResponseBody;
class CountTodoTasksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CountTodoTasksResponseBody,
        };
    }
}
exports.CountTodoTasksResponse = CountTodoTasksResponse;
class CreateTodoTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateTodoTaskHeaders = CreateTodoTaskHeaders;
class CreateTodoTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionList: 'actionList',
            bizCategoryId: 'bizCategoryId',
            contentFieldList: 'contentFieldList',
            creatorId: 'creatorId',
            description: 'description',
            detailUrl: 'detailUrl',
            dueTime: 'dueTime',
            executorIds: 'executorIds',
            isOnlyShowExecutor: 'isOnlyShowExecutor',
            notifyConfigs: 'notifyConfigs',
            participantIds: 'participantIds',
            priority: 'priority',
            sourceId: 'sourceId',
            subject: 'subject',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            actionList: { 'type': 'array', 'itemType': CreateTodoTaskRequestActionList },
            bizCategoryId: 'string',
            contentFieldList: { 'type': 'array', 'itemType': CreateTodoTaskRequestContentFieldList },
            creatorId: 'string',
            description: 'string',
            detailUrl: CreateTodoTaskRequestDetailUrl,
            dueTime: 'number',
            executorIds: { 'type': 'array', 'itemType': 'string' },
            isOnlyShowExecutor: 'boolean',
            notifyConfigs: CreateTodoTaskRequestNotifyConfigs,
            participantIds: { 'type': 'array', 'itemType': 'string' },
            priority: 'number',
            sourceId: 'string',
            subject: 'string',
            operatorId: 'string',
        };
    }
}
exports.CreateTodoTaskRequest = CreateTodoTaskRequest;
class CreateTodoTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTag: 'bizTag',
            contentFieldList: 'contentFieldList',
            createdTime: 'createdTime',
            creatorId: 'creatorId',
            description: 'description',
            detailUrl: 'detailUrl',
            done: 'done',
            dueTime: 'dueTime',
            executorIds: 'executorIds',
            finishTime: 'finishTime',
            id: 'id',
            isOnlyShowExecutor: 'isOnlyShowExecutor',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            notifyConfigs: 'notifyConfigs',
            participantIds: 'participantIds',
            priority: 'priority',
            requestId: 'requestId',
            source: 'source',
            sourceId: 'sourceId',
            startTime: 'startTime',
            subject: 'subject',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            contentFieldList: { 'type': 'array', 'itemType': CreateTodoTaskResponseBodyContentFieldList },
            createdTime: 'number',
            creatorId: 'string',
            description: 'string',
            detailUrl: CreateTodoTaskResponseBodyDetailUrl,
            done: 'boolean',
            dueTime: 'number',
            executorIds: { 'type': 'array', 'itemType': 'string' },
            finishTime: 'number',
            id: 'string',
            isOnlyShowExecutor: 'boolean',
            modifiedTime: 'number',
            modifierId: 'string',
            notifyConfigs: CreateTodoTaskResponseBodyNotifyConfigs,
            participantIds: { 'type': 'array', 'itemType': 'string' },
            priority: 'number',
            requestId: 'string',
            source: 'string',
            sourceId: 'string',
            startTime: 'number',
            subject: 'string',
        };
    }
}
exports.CreateTodoTaskResponseBody = CreateTodoTaskResponseBody;
class CreateTodoTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTodoTaskResponseBody,
        };
    }
}
exports.CreateTodoTaskResponse = CreateTodoTaskResponse;
class CreateTodoTypeConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateTodoTypeConfigHeaders = CreateTodoTypeConfigHeaders;
class CreateTodoTypeConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionList: 'actionList',
            cardType: 'cardType',
            contentFieldList: 'contentFieldList',
            description: 'description',
            icon: 'icon',
            pcDetailUrlOpenMode: 'pcDetailUrlOpenMode',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            actionList: { 'type': 'array', 'itemType': CreateTodoTypeConfigRequestActionList },
            cardType: 'number',
            contentFieldList: { 'type': 'array', 'itemType': CreateTodoTypeConfigRequestContentFieldList },
            description: 'string',
            icon: 'string',
            pcDetailUrlOpenMode: 'string',
            operatorId: 'string',
        };
    }
}
exports.CreateTodoTypeConfigRequest = CreateTodoTypeConfigRequest;
class CreateTodoTypeConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionList: 'actionList',
            bizTag: 'bizTag',
            cardType: 'cardType',
            contentFieldList: 'contentFieldList',
            createdTime: 'createdTime',
            creatorId: 'creatorId',
            description: 'description',
            icon: 'icon',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            pcDetailUrlOpenMode: 'pcDetailUrlOpenMode',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            actionList: { 'type': 'array', 'itemType': CreateTodoTypeConfigResponseBodyActionList },
            bizTag: 'string',
            cardType: 'number',
            contentFieldList: { 'type': 'array', 'itemType': CreateTodoTypeConfigResponseBodyContentFieldList },
            createdTime: 'number',
            creatorId: 'string',
            description: 'string',
            icon: 'string',
            id: 'string',
            modifiedTime: 'number',
            modifierId: 'string',
            pcDetailUrlOpenMode: 'string',
            requestId: 'string',
        };
    }
}
exports.CreateTodoTypeConfigResponseBody = CreateTodoTypeConfigResponseBody;
class CreateTodoTypeConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTodoTypeConfigResponseBody,
        };
    }
}
exports.CreateTodoTypeConfigResponse = CreateTodoTypeConfigResponse;
class DeleteTodoTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteTodoTaskHeaders = DeleteTodoTaskHeaders;
class DeleteTodoTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
}
exports.DeleteTodoTaskRequest = DeleteTodoTaskRequest;
class DeleteTodoTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
        };
    }
}
exports.DeleteTodoTaskResponseBody = DeleteTodoTaskResponseBody;
class DeleteTodoTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteTodoTaskResponseBody,
        };
    }
}
exports.DeleteTodoTaskResponse = DeleteTodoTaskResponse;
class GetTodoTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTodoTaskHeaders = GetTodoTaskHeaders;
class GetTodoTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTag: 'bizTag',
            cardTypeId: 'cardTypeId',
            createdTime: 'createdTime',
            creatorId: 'creatorId',
            description: 'description',
            detailUrl: 'detailUrl',
            done: 'done',
            dueTime: 'dueTime',
            executorIds: 'executorIds',
            finishTime: 'finishTime',
            id: 'id',
            isOnlyShowExecutor: 'isOnlyShowExecutor',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            participantIds: 'participantIds',
            priority: 'priority',
            requestId: 'requestId',
            source: 'source',
            sourceId: 'sourceId',
            startTime: 'startTime',
            subject: 'subject',
            tenantId: 'tenantId',
            tenantType: 'tenantType',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            cardTypeId: 'string',
            createdTime: 'number',
            creatorId: 'string',
            description: 'string',
            detailUrl: GetTodoTaskResponseBodyDetailUrl,
            done: 'boolean',
            dueTime: 'number',
            executorIds: { 'type': 'array', 'itemType': 'string' },
            finishTime: 'number',
            id: 'string',
            isOnlyShowExecutor: 'boolean',
            modifiedTime: 'number',
            modifierId: 'string',
            participantIds: { 'type': 'array', 'itemType': 'string' },
            priority: 'number',
            requestId: 'string',
            source: 'string',
            sourceId: 'string',
            startTime: 'number',
            subject: 'string',
            tenantId: 'string',
            tenantType: 'string',
        };
    }
}
exports.GetTodoTaskResponseBody = GetTodoTaskResponseBody;
class GetTodoTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTodoTaskResponseBody,
        };
    }
}
exports.GetTodoTaskResponse = GetTodoTaskResponse;
class GetTodoTaskBySourceIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTodoTaskBySourceIdHeaders = GetTodoTaskBySourceIdHeaders;
class GetTodoTaskBySourceIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTag: 'bizTag',
            createdTime: 'createdTime',
            creatorId: 'creatorId',
            description: 'description',
            detailUrl: 'detailUrl',
            done: 'done',
            dueTime: 'dueTime',
            executorIds: 'executorIds',
            finishTime: 'finishTime',
            id: 'id',
            isOnlyShowExecutor: 'isOnlyShowExecutor',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            participantIds: 'participantIds',
            priority: 'priority',
            requestId: 'requestId',
            source: 'source',
            sourceId: 'sourceId',
            startTime: 'startTime',
            subject: 'subject',
            tenantId: 'tenantId',
            tenantType: 'tenantType',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            createdTime: 'number',
            creatorId: 'string',
            description: 'string',
            detailUrl: GetTodoTaskBySourceIdResponseBodyDetailUrl,
            done: 'boolean',
            dueTime: 'number',
            executorIds: { 'type': 'array', 'itemType': 'string' },
            finishTime: 'number',
            id: 'string',
            isOnlyShowExecutor: 'boolean',
            modifiedTime: 'number',
            modifierId: 'string',
            participantIds: { 'type': 'array', 'itemType': 'string' },
            priority: 'number',
            requestId: 'string',
            source: 'string',
            sourceId: 'string',
            startTime: 'number',
            subject: 'string',
            tenantId: 'string',
            tenantType: 'string',
        };
    }
}
exports.GetTodoTaskBySourceIdResponseBody = GetTodoTaskBySourceIdResponseBody;
class GetTodoTaskBySourceIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTodoTaskBySourceIdResponseBody,
        };
    }
}
exports.GetTodoTaskBySourceIdResponse = GetTodoTaskBySourceIdResponse;
class GetTodoTaskDetailHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTodoTaskDetailHeaders = GetTodoTaskDetailHeaders;
class GetTodoTaskDetailResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTag: 'bizTag',
            category: 'category',
            createdTime: 'createdTime',
            creatorId: 'creatorId',
            description: 'description',
            detailUrl: 'detailUrl',
            done: 'done',
            dueTime: 'dueTime',
            executorIds: 'executorIds',
            executorStatus: 'executorStatus',
            finishTime: 'finishTime',
            id: 'id',
            isOnlyShowExecutor: 'isOnlyShowExecutor',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            orgInfo: 'orgInfo',
            participantIds: 'participantIds',
            priority: 'priority',
            requestId: 'requestId',
            source: 'source',
            sourceId: 'sourceId',
            startTime: 'startTime',
            subject: 'subject',
            tenantId: 'tenantId',
            tenantType: 'tenantType',
            todoCardView: 'todoCardView',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            category: 'string',
            createdTime: 'number',
            creatorId: 'string',
            description: 'string',
            detailUrl: GetTodoTaskDetailResponseBodyDetailUrl,
            done: 'boolean',
            dueTime: 'number',
            executorIds: { 'type': 'array', 'itemType': 'string' },
            executorStatus: { 'type': 'array', 'itemType': GetTodoTaskDetailResponseBodyExecutorStatus },
            finishTime: 'number',
            id: 'string',
            isOnlyShowExecutor: 'boolean',
            modifiedTime: 'number',
            modifierId: 'string',
            orgInfo: GetTodoTaskDetailResponseBodyOrgInfo,
            participantIds: { 'type': 'array', 'itemType': 'string' },
            priority: 'number',
            requestId: 'string',
            source: 'string',
            sourceId: 'string',
            startTime: 'number',
            subject: 'string',
            tenantId: 'string',
            tenantType: 'string',
            todoCardView: GetTodoTaskDetailResponseBodyTodoCardView,
        };
    }
}
exports.GetTodoTaskDetailResponseBody = GetTodoTaskDetailResponseBody;
class GetTodoTaskDetailResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTodoTaskDetailResponseBody,
        };
    }
}
exports.GetTodoTaskDetailResponse = GetTodoTaskDetailResponse;
class GetTodoTypeConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTodoTypeConfigHeaders = GetTodoTypeConfigHeaders;
class GetTodoTypeConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionList: 'actionList',
            bizTag: 'bizTag',
            cardType: 'cardType',
            contentFieldList: 'contentFieldList',
            createdTime: 'createdTime',
            creatorId: 'creatorId',
            description: 'description',
            icon: 'icon',
            id: 'id',
            modifiedTime: 'modifiedTime',
            modifierId: 'modifierId',
            pcDetailUrlOpenMode: 'pcDetailUrlOpenMode',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            actionList: { 'type': 'array', 'itemType': GetTodoTypeConfigResponseBodyActionList },
            bizTag: 'string',
            cardType: 'number',
            contentFieldList: { 'type': 'array', 'itemType': GetTodoTypeConfigResponseBodyContentFieldList },
            createdTime: 'number',
            creatorId: 'string',
            description: 'string',
            icon: 'string',
            id: 'string',
            modifiedTime: 'number',
            modifierId: 'string',
            pcDetailUrlOpenMode: 'string',
            requestId: 'string',
        };
    }
}
exports.GetTodoTypeConfigResponseBody = GetTodoTypeConfigResponseBody;
class GetTodoTypeConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTodoTypeConfigResponseBody,
        };
    }
}
exports.GetTodoTypeConfigResponse = GetTodoTypeConfigResponse;
class QueryOrgTodoByUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryOrgTodoByUserHeaders = QueryOrgTodoByUserHeaders;
class QueryOrgTodoByUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fromDueTime: 'fromDueTime',
            isDone: 'isDone',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            orderBy: 'orderBy',
            orderDirection: 'orderDirection',
            roleTypes: 'roleTypes',
            subject: 'subject',
            toDueTime: 'toDueTime',
        };
    }
    static types() {
        return {
            fromDueTime: 'number',
            isDone: 'boolean',
            maxResults: 'number',
            nextToken: 'string',
            orderBy: 'string',
            orderDirection: 'string',
            roleTypes: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            subject: 'string',
            toDueTime: 'number',
        };
    }
}
exports.QueryOrgTodoByUserRequest = QueryOrgTodoByUserRequest;
class QueryOrgTodoByUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            todoCards: 'todoCards',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            todoCards: { 'type': 'array', 'itemType': QueryOrgTodoByUserResponseBodyTodoCards },
        };
    }
}
exports.QueryOrgTodoByUserResponseBody = QueryOrgTodoByUserResponseBody;
class QueryOrgTodoByUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOrgTodoByUserResponseBody,
        };
    }
}
exports.QueryOrgTodoByUserResponse = QueryOrgTodoByUserResponse;
class QueryOrgTodoTasksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryOrgTodoTasksHeaders = QueryOrgTodoTasksHeaders;
class QueryOrgTodoTasksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isDone: 'isDone',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            isDone: 'boolean',
            nextToken: 'string',
        };
    }
}
exports.QueryOrgTodoTasksRequest = QueryOrgTodoTasksRequest;
class QueryOrgTodoTasksResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            todoCards: 'todoCards',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            todoCards: { 'type': 'array', 'itemType': QueryOrgTodoTasksResponseBodyTodoCards },
        };
    }
}
exports.QueryOrgTodoTasksResponseBody = QueryOrgTodoTasksResponseBody;
class QueryOrgTodoTasksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOrgTodoTasksResponseBody,
        };
    }
}
exports.QueryOrgTodoTasksResponse = QueryOrgTodoTasksResponse;
class QueryTodoTasksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryTodoTasksHeaders = QueryTodoTasksHeaders;
class QueryTodoTasksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            category: 'category',
            fromDueTime: 'fromDueTime',
            isDone: 'isDone',
            isRecycled: 'isRecycled',
            nextToken: 'nextToken',
            orderBy: 'orderBy',
            orderDirection: 'orderDirection',
            roleTypes: 'roleTypes',
            toDueTime: 'toDueTime',
        };
    }
    static types() {
        return {
            category: 'string',
            fromDueTime: 'number',
            isDone: 'boolean',
            isRecycled: 'boolean',
            nextToken: 'string',
            orderBy: 'string',
            orderDirection: 'string',
            roleTypes: { 'type': 'array', 'itemType': { 'type': 'array', 'itemType': 'string' } },
            toDueTime: 'number',
        };
    }
}
exports.QueryTodoTasksRequest = QueryTodoTasksRequest;
class QueryTodoTasksResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            todoCards: 'todoCards',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            todoCards: { 'type': 'array', 'itemType': QueryTodoTasksResponseBodyTodoCards },
            totalCount: 'number',
        };
    }
}
exports.QueryTodoTasksResponseBody = QueryTodoTasksResponseBody;
class QueryTodoTasksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTodoTasksResponseBody,
        };
    }
}
exports.QueryTodoTasksResponse = QueryTodoTasksResponse;
class UpdateTodoTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateTodoTaskHeaders = UpdateTodoTaskHeaders;
class UpdateTodoTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            done: 'done',
            dueTime: 'dueTime',
            executorIds: 'executorIds',
            participantIds: 'participantIds',
            subject: 'subject',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            description: 'string',
            done: 'boolean',
            dueTime: 'number',
            executorIds: { 'type': 'array', 'itemType': 'string' },
            participantIds: { 'type': 'array', 'itemType': 'string' },
            subject: 'string',
            operatorId: 'string',
        };
    }
}
exports.UpdateTodoTaskRequest = UpdateTodoTaskRequest;
class UpdateTodoTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateTodoTaskResponseBody = UpdateTodoTaskResponseBody;
class UpdateTodoTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateTodoTaskResponseBody,
        };
    }
}
exports.UpdateTodoTaskResponse = UpdateTodoTaskResponse;
class UpdateTodoTaskExecutorStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateTodoTaskExecutorStatusHeaders = UpdateTodoTaskExecutorStatusHeaders;
class UpdateTodoTaskExecutorStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            executorStatusList: 'executorStatusList',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            executorStatusList: { 'type': 'array', 'itemType': UpdateTodoTaskExecutorStatusRequestExecutorStatusList },
            operatorId: 'string',
        };
    }
}
exports.UpdateTodoTaskExecutorStatusRequest = UpdateTodoTaskExecutorStatusRequest;
class UpdateTodoTaskExecutorStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateTodoTaskExecutorStatusResponseBody = UpdateTodoTaskExecutorStatusResponseBody;
class UpdateTodoTaskExecutorStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateTodoTaskExecutorStatusResponseBody,
        };
    }
}
exports.UpdateTodoTaskExecutorStatusResponse = UpdateTodoTaskExecutorStatusResponse;
class UpdateTodoTypeConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateTodoTypeConfigHeaders = UpdateTodoTypeConfigHeaders;
class UpdateTodoTypeConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionList: 'actionList',
            cardType: 'cardType',
            contentFieldList: 'contentFieldList',
            description: 'description',
            icon: 'icon',
            pcDetailUrlOpenMode: 'pcDetailUrlOpenMode',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            actionList: { 'type': 'array', 'itemType': UpdateTodoTypeConfigRequestActionList },
            cardType: 'number',
            contentFieldList: { 'type': 'array', 'itemType': UpdateTodoTypeConfigRequestContentFieldList },
            description: 'string',
            icon: 'string',
            pcDetailUrlOpenMode: 'string',
            operatorId: 'string',
        };
    }
}
exports.UpdateTodoTypeConfigRequest = UpdateTodoTypeConfigRequest;
class UpdateTodoTypeConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateTodoTypeConfigResponseBody = UpdateTodoTypeConfigResponseBody;
class UpdateTodoTypeConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateTodoTypeConfigResponseBody,
        };
    }
}
exports.UpdateTodoTypeConfigResponse = UpdateTodoTypeConfigResponse;
class CreateTodoTaskRequestActionListParam extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
            header: 'header',
        };
    }
    static types() {
        return {
            body: 'string',
            header: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.CreateTodoTaskRequestActionListParam = CreateTodoTaskRequestActionListParam;
class CreateTodoTaskRequestActionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionKey: 'actionKey',
            actionType: 'actionType',
            buttonStyleType: 'buttonStyleType',
            param: 'param',
            pcUrl: 'pcUrl',
            title: 'title',
            url: 'url',
        };
    }
    static types() {
        return {
            actionKey: 'string',
            actionType: 'number',
            buttonStyleType: 'number',
            param: CreateTodoTaskRequestActionListParam,
            pcUrl: 'string',
            title: 'string',
            url: 'string',
        };
    }
}
exports.CreateTodoTaskRequestActionList = CreateTodoTaskRequestActionList;
class CreateTodoTaskRequestContentFieldList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fieldKey: 'fieldKey',
            fieldValue: 'fieldValue',
        };
    }
    static types() {
        return {
            fieldKey: 'string',
            fieldValue: 'string',
        };
    }
}
exports.CreateTodoTaskRequestContentFieldList = CreateTodoTaskRequestContentFieldList;
class CreateTodoTaskRequestDetailUrl extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
}
exports.CreateTodoTaskRequestDetailUrl = CreateTodoTaskRequestDetailUrl;
class CreateTodoTaskRequestNotifyConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingNotify: 'dingNotify',
        };
    }
    static types() {
        return {
            dingNotify: 'string',
        };
    }
}
exports.CreateTodoTaskRequestNotifyConfigs = CreateTodoTaskRequestNotifyConfigs;
class CreateTodoTaskResponseBodyContentFieldList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fieldKey: 'fieldKey',
            fieldValue: 'fieldValue',
        };
    }
    static types() {
        return {
            fieldKey: 'string',
            fieldValue: 'string',
        };
    }
}
exports.CreateTodoTaskResponseBodyContentFieldList = CreateTodoTaskResponseBodyContentFieldList;
class CreateTodoTaskResponseBodyDetailUrl extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
}
exports.CreateTodoTaskResponseBodyDetailUrl = CreateTodoTaskResponseBodyDetailUrl;
class CreateTodoTaskResponseBodyNotifyConfigs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingNotify: 'dingNotify',
        };
    }
    static types() {
        return {
            dingNotify: 'string',
        };
    }
}
exports.CreateTodoTaskResponseBodyNotifyConfigs = CreateTodoTaskResponseBodyNotifyConfigs;
class CreateTodoTypeConfigRequestActionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionKey: 'actionKey',
            actionType: 'actionType',
            buttonStyleType: 'buttonStyleType',
            nameI18n: 'nameI18n',
            url: 'url',
        };
    }
    static types() {
        return {
            actionKey: 'string',
            actionType: 'number',
            buttonStyleType: 'number',
            nameI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            url: 'string',
        };
    }
}
exports.CreateTodoTypeConfigRequestActionList = CreateTodoTypeConfigRequestActionList;
class CreateTodoTypeConfigRequestContentFieldList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fieldKey: 'fieldKey',
            fieldType: 'fieldType',
            nameI18n: 'nameI18n',
        };
    }
    static types() {
        return {
            fieldKey: 'string',
            fieldType: 'string',
            nameI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.CreateTodoTypeConfigRequestContentFieldList = CreateTodoTypeConfigRequestContentFieldList;
class CreateTodoTypeConfigResponseBodyActionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionKey: 'actionKey',
            actionType: 'actionType',
            buttonStyleType: 'buttonStyleType',
            nameI18n: 'nameI18n',
            url: 'url',
        };
    }
    static types() {
        return {
            actionKey: 'string',
            actionType: 'number',
            buttonStyleType: 'number',
            nameI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            url: 'string',
        };
    }
}
exports.CreateTodoTypeConfigResponseBodyActionList = CreateTodoTypeConfigResponseBodyActionList;
class CreateTodoTypeConfigResponseBodyContentFieldList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fieldKey: 'fieldKey',
            fieldType: 'fieldType',
            nameI18n: 'nameI18n',
        };
    }
    static types() {
        return {
            fieldKey: 'string',
            fieldType: 'string',
            nameI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.CreateTodoTypeConfigResponseBodyContentFieldList = CreateTodoTypeConfigResponseBodyContentFieldList;
class GetTodoTaskResponseBodyDetailUrl extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
}
exports.GetTodoTaskResponseBodyDetailUrl = GetTodoTaskResponseBodyDetailUrl;
class GetTodoTaskBySourceIdResponseBodyDetailUrl extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
}
exports.GetTodoTaskBySourceIdResponseBodyDetailUrl = GetTodoTaskBySourceIdResponseBodyDetailUrl;
class GetTodoTaskDetailResponseBodyDetailUrl extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
}
exports.GetTodoTaskDetailResponseBodyDetailUrl = GetTodoTaskDetailResponseBodyDetailUrl;
class GetTodoTaskDetailResponseBodyExecutorStatus extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isDone: 'isDone',
            userId: 'userId',
        };
    }
    static types() {
        return {
            isDone: 'boolean',
            userId: 'string',
        };
    }
}
exports.GetTodoTaskDetailResponseBodyExecutorStatus = GetTodoTaskDetailResponseBodyExecutorStatus;
class GetTodoTaskDetailResponseBodyOrgInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            name: 'name',
        };
    }
    static types() {
        return {
            corpId: 'string',
            name: 'string',
        };
    }
}
exports.GetTodoTaskDetailResponseBodyOrgInfo = GetTodoTaskDetailResponseBodyOrgInfo;
class GetTodoTaskDetailResponseBodyTodoCardViewTodoCardContentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.GetTodoTaskDetailResponseBodyTodoCardViewTodoCardContentList = GetTodoTaskDetailResponseBodyTodoCardViewTodoCardContentList;
class GetTodoTaskDetailResponseBodyTodoCardView extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionType: 'actionType',
            cardType: 'cardType',
            circleELType: 'circleELType',
            contentType: 'contentType',
            icon: 'icon',
            todoCardContentList: 'todoCardContentList',
            todoCardTitle: 'todoCardTitle',
        };
    }
    static types() {
        return {
            actionType: 'string',
            cardType: 'string',
            circleELType: 'string',
            contentType: 'string',
            icon: 'string',
            todoCardContentList: { 'type': 'array', 'itemType': GetTodoTaskDetailResponseBodyTodoCardViewTodoCardContentList },
            todoCardTitle: 'string',
        };
    }
}
exports.GetTodoTaskDetailResponseBodyTodoCardView = GetTodoTaskDetailResponseBodyTodoCardView;
class GetTodoTypeConfigResponseBodyActionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionKey: 'actionKey',
            actionType: 'actionType',
            buttonStyleType: 'buttonStyleType',
            nameI18n: 'nameI18n',
            url: 'url',
        };
    }
    static types() {
        return {
            actionKey: 'string',
            actionType: 'number',
            buttonStyleType: 'number',
            nameI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            url: 'string',
        };
    }
}
exports.GetTodoTypeConfigResponseBodyActionList = GetTodoTypeConfigResponseBodyActionList;
class GetTodoTypeConfigResponseBodyContentFieldList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fieldKey: 'fieldKey',
            fieldType: 'fieldType',
            nameI18n: 'nameI18n',
        };
    }
    static types() {
        return {
            fieldKey: 'string',
            fieldType: 'string',
            nameI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.GetTodoTypeConfigResponseBodyContentFieldList = GetTodoTypeConfigResponseBodyContentFieldList;
class QueryOrgTodoByUserResponseBodyTodoCardsDetailUrl extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
}
exports.QueryOrgTodoByUserResponseBodyTodoCardsDetailUrl = QueryOrgTodoByUserResponseBodyTodoCardsDetailUrl;
class QueryOrgTodoByUserResponseBodyTodoCards extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTag: 'bizTag',
            createdTime: 'createdTime',
            creatorId: 'creatorId',
            detailUrl: 'detailUrl',
            dueTime: 'dueTime',
            isDone: 'isDone',
            modifiedTime: 'modifiedTime',
            priority: 'priority',
            sourceExt: 'sourceExt',
            sourceId: 'sourceId',
            subject: 'subject',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            createdTime: 'number',
            creatorId: 'string',
            detailUrl: QueryOrgTodoByUserResponseBodyTodoCardsDetailUrl,
            dueTime: 'number',
            isDone: 'boolean',
            modifiedTime: 'number',
            priority: 'number',
            sourceExt: 'string',
            sourceId: 'string',
            subject: 'string',
            taskId: 'string',
        };
    }
}
exports.QueryOrgTodoByUserResponseBodyTodoCards = QueryOrgTodoByUserResponseBodyTodoCards;
class QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
}
exports.QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl = QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl;
class QueryOrgTodoTasksResponseBodyTodoCards extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTag: 'bizTag',
            createdTime: 'createdTime',
            creatorId: 'creatorId',
            detailUrl: 'detailUrl',
            dueTime: 'dueTime',
            isDone: 'isDone',
            modifiedTime: 'modifiedTime',
            priority: 'priority',
            sourceId: 'sourceId',
            subject: 'subject',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            createdTime: 'number',
            creatorId: 'string',
            detailUrl: QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl,
            dueTime: 'number',
            isDone: 'boolean',
            modifiedTime: 'number',
            priority: 'number',
            sourceId: 'string',
            subject: 'string',
            taskId: 'string',
        };
    }
}
exports.QueryOrgTodoTasksResponseBodyTodoCards = QueryOrgTodoTasksResponseBodyTodoCards;
class QueryTodoTasksResponseBodyTodoCardsDetailUrl extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appUrl: 'appUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            appUrl: 'string',
            pcUrl: 'string',
        };
    }
}
exports.QueryTodoTasksResponseBodyTodoCardsDetailUrl = QueryTodoTasksResponseBodyTodoCardsDetailUrl;
class QueryTodoTasksResponseBodyTodoCardsOrgInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            name: 'name',
        };
    }
    static types() {
        return {
            corpId: 'string',
            name: 'string',
        };
    }
}
exports.QueryTodoTasksResponseBodyTodoCardsOrgInfo = QueryTodoTasksResponseBodyTodoCardsOrgInfo;
class QueryTodoTasksResponseBodyTodoCardsOriginalSource extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sourceTitle: 'sourceTitle',
        };
    }
    static types() {
        return {
            sourceTitle: 'string',
        };
    }
}
exports.QueryTodoTasksResponseBodyTodoCardsOriginalSource = QueryTodoTasksResponseBodyTodoCardsOriginalSource;
class QueryTodoTasksResponseBodyTodoCardsTodoCardViewTodoCardContentList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            value: 'value',
        };
    }
    static types() {
        return {
            name: 'string',
            value: 'string',
        };
    }
}
exports.QueryTodoTasksResponseBodyTodoCardsTodoCardViewTodoCardContentList = QueryTodoTasksResponseBodyTodoCardsTodoCardViewTodoCardContentList;
class QueryTodoTasksResponseBodyTodoCardsTodoCardView extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionType: 'actionType',
            cardType: 'cardType',
            circleELType: 'circleELType',
            contentType: 'contentType',
            icon: 'icon',
            todoCardContentList: 'todoCardContentList',
            todoCardTitle: 'todoCardTitle',
        };
    }
    static types() {
        return {
            actionType: 'string',
            cardType: 'string',
            circleELType: 'string',
            contentType: 'string',
            icon: 'string',
            todoCardContentList: { 'type': 'array', 'itemType': QueryTodoTasksResponseBodyTodoCardsTodoCardViewTodoCardContentList },
            todoCardTitle: 'string',
        };
    }
}
exports.QueryTodoTasksResponseBodyTodoCardsTodoCardView = QueryTodoTasksResponseBodyTodoCardsTodoCardView;
class QueryTodoTasksResponseBodyTodoCards extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizTag: 'bizTag',
            category: 'category',
            createdTime: 'createdTime',
            creatorId: 'creatorId',
            detailUrl: 'detailUrl',
            dueTime: 'dueTime',
            isDone: 'isDone',
            modifiedTime: 'modifiedTime',
            orgInfo: 'orgInfo',
            originalSource: 'originalSource',
            priority: 'priority',
            sourceId: 'sourceId',
            subject: 'subject',
            taskId: 'taskId',
            todoCardView: 'todoCardView',
            todoStatus: 'todoStatus',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            category: 'string',
            createdTime: 'number',
            creatorId: 'string',
            detailUrl: QueryTodoTasksResponseBodyTodoCardsDetailUrl,
            dueTime: 'number',
            isDone: 'boolean',
            modifiedTime: 'number',
            orgInfo: QueryTodoTasksResponseBodyTodoCardsOrgInfo,
            originalSource: QueryTodoTasksResponseBodyTodoCardsOriginalSource,
            priority: 'number',
            sourceId: 'string',
            subject: 'string',
            taskId: 'string',
            todoCardView: QueryTodoTasksResponseBodyTodoCardsTodoCardView,
            todoStatus: 'string',
        };
    }
}
exports.QueryTodoTasksResponseBodyTodoCards = QueryTodoTasksResponseBodyTodoCards;
class UpdateTodoTaskExecutorStatusRequestExecutorStatusList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            isDone: 'isDone',
        };
    }
    static types() {
        return {
            id: 'string',
            isDone: 'boolean',
        };
    }
}
exports.UpdateTodoTaskExecutorStatusRequestExecutorStatusList = UpdateTodoTaskExecutorStatusRequestExecutorStatusList;
class UpdateTodoTypeConfigRequestActionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionKey: 'actionKey',
            actionType: 'actionType',
            buttonStyleType: 'buttonStyleType',
            nameI18n: 'nameI18n',
            url: 'url',
        };
    }
    static types() {
        return {
            actionKey: 'string',
            actionType: 'number',
            buttonStyleType: 'number',
            nameI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            url: 'string',
        };
    }
}
exports.UpdateTodoTypeConfigRequestActionList = UpdateTodoTypeConfigRequestActionList;
class UpdateTodoTypeConfigRequestContentFieldList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fieldKey: 'fieldKey',
            fieldType: 'fieldType',
            nameI18n: 'nameI18n',
        };
    }
    static types() {
        return {
            fieldKey: 'string',
            fieldType: 'string',
            nameI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.UpdateTodoTypeConfigRequestContentFieldList = UpdateTodoTypeConfigRequestContentFieldList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async countTodoTasksWithOptions(unionId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.category)) {
            body["category"] = request.category;
        }
        if (!tea_util_1.default.isUnset(request.fromDueTime)) {
            body["fromDueTime"] = request.fromDueTime;
        }
        if (!tea_util_1.default.isUnset(request.isDone)) {
            body["isDone"] = request.isDone;
        }
        if (!tea_util_1.default.isUnset(request.isRecycled)) {
            body["isRecycled"] = request.isRecycled;
        }
        if (!tea_util_1.default.isUnset(request.roleTypes)) {
            body["roleTypes"] = request.roleTypes;
        }
        if (!tea_util_1.default.isUnset(request.toDueTime)) {
            body["toDueTime"] = request.toDueTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CountTodoTasks",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/tasks/count`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CountTodoTasksResponse({}));
    }
    async countTodoTasks(unionId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CountTodoTasksHeaders({});
        return await this.countTodoTasksWithOptions(unionId, request, headers, runtime);
    }
    async createTodoTaskWithOptions(unionId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionList)) {
            body["actionList"] = request.actionList;
        }
        if (!tea_util_1.default.isUnset(request.bizCategoryId)) {
            body["bizCategoryId"] = request.bizCategoryId;
        }
        if (!tea_util_1.default.isUnset(request.contentFieldList)) {
            body["contentFieldList"] = request.contentFieldList;
        }
        if (!tea_util_1.default.isUnset(request.creatorId)) {
            body["creatorId"] = request.creatorId;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.detailUrl)) {
            body["detailUrl"] = request.detailUrl;
        }
        if (!tea_util_1.default.isUnset(request.dueTime)) {
            body["dueTime"] = request.dueTime;
        }
        if (!tea_util_1.default.isUnset(request.executorIds)) {
            body["executorIds"] = request.executorIds;
        }
        if (!tea_util_1.default.isUnset(request.isOnlyShowExecutor)) {
            body["isOnlyShowExecutor"] = request.isOnlyShowExecutor;
        }
        if (!tea_util_1.default.isUnset(request.notifyConfigs)) {
            body["notifyConfigs"] = request.notifyConfigs;
        }
        if (!tea_util_1.default.isUnset(request.participantIds)) {
            body["participantIds"] = request.participantIds;
        }
        if (!tea_util_1.default.isUnset(request.priority)) {
            body["priority"] = request.priority;
        }
        if (!tea_util_1.default.isUnset(request.sourceId)) {
            body["sourceId"] = request.sourceId;
        }
        if (!tea_util_1.default.isUnset(request.subject)) {
            body["subject"] = request.subject;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTodoTask",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/tasks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTodoTaskResponse({}));
    }
    async createTodoTask(unionId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTodoTaskHeaders({});
        return await this.createTodoTaskWithOptions(unionId, request, headers, runtime);
    }
    async createTodoTypeConfigWithOptions(unionId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionList)) {
            body["actionList"] = request.actionList;
        }
        if (!tea_util_1.default.isUnset(request.cardType)) {
            body["cardType"] = request.cardType;
        }
        if (!tea_util_1.default.isUnset(request.contentFieldList)) {
            body["contentFieldList"] = request.contentFieldList;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.pcDetailUrlOpenMode)) {
            body["pcDetailUrlOpenMode"] = request.pcDetailUrlOpenMode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTodoTypeConfig",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/configs/types`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTodoTypeConfigResponse({}));
    }
    async createTodoTypeConfig(unionId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTodoTypeConfigHeaders({});
        return await this.createTodoTypeConfigWithOptions(unionId, request, headers, runtime);
    }
    async deleteTodoTaskWithOptions(unionId, taskId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteTodoTask",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/tasks/${taskId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteTodoTaskResponse({}));
    }
    async deleteTodoTask(unionId, taskId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteTodoTaskHeaders({});
        return await this.deleteTodoTaskWithOptions(unionId, taskId, request, headers, runtime);
    }
    async getTodoTaskWithOptions(unionId, taskId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetTodoTask",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/tasks/${taskId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTodoTaskResponse({}));
    }
    async getTodoTask(unionId, taskId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTodoTaskHeaders({});
        return await this.getTodoTaskWithOptions(unionId, taskId, headers, runtime);
    }
    async getTodoTaskBySourceIdWithOptions(unionId, sourceId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetTodoTaskBySourceId",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/tasks/sources/${sourceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTodoTaskBySourceIdResponse({}));
    }
    async getTodoTaskBySourceId(unionId, sourceId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTodoTaskBySourceIdHeaders({});
        return await this.getTodoTaskBySourceIdWithOptions(unionId, sourceId, headers, runtime);
    }
    async getTodoTaskDetailWithOptions(taskId, unionId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetTodoTaskDetail",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/exclusive/users/${unionId}/tasks/${taskId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTodoTaskDetailResponse({}));
    }
    async getTodoTaskDetail(taskId, unionId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTodoTaskDetailHeaders({});
        return await this.getTodoTaskDetailWithOptions(taskId, unionId, headers, runtime);
    }
    async getTodoTypeConfigWithOptions(unionId, cardTypeId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetTodoTypeConfig",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/configs/types/${cardTypeId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTodoTypeConfigResponse({}));
    }
    async getTodoTypeConfig(unionId, cardTypeId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTodoTypeConfigHeaders({});
        return await this.getTodoTypeConfigWithOptions(unionId, cardTypeId, headers, runtime);
    }
    async queryOrgTodoByUserWithOptions(unionId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.fromDueTime)) {
            body["fromDueTime"] = request.fromDueTime;
        }
        if (!tea_util_1.default.isUnset(request.isDone)) {
            body["isDone"] = request.isDone;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.orderBy)) {
            body["orderBy"] = request.orderBy;
        }
        if (!tea_util_1.default.isUnset(request.orderDirection)) {
            body["orderDirection"] = request.orderDirection;
        }
        if (!tea_util_1.default.isUnset(request.roleTypes)) {
            body["roleTypes"] = request.roleTypes;
        }
        if (!tea_util_1.default.isUnset(request.subject)) {
            body["subject"] = request.subject;
        }
        if (!tea_util_1.default.isUnset(request.toDueTime)) {
            body["toDueTime"] = request.toDueTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryOrgTodoByUser",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/organizations/tasks/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOrgTodoByUserResponse({}));
    }
    async queryOrgTodoByUser(unionId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOrgTodoByUserHeaders({});
        return await this.queryOrgTodoByUserWithOptions(unionId, request, headers, runtime);
    }
    async queryOrgTodoTasksWithOptions(unionId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.isDone)) {
            body["isDone"] = request.isDone;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryOrgTodoTasks",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/org/tasks/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOrgTodoTasksResponse({}));
    }
    async queryOrgTodoTasks(unionId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOrgTodoTasksHeaders({});
        return await this.queryOrgTodoTasksWithOptions(unionId, request, headers, runtime);
    }
    async queryTodoTasksWithOptions(unionId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.category)) {
            body["category"] = request.category;
        }
        if (!tea_util_1.default.isUnset(request.fromDueTime)) {
            body["fromDueTime"] = request.fromDueTime;
        }
        if (!tea_util_1.default.isUnset(request.isDone)) {
            body["isDone"] = request.isDone;
        }
        if (!tea_util_1.default.isUnset(request.isRecycled)) {
            body["isRecycled"] = request.isRecycled;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.orderBy)) {
            body["orderBy"] = request.orderBy;
        }
        if (!tea_util_1.default.isUnset(request.orderDirection)) {
            body["orderDirection"] = request.orderDirection;
        }
        if (!tea_util_1.default.isUnset(request.roleTypes)) {
            body["roleTypes"] = request.roleTypes;
        }
        if (!tea_util_1.default.isUnset(request.toDueTime)) {
            body["toDueTime"] = request.toDueTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryTodoTasks",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/tasks/list`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryTodoTasksResponse({}));
    }
    async queryTodoTasks(unionId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTodoTasksHeaders({});
        return await this.queryTodoTasksWithOptions(unionId, request, headers, runtime);
    }
    async updateTodoTaskWithOptions(unionId, taskId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.done)) {
            body["done"] = request.done;
        }
        if (!tea_util_1.default.isUnset(request.dueTime)) {
            body["dueTime"] = request.dueTime;
        }
        if (!tea_util_1.default.isUnset(request.executorIds)) {
            body["executorIds"] = request.executorIds;
        }
        if (!tea_util_1.default.isUnset(request.participantIds)) {
            body["participantIds"] = request.participantIds;
        }
        if (!tea_util_1.default.isUnset(request.subject)) {
            body["subject"] = request.subject;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateTodoTask",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/tasks/${taskId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateTodoTaskResponse({}));
    }
    async updateTodoTask(unionId, taskId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateTodoTaskHeaders({});
        return await this.updateTodoTaskWithOptions(unionId, taskId, request, headers, runtime);
    }
    async updateTodoTaskExecutorStatusWithOptions(unionId, taskId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.executorStatusList)) {
            body["executorStatusList"] = request.executorStatusList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateTodoTaskExecutorStatus",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/tasks/${taskId}/executorStatus`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateTodoTaskExecutorStatusResponse({}));
    }
    async updateTodoTaskExecutorStatus(unionId, taskId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateTodoTaskExecutorStatusHeaders({});
        return await this.updateTodoTaskExecutorStatusWithOptions(unionId, taskId, request, headers, runtime);
    }
    async updateTodoTypeConfigWithOptions(unionId, cardTypeId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionList)) {
            body["actionList"] = request.actionList;
        }
        if (!tea_util_1.default.isUnset(request.cardType)) {
            body["cardType"] = request.cardType;
        }
        if (!tea_util_1.default.isUnset(request.contentFieldList)) {
            body["contentFieldList"] = request.contentFieldList;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.pcDetailUrlOpenMode)) {
            body["pcDetailUrlOpenMode"] = request.pcDetailUrlOpenMode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateTodoTypeConfig",
            version: "todo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/todo/users/${unionId}/configs/types/${cardTypeId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateTodoTypeConfigResponse({}));
    }
    async updateTodoTypeConfig(unionId, cardTypeId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateTodoTypeConfigHeaders({});
        return await this.updateTodoTypeConfigWithOptions(unionId, cardTypeId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map