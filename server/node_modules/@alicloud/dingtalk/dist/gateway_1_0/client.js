"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class OpenConnectionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clientId: 'clientId',
            clientSecret: 'clientSecret',
            localIp: 'localIp',
            subscriptions: 'subscriptions',
        };
    }
    static types() {
        return {
            clientId: 'string',
            clientSecret: 'string',
            localIp: 'string',
            subscriptions: { 'type': 'array', 'itemType': OpenConnectionRequestSubscriptions },
        };
    }
}
exports.OpenConnectionRequest = OpenConnectionRequest;
class OpenConnectionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endpoint: 'endpoint',
            ticket: 'ticket',
        };
    }
    static types() {
        return {
            endpoint: 'string',
            ticket: 'string',
        };
    }
}
exports.OpenConnectionResponseBody = OpenConnectionResponseBody;
class OpenConnectionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OpenConnectionResponseBody,
        };
    }
}
exports.OpenConnectionResponse = OpenConnectionResponse;
class OpenConnectionRequestSubscriptions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            topic: 'topic',
            type: 'type',
        };
    }
    static types() {
        return {
            topic: 'string',
            type: 'string',
        };
    }
}
exports.OpenConnectionRequestSubscriptions = OpenConnectionRequestSubscriptions;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._signatureAlgorithm = "v2";
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async openConnectionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.clientId)) {
            body["clientId"] = request.clientId;
        }
        if (!tea_util_1.default.isUnset(request.clientSecret)) {
            body["clientSecret"] = request.clientSecret;
        }
        if (!tea_util_1.default.isUnset(request.localIp)) {
            body["localIp"] = request.localIp;
        }
        if (!tea_util_1.default.isUnset(request.subscriptions)) {
            body["subscriptions"] = request.subscriptions;
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "OpenConnection",
            version: "gateway_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/gateway/connections/open`,
            method: "POST",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OpenConnectionResponse({}));
    }
    async openConnection(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.openConnectionWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map