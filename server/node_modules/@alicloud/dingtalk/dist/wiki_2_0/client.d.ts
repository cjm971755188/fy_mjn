/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTeamRequest extends $tea.Model {
    name?: string;
    option?: AddTeamRequestOption;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTeamResponseBody extends $tea.Model {
    team?: AddTeamResponseBodyTeam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddTeamResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceRequest extends $tea.Model {
    name?: string;
    option?: AddWorkspaceRequestOption;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceResponseBody extends $tea.Model {
    workspace?: AddWorkspaceResponseBodyWorkspace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AddWorkspaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteTeamResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultHandOverUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultHandOverUserRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultHandOverUserResponseBody extends $tea.Model {
    defaultHandoverUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultHandOverUserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDefaultHandOverUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMineWorkspaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMineWorkspaceRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMineWorkspaceResponseBody extends $tea.Model {
    workspace?: GetMineWorkspaceResponseBodyWorkspace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMineWorkspaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetMineWorkspaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeRequest extends $tea.Model {
    operatorId?: string;
    withPermissionRole?: boolean;
    withStatisticalInfo?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeResponseBody extends $tea.Model {
    node?: GetNodeResponseBodyNode;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetNodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeByUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeByUrlRequest extends $tea.Model {
    option?: GetNodeByUrlRequestOption;
    url?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeByUrlResponseBody extends $tea.Model {
    node?: GetNodeByUrlResponseBodyNode;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeByUrlResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetNodeByUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesRequest extends $tea.Model {
    nodeIds?: string[];
    option?: GetNodesRequestOption;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesResponseBody extends $tea.Model {
    nodes?: GetNodesResponseBodyNodes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamResponseBody extends $tea.Model {
    team?: GetTeamResponseBodyTeam;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTeamResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceRequest extends $tea.Model {
    operatorId?: string;
    withPermissionRole?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceResponseBody extends $tea.Model {
    workspace?: GetWorkspaceResponseBodyWorkspace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWorkspaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspacesRequest extends $tea.Model {
    option?: GetWorkspacesRequestOption;
    workspaceIds?: string[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspacesResponseBody extends $tea.Model {
    workspaces?: GetWorkspacesResponseBodyWorkspaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspacesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetWorkspacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HandOverWorkspaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HandOverWorkspaceRequest extends $tea.Model {
    sourceOwnerId?: string;
    targetOwnerId?: string;
    workspaceId?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HandOverWorkspaceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HandOverWorkspaceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: HandOverWorkspaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNodesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNodesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    parentNodeId?: string;
    withPermissionRole?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNodesResponseBody extends $tea.Model {
    nextToken?: string;
    nodes?: ListNodesResponseBodyNodes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamsResponseBody extends $tea.Model {
    nextToken?: string;
    teams?: ListTeamsResponseBodyTeams[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListTeamsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListWorkspacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListWorkspacesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    orderBy?: string;
    teamId?: string;
    withPermissionRole?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListWorkspacesResponseBody extends $tea.Model {
    nextToken?: string;
    workspaces?: ListWorkspacesResponseBodyWorkspaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListWorkspacesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListWorkspacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDefaultHandOverUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDefaultHandOverUserRequest extends $tea.Model {
    defaultHandoverUserId?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDefaultHandOverUserResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetDefaultHandOverUserResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SetDefaultHandOverUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTeamRequestOptionIcon extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTeamRequestOption extends $tea.Model {
    cover?: string;
    description?: string;
    icon?: AddTeamRequestOptionIcon;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTeamResponseBodyTeamIcon extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddTeamResponseBodyTeam extends $tea.Model {
    corpId?: string;
    cover?: string;
    createTime?: string;
    creatorId?: string;
    description?: string;
    icon?: AddTeamResponseBodyTeamIcon;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceRequestOption extends $tea.Model {
    description?: string;
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceResponseBodyWorkspaceIcon extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceResponseBodyWorkspace extends $tea.Model {
    corpId?: string;
    cover?: string;
    createTime?: string;
    creatorId?: string;
    description?: string;
    icon?: AddWorkspaceResponseBodyWorkspaceIcon;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    permissionRole?: string;
    rootNodeId?: string;
    teamId?: string;
    type?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMineWorkspaceResponseBodyWorkspaceIcon extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMineWorkspaceResponseBodyWorkspace extends $tea.Model {
    corpId?: string;
    cover?: string;
    createTime?: string;
    creatorId?: string;
    description?: string;
    icon?: GetMineWorkspaceResponseBodyWorkspaceIcon;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    permissionRole?: string;
    rootNodeId?: string;
    teamId?: string;
    type?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeResponseBodyNodeStatisticalInfo extends $tea.Model {
    wordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeResponseBodyNode extends $tea.Model {
    category?: string;
    createTime?: string;
    creatorId?: string;
    extension?: string;
    hasChildren?: boolean;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    nodeId?: string;
    permissionRole?: string;
    size?: number;
    statisticalInfo?: GetNodeResponseBodyNodeStatisticalInfo;
    type?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeByUrlRequestOption extends $tea.Model {
    withPermissionRole?: boolean;
    withStatisticalInfo?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeByUrlResponseBodyNodeStatisticalInfo extends $tea.Model {
    wordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodeByUrlResponseBodyNode extends $tea.Model {
    category?: string;
    createTime?: string;
    creatorId?: string;
    extension?: string;
    hasChildren?: boolean;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    nodeId?: string;
    permissionRole?: string;
    size?: number;
    statisticalInfo?: GetNodeByUrlResponseBodyNodeStatisticalInfo;
    type?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesRequestOption extends $tea.Model {
    withPermissionRole?: boolean;
    withStatisticalInfo?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesResponseBodyNodesStatisticalInfo extends $tea.Model {
    wordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNodesResponseBodyNodes extends $tea.Model {
    category?: string;
    createTime?: string;
    creatorId?: string;
    extension?: string;
    hasChildren?: boolean;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    nodeId?: string;
    permissionRole?: string;
    size?: number;
    statisticalInfo?: GetNodesResponseBodyNodesStatisticalInfo;
    type?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamResponseBodyTeamIcon extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTeamResponseBodyTeam extends $tea.Model {
    corpId?: string;
    cover?: string;
    createTime?: string;
    creatorId?: string;
    description?: string;
    icon?: GetTeamResponseBodyTeamIcon;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceResponseBodyWorkspaceIcon extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceResponseBodyWorkspace extends $tea.Model {
    corpId?: string;
    cover?: string;
    createTime?: string;
    creatorId?: string;
    description?: string;
    icon?: GetWorkspaceResponseBodyWorkspaceIcon;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    permissionRole?: string;
    rootNodeId?: string;
    teamId?: string;
    type?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspacesRequestOption extends $tea.Model {
    withPermissionRole?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspacesResponseBodyWorkspacesIcon extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspacesResponseBodyWorkspaces extends $tea.Model {
    corpId?: string;
    cover?: string;
    createTime?: string;
    creatorId?: string;
    description?: string;
    icon?: GetWorkspacesResponseBodyWorkspacesIcon;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    permissionRole?: string;
    rootNodeId?: string;
    teamId?: string;
    type?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNodesResponseBodyNodesStatisticalInfo extends $tea.Model {
    wordCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNodesResponseBodyNodes extends $tea.Model {
    category?: string;
    createTime?: string;
    creatorId?: string;
    extension?: string;
    hasChildren?: boolean;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    nodeId?: string;
    permissionRole?: string;
    size?: number;
    statisticalInfo?: ListNodesResponseBodyNodesStatisticalInfo;
    type?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamsResponseBodyTeamsIcon extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTeamsResponseBodyTeams extends $tea.Model {
    corpId?: string;
    cover?: string;
    createTime?: string;
    creatorId?: string;
    description?: string;
    icon?: ListTeamsResponseBodyTeamsIcon;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    teamId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListWorkspacesResponseBodyWorkspacesIcon extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListWorkspacesResponseBodyWorkspaces extends $tea.Model {
    corpId?: string;
    cover?: string;
    createTime?: string;
    creatorId?: string;
    description?: string;
    icon?: ListWorkspacesResponseBodyWorkspacesIcon;
    modifiedTime?: string;
    modifierId?: string;
    name?: string;
    permissionRole?: string;
    rootNodeId?: string;
    teamId?: string;
    type?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    addTeamWithOptions(request: AddTeamRequest, headers: AddTeamHeaders, runtime: $Util.RuntimeOptions): Promise<AddTeamResponse>;
    addTeam(request: AddTeamRequest): Promise<AddTeamResponse>;
    addWorkspaceWithOptions(request: AddWorkspaceRequest, headers: AddWorkspaceHeaders, runtime: $Util.RuntimeOptions): Promise<AddWorkspaceResponse>;
    addWorkspace(request: AddWorkspaceRequest): Promise<AddWorkspaceResponse>;
    deleteTeamWithOptions(teamId: string, request: DeleteTeamRequest, headers: DeleteTeamHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteTeamResponse>;
    deleteTeam(teamId: string, request: DeleteTeamRequest): Promise<DeleteTeamResponse>;
    getDefaultHandOverUserWithOptions(request: GetDefaultHandOverUserRequest, headers: GetDefaultHandOverUserHeaders, runtime: $Util.RuntimeOptions): Promise<GetDefaultHandOverUserResponse>;
    getDefaultHandOverUser(request: GetDefaultHandOverUserRequest): Promise<GetDefaultHandOverUserResponse>;
    getMineWorkspaceWithOptions(request: GetMineWorkspaceRequest, headers: GetMineWorkspaceHeaders, runtime: $Util.RuntimeOptions): Promise<GetMineWorkspaceResponse>;
    getMineWorkspace(request: GetMineWorkspaceRequest): Promise<GetMineWorkspaceResponse>;
    getNodeWithOptions(nodeId: string, request: GetNodeRequest, headers: GetNodeHeaders, runtime: $Util.RuntimeOptions): Promise<GetNodeResponse>;
    getNode(nodeId: string, request: GetNodeRequest): Promise<GetNodeResponse>;
    getNodeByUrlWithOptions(request: GetNodeByUrlRequest, headers: GetNodeByUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetNodeByUrlResponse>;
    getNodeByUrl(request: GetNodeByUrlRequest): Promise<GetNodeByUrlResponse>;
    getNodesWithOptions(request: GetNodesRequest, headers: GetNodesHeaders, runtime: $Util.RuntimeOptions): Promise<GetNodesResponse>;
    getNodes(request: GetNodesRequest): Promise<GetNodesResponse>;
    getTeamWithOptions(teamId: string, request: GetTeamRequest, headers: GetTeamHeaders, runtime: $Util.RuntimeOptions): Promise<GetTeamResponse>;
    getTeam(teamId: string, request: GetTeamRequest): Promise<GetTeamResponse>;
    getWorkspaceWithOptions(workspaceId: string, request: GetWorkspaceRequest, headers: GetWorkspaceHeaders, runtime: $Util.RuntimeOptions): Promise<GetWorkspaceResponse>;
    getWorkspace(workspaceId: string, request: GetWorkspaceRequest): Promise<GetWorkspaceResponse>;
    getWorkspacesWithOptions(request: GetWorkspacesRequest, headers: GetWorkspacesHeaders, runtime: $Util.RuntimeOptions): Promise<GetWorkspacesResponse>;
    getWorkspaces(request: GetWorkspacesRequest): Promise<GetWorkspacesResponse>;
    handOverWorkspaceWithOptions(request: HandOverWorkspaceRequest, headers: HandOverWorkspaceHeaders, runtime: $Util.RuntimeOptions): Promise<HandOverWorkspaceResponse>;
    handOverWorkspace(request: HandOverWorkspaceRequest): Promise<HandOverWorkspaceResponse>;
    listNodesWithOptions(request: ListNodesRequest, headers: ListNodesHeaders, runtime: $Util.RuntimeOptions): Promise<ListNodesResponse>;
    listNodes(request: ListNodesRequest): Promise<ListNodesResponse>;
    listTeamsWithOptions(request: ListTeamsRequest, headers: ListTeamsHeaders, runtime: $Util.RuntimeOptions): Promise<ListTeamsResponse>;
    listTeams(request: ListTeamsRequest): Promise<ListTeamsResponse>;
    listWorkspacesWithOptions(request: ListWorkspacesRequest, headers: ListWorkspacesHeaders, runtime: $Util.RuntimeOptions): Promise<ListWorkspacesResponse>;
    listWorkspaces(request: ListWorkspacesRequest): Promise<ListWorkspacesResponse>;
    setDefaultHandOverUserWithOptions(request: SetDefaultHandOverUserRequest, headers: SetDefaultHandOverUserHeaders, runtime: $Util.RuntimeOptions): Promise<SetDefaultHandOverUserResponse>;
    setDefaultHandOverUser(request: SetDefaultHandOverUserRequest): Promise<SetDefaultHandOverUserResponse>;
}
