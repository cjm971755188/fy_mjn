"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class GetPersonalCarbonInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPersonalCarbonInfoHeaders = GetPersonalCarbonInfoHeaders;
class GetPersonalCarbonInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionType: 'actionType',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            actionType: 'string',
            unionId: 'string',
        };
    }
}
exports.GetPersonalCarbonInfoRequest = GetPersonalCarbonInfoRequest;
class GetPersonalCarbonInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            personalCarbonAmount: 'personalCarbonAmount',
        };
    }
    static types() {
        return {
            content: 'string',
            personalCarbonAmount: 'number',
        };
    }
}
exports.GetPersonalCarbonInfoResponseBody = GetPersonalCarbonInfoResponseBody;
class GetPersonalCarbonInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPersonalCarbonInfoResponseBody,
        };
    }
}
exports.GetPersonalCarbonInfoResponse = GetPersonalCarbonInfoResponse;
class WriteAlibabaOrgCarbonHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.WriteAlibabaOrgCarbonHeaders = WriteAlibabaOrgCarbonHeaders;
class WriteAlibabaOrgCarbonRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orgDetailsList: 'orgDetailsList',
        };
    }
    static types() {
        return {
            orgDetailsList: { 'type': 'array', 'itemType': WriteAlibabaOrgCarbonRequestOrgDetailsList },
        };
    }
}
exports.WriteAlibabaOrgCarbonRequest = WriteAlibabaOrgCarbonRequest;
class WriteAlibabaOrgCarbonResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
}
exports.WriteAlibabaOrgCarbonResponseBody = WriteAlibabaOrgCarbonResponseBody;
class WriteAlibabaOrgCarbonResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: WriteAlibabaOrgCarbonResponseBody,
        };
    }
}
exports.WriteAlibabaOrgCarbonResponse = WriteAlibabaOrgCarbonResponse;
class WriteAlibabaUserCarbonHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.WriteAlibabaUserCarbonHeaders = WriteAlibabaUserCarbonHeaders;
class WriteAlibabaUserCarbonRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userDetailsList: 'userDetailsList',
        };
    }
    static types() {
        return {
            userDetailsList: { 'type': 'array', 'itemType': WriteAlibabaUserCarbonRequestUserDetailsList },
        };
    }
}
exports.WriteAlibabaUserCarbonRequest = WriteAlibabaUserCarbonRequest;
class WriteAlibabaUserCarbonResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
}
exports.WriteAlibabaUserCarbonResponseBody = WriteAlibabaUserCarbonResponseBody;
class WriteAlibabaUserCarbonResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: WriteAlibabaUserCarbonResponseBody,
        };
    }
}
exports.WriteAlibabaUserCarbonResponse = WriteAlibabaUserCarbonResponse;
class WriteIsvStateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.WriteIsvStateHeaders = WriteIsvStateHeaders;
class WriteIsvStateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isvName: 'isvName',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            isvName: 'string',
            statDate: 'string',
        };
    }
}
exports.WriteIsvStateRequest = WriteIsvStateRequest;
class WriteIsvStateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
}
exports.WriteIsvStateResponseBody = WriteIsvStateResponseBody;
class WriteIsvStateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: WriteIsvStateResponseBody,
        };
    }
}
exports.WriteIsvStateResponse = WriteIsvStateResponse;
class WriteOrgCarbonHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.WriteOrgCarbonHeaders = WriteOrgCarbonHeaders;
class WriteOrgCarbonRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orgDetailsList: 'orgDetailsList',
        };
    }
    static types() {
        return {
            orgDetailsList: { 'type': 'array', 'itemType': WriteOrgCarbonRequestOrgDetailsList },
        };
    }
}
exports.WriteOrgCarbonRequest = WriteOrgCarbonRequest;
class WriteOrgCarbonResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
}
exports.WriteOrgCarbonResponseBody = WriteOrgCarbonResponseBody;
class WriteOrgCarbonResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: WriteOrgCarbonResponseBody,
        };
    }
}
exports.WriteOrgCarbonResponse = WriteOrgCarbonResponse;
class WriteUserCarbonHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.WriteUserCarbonHeaders = WriteUserCarbonHeaders;
class WriteUserCarbonRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userDetailsList: 'userDetailsList',
        };
    }
    static types() {
        return {
            userDetailsList: { 'type': 'array', 'itemType': WriteUserCarbonRequestUserDetailsList },
        };
    }
}
exports.WriteUserCarbonRequest = WriteUserCarbonRequest;
class WriteUserCarbonResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
}
exports.WriteUserCarbonResponseBody = WriteUserCarbonResponseBody;
class WriteUserCarbonResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: WriteUserCarbonResponseBody,
        };
    }
}
exports.WriteUserCarbonResponse = WriteUserCarbonResponse;
class WriteUserCarbonEnergyHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.WriteUserCarbonEnergyHeaders = WriteUserCarbonEnergyHeaders;
class WriteUserCarbonEnergyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userDetailsList: 'userDetailsList',
        };
    }
    static types() {
        return {
            userDetailsList: { 'type': 'array', 'itemType': WriteUserCarbonEnergyRequestUserDetailsList },
        };
    }
}
exports.WriteUserCarbonEnergyRequest = WriteUserCarbonEnergyRequest;
class WriteUserCarbonEnergyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'number',
            success: 'boolean',
        };
    }
}
exports.WriteUserCarbonEnergyResponseBody = WriteUserCarbonEnergyResponseBody;
class WriteUserCarbonEnergyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: WriteUserCarbonEnergyResponseBody,
        };
    }
}
exports.WriteUserCarbonEnergyResponse = WriteUserCarbonEnergyResponse;
class WriteAlibabaOrgCarbonRequestOrgDetailsList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionId: 'actionId',
            actionTime: 'actionTime',
            actionType: 'actionType',
            carbonAmount: 'carbonAmount',
            corpId: 'corpId',
            deptId: 'deptId',
            version: 'version',
        };
    }
    static types() {
        return {
            actionId: 'string',
            actionTime: 'string',
            actionType: 'string',
            carbonAmount: 'string',
            corpId: 'string',
            deptId: 'number',
            version: 'number',
        };
    }
}
exports.WriteAlibabaOrgCarbonRequestOrgDetailsList = WriteAlibabaOrgCarbonRequestOrgDetailsList;
class WriteAlibabaUserCarbonRequestUserDetailsList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionEndTime: 'actionEndTime',
            actionId: 'actionId',
            actionStartTime: 'actionStartTime',
            actionType: 'actionType',
            carbonAmount: 'carbonAmount',
            corpId: 'corpId',
            deptId: 'deptId',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            actionEndTime: 'string',
            actionId: 'string',
            actionStartTime: 'string',
            actionType: 'string',
            carbonAmount: 'string',
            corpId: 'string',
            deptId: 'number',
            userId: 'string',
            version: 'number',
        };
    }
}
exports.WriteAlibabaUserCarbonRequestUserDetailsList = WriteAlibabaUserCarbonRequestUserDetailsList;
class WriteOrgCarbonRequestOrgDetailsList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionId: 'actionId',
            actionTime: 'actionTime',
            actionType: 'actionType',
            carbonAmount: 'carbonAmount',
            corpId: 'corpId',
            deptId: 'deptId',
            version: 'version',
        };
    }
    static types() {
        return {
            actionId: 'string',
            actionTime: 'string',
            actionType: 'string',
            carbonAmount: 'string',
            corpId: 'string',
            deptId: 'number',
            version: 'number',
        };
    }
}
exports.WriteOrgCarbonRequestOrgDetailsList = WriteOrgCarbonRequestOrgDetailsList;
class WriteUserCarbonRequestUserDetailsList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionEndTime: 'actionEndTime',
            actionId: 'actionId',
            actionStartTime: 'actionStartTime',
            actionType: 'actionType',
            carbonAmount: 'carbonAmount',
            corpId: 'corpId',
            deptId: 'deptId',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            actionEndTime: 'string',
            actionId: 'string',
            actionStartTime: 'string',
            actionType: 'string',
            carbonAmount: 'string',
            corpId: 'string',
            deptId: 'number',
            userId: 'string',
            version: 'number',
        };
    }
}
exports.WriteUserCarbonRequestUserDetailsList = WriteUserCarbonRequestUserDetailsList;
class WriteUserCarbonEnergyRequestUserDetailsList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionEndTime: 'actionEndTime',
            actionId: 'actionId',
            actionStartTime: 'actionStartTime',
            actionType: 'actionType',
            carbonAmount: 'carbonAmount',
            corpId: 'corpId',
            deptId: 'deptId',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            actionEndTime: 'string',
            actionId: 'string',
            actionStartTime: 'string',
            actionType: 'string',
            carbonAmount: 'string',
            corpId: 'string',
            deptId: 'number',
            userId: 'string',
            version: 'number',
        };
    }
}
exports.WriteUserCarbonEnergyRequestUserDetailsList = WriteUserCarbonEnergyRequestUserDetailsList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async getPersonalCarbonInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.actionType)) {
            query["actionType"] = request.actionType;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPersonalCarbonInfo",
            version: "carbon_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/carbon/personals/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPersonalCarbonInfoResponse({}));
    }
    async getPersonalCarbonInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPersonalCarbonInfoHeaders({});
        return await this.getPersonalCarbonInfoWithOptions(request, headers, runtime);
    }
    async writeAlibabaOrgCarbonWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.orgDetailsList)) {
            body["orgDetailsList"] = request.orgDetailsList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "WriteAlibabaOrgCarbon",
            version: "carbon_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/carbon/alibabaOrgDetails/write`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new WriteAlibabaOrgCarbonResponse({}));
    }
    async writeAlibabaOrgCarbon(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new WriteAlibabaOrgCarbonHeaders({});
        return await this.writeAlibabaOrgCarbonWithOptions(request, headers, runtime);
    }
    async writeAlibabaUserCarbonWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userDetailsList)) {
            body["userDetailsList"] = request.userDetailsList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "WriteAlibabaUserCarbon",
            version: "carbon_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/carbon/alibabaUserDetails/write`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new WriteAlibabaUserCarbonResponse({}));
    }
    async writeAlibabaUserCarbon(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new WriteAlibabaUserCarbonHeaders({});
        return await this.writeAlibabaUserCarbonWithOptions(request, headers, runtime);
    }
    async writeIsvStateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isvName)) {
            query["isvName"] = request.isvName;
        }
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "WriteIsvState",
            version: "carbon_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/carbon/datas/states/write`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new WriteIsvStateResponse({}));
    }
    async writeIsvState(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new WriteIsvStateHeaders({});
        return await this.writeIsvStateWithOptions(request, headers, runtime);
    }
    async writeOrgCarbonWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.orgDetailsList)) {
            body["orgDetailsList"] = request.orgDetailsList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "WriteOrgCarbon",
            version: "carbon_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/carbon/orgDetails/write`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new WriteOrgCarbonResponse({}));
    }
    async writeOrgCarbon(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new WriteOrgCarbonHeaders({});
        return await this.writeOrgCarbonWithOptions(request, headers, runtime);
    }
    async writeUserCarbonWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userDetailsList)) {
            body["userDetailsList"] = request.userDetailsList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "WriteUserCarbon",
            version: "carbon_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/carbon/userDetails/write`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new WriteUserCarbonResponse({}));
    }
    async writeUserCarbon(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new WriteUserCarbonHeaders({});
        return await this.writeUserCarbonWithOptions(request, headers, runtime);
    }
    async writeUserCarbonEnergyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userDetailsList)) {
            body["userDetailsList"] = request.userDetailsList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "WriteUserCarbonEnergy",
            version: "carbon_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/carbon/userDetails/energies/write`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new WriteUserCarbonEnergyResponse({}));
    }
    async writeUserCarbonEnergy(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new WriteUserCarbonEnergyHeaders({});
        return await this.writeUserCarbonEnergyWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map