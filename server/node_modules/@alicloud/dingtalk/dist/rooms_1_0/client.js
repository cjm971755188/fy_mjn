"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateDeviceCustomTemplateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateDeviceCustomTemplateHeaders = CreateDeviceCustomTemplateHeaders;
class CreateDeviceCustomTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bgImgList: 'bgImgList',
            bgType: 'bgType',
            bgUrl: 'bgUrl',
            customDoc: 'customDoc',
            desensitizeUserName: 'desensitizeUserName',
            deviceUnionIds: 'deviceUnionIds',
            groupIds: 'groupIds',
            hideServerCodeWhenProjecting: 'hideServerCodeWhenProjecting',
            instruction: 'instruction',
            isPicTop: 'isPicTop',
            logo: 'logo',
            orgName: 'orgName',
            picturePlayInterval: 'picturePlayInterval',
            roomIds: 'roomIds',
            showCalendarCard: 'showCalendarCard',
            showCalendarTitle: 'showCalendarTitle',
            showFunctionCard: 'showFunctionCard',
            templateName: 'templateName',
        };
    }
    static types() {
        return {
            bgImgList: { 'type': 'array', 'itemType': 'string' },
            bgType: 'number',
            bgUrl: 'string',
            customDoc: 'string',
            desensitizeUserName: 'boolean',
            deviceUnionIds: { 'type': 'array', 'itemType': 'string' },
            groupIds: { 'type': 'array', 'itemType': 'number' },
            hideServerCodeWhenProjecting: 'boolean',
            instruction: 'boolean',
            isPicTop: 'number',
            logo: 'string',
            orgName: 'string',
            picturePlayInterval: 'number',
            roomIds: { 'type': 'array', 'itemType': 'string' },
            showCalendarCard: 'boolean',
            showCalendarTitle: 'boolean',
            showFunctionCard: 'boolean',
            templateName: 'string',
        };
    }
}
exports.CreateDeviceCustomTemplateRequest = CreateDeviceCustomTemplateRequest;
class CreateDeviceCustomTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateId: 'templateId',
        };
    }
    static types() {
        return {
            templateId: 'number',
        };
    }
}
exports.CreateDeviceCustomTemplateResponseBody = CreateDeviceCustomTemplateResponseBody;
class CreateDeviceCustomTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateDeviceCustomTemplateResponseBody,
        };
    }
}
exports.CreateDeviceCustomTemplateResponse = CreateDeviceCustomTemplateResponse;
class CreateMeetingRoomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateMeetingRoomHeaders = CreateMeetingRoomHeaders;
class CreateMeetingRoomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enableCycleReservation: 'enableCycleReservation',
            groupId: 'groupId',
            isvRoomId: 'isvRoomId',
            reservationAuthority: 'reservationAuthority',
            roomCapacity: 'roomCapacity',
            roomLabelIds: 'roomLabelIds',
            roomLocation: 'roomLocation',
            roomName: 'roomName',
            roomPicture: 'roomPicture',
            roomStatus: 'roomStatus',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            enableCycleReservation: 'boolean',
            groupId: 'number',
            isvRoomId: 'string',
            reservationAuthority: CreateMeetingRoomRequestReservationAuthority,
            roomCapacity: 'number',
            roomLabelIds: { 'type': 'array', 'itemType': 'number' },
            roomLocation: CreateMeetingRoomRequestRoomLocation,
            roomName: 'string',
            roomPicture: 'string',
            roomStatus: 'number',
            unionId: 'string',
        };
    }
}
exports.CreateMeetingRoomRequest = CreateMeetingRoomRequest;
class CreateMeetingRoomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.CreateMeetingRoomResponseBody = CreateMeetingRoomResponseBody;
class CreateMeetingRoomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateMeetingRoomResponseBody,
        };
    }
}
exports.CreateMeetingRoomResponse = CreateMeetingRoomResponse;
class CreateMeetingRoomGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateMeetingRoomGroupHeaders = CreateMeetingRoomGroupHeaders;
class CreateMeetingRoomGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'groupName',
            parentGroupId: 'parentGroupId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            parentGroupId: 'number',
            unionId: 'string',
        };
    }
}
exports.CreateMeetingRoomGroupRequest = CreateMeetingRoomGroupRequest;
class CreateMeetingRoomGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
}
exports.CreateMeetingRoomGroupResponseBody = CreateMeetingRoomGroupResponseBody;
class CreateMeetingRoomGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateMeetingRoomGroupResponseBody,
        };
    }
}
exports.CreateMeetingRoomGroupResponse = CreateMeetingRoomGroupResponse;
class DeleteDeviceCustomTemplateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteDeviceCustomTemplateHeaders = DeleteDeviceCustomTemplateHeaders;
class DeleteDeviceCustomTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateId: 'templateId',
        };
    }
    static types() {
        return {
            templateId: 'number',
        };
    }
}
exports.DeleteDeviceCustomTemplateRequest = DeleteDeviceCustomTemplateRequest;
class DeleteDeviceCustomTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteDeviceCustomTemplateResponseBody = DeleteDeviceCustomTemplateResponseBody;
class DeleteDeviceCustomTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteDeviceCustomTemplateResponseBody,
        };
    }
}
exports.DeleteDeviceCustomTemplateResponse = DeleteDeviceCustomTemplateResponse;
class DeleteMeetingRoomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteMeetingRoomHeaders = DeleteMeetingRoomHeaders;
class DeleteMeetingRoomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.DeleteMeetingRoomRequest = DeleteMeetingRoomRequest;
class DeleteMeetingRoomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteMeetingRoomResponseBody = DeleteMeetingRoomResponseBody;
class DeleteMeetingRoomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteMeetingRoomResponseBody,
        };
    }
}
exports.DeleteMeetingRoomResponse = DeleteMeetingRoomResponse;
class DeleteMeetingRoomGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteMeetingRoomGroupHeaders = DeleteMeetingRoomGroupHeaders;
class DeleteMeetingRoomGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.DeleteMeetingRoomGroupRequest = DeleteMeetingRoomGroupRequest;
class DeleteMeetingRoomGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteMeetingRoomGroupResponseBody = DeleteMeetingRoomGroupResponseBody;
class DeleteMeetingRoomGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteMeetingRoomGroupResponseBody,
        };
    }
}
exports.DeleteMeetingRoomGroupResponse = DeleteMeetingRoomGroupResponse;
class QueryDeviceCustomTemplateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDeviceCustomTemplateHeaders = QueryDeviceCustomTemplateHeaders;
class QueryDeviceCustomTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryDeviceCustomTemplateResponseBodyResult,
        };
    }
}
exports.QueryDeviceCustomTemplateResponseBody = QueryDeviceCustomTemplateResponseBody;
class QueryDeviceCustomTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDeviceCustomTemplateResponseBody,
        };
    }
}
exports.QueryDeviceCustomTemplateResponse = QueryDeviceCustomTemplateResponse;
class QueryDeviceCustomTemplateListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDeviceCustomTemplateListHeaders = QueryDeviceCustomTemplateListHeaders;
class QueryDeviceCustomTemplateListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryDeviceCustomTemplateListResponseBodyResult,
        };
    }
}
exports.QueryDeviceCustomTemplateListResponseBody = QueryDeviceCustomTemplateListResponseBody;
class QueryDeviceCustomTemplateListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDeviceCustomTemplateListResponseBody,
        };
    }
}
exports.QueryDeviceCustomTemplateListResponse = QueryDeviceCustomTemplateListResponse;
class QueryDeviceIpByCodeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDeviceIpByCodeHeaders = QueryDeviceIpByCodeHeaders;
class QueryDeviceIpByCodeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceSn: 'deviceSn',
        };
    }
    static types() {
        return {
            deviceSn: 'string',
        };
    }
}
exports.QueryDeviceIpByCodeRequest = QueryDeviceIpByCodeRequest;
class QueryDeviceIpByCodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryDeviceIpByCodeResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.QueryDeviceIpByCodeResponseBody = QueryDeviceIpByCodeResponseBody;
class QueryDeviceIpByCodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDeviceIpByCodeResponseBody,
        };
    }
}
exports.QueryDeviceIpByCodeResponse = QueryDeviceIpByCodeResponse;
class QueryDevicePropertiesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryDevicePropertiesHeaders = QueryDevicePropertiesHeaders;
class QueryDevicePropertiesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            propertyNames: 'propertyNames',
            deviceId: 'deviceId',
            deviceUnionId: 'deviceUnionId',
            operatorUnionId: 'operatorUnionId',
        };
    }
    static types() {
        return {
            propertyNames: { 'type': 'array', 'itemType': 'string' },
            deviceId: 'string',
            deviceUnionId: 'string',
            operatorUnionId: 'string',
        };
    }
}
exports.QueryDevicePropertiesRequest = QueryDevicePropertiesRequest;
class QueryDevicePropertiesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryDevicePropertiesResponseBodyResult },
        };
    }
}
exports.QueryDevicePropertiesResponseBody = QueryDevicePropertiesResponseBody;
class QueryDevicePropertiesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDevicePropertiesResponseBody,
        };
    }
}
exports.QueryDevicePropertiesResponse = QueryDevicePropertiesResponse;
class QueryMeetingRoomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMeetingRoomHeaders = QueryMeetingRoomHeaders;
class QueryMeetingRoomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.QueryMeetingRoomRequest = QueryMeetingRoomRequest;
class QueryMeetingRoomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryMeetingRoomResponseBodyResult,
        };
    }
}
exports.QueryMeetingRoomResponseBody = QueryMeetingRoomResponseBody;
class QueryMeetingRoomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMeetingRoomResponseBody,
        };
    }
}
exports.QueryMeetingRoomResponse = QueryMeetingRoomResponse;
class QueryMeetingRoomDeviceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMeetingRoomDeviceHeaders = QueryMeetingRoomDeviceHeaders;
class QueryMeetingRoomDeviceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceId: 'deviceId',
            deviceUnionId: 'deviceUnionId',
            operatorUnionId: 'operatorUnionId',
        };
    }
    static types() {
        return {
            deviceId: 'string',
            deviceUnionId: 'string',
            operatorUnionId: 'string',
        };
    }
}
exports.QueryMeetingRoomDeviceRequest = QueryMeetingRoomDeviceRequest;
class QueryMeetingRoomDeviceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryMeetingRoomDeviceResponseBodyResult,
        };
    }
}
exports.QueryMeetingRoomDeviceResponseBody = QueryMeetingRoomDeviceResponseBody;
class QueryMeetingRoomDeviceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMeetingRoomDeviceResponseBody,
        };
    }
}
exports.QueryMeetingRoomDeviceResponse = QueryMeetingRoomDeviceResponse;
class QueryMeetingRoomGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMeetingRoomGroupHeaders = QueryMeetingRoomGroupHeaders;
class QueryMeetingRoomGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.QueryMeetingRoomGroupRequest = QueryMeetingRoomGroupRequest;
class QueryMeetingRoomGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
            parentId: 'parentId',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupName: 'string',
            parentId: 'number',
        };
    }
}
exports.QueryMeetingRoomGroupResponseBody = QueryMeetingRoomGroupResponseBody;
class QueryMeetingRoomGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMeetingRoomGroupResponseBody,
        };
    }
}
exports.QueryMeetingRoomGroupResponse = QueryMeetingRoomGroupResponse;
class QueryMeetingRoomGroupListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMeetingRoomGroupListHeaders = QueryMeetingRoomGroupListHeaders;
class QueryMeetingRoomGroupListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.QueryMeetingRoomGroupListRequest = QueryMeetingRoomGroupListRequest;
class QueryMeetingRoomGroupListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryMeetingRoomGroupListResponseBodyResult },
        };
    }
}
exports.QueryMeetingRoomGroupListResponseBody = QueryMeetingRoomGroupListResponseBody;
class QueryMeetingRoomGroupListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMeetingRoomGroupListResponseBody,
        };
    }
}
exports.QueryMeetingRoomGroupListResponse = QueryMeetingRoomGroupListResponse;
class QueryMeetingRoomListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMeetingRoomListHeaders = QueryMeetingRoomListHeaders;
class QueryMeetingRoomListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
            unionId: 'string',
        };
    }
}
exports.QueryMeetingRoomListRequest = QueryMeetingRoomListRequest;
class QueryMeetingRoomListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            result: 'result',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'number',
            result: { 'type': 'array', 'itemType': QueryMeetingRoomListResponseBodyResult },
        };
    }
}
exports.QueryMeetingRoomListResponseBody = QueryMeetingRoomListResponseBody;
class QueryMeetingRoomListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMeetingRoomListResponseBody,
        };
    }
}
exports.QueryMeetingRoomListResponse = QueryMeetingRoomListResponse;
class RemoveSuperUserMeetingRoomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveSuperUserMeetingRoomHeaders = RemoveSuperUserMeetingRoomHeaders;
class RemoveSuperUserMeetingRoomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roomId: 'roomId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            roomId: 'string',
            unionId: 'string',
        };
    }
}
exports.RemoveSuperUserMeetingRoomRequest = RemoveSuperUserMeetingRoomRequest;
class RemoveSuperUserMeetingRoomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.RemoveSuperUserMeetingRoomResponseBody = RemoveSuperUserMeetingRoomResponseBody;
class RemoveSuperUserMeetingRoomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveSuperUserMeetingRoomResponseBody,
        };
    }
}
exports.RemoveSuperUserMeetingRoomResponse = RemoveSuperUserMeetingRoomResponse;
class SetSuperUserMeetingRoomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetSuperUserMeetingRoomHeaders = SetSuperUserMeetingRoomHeaders;
class SetSuperUserMeetingRoomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIdWhiteList: 'deptIdWhiteList',
            roomId: 'roomId',
            unionId: 'unionId',
            userIdWhiteList: 'userIdWhiteList',
        };
    }
    static types() {
        return {
            deptIdWhiteList: { 'type': 'array', 'itemType': 'number' },
            roomId: 'string',
            unionId: 'string',
            userIdWhiteList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.SetSuperUserMeetingRoomRequest = SetSuperUserMeetingRoomRequest;
class SetSuperUserMeetingRoomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.SetSuperUserMeetingRoomResponseBody = SetSuperUserMeetingRoomResponseBody;
class SetSuperUserMeetingRoomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetSuperUserMeetingRoomResponseBody,
        };
    }
}
exports.SetSuperUserMeetingRoomResponse = SetSuperUserMeetingRoomResponse;
class UpdateDeviceCustomTemplateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateDeviceCustomTemplateHeaders = UpdateDeviceCustomTemplateHeaders;
class UpdateDeviceCustomTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bgImgList: 'bgImgList',
            bgType: 'bgType',
            bgUrl: 'bgUrl',
            customDoc: 'customDoc',
            desensitizeUserName: 'desensitizeUserName',
            deviceUnionIds: 'deviceUnionIds',
            groupIds: 'groupIds',
            hideServerCodeWhenProjecting: 'hideServerCodeWhenProjecting',
            instruction: 'instruction',
            isPicTop: 'isPicTop',
            logo: 'logo',
            orgName: 'orgName',
            picturePlayInterval: 'picturePlayInterval',
            roomIds: 'roomIds',
            showCalendarCard: 'showCalendarCard',
            showCalendarTitle: 'showCalendarTitle',
            showFunctionCard: 'showFunctionCard',
            templateId: 'templateId',
            templateName: 'templateName',
        };
    }
    static types() {
        return {
            bgImgList: { 'type': 'array', 'itemType': 'string' },
            bgType: 'number',
            bgUrl: 'string',
            customDoc: 'string',
            desensitizeUserName: 'boolean',
            deviceUnionIds: { 'type': 'array', 'itemType': 'string' },
            groupIds: { 'type': 'array', 'itemType': 'number' },
            hideServerCodeWhenProjecting: 'boolean',
            instruction: 'boolean',
            isPicTop: 'number',
            logo: 'string',
            orgName: 'string',
            picturePlayInterval: 'number',
            roomIds: { 'type': 'array', 'itemType': 'string' },
            showCalendarCard: 'boolean',
            showCalendarTitle: 'boolean',
            showFunctionCard: 'boolean',
            templateId: 'number',
            templateName: 'string',
        };
    }
}
exports.UpdateDeviceCustomTemplateRequest = UpdateDeviceCustomTemplateRequest;
class UpdateDeviceCustomTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateDeviceCustomTemplateResponseBody = UpdateDeviceCustomTemplateResponseBody;
class UpdateDeviceCustomTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateDeviceCustomTemplateResponseBody,
        };
    }
}
exports.UpdateDeviceCustomTemplateResponse = UpdateDeviceCustomTemplateResponse;
class UpdateMeetingRoomHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateMeetingRoomHeaders = UpdateMeetingRoomHeaders;
class UpdateMeetingRoomRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enableCycleReservation: 'enableCycleReservation',
            groupId: 'groupId',
            isvRoomId: 'isvRoomId',
            reservationAuthority: 'reservationAuthority',
            roomCapacity: 'roomCapacity',
            roomId: 'roomId',
            roomLabelIds: 'roomLabelIds',
            roomLocation: 'roomLocation',
            roomName: 'roomName',
            roomPicture: 'roomPicture',
            roomStatus: 'roomStatus',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            enableCycleReservation: 'boolean',
            groupId: 'number',
            isvRoomId: 'string',
            reservationAuthority: UpdateMeetingRoomRequestReservationAuthority,
            roomCapacity: 'number',
            roomId: 'string',
            roomLabelIds: { 'type': 'array', 'itemType': 'number' },
            roomLocation: UpdateMeetingRoomRequestRoomLocation,
            roomName: 'string',
            roomPicture: 'string',
            roomStatus: 'number',
            unionId: 'string',
        };
    }
}
exports.UpdateMeetingRoomRequest = UpdateMeetingRoomRequest;
class UpdateMeetingRoomResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateMeetingRoomResponseBody = UpdateMeetingRoomResponseBody;
class UpdateMeetingRoomResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateMeetingRoomResponseBody,
        };
    }
}
exports.UpdateMeetingRoomResponse = UpdateMeetingRoomResponse;
class UpdateMeetingRoomGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateMeetingRoomGroupHeaders = UpdateMeetingRoomGroupHeaders;
class UpdateMeetingRoomGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupName: 'string',
            unionId: 'string',
        };
    }
}
exports.UpdateMeetingRoomGroupRequest = UpdateMeetingRoomGroupRequest;
class UpdateMeetingRoomGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateMeetingRoomGroupResponseBody = UpdateMeetingRoomGroupResponseBody;
class UpdateMeetingRoomGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateMeetingRoomGroupResponseBody,
        };
    }
}
exports.UpdateMeetingRoomGroupResponse = UpdateMeetingRoomGroupResponse;
class CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberName: 'memberName',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberName: 'string',
            memberType: 'string',
        };
    }
}
exports.CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers = CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers;
class CreateMeetingRoomRequestReservationAuthority extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authorizedMembers: 'authorizedMembers',
        };
    }
    static types() {
        return {
            authorizedMembers: { 'type': 'array', 'itemType': CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers },
        };
    }
}
exports.CreateMeetingRoomRequestReservationAuthority = CreateMeetingRoomRequestReservationAuthority;
class CreateMeetingRoomRequestRoomLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'desc',
            title: 'title',
        };
    }
    static types() {
        return {
            desc: 'string',
            title: 'string',
        };
    }
}
exports.CreateMeetingRoomRequestRoomLocation = CreateMeetingRoomRequestRoomLocation;
class QueryDeviceCustomTemplateResponseBodyResultDeviceCustomTemplate extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bgImageList: 'bgImageList',
            bgType: 'bgType',
            bgUrl: 'bgUrl',
            confSubType: 'confSubType',
            confType: 'confType',
            corpId: 'corpId',
            customDoc: 'customDoc',
            desensitizeUserName: 'desensitizeUserName',
            hideServerCodeWhenProjecting: 'hideServerCodeWhenProjecting',
            instruction: 'instruction',
            isPicTop: 'isPicTop',
            logo: 'logo',
            orgName: 'orgName',
            picturePlayInterval: 'picturePlayInterval',
            showCalendarCard: 'showCalendarCard',
            showCalendarTitle: 'showCalendarTitle',
            showFunctionCard: 'showFunctionCard',
            templateId: 'templateId',
            templateName: 'templateName',
        };
    }
    static types() {
        return {
            bgImageList: { 'type': 'array', 'itemType': 'string' },
            bgType: 'number',
            bgUrl: 'string',
            confSubType: 'number',
            confType: 'number',
            corpId: 'string',
            customDoc: 'string',
            desensitizeUserName: 'boolean',
            hideServerCodeWhenProjecting: 'boolean',
            instruction: 'boolean',
            isPicTop: 'number',
            logo: 'string',
            orgName: 'string',
            picturePlayInterval: 'number',
            showCalendarCard: 'boolean',
            showCalendarTitle: 'boolean',
            showFunctionCard: 'boolean',
            templateId: 'number',
            templateName: 'string',
        };
    }
}
exports.QueryDeviceCustomTemplateResponseBodyResultDeviceCustomTemplate = QueryDeviceCustomTemplateResponseBodyResultDeviceCustomTemplate;
class QueryDeviceCustomTemplateResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCustomTemplate: 'deviceCustomTemplate',
            deviceUnionIds: 'deviceUnionIds',
            groupIds: 'groupIds',
            roomIds: 'roomIds',
        };
    }
    static types() {
        return {
            deviceCustomTemplate: QueryDeviceCustomTemplateResponseBodyResultDeviceCustomTemplate,
            deviceUnionIds: { 'type': 'array', 'itemType': 'string' },
            groupIds: { 'type': 'array', 'itemType': 'number' },
            roomIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryDeviceCustomTemplateResponseBodyResult = QueryDeviceCustomTemplateResponseBodyResult;
class QueryDeviceCustomTemplateListResponseBodyResultDeviceCustomTemplates extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bgImageList: 'bgImageList',
            bgType: 'bgType',
            bgUrl: 'bgUrl',
            confSubType: 'confSubType',
            confType: 'confType',
            corpId: 'corpId',
            customDoc: 'customDoc',
            desensitizeUserName: 'desensitizeUserName',
            hideServerCodeWhenProjecting: 'hideServerCodeWhenProjecting',
            instruction: 'instruction',
            isPicTop: 'isPicTop',
            logo: 'logo',
            orgName: 'orgName',
            picturePlayInterval: 'picturePlayInterval',
            showCalendarCard: 'showCalendarCard',
            showCalendarTitle: 'showCalendarTitle',
            showFunctionCard: 'showFunctionCard',
            templateId: 'templateId',
            templateName: 'templateName',
        };
    }
    static types() {
        return {
            bgImageList: { 'type': 'array', 'itemType': 'string' },
            bgType: 'number',
            bgUrl: 'string',
            confSubType: 'number',
            confType: 'number',
            corpId: 'string',
            customDoc: 'string',
            desensitizeUserName: 'boolean',
            hideServerCodeWhenProjecting: 'boolean',
            instruction: 'boolean',
            isPicTop: 'number',
            logo: 'string',
            orgName: 'string',
            picturePlayInterval: 'number',
            showCalendarCard: 'boolean',
            showCalendarTitle: 'boolean',
            showFunctionCard: 'boolean',
            templateId: 'number',
            templateName: 'string',
        };
    }
}
exports.QueryDeviceCustomTemplateListResponseBodyResultDeviceCustomTemplates = QueryDeviceCustomTemplateListResponseBodyResultDeviceCustomTemplates;
class QueryDeviceCustomTemplateListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceCustomTemplates: 'deviceCustomTemplates',
            deviceTemplateMap: 'deviceTemplateMap',
            groupIdTemplateMap: 'groupIdTemplateMap',
            roomIdTemplateMap: 'roomIdTemplateMap',
        };
    }
    static types() {
        return {
            deviceCustomTemplates: { 'type': 'array', 'itemType': QueryDeviceCustomTemplateListResponseBodyResultDeviceCustomTemplates },
            deviceTemplateMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': 'string' } },
            groupIdTemplateMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': 'number' } },
            roomIdTemplateMap: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': 'string' } },
        };
    }
}
exports.QueryDeviceCustomTemplateListResponseBodyResult = QueryDeviceCustomTemplateListResponseBodyResult;
class QueryDeviceIpByCodeResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deviceIp: 'deviceIp',
        };
    }
    static types() {
        return {
            deviceIp: 'string',
        };
    }
}
exports.QueryDeviceIpByCodeResponseBodyResult = QueryDeviceIpByCodeResponseBodyResult;
class QueryDevicePropertiesResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            propertyName: 'propertyName',
            propertyValue: 'propertyValue',
        };
    }
    static types() {
        return {
            propertyName: 'string',
            propertyValue: 'string',
        };
    }
}
exports.QueryDevicePropertiesResponseBodyResult = QueryDevicePropertiesResponseBodyResult;
class QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberName: 'memberName',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberName: 'string',
            memberType: 'string',
        };
    }
}
exports.QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers = QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers;
class QueryMeetingRoomResponseBodyResultReservationAuthority extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authorizedMembers: 'authorizedMembers',
        };
    }
    static types() {
        return {
            authorizedMembers: { 'type': 'array', 'itemType': QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers },
        };
    }
}
exports.QueryMeetingRoomResponseBodyResultReservationAuthority = QueryMeetingRoomResponseBodyResultReservationAuthority;
class QueryMeetingRoomResponseBodyResultRoomGroup extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
            parentId: 'parentId',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupName: 'string',
            parentId: 'number',
        };
    }
}
exports.QueryMeetingRoomResponseBodyResultRoomGroup = QueryMeetingRoomResponseBodyResultRoomGroup;
class QueryMeetingRoomResponseBodyResultRoomLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
        };
    }
}
exports.QueryMeetingRoomResponseBodyResultRoomLabels = QueryMeetingRoomResponseBodyResultRoomLabels;
class QueryMeetingRoomResponseBodyResultRoomLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'desc',
            title: 'title',
        };
    }
    static types() {
        return {
            desc: 'string',
            title: 'string',
        };
    }
}
exports.QueryMeetingRoomResponseBodyResultRoomLocation = QueryMeetingRoomResponseBodyResultRoomLocation;
class QueryMeetingRoomResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            deviceUnionIds: 'deviceUnionIds',
            enableCycleReservation: 'enableCycleReservation',
            isvRoomId: 'isvRoomId',
            reservationAuthority: 'reservationAuthority',
            roomCapacity: 'roomCapacity',
            roomGroup: 'roomGroup',
            roomId: 'roomId',
            roomLabels: 'roomLabels',
            roomLocation: 'roomLocation',
            roomName: 'roomName',
            roomPicture: 'roomPicture',
            roomStaffId: 'roomStaffId',
            roomStatus: 'roomStatus',
        };
    }
    static types() {
        return {
            corpId: 'string',
            deviceUnionIds: { 'type': 'array', 'itemType': 'string' },
            enableCycleReservation: 'boolean',
            isvRoomId: 'string',
            reservationAuthority: QueryMeetingRoomResponseBodyResultReservationAuthority,
            roomCapacity: 'number',
            roomGroup: QueryMeetingRoomResponseBodyResultRoomGroup,
            roomId: 'string',
            roomLabels: { 'type': 'array', 'itemType': QueryMeetingRoomResponseBodyResultRoomLabels },
            roomLocation: QueryMeetingRoomResponseBodyResultRoomLocation,
            roomName: 'string',
            roomPicture: 'string',
            roomStaffId: 'string',
            roomStatus: 'number',
        };
    }
}
exports.QueryMeetingRoomResponseBodyResult = QueryMeetingRoomResponseBodyResult;
class QueryMeetingRoomDeviceResponseBodyResultControllers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            deviceId: 'deviceId',
            deviceMac: 'deviceMac',
            deviceModel: 'deviceModel',
            deviceName: 'deviceName',
            deviceServiceId: 'deviceServiceId',
            deviceSn: 'deviceSn',
            deviceStatus: 'deviceStatus',
            deviceType: 'deviceType',
            deviceUnionId: 'deviceUnionId',
            openRoomId: 'openRoomId',
            shareCode: 'shareCode',
        };
    }
    static types() {
        return {
            corpId: 'string',
            deviceId: 'string',
            deviceMac: 'string',
            deviceModel: 'string',
            deviceName: 'string',
            deviceServiceId: 'number',
            deviceSn: 'string',
            deviceStatus: 'string',
            deviceType: 'string',
            deviceUnionId: 'string',
            openRoomId: 'string',
            shareCode: 'string',
        };
    }
}
exports.QueryMeetingRoomDeviceResponseBodyResultControllers = QueryMeetingRoomDeviceResponseBodyResultControllers;
class QueryMeetingRoomDeviceResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activeTime: 'activeTime',
            controllers: 'controllers',
            corpId: 'corpId',
            creatorUnionId: 'creatorUnionId',
            devCamera: 'devCamera',
            devHdmi: 'devHdmi',
            devMic: 'devMic',
            devMirror: 'devMirror',
            devNetIp: 'devNetIp',
            devNetType: 'devNetType',
            devVoice: 'devVoice',
            devWifiMac: 'devWifiMac',
            devWireMac: 'devWireMac',
            deviceId: 'deviceId',
            deviceMac: 'deviceMac',
            deviceModel: 'deviceModel',
            deviceName: 'deviceName',
            deviceServiceId: 'deviceServiceId',
            deviceSn: 'deviceSn',
            deviceStatus: 'deviceStatus',
            deviceType: 'deviceType',
            deviceUnionId: 'deviceUnionId',
            firmwareVersion: 'firmwareVersion',
            openRoomId: 'openRoomId',
            roomName: 'roomName',
            shareCode: 'shareCode',
            sipAccountName: 'sipAccountName',
            softwareVersion: 'softwareVersion',
        };
    }
    static types() {
        return {
            activeTime: 'number',
            controllers: { 'type': 'array', 'itemType': QueryMeetingRoomDeviceResponseBodyResultControllers },
            corpId: 'string',
            creatorUnionId: 'string',
            devCamera: 'string',
            devHdmi: 'string',
            devMic: 'string',
            devMirror: 'string',
            devNetIp: 'string',
            devNetType: 'string',
            devVoice: 'string',
            devWifiMac: 'string',
            devWireMac: 'string',
            deviceId: 'string',
            deviceMac: 'string',
            deviceModel: 'string',
            deviceName: 'string',
            deviceServiceId: 'number',
            deviceSn: 'string',
            deviceStatus: 'string',
            deviceType: 'string',
            deviceUnionId: 'string',
            firmwareVersion: 'string',
            openRoomId: 'string',
            roomName: 'string',
            shareCode: 'string',
            sipAccountName: 'string',
            softwareVersion: 'string',
        };
    }
}
exports.QueryMeetingRoomDeviceResponseBodyResult = QueryMeetingRoomDeviceResponseBodyResult;
class QueryMeetingRoomGroupListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
            parentId: 'parentId',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupName: 'string',
            parentId: 'number',
        };
    }
}
exports.QueryMeetingRoomGroupListResponseBodyResult = QueryMeetingRoomGroupListResponseBodyResult;
class QueryMeetingRoomListResponseBodyResultRoomGroup extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
            parentId: 'parentId',
        };
    }
    static types() {
        return {
            groupId: 'number',
            groupName: 'string',
            parentId: 'number',
        };
    }
}
exports.QueryMeetingRoomListResponseBodyResultRoomGroup = QueryMeetingRoomListResponseBodyResultRoomGroup;
class QueryMeetingRoomListResponseBodyResultRoomLabels extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            labelId: 'labelId',
            labelName: 'labelName',
        };
    }
    static types() {
        return {
            labelId: 'number',
            labelName: 'string',
        };
    }
}
exports.QueryMeetingRoomListResponseBodyResultRoomLabels = QueryMeetingRoomListResponseBodyResultRoomLabels;
class QueryMeetingRoomListResponseBodyResultRoomLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'desc',
            title: 'title',
        };
    }
    static types() {
        return {
            desc: 'string',
            title: 'string',
        };
    }
}
exports.QueryMeetingRoomListResponseBodyResultRoomLocation = QueryMeetingRoomListResponseBodyResultRoomLocation;
class QueryMeetingRoomListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            isvRoomId: 'isvRoomId',
            roomCapacity: 'roomCapacity',
            roomGroup: 'roomGroup',
            roomId: 'roomId',
            roomLabels: 'roomLabels',
            roomLocation: 'roomLocation',
            roomName: 'roomName',
            roomPicture: 'roomPicture',
            roomStaffId: 'roomStaffId',
            roomStatus: 'roomStatus',
        };
    }
    static types() {
        return {
            corpId: 'string',
            isvRoomId: 'string',
            roomCapacity: 'number',
            roomGroup: QueryMeetingRoomListResponseBodyResultRoomGroup,
            roomId: 'string',
            roomLabels: { 'type': 'array', 'itemType': QueryMeetingRoomListResponseBodyResultRoomLabels },
            roomLocation: QueryMeetingRoomListResponseBodyResultRoomLocation,
            roomName: 'string',
            roomPicture: 'string',
            roomStaffId: 'string',
            roomStatus: 'number',
        };
    }
}
exports.QueryMeetingRoomListResponseBodyResult = QueryMeetingRoomListResponseBodyResult;
class UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberName: 'memberName',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberName: 'string',
            memberType: 'string',
        };
    }
}
exports.UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers = UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers;
class UpdateMeetingRoomRequestReservationAuthority extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authorizedMembers: 'authorizedMembers',
        };
    }
    static types() {
        return {
            authorizedMembers: { 'type': 'array', 'itemType': UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers },
        };
    }
}
exports.UpdateMeetingRoomRequestReservationAuthority = UpdateMeetingRoomRequestReservationAuthority;
class UpdateMeetingRoomRequestRoomLocation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'desc',
            title: 'title',
        };
    }
    static types() {
        return {
            desc: 'string',
            title: 'string',
        };
    }
}
exports.UpdateMeetingRoomRequestRoomLocation = UpdateMeetingRoomRequestRoomLocation;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async createDeviceCustomTemplateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bgImgList)) {
            body["bgImgList"] = request.bgImgList;
        }
        if (!tea_util_1.default.isUnset(request.bgType)) {
            body["bgType"] = request.bgType;
        }
        if (!tea_util_1.default.isUnset(request.bgUrl)) {
            body["bgUrl"] = request.bgUrl;
        }
        if (!tea_util_1.default.isUnset(request.customDoc)) {
            body["customDoc"] = request.customDoc;
        }
        if (!tea_util_1.default.isUnset(request.desensitizeUserName)) {
            body["desensitizeUserName"] = request.desensitizeUserName;
        }
        if (!tea_util_1.default.isUnset(request.deviceUnionIds)) {
            body["deviceUnionIds"] = request.deviceUnionIds;
        }
        if (!tea_util_1.default.isUnset(request.groupIds)) {
            body["groupIds"] = request.groupIds;
        }
        if (!tea_util_1.default.isUnset(request.hideServerCodeWhenProjecting)) {
            body["hideServerCodeWhenProjecting"] = request.hideServerCodeWhenProjecting;
        }
        if (!tea_util_1.default.isUnset(request.instruction)) {
            body["instruction"] = request.instruction;
        }
        if (!tea_util_1.default.isUnset(request.isPicTop)) {
            body["isPicTop"] = request.isPicTop;
        }
        if (!tea_util_1.default.isUnset(request.logo)) {
            body["logo"] = request.logo;
        }
        if (!tea_util_1.default.isUnset(request.orgName)) {
            body["orgName"] = request.orgName;
        }
        if (!tea_util_1.default.isUnset(request.picturePlayInterval)) {
            body["picturePlayInterval"] = request.picturePlayInterval;
        }
        if (!tea_util_1.default.isUnset(request.roomIds)) {
            body["roomIds"] = request.roomIds;
        }
        if (!tea_util_1.default.isUnset(request.showCalendarCard)) {
            body["showCalendarCard"] = request.showCalendarCard;
        }
        if (!tea_util_1.default.isUnset(request.showCalendarTitle)) {
            body["showCalendarTitle"] = request.showCalendarTitle;
        }
        if (!tea_util_1.default.isUnset(request.showFunctionCard)) {
            body["showFunctionCard"] = request.showFunctionCard;
        }
        if (!tea_util_1.default.isUnset(request.templateName)) {
            body["templateName"] = request.templateName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateDeviceCustomTemplate",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/devices/screens/templates`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateDeviceCustomTemplateResponse({}));
    }
    async createDeviceCustomTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateDeviceCustomTemplateHeaders({});
        return await this.createDeviceCustomTemplateWithOptions(request, headers, runtime);
    }
    async createMeetingRoomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.enableCycleReservation)) {
            body["enableCycleReservation"] = request.enableCycleReservation;
        }
        if (!tea_util_1.default.isUnset(request.groupId)) {
            body["groupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.isvRoomId)) {
            body["isvRoomId"] = request.isvRoomId;
        }
        if (!tea_util_1.default.isUnset(request.reservationAuthority)) {
            body["reservationAuthority"] = request.reservationAuthority;
        }
        if (!tea_util_1.default.isUnset(request.roomCapacity)) {
            body["roomCapacity"] = request.roomCapacity;
        }
        if (!tea_util_1.default.isUnset(request.roomLabelIds)) {
            body["roomLabelIds"] = request.roomLabelIds;
        }
        if (!tea_util_1.default.isUnset(request.roomLocation)) {
            body["roomLocation"] = request.roomLocation;
        }
        if (!tea_util_1.default.isUnset(request.roomName)) {
            body["roomName"] = request.roomName;
        }
        if (!tea_util_1.default.isUnset(request.roomPicture)) {
            body["roomPicture"] = request.roomPicture;
        }
        if (!tea_util_1.default.isUnset(request.roomStatus)) {
            body["roomStatus"] = request.roomStatus;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateMeetingRoom",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/meetingrooms`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateMeetingRoomResponse({}));
    }
    async createMeetingRoom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateMeetingRoomHeaders({});
        return await this.createMeetingRoomWithOptions(request, headers, runtime);
    }
    async createMeetingRoomGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.parentGroupId)) {
            body["parentGroupId"] = request.parentGroupId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateMeetingRoomGroup",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/groups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateMeetingRoomGroupResponse({}));
    }
    async createMeetingRoomGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateMeetingRoomGroupHeaders({});
        return await this.createMeetingRoomGroupWithOptions(request, headers, runtime);
    }
    async deleteDeviceCustomTemplateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteDeviceCustomTemplate",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/devices/screens/templates/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteDeviceCustomTemplateResponse({}));
    }
    async deleteDeviceCustomTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteDeviceCustomTemplateHeaders({});
        return await this.deleteDeviceCustomTemplateWithOptions(request, headers, runtime);
    }
    async deleteMeetingRoomWithOptions(roomId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteMeetingRoom",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/meetingRooms/${roomId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteMeetingRoomResponse({}));
    }
    async deleteMeetingRoom(roomId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteMeetingRoomHeaders({});
        return await this.deleteMeetingRoomWithOptions(roomId, request, headers, runtime);
    }
    async deleteMeetingRoomGroupWithOptions(groupId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteMeetingRoomGroup",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/groups/${groupId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteMeetingRoomGroupResponse({}));
    }
    async deleteMeetingRoomGroup(groupId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteMeetingRoomGroupHeaders({});
        return await this.deleteMeetingRoomGroupWithOptions(groupId, request, headers, runtime);
    }
    async queryDeviceCustomTemplateWithOptions(templateId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceCustomTemplate",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/devices/screens/templates/${templateId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDeviceCustomTemplateResponse({}));
    }
    async queryDeviceCustomTemplate(templateId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDeviceCustomTemplateHeaders({});
        return await this.queryDeviceCustomTemplateWithOptions(templateId, headers, runtime);
    }
    async queryDeviceCustomTemplateListWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceCustomTemplateList",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/devices/screens/templateLists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDeviceCustomTemplateListResponse({}));
    }
    async queryDeviceCustomTemplateList() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDeviceCustomTemplateListHeaders({});
        return await this.queryDeviceCustomTemplateListWithOptions(headers, runtime);
    }
    async queryDeviceIpByCodeWithOptions(shareCode, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceSn)) {
            query["deviceSn"] = request.deviceSn;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceIpByCode",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/devices/shareCodes/${shareCode}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDeviceIpByCodeResponse({}));
    }
    async queryDeviceIpByCode(shareCode, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDeviceIpByCodeHeaders({});
        return await this.queryDeviceIpByCodeWithOptions(shareCode, request, headers, runtime);
    }
    async queryDevicePropertiesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceId)) {
            query["deviceId"] = request.deviceId;
        }
        if (!tea_util_1.default.isUnset(request.deviceUnionId)) {
            query["deviceUnionId"] = request.deviceUnionId;
        }
        if (!tea_util_1.default.isUnset(request.operatorUnionId)) {
            query["operatorUnionId"] = request.operatorUnionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.propertyNames)) {
            body["propertyNames"] = request.propertyNames;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryDeviceProperties",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/devices/properties/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDevicePropertiesResponse({}));
    }
    async queryDeviceProperties(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDevicePropertiesHeaders({});
        return await this.queryDevicePropertiesWithOptions(request, headers, runtime);
    }
    async queryMeetingRoomWithOptions(roomId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMeetingRoom",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/meetingRooms/${roomId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMeetingRoomResponse({}));
    }
    async queryMeetingRoom(roomId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMeetingRoomHeaders({});
        return await this.queryMeetingRoomWithOptions(roomId, request, headers, runtime);
    }
    async queryMeetingRoomDeviceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deviceId)) {
            query["deviceId"] = request.deviceId;
        }
        if (!tea_util_1.default.isUnset(request.deviceUnionId)) {
            query["deviceUnionId"] = request.deviceUnionId;
        }
        if (!tea_util_1.default.isUnset(request.operatorUnionId)) {
            query["operatorUnionId"] = request.operatorUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMeetingRoomDevice",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/devices`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMeetingRoomDeviceResponse({}));
    }
    async queryMeetingRoomDevice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMeetingRoomDeviceHeaders({});
        return await this.queryMeetingRoomDeviceWithOptions(request, headers, runtime);
    }
    async queryMeetingRoomGroupWithOptions(groupId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMeetingRoomGroup",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/groups/${groupId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMeetingRoomGroupResponse({}));
    }
    async queryMeetingRoomGroup(groupId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMeetingRoomGroupHeaders({});
        return await this.queryMeetingRoomGroupWithOptions(groupId, request, headers, runtime);
    }
    async queryMeetingRoomGroupListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMeetingRoomGroupList",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/groupLists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMeetingRoomGroupListResponse({}));
    }
    async queryMeetingRoomGroupList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMeetingRoomGroupListHeaders({});
        return await this.queryMeetingRoomGroupListWithOptions(request, headers, runtime);
    }
    async queryMeetingRoomListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMeetingRoomList",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/meetingRoomLists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMeetingRoomListResponse({}));
    }
    async queryMeetingRoomList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMeetingRoomListHeaders({});
        return await this.queryMeetingRoomListWithOptions(request, headers, runtime);
    }
    async removeSuperUserMeetingRoomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.roomId)) {
            query["roomId"] = request.roomId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RemoveSuperUserMeetingRoom",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/meetingRooms/superUsers/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveSuperUserMeetingRoomResponse({}));
    }
    async removeSuperUserMeetingRoom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveSuperUserMeetingRoomHeaders({});
        return await this.removeSuperUserMeetingRoomWithOptions(request, headers, runtime);
    }
    async setSuperUserMeetingRoomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIdWhiteList)) {
            body["deptIdWhiteList"] = request.deptIdWhiteList;
        }
        if (!tea_util_1.default.isUnset(request.roomId)) {
            body["roomId"] = request.roomId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        if (!tea_util_1.default.isUnset(request.userIdWhiteList)) {
            body["userIdWhiteList"] = request.userIdWhiteList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetSuperUserMeetingRoom",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/meetingRooms/superUsers/set`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetSuperUserMeetingRoomResponse({}));
    }
    async setSuperUserMeetingRoom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetSuperUserMeetingRoomHeaders({});
        return await this.setSuperUserMeetingRoomWithOptions(request, headers, runtime);
    }
    async updateDeviceCustomTemplateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bgImgList)) {
            body["bgImgList"] = request.bgImgList;
        }
        if (!tea_util_1.default.isUnset(request.bgType)) {
            body["bgType"] = request.bgType;
        }
        if (!tea_util_1.default.isUnset(request.bgUrl)) {
            body["bgUrl"] = request.bgUrl;
        }
        if (!tea_util_1.default.isUnset(request.customDoc)) {
            body["customDoc"] = request.customDoc;
        }
        if (!tea_util_1.default.isUnset(request.desensitizeUserName)) {
            body["desensitizeUserName"] = request.desensitizeUserName;
        }
        if (!tea_util_1.default.isUnset(request.deviceUnionIds)) {
            body["deviceUnionIds"] = request.deviceUnionIds;
        }
        if (!tea_util_1.default.isUnset(request.groupIds)) {
            body["groupIds"] = request.groupIds;
        }
        if (!tea_util_1.default.isUnset(request.hideServerCodeWhenProjecting)) {
            body["hideServerCodeWhenProjecting"] = request.hideServerCodeWhenProjecting;
        }
        if (!tea_util_1.default.isUnset(request.instruction)) {
            body["instruction"] = request.instruction;
        }
        if (!tea_util_1.default.isUnset(request.isPicTop)) {
            body["isPicTop"] = request.isPicTop;
        }
        if (!tea_util_1.default.isUnset(request.logo)) {
            body["logo"] = request.logo;
        }
        if (!tea_util_1.default.isUnset(request.orgName)) {
            body["orgName"] = request.orgName;
        }
        if (!tea_util_1.default.isUnset(request.picturePlayInterval)) {
            body["picturePlayInterval"] = request.picturePlayInterval;
        }
        if (!tea_util_1.default.isUnset(request.roomIds)) {
            body["roomIds"] = request.roomIds;
        }
        if (!tea_util_1.default.isUnset(request.showCalendarCard)) {
            body["showCalendarCard"] = request.showCalendarCard;
        }
        if (!tea_util_1.default.isUnset(request.showCalendarTitle)) {
            body["showCalendarTitle"] = request.showCalendarTitle;
        }
        if (!tea_util_1.default.isUnset(request.showFunctionCard)) {
            body["showFunctionCard"] = request.showFunctionCard;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        if (!tea_util_1.default.isUnset(request.templateName)) {
            body["templateName"] = request.templateName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateDeviceCustomTemplate",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/devices/screens/templates`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateDeviceCustomTemplateResponse({}));
    }
    async updateDeviceCustomTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateDeviceCustomTemplateHeaders({});
        return await this.updateDeviceCustomTemplateWithOptions(request, headers, runtime);
    }
    async updateMeetingRoomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.enableCycleReservation)) {
            body["enableCycleReservation"] = request.enableCycleReservation;
        }
        if (!tea_util_1.default.isUnset(request.groupId)) {
            body["groupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.isvRoomId)) {
            body["isvRoomId"] = request.isvRoomId;
        }
        if (!tea_util_1.default.isUnset(request.reservationAuthority)) {
            body["reservationAuthority"] = request.reservationAuthority;
        }
        if (!tea_util_1.default.isUnset(request.roomCapacity)) {
            body["roomCapacity"] = request.roomCapacity;
        }
        if (!tea_util_1.default.isUnset(request.roomId)) {
            body["roomId"] = request.roomId;
        }
        if (!tea_util_1.default.isUnset(request.roomLabelIds)) {
            body["roomLabelIds"] = request.roomLabelIds;
        }
        if (!tea_util_1.default.isUnset(request.roomLocation)) {
            body["roomLocation"] = request.roomLocation;
        }
        if (!tea_util_1.default.isUnset(request.roomName)) {
            body["roomName"] = request.roomName;
        }
        if (!tea_util_1.default.isUnset(request.roomPicture)) {
            body["roomPicture"] = request.roomPicture;
        }
        if (!tea_util_1.default.isUnset(request.roomStatus)) {
            body["roomStatus"] = request.roomStatus;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateMeetingRoom",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/meetingRooms`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateMeetingRoomResponse({}));
    }
    async updateMeetingRoom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateMeetingRoomHeaders({});
        return await this.updateMeetingRoomWithOptions(request, headers, runtime);
    }
    async updateMeetingRoomGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupId)) {
            body["groupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateMeetingRoomGroup",
            version: "rooms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/rooms/groups`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateMeetingRoomGroupResponse({}));
    }
    async updateMeetingRoomGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateMeetingRoomGroupHeaders({});
        return await this.updateMeetingRoomGroupWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map