"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateGroupBlackboardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateGroupBlackboardHeaders = CreateGroupBlackboardHeaders;
class CreateGroupBlackboardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            content: 'content',
            openConversationId: 'openConversationId',
            sendDing: 'sendDing',
            sticky: 'sticky',
            uniqueId: 'uniqueId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            content: 'string',
            openConversationId: 'string',
            sendDing: 'boolean',
            sticky: 'boolean',
            uniqueId: 'string',
            userId: 'string',
        };
    }
}
exports.CreateGroupBlackboardRequest = CreateGroupBlackboardRequest;
class CreateGroupBlackboardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataId: 'dataId',
            success: 'success',
        };
    }
    static types() {
        return {
            dataId: 'string',
            success: 'boolean',
        };
    }
}
exports.CreateGroupBlackboardResponseBody = CreateGroupBlackboardResponseBody;
class CreateGroupBlackboardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateGroupBlackboardResponseBody,
        };
    }
}
exports.CreateGroupBlackboardResponse = CreateGroupBlackboardResponse;
class DeleteGroupBlackboardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteGroupBlackboardHeaders = DeleteGroupBlackboardHeaders;
class DeleteGroupBlackboardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataId: 'dataId',
            openConversationId: 'openConversationId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            dataId: 'string',
            openConversationId: 'string',
            userId: 'string',
        };
    }
}
exports.DeleteGroupBlackboardRequest = DeleteGroupBlackboardRequest;
class DeleteGroupBlackboardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isDeleted: 'isDeleted',
            success: 'success',
        };
    }
    static types() {
        return {
            isDeleted: 'boolean',
            success: 'boolean',
        };
    }
}
exports.DeleteGroupBlackboardResponseBody = DeleteGroupBlackboardResponseBody;
class DeleteGroupBlackboardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteGroupBlackboardResponseBody,
        };
    }
}
exports.DeleteGroupBlackboardResponse = DeleteGroupBlackboardResponse;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async createGroupBlackboardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.sendDing)) {
            body["sendDing"] = request.sendDing;
        }
        if (!tea_util_1.default.isUnset(request.sticky)) {
            body["sticky"] = request.sticky;
        }
        if (!tea_util_1.default.isUnset(request.uniqueId)) {
            body["uniqueId"] = request.uniqueId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateGroupBlackboard",
            version: "groupBlackboard_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/groupBlackboard/blackboards`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateGroupBlackboardResponse({}));
    }
    async createGroupBlackboard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateGroupBlackboardHeaders({});
        return await this.createGroupBlackboardWithOptions(request, headers, runtime);
    }
    async deleteGroupBlackboardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.dataId)) {
            body["dataId"] = request.dataId;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeleteGroupBlackboard",
            version: "groupBlackboard_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/groupBlackboard/blackboards/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteGroupBlackboardResponse({}));
    }
    async deleteGroupBlackboard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteGroupBlackboardHeaders({});
        return await this.deleteGroupBlackboardWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map