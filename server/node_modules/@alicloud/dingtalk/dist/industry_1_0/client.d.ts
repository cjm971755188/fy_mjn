/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CampusAddRenterMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusAddRenterMemberRequest extends $tea.Model {
    extend?: string;
    mobile?: string;
    name?: string;
    renterId?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusAddRenterMemberResponseBody extends $tea.Model {
    unionId?: string;
    userId?: string;
    userState?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusAddRenterMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusAddRenterMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusRequest extends $tea.Model {
    address?: string;
    area?: number;
    belongProjectGroupId?: number;
    campusName?: string;
    capacity?: number;
    cityId?: number;
    country?: string;
    countyId?: number;
    creatorUnionId?: string;
    description?: string;
    extend?: string;
    location?: string;
    orderEndTime?: number;
    orderInfo?: string;
    orderStartTime?: number;
    provId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusResponseBody extends $tea.Model {
    campusCorpId?: string;
    campusDeptId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusCreateCampusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusGroupRequest extends $tea.Model {
    extend?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusGroupResponseBody extends $tea.Model {
    groupId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusCreateCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateRenterRequest extends $tea.Model {
    creditCode?: string;
    endTime?: number;
    extend?: string;
    name?: string;
    startTime?: number;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateRenterResponseBody extends $tea.Model {
    renterId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateRenterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusCreateRenterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDelRenterMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDelRenterMemberRequest extends $tea.Model {
    renterId?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDelRenterMemberResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDelRenterMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusDelRenterMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteCampusGroupRequest extends $tea.Model {
    campusProjectGroupId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteCampusGroupResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteCampusGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusDeleteCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteRenterRequest extends $tea.Model {
    renterId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteRenterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusRequest extends $tea.Model {
    campusDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusResponseBody extends $tea.Model {
    address?: string;
    area?: number;
    belongProjectGroupId?: string;
    campusCorpId?: string;
    campusDeptId?: number;
    campusName?: string;
    capacity?: string;
    cityId?: number;
    country?: string;
    countyId?: number;
    description?: string;
    extend?: string;
    location?: string;
    orderEndTime?: number;
    orderInfo?: string;
    orderStartTime?: number;
    provId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusGetCampusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusGroupRequest extends $tea.Model {
    groupId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusGroupResponseBody extends $tea.Model {
    extend?: string;
    projectGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusGetCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterRequest extends $tea.Model {
    renterId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterResponseBody extends $tea.Model {
    bindRenterCorpId?: string;
    bindTime?: number;
    creditCode?: string;
    endTime?: number;
    extend?: string;
    name?: string;
    renterDeptId?: number;
    startTime?: number;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusGetRenterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterMemberRequest extends $tea.Model {
    renterId?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterMemberResponseBody extends $tea.Model {
    extend?: string;
    inviteState?: number;
    name?: string;
    state?: string;
    type?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusGetRenterMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusRequest extends $tea.Model {
    groupDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusResponseBody extends $tea.Model {
    result?: CampusListCampusResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusListCampusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusGroupResponseBody extends $tea.Model {
    result?: CampusListCampusGroupResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusListCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterResponseBody extends $tea.Model {
    result?: CampusListRenterResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusListRenterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersRequest extends $tea.Model {
    renterId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersResponseBody extends $tea.Model {
    result?: CampusListRenterMembersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusListRenterMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusRequest extends $tea.Model {
    address?: string;
    area?: number;
    belongProjectGroupId?: number;
    campusDeptId?: number;
    campusName?: string;
    capacity?: number;
    cityId?: number;
    country?: string;
    countyId?: number;
    description?: string;
    extend?: string;
    orderEndTime?: number;
    orderInfo?: number;
    orderStartTime?: number;
    provId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusUpdateCampusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusGroupRequest extends $tea.Model {
    campusProjectGroupId?: number;
    extend?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusGroupResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusUpdateCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterRequest extends $tea.Model {
    creditCode?: string;
    endTime?: number;
    extend?: string;
    name?: string;
    renterId?: number;
    startTime?: number;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterResponseBody extends $tea.Model {
    renterId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusUpdateRenterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterMemberRequest extends $tea.Model {
    extend?: string;
    name?: string;
    renterId?: number;
    type?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterMemberResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CampusUpdateRenterMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeActiveCollegeDeptGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeActiveCollegeDeptGroupRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeActiveCollegeDeptGroupResponseBody extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeActiveCollegeDeptGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeActiveCollegeDeptGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddCollegeDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddCollegeDeptRequest extends $tea.Model {
    deptName?: string;
    deptType?: string;
    sortFactor?: number;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddCollegeDeptResponseBody extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddCollegeDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeAddCollegeDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddManagerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddManagerRequest extends $tea.Model {
    deptId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddManagerResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddManagerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeAddManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddStudentRequest extends $tea.Model {
    deptId?: number;
    empExtension?: {
        [key: string]: string;
    };
    gender?: string;
    identifyId?: string;
    mobile?: string;
    startYear?: string;
    studentName?: string;
    studentNumber?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddStudentResponseBody extends $tea.Model {
    dingMemberStatus?: string;
    isActive?: boolean;
    studentId?: number;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddStudentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeAddStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeChangeStudentDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeChangeStudentDeptRequest extends $tea.Model {
    deptId?: number;
    newDeptId?: number;
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeChangeStudentDeptResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeChangeStudentDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeChangeStudentDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeDeleteCollegeDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeDeleteCollegeDeptRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeDeleteCollegeDeptResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeDeleteCollegeDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeDeleteCollegeDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptResponseBody extends $tea.Model {
    collegeDeptInfoSimpleList?: CollegeListCollegeSubDeptResponseBodyCollegeDeptInfoSimpleList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeListCollegeSubDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerRequest extends $tea.Model {
    deptId?: number;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerResponseBody extends $tea.Model {
    managerInfoSimpleList?: CollegeListDeptManagerResponseBodyManagerInfoSimpleList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeListDeptManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoRequest extends $tea.Model {
    deptId?: number;
    dingStudentStatus?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoResponseBody extends $tea.Model {
    studentInfoSimpleList?: CollegeListStudentInfoResponseBodyStudentInfoSimpleList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeListStudentInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentRequest extends $tea.Model {
    deptId?: number;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentResponseBody extends $tea.Model {
    studentInfoSimpleList?: CollegeListUncheckedStudentResponseBodyStudentInfoSimpleList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeListUncheckedStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptGroupInfoRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptGroupInfoResponseBody extends $tea.Model {
    groupName?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptGroupInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeQueryCollegeDeptGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptInfoRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptInfoResponseBody extends $tea.Model {
    deptId?: number;
    deptName?: string;
    deptType?: string;
    sortFactor?: number;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeQueryCollegeDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByDeptRequest extends $tea.Model {
    deptId?: number;
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByDeptResponseBody extends $tea.Model {
    deptId?: number;
    dingMemberStatus?: string;
    empExtension?: {
        [key: string]: any;
    };
    gender?: string;
    identifyId?: string;
    isActive?: boolean;
    startYear?: string;
    studentId?: number;
    studentName?: string;
    studentNumber?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeQueryStudentInfoByDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileRequest extends $tea.Model {
    mobile?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileResponseBody extends $tea.Model {
    deptStudentInfoList?: CollegeQueryStudentInfoByMobileResponseBodyDeptStudentInfoList[];
    dingMemberStatus?: string;
    empExtension?: {
        [key: string]: any;
    };
    gender?: string;
    identifyId?: string;
    isActive?: boolean;
    startYear?: string;
    studentId?: number;
    studentName?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeQueryStudentInfoByMobileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdRequest extends $tea.Model {
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdResponseBody extends $tea.Model {
    deptStudentInfoList?: CollegeQueryStudentInfoByStudentIdResponseBodyDeptStudentInfoList[];
    dingMemberStatus?: string;
    empExtension?: {
        [key: string]: any;
    };
    gender?: string;
    identifyId?: string;
    isActive?: boolean;
    startYear?: string;
    studentId?: number;
    studentName?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeQueryStudentInfoByStudentIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveManagerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveManagerRequest extends $tea.Model {
    deptId?: number;
    isForce?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveManagerResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveManagerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeRemoveManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveStudentRequest extends $tea.Model {
    deptId?: number;
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveStudentResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveStudentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeRemoveStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateCollegeDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateCollegeDeptRequest extends $tea.Model {
    deptId?: number;
    deptName?: string;
    sortFactor?: number;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateCollegeDeptResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateCollegeDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeUpdateCollegeDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentDeptInfoRequest extends $tea.Model {
    deptId?: number;
    studentId?: number;
    studentNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentDeptInfoResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentDeptInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeUpdateStudentDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentInfoRequest extends $tea.Model {
    empExtension?: {
        [key: string]: string;
    };
    gender?: string;
    identifyId?: string;
    startYear?: string;
    studentId?: number;
    studentName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentInfoResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeUpdateStudentInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentMoblieHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentMoblieRequest extends $tea.Model {
    isForce?: boolean;
    newMobile?: string;
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentMoblieResponseBody extends $tea.Model {
    updateResult?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentMoblieResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CollegeUpdateStudentMoblieResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateRequest extends $tea.Model {
    managerIdList?: string[];
    name?: string;
    order?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateResponseBody extends $tea.Model {
    content?: CustomizeContactCreateResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeleteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeleteRequest extends $tea.Model {
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeleteResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeleteResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactDeleteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptCreateRequest extends $tea.Model {
    code?: string;
    managerIdList?: string[];
    name?: string;
    order?: number;
    parentDeptId?: number;
    refId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptCreateResponseBody extends $tea.Model {
    content?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptCreateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactDeptCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptDeleteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptDeleteRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptDeleteResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptDeleteResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactDeptDeleteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptGroupCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptGroupCreateRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptGroupCreateResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptGroupCreateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactDeptGroupCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoResponseBody extends $tea.Model {
    content?: CustomizeContactDeptInfoResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListResponseBody extends $tea.Model {
    content?: CustomizeContactDeptListResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactDeptListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptUpdateRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    managerIdList?: string[];
    name?: string;
    order?: number;
    parentDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptUpdateResponseBody extends $tea.Model {
    content?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptUpdateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactDeptUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpAddHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpAddRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpAddResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpAddResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactEmpAddResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpDeleteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpDeleteRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpDeleteResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpDeleteResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactEmpDeleteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListResponseBody extends $tea.Model {
    content?: CustomizeContactEmpListResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactEmpListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactListResponseBody extends $tea.Model {
    content?: CustomizeContactListResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactUpdateRequest extends $tea.Model {
    code?: string;
    managerIdList?: string[];
    name?: string;
    order?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactUpdateResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactUpdateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CustomizeContactUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushRequest extends $tea.Model {
    messageDataList?: DIgitalStoreMessagePushRequestMessageDataList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushShrinkRequest extends $tea.Model {
    messageDataListShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DIgitalStoreMessagePushResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordRequest extends $tea.Model {
    beginTime?: number;
    endTime?: number;
    ids?: number[];
    pageNumber?: number;
    pageSize?: number;
    sceneCardName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordResponseBody extends $tea.Model {
    content?: DigitalStoreCardRecordResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreCardRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreContactInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreContactInfoResponseBody extends $tea.Model {
    code?: string;
    dingDeptId?: number;
    name?: string;
    rootDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreContactInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreContactInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsRequest extends $tea.Model {
    conversationTitle?: string;
    conversationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsResponseBody extends $tea.Model {
    content?: DigitalStoreConversationsResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreConversationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordRequest extends $tea.Model {
    beginTime?: number;
    endTime?: number;
    ids?: number[];
    sceneCardName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordResponseBody extends $tea.Model {
    fileName?: string;
    fileType?: string;
    fileUrl?: string;
    id?: string;
    isImport?: string;
    remark?: string;
    status?: string;
    successNum?: string;
    totalNum?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreExportCardRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordDetailRequest extends $tea.Model {
    beginTime?: number;
    endTime?: number;
    ids?: number[];
    sceneCardName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordDetailResponseBody extends $tea.Model {
    fileName?: string;
    fileType?: string;
    fileUrl?: string;
    id?: string;
    isImport?: string;
    remark?: string;
    status?: string;
    successNum?: string;
    totalNum?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreExportCardRecordDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupInfoRequest extends $tea.Model {
    groupId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupInfoResponseBody extends $tea.Model {
    groupId?: number;
    groupName?: string;
    storeIdList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupsResponseBody extends $tea.Model {
    content?: DigitalStoreGroupsResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreNodeInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreNodeInfoRequest extends $tea.Model {
    code?: string;
    nodeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreNodeInfoResponseBody extends $tea.Model {
    dingDeptId?: number;
    id?: number;
    name?: string;
    parentId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreNodeInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreNodeInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRightsInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRightsInfoResponseBody extends $tea.Model {
    endTime?: number;
    quantity?: number;
    rightsCode?: string;
    rightsName?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRightsInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreRightsInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRolesResponseBody extends $tea.Model {
    content?: DigitalStoreRolesResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRolesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSceneScopeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSceneScopeRequest extends $tea.Model {
    openConversationId?: string;
    sceneCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSceneScopeResponseBody extends $tea.Model {
    groupConversationType?: string;
    scopeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSceneScopeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreSceneScopeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreStoreInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreStoreInfoRequest extends $tea.Model {
    code?: string;
    storeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreStoreInfoResponseBody extends $tea.Model {
    address?: string;
    businessHours?: string;
    dingDeptId?: number;
    latitude?: string;
    locationAddress?: string;
    longitude?: string;
    name?: string;
    parentId?: number;
    status?: string;
    storeAcreage?: string;
    storeBandwidth?: string;
    storeCode?: string;
    storeId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreStoreInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreStoreInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesRequest extends $tea.Model {
    code?: string;
    nodeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesResponseBody extends $tea.Model {
    content?: DigitalStoreSubNodesResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreSubNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoRequest extends $tea.Model {
    updateUserList?: DigitalStoreUpdateAuthInfoRequestUpdateUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreUpdateAuthInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUserInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUserInfoRequest extends $tea.Model {
    code?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUserInfoResponseBody extends $tea.Model {
    name?: string;
    roleIdList?: number[];
    scopeList?: number[];
    storeList?: number[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUserInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersRequest extends $tea.Model {
    code?: string;
    nodeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersResponseBody extends $tea.Model {
    content?: DigitalStoreUsersResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStoreUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordResponseBody extends $tea.Model {
    content?: DigitalStorelistExportTaskRecordResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DigitalStorelistExportTaskRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsRequest extends $tea.Model {
    externalType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsResponseBody extends $tea.Model {
    result?: ExternalQueryExternalAppOrgsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ExternalQueryExternalAppOrgsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalBelongMainOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalBelongMainOrgRequest extends $tea.Model {
    externalType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalBelongMainOrgResponseBody extends $tea.Model {
    corpId?: string;
    corpName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalBelongMainOrgResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ExternalQueryExternalBelongMainOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsRequest extends $tea.Model {
    externalType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsResponseBody extends $tea.Model {
    result?: ExternalQueryExternalOrgsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ExternalQueryExternalOrgsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HospitalDataCheckHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HospitalDataCheckRequest extends $tea.Model {
    allDeptCount?: number;
    allDeptUserCount?: number;
    allGroupCount?: number;
    allGroupUserCount?: number;
    deptCount?: number;
    deptUserCount?: number;
    groupCount?: number;
    groupUserCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HospitalDataCheckResponseBody extends $tea.Model {
    allDeptCount?: number;
    allDeptUserCount?: number;
    allGroupCount?: number;
    allGroupUserCount?: number;
    deptCount?: number;
    deptUserCount?: number;
    groupCount?: number;
    groupUserCount?: number;
    match?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HospitalDataCheckResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: HospitalDataCheckResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    bizData?: {
        [key: string]: any;
    };
    eventType?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventResponseBody extends $tea.Model {
    errorMsg?: string;
    requestId?: string;
    result?: IndustryManufactureCommonEventResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureCommonEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    cursor?: number;
    endTime?: number;
    instanceId?: string;
    isvOrgId?: number;
    materialNo?: string;
    microappAgentId?: number;
    orderNo?: string;
    orgId?: number;
    pageNumber?: number;
    pageSize?: number;
    productionTaskNo?: string;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryManufactureCostRecordListGetResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureCostRecordListGetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    cursor?: number;
    endTime?: number;
    isvOrgId?: number;
    materialNo?: string;
    microappAgentId?: number;
    orgId?: number;
    pageNumber?: number;
    pageSize?: number;
    productionTaskNo?: string;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryManufactureFeeListGetResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureFeeListGetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    cursor?: number;
    endTime?: number;
    isvOrgId?: string;
    materialNo?: string;
    microappAgentId?: number;
    orgId?: number;
    pageNumber?: number;
    pageSize?: number;
    processNo?: string;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryManufactureLabourCostResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureLabourCostResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    currentPage?: number;
    cursor?: number;
    endTime?: number;
    instanceId?: string;
    isvOrgId?: number;
    materialNo?: string;
    microappAgentId?: number;
    orgId?: number;
    pageSize?: number;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryManufactureMaterialListResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureMaterialListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    defectsAmount?: string;
    dispatchStaffName?: string;
    dispatchStaffNo?: string;
    fineAmount?: string;
    overdue?: number;
    planQuantity?: number;
    priority?: number;
    processName?: string;
    processUuid?: string;
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    projectCode?: string;
    projectId?: string;
    projectStatus?: string;
    taskOperators?: string;
    taskPlanEndTime?: string;
    taskPlanStartTime?: string;
    taskStatus?: string;
    taskType?: string;
    teamId?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskResponseBody extends $tea.Model {
    result?: IndustryManufactureMesDispatchTaskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureMesDispatchTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    category?: string;
    extendData?: IndustryManufactureMesMaterialRequestExtendData[];
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    prop?: string;
    unit?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialResponseBody extends $tea.Model {
    result?: IndustryManufactureMesMaterialResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureMesMaterialResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanRequest extends $tea.Model {
    approvalStatus?: string;
    approver?: string;
    baseDataName?: string;
    outSourceProjectCode?: string;
    outSourceTeamId?: string;
    price?: string;
    processIdentificationCode?: string;
    processUuids?: string;
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    projectCode?: string;
    projectId?: string;
    sendPlanQuantity?: string;
    supplierCode?: string;
    supplierName?: string;
    totalWage?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanResponseBody extends $tea.Model {
    result?: IndustryManufactureMesOutPlanResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureMesOutPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    approveStatus?: string;
    baseDataName?: string;
    defectsAmount?: string;
    defectsReason?: string;
    fineAmount?: string;
    hasQualityTest?: string;
    overdue?: number;
    planQuantity?: number;
    priority?: number;
    processName?: string;
    processUuid?: string;
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    projectCode?: string;
    projectId?: string;
    projectStatus?: string;
    qualityTestStatus?: string;
    taskPlanEndTime?: string;
    taskPlanStartTime?: string;
    taskStatus?: string;
    taskType?: string;
    taskUuid?: string;
    teamId?: string;
    userId?: string;
    userName?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputResponseBody extends $tea.Model {
    result?: IndustryManufactureMesOutputResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureMesOutputResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    extendData?: IndustryManufactureMesProcessRequestExtendData[];
    name?: string;
    needDispatch?: string;
    needQualityTest?: string;
    no?: string;
    price?: string;
    prop?: string;
    remark?: string;
    sop?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessResponseBody extends $tea.Model {
    result?: IndustryManufactureMesProcessResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureMesProcessResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanRequest extends $tea.Model {
    action?: string;
    actualEndTime?: string;
    actualStartTime?: string;
    appKey?: string;
    baseDataName?: string;
    bomUuid?: string;
    events?: string[];
    extendData?: IndustryManufactureMesProductionPlanRequestExtendData[];
    no?: string;
    overdue?: string;
    planEndTime?: string;
    planQuantity?: string;
    planStartTime?: string;
    processUuids?: string;
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    qualifiedQuantity?: string;
    sellOrderNo?: string;
    status?: string;
    teamList?: string;
    title?: string;
    type?: string;
    unit?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanResponseBody extends $tea.Model {
    result?: IndustryManufactureMesProductionPlanResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureMesProductionPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    events?: string[];
    extendData?: IndustryManufactureMesSubCooperationTeamRequestExtendData[];
    groupPlugins?: IndustryManufactureMesSubCooperationTeamRequestGroupPlugins[];
    groupType?: string;
    leaders?: IndustryManufactureMesSubCooperationTeamRequestLeaders[];
    members?: IndustryManufactureMesSubCooperationTeamRequestMembers[];
    name?: string;
    outCorpId?: string;
    processIds?: string[];
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamResponseBody extends $tea.Model {
    result?: IndustryManufactureMesSubCooperationTeamResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureMesSubCooperationTeamResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    events?: string[];
    extendData?: IndustryManufactureMesTeamMgmtRequestExtendData[];
    groupConfig?: {
        [key: string]: any;
    };
    groupPlugins?: IndustryManufactureMesTeamMgmtRequestGroupPlugins[];
    groupType?: string;
    id?: string;
    leaders?: IndustryManufactureMesTeamMgmtRequestLeaders[];
    members?: IndustryManufactureMesTeamMgmtRequestMembers[];
    name?: string;
    processIds?: string[];
    tagKey?: string;
    tagValues?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: IndustryManufactureMesTeamMgmtResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryManufactureMesTeamMgmtResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    cursor?: number;
    endTime?: number;
    instanceId?: string;
    isvOrgId?: number;
    materialNo?: string;
    microappAgentId?: number;
    orgId?: number;
    pageNumber?: number;
    pageSize?: number;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryMmanufactureMaterialCostGetResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: IndustryMmanufactureMaterialCostGetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushDingMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushDingMessageRequest extends $tea.Model {
    appId?: number;
    content?: string;
    messageType?: string;
    messageUrl?: string;
    pictureUrl?: string;
    singleTitle?: string;
    singleUrl?: string;
    title?: string;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushDingMessageResponseBody extends $tea.Model {
    content?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushDingMessageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PushDingMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBody extends $tea.Model {
    content?: QueryAllDepartmentResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAllDepartmentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsRequest extends $tea.Model {
    monthMark?: string;
    pageNum?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsResponseBody extends $tea.Model {
    content?: QueryAllDoctorsResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAllDoctorsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupResponseBody extends $tea.Model {
    content?: QueryAllGroupResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAllGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptResponseBody extends $tea.Model {
    content?: QueryAllGroupsInDeptResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAllGroupsInDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptRequest extends $tea.Model {
    monthMark?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptResponseBody extends $tea.Model {
    content?: QueryAllMemberByDeptResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAllMemberByDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupRequest extends $tea.Model {
    monthMark?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupResponseBody extends $tea.Model {
    content?: QueryAllMemberByGroupResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryAllMemberByGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogResponseBody extends $tea.Model {
    content?: QueryBizOptLogResponseBodyContent[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryBizOptLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoRequest extends $tea.Model {
    deptCode?: number;
    propCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoResponseBody extends $tea.Model {
    content?: QueryDepartmentExtendInfoResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDepartmentExtendInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponseBody extends $tea.Model {
    content?: QueryDepartmentInfoResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDepartmentInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberRequest extends $tea.Model {
    monthMark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBody extends $tea.Model {
    content?: QueryDoctorDetailsByJobNumberResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryDoctorDetailsByJobNumberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBody extends $tea.Model {
    content?: QueryGroupInfoResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoResponseBody extends $tea.Model {
    content?: QueryHospitalDistrictInfoResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryHospitalDistrictInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoResponseBody extends $tea.Model {
    content?: QueryHospitalRoleUserInfoResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryHospitalRoleUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRolesResponseBody extends $tea.Model {
    content?: QueryHospitalRolesResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRolesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryHospitalRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobCodeDictionaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobCodeDictionaryResponseBody extends $tea.Model {
    content?: QueryJobCodeDictionaryResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobCodeDictionaryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryJobCodeDictionaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatusCodeDictionaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatusCodeDictionaryResponseBody extends $tea.Model {
    content?: QueryJobStatusCodeDictionaryResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatusCodeDictionaryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryJobStatusCodeDictionaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMedicalEventsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMedicalEventsResponseBody extends $tea.Model {
    content?: QueryMedicalEventsResponseBodyContent[];
    success?: boolean;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMedicalEventsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryMedicalEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsRequest extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsResponseBody extends $tea.Model {
    content?: QueryUserCredentialsResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryUserCredentialsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtInfoResponseBody extends $tea.Model {
    content?: QueryUserExtInfoResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryUserExtInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesRequest extends $tea.Model {
    userExtendKey?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesResponseBody extends $tea.Model {
    content?: QueryUserExtendValuesResponseBodyContent[];
    success?: boolean;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryUserExtendValuesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoRequest extends $tea.Model {
    monthMark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBody extends $tea.Model {
    content?: QueryUserInfoResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserProbCodeDictionaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserProbCodeDictionaryResponseBody extends $tea.Model {
    content?: QueryUserProbCodeDictionaryResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserProbCodeDictionaryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryUserProbCodeDictionaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRolesResponseBody extends $tea.Model {
    content?: QueryUserRolesResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRolesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryUserRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserExtendValuesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserExtendValuesRequest extends $tea.Model {
    userDisplayName?: string;
    userExtendKey?: string;
    userExtendValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserExtendValuesResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserExtendValuesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SaveUserExtendValuesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplAddRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplAddRoleRequest extends $tea.Model {
    parentRoleGroupId?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplAddRoleResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplAddRoleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplAddRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptRequest extends $tea.Model {
    deptName?: string;
    partnerNumber?: string;
    superDeptId?: number;
    supplyDeptType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptResponseBody extends $tea.Model {
    result?: SupplyAddDeptResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyAddDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberRequest extends $tea.Model {
    isPartnerManager?: boolean;
    memberMobile?: string;
    memberName?: string;
    memberTitle?: string;
    memberWorkNumber?: string;
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberResponseBody extends $tea.Model {
    result?: SupplyAddMemberResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyAddMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerAdminsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerAdminsRequest extends $tea.Model {
    deptId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerAdminsResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerAdminsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyAddPartnerAdminsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerManagersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerManagersRequest extends $tea.Model {
    deptId?: number;
    interfaceId?: string;
    interfaceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerManagersResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerManagersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyAddPartnerManagersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerTypeRequest extends $tea.Model {
    name?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerTypeResponseBody extends $tea.Model {
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyAddPartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainDeleteDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainDeleteDeptRequest extends $tea.Model {
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainDeleteDeptResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainDeleteDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyChainDeleteDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoRequest extends $tea.Model {
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoResponseBody extends $tea.Model {
    result?: SupplyChainQueryDeptInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyChainQueryDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainUpdateDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainUpdateDeptInfoRequest extends $tea.Model {
    name?: string;
    partnerNumber?: string;
    partnerTypeList?: number[];
    superId?: number;
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainUpdateDeptInfoResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainUpdateDeptInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyChainUpdateDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteMemberRequest extends $tea.Model {
    deptId?: number;
    mobile?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteMemberResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyDeleteMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerAdminsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerAdminsRequest extends $tea.Model {
    deptId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerAdminsResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerAdminsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyDeletePartnerAdminsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerManagersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerManagersRequest extends $tea.Model {
    deptId?: number;
    interfaceId?: string;
    interfaceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerManagersResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerManagersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyDeletePartnerManagersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerTypeRequest extends $tea.Model {
    labelId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerTypeResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyDeletePartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteRoleRequest extends $tea.Model {
    isRoleGroup?: boolean;
    roleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteRoleResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteRoleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyDeleteRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberRequest extends $tea.Model {
    mobile?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberResponseBody extends $tea.Model {
    result?: SupplyGetMemberResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyGetMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: SupplyListDeptMembersResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyListDeptMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsResponseBody extends $tea.Model {
    result?: SupplyListPartnerAdminsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyListPartnerAdminsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersResponseBody extends $tea.Model {
    result?: SupplyListPartnerManagersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyListPartnerManagersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeRequest extends $tea.Model {
    labelId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeResponseBody extends $tea.Model {
    result?: SupplyListPartnerTypeResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyListPartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleRequest extends $tea.Model {
    parentRoleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleResponseBody extends $tea.Model {
    result?: SupplyListRoleResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyListRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptRequest extends $tea.Model {
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptResponseBody extends $tea.Model {
    result?: SupplyListSubDeptResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyListSubDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeRequest extends $tea.Model {
    labelId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeResponseBody extends $tea.Model {
    result?: SupplyQueryPartnerTypeResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyQueryPartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateMemberRequest extends $tea.Model {
    isCopyDept?: boolean;
    memberTitle?: string;
    memberWorkNumber?: string;
    mobile?: string;
    newDeptId?: number;
    oldDeptId?: number;
    roleIdList?: string[];
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateMemberResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateMemberResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyUpdateMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdatePartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdatePartnerTypeRequest extends $tea.Model {
    labelId?: number;
    name?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdatePartnerTypeResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdatePartnerTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyUpdatePartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateRoleRequest extends $tea.Model {
    isRoleGroup?: boolean;
    roleId?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateRoleResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateRoleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SupplyUpdateRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserExtendInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserExtendInfoRequest extends $tea.Model {
    comments?: string;
    jobCode?: string;
    jobStatusCode?: string[];
    userProbCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserExtendInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusResponseBodyResult extends $tea.Model {
    address?: string;
    area?: number;
    belongProjectGroupId?: number;
    campusCorpId?: string;
    campusDeptId?: number;
    campusName?: string;
    cityId?: number;
    country?: string;
    countyId?: number;
    description?: string;
    extend?: string;
    location?: string;
    orderEndTime?: number;
    orderInfo?: string;
    orderStartTime?: number;
    provId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusGroupResponseBodyResult extends $tea.Model {
    extend?: string;
    groupDeptId?: number;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterResponseBodyResult extends $tea.Model {
    bindRenterCorpId?: string;
    bindTime?: number;
    creditCode?: string;
    endTime?: number;
    extend?: string;
    name?: string;
    renterDeptId?: number;
    startTime?: number;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersResponseBodyResult extends $tea.Model {
    extend?: string;
    inviteState?: string;
    name?: string;
    state?: string;
    type?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptResponseBodyCollegeDeptInfoSimpleList extends $tea.Model {
    deptId?: number;
    deptName?: string;
    deptType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerResponseBodyManagerInfoSimpleList extends $tea.Model {
    isActive?: boolean;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoResponseBodyStudentInfoSimpleList extends $tea.Model {
    dingMemberStatus?: string;
    isActive?: boolean;
    studentId?: number;
    studentName?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentResponseBodyStudentInfoSimpleList extends $tea.Model {
    dingMemberStatus?: string;
    isActive?: boolean;
    studentId?: number;
    studentName?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileResponseBodyDeptStudentInfoList extends $tea.Model {
    deptId?: number;
    memberType?: string;
    studentNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdResponseBodyDeptStudentInfoList extends $tea.Model {
    deptId?: number;
    memberType?: string;
    studentNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateResponseBodyContent extends $tea.Model {
    code?: string;
    name?: string;
    order?: number;
    rootDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoResponseBodyContent extends $tea.Model {
    code?: string;
    id?: number;
    managerIdList?: string[];
    name?: string;
    order?: number;
    parentDeptId?: number;
    refId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListResponseBodyContent extends $tea.Model {
    code?: string;
    id?: number;
    managerIdList?: string[];
    name?: string;
    order?: number;
    parentDeptId?: number;
    refId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListResponseBodyContent extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactListResponseBodyContent extends $tea.Model {
    code?: string;
    name?: string;
    order?: number;
    rootDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushRequestMessageDataList extends $tea.Model {
    callbackKey?: string;
    content?: string;
    newCard?: boolean;
    outTraceId?: string;
    sceneCardCode?: string;
    sceneScope?: number;
    sendNow?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordResponseBodyContentDetailList extends $tea.Model {
    deptName?: string;
    readStatusStr?: string;
    readTime?: number;
    roleName?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordResponseBodyContent extends $tea.Model {
    conversationTitle?: string;
    detailList?: DigitalStoreCardRecordResponseBodyContentDetailList[];
    id?: number;
    memberNum?: number;
    readNum?: number;
    readPercent?: string;
    receiveNum?: number;
    sceneCardName?: string;
    sendStatus?: string;
    sendTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsResponseBodyContent extends $tea.Model {
    conversationTitle?: string;
    conversationType?: string;
    id?: number;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupsResponseBodyContent extends $tea.Model {
    groupId?: number;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRolesResponseBodyContent extends $tea.Model {
    level?: number;
    roleCode?: string;
    roleId?: number;
    roleName?: string;
    source?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesResponseBodyContent extends $tea.Model {
    dingDeptId?: number;
    id?: number;
    name?: string;
    parentId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoRequestUpdateUserListRoleList extends $tea.Model {
    roleName?: string;
    sourceRoleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoRequestUpdateUserListUserAuthList extends $tea.Model {
    dingDeptId?: string;
    sourceDeptId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoRequestUpdateUserList extends $tea.Model {
    roleList?: DigitalStoreUpdateAuthInfoRequestUpdateUserListRoleList[];
    userAuthList?: DigitalStoreUpdateAuthInfoRequestUpdateUserListUserAuthList[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersResponseBodyContent extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordResponseBodyContent extends $tea.Model {
    fileName?: string;
    fileType?: string;
    fileUrl?: string;
    id?: string;
    isImport?: string;
    remark?: string;
    status?: string;
    successNum?: string;
    totalNum?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsResponseBodyResult extends $tea.Model {
    corpId?: string;
    corpName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsResponseBodyResult extends $tea.Model {
    corpId?: string;
    corpName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventResponseBodyResult extends $tea.Model {
    content?: string;
    httpCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetResponseBodyList extends $tea.Model {
    corpId?: string;
    count?: number;
    ext?: string;
    gmtCreate?: number;
    gmtModified?: number;
    instanceId?: string;
    isDeleted?: string;
    materialCostRecordNo?: string;
    materialName?: string;
    materialNo?: string;
    memo?: string;
    orderNo?: string;
    price?: number;
    processCode?: string;
    productionTaskNo?: string;
    realCount?: number;
    realPrice?: number;
    type?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetResponseBodyList extends $tea.Model {
    amount?: string;
    corpId?: string;
    count?: number;
    ext?: string;
    gmtCreate?: number;
    gmtModified?: number;
    id?: number;
    instanceId?: string;
    isDeleted?: string;
    materialName?: string;
    materialNo?: string;
    perAmount?: number;
    processCode?: string;
    productionTaskNo?: string;
    title?: string;
    type?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostResponseBodyList extends $tea.Model {
    corpId?: string;
    ext?: string;
    gmtCreate?: number;
    gmtModified?: number;
    instanceId?: string;
    labourCostName?: string;
    labourCostNo?: string;
    materialName?: string;
    materialNo?: string;
    processCode?: string;
    processName?: string;
    processNo?: string;
    qualifiedPrice?: number;
    unQualifiedInfo?: string;
    unQualifiedPrice1?: number;
    unQualifiedPrice2?: number;
    unQualifiedReason1?: string;
    unQualifiedReason2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListResponseBodyList extends $tea.Model {
    category?: string;
    corpId?: string;
    ext?: string;
    instanceId?: string;
    materialName?: string;
    materialNo?: string;
    processCode?: string;
    specification?: string;
    stockMaxWarn?: number;
    stockMinWarn?: number;
    type?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequestGroupPlugins extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequestLeaders extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequestMembers extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequestGroupPlugins extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequestLeaders extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequestMembers extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetResponseBodyList extends $tea.Model {
    actPrice?: number;
    corpId?: string;
    count?: number;
    ext?: string;
    gmtCreate?: number;
    gmtModified?: number;
    instanceId?: string;
    materialCostNo?: string;
    materialName?: string;
    materialNo?: string;
    memo?: string;
    price?: number;
    processCode?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentDeptAndExtDepartment extends $tea.Model {
    deptCode?: string;
    deptName?: string;
    deptOrder?: number;
    deptStatus?: number;
    deptType?: number;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    name?: string;
    parentDeptCode?: string;
    remark?: string;
    wardIdList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentDeptAndExt extends $tea.Model {
    department?: QueryAllDepartmentResponseBodyContentDeptAndExtDepartment;
    extendInfos?: QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader extends $tea.Model {
    jobNumber?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentGroupAndExtListGroup extends $tea.Model {
    deptId?: number;
    deptStatus?: number;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    leader?: QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader;
    name?: string;
    parentDeptCode?: string;
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentGroupAndExtList extends $tea.Model {
    extendInfos?: QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos[];
    group?: QueryAllDepartmentResponseBodyContentGroupAndExtListGroup;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContent extends $tea.Model {
    deptAndExt?: QueryAllDepartmentResponseBodyContentDeptAndExt;
    groupAndExtList?: QueryAllDepartmentResponseBodyContentGroupAndExtList[];
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsResponseBodyContent extends $tea.Model {
    assessGroupId?: string;
    assessGroupName?: string;
    deptCode?: string;
    deptType?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    jobNum?: string;
    status?: number;
    uid?: string;
    userCode?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupResponseBodyContent extends $tea.Model {
    deptId?: number;
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptResponseBodyContent extends $tea.Model {
    deptId?: number;
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptResponseBodyContent extends $tea.Model {
    jobNum?: string;
    uid?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupResponseBodyContent extends $tea.Model {
    jobNum?: string;
    uid?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogResponseBodyContent extends $tea.Model {
    bizType?: number;
    dataType?: number;
    id?: number;
    optAfterData?: string;
    optBeforeData?: string;
    optBizType?: number;
    optExtend?: string;
    optJobNumber?: string;
    optObjectCode?: string;
    optObjectName?: string;
    optObjectUserJobNo?: string;
    optSuccess?: number;
    optTime?: number;
    optType?: number;
    optUserCode?: string;
    optUserName?: string;
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoResponseBodyContent extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponseBodyContentDepartment extends $tea.Model {
    deptCode?: string;
    deptName?: string;
    deptOrder?: number;
    deptStatus?: number;
    deptType?: number;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    name?: string;
    parentDeptCode?: string;
    remark?: string;
    wardIdList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponseBodyContentExtendInfos extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponseBodyContent extends $tea.Model {
    department?: QueryDepartmentInfoResponseBodyContentDepartment;
    extendInfos?: QueryDepartmentInfoResponseBodyContentExtendInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentDeptList extends $tea.Model {
    categoryName?: string;
    deptId?: number;
    deptName?: string;
    gmtCreate?: string;
    gmtModified?: string;
    relationId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentGroupList extends $tea.Model {
    deptId?: number;
    deptName?: string;
    groupId?: number;
    groupName?: string;
    isAssessGroup?: string;
    isLeader?: boolean;
    relationId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentJobStatus extends $tea.Model {
    code?: string;
    statusName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentProfessionalTitle extends $tea.Model {
    code?: string;
    professionalTitleCategory?: string;
    professionalTitleDetail?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentUserProbList extends $tea.Model {
    code?: string;
    userPropertyName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContent extends $tea.Model {
    deptList?: QueryDoctorDetailsByJobNumberResponseBodyContentDeptList[];
    groupList?: QueryDoctorDetailsByJobNumberResponseBodyContentGroupList[];
    jobNumber?: string;
    jobStatus?: QueryDoctorDetailsByJobNumberResponseBodyContentJobStatus[];
    professionalTitle?: QueryDoctorDetailsByJobNumberResponseBodyContentProfessionalTitle;
    userId?: string;
    userName?: string;
    userProbList?: QueryDoctorDetailsByJobNumberResponseBodyContentUserProbList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBodyContentExtendInfos extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBodyContentGroupLeader extends $tea.Model {
    jobNumber?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBodyContentGroup extends $tea.Model {
    deptId?: number;
    deptStatus?: number;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    leader?: QueryGroupInfoResponseBodyContentGroupLeader;
    name?: string;
    parentDeptCode?: string;
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBodyContent extends $tea.Model {
    extendInfos?: QueryGroupInfoResponseBodyContentExtendInfos[];
    group?: QueryGroupInfoResponseBodyContentGroup;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoResponseBodyContent extends $tea.Model {
    address?: string;
    deleted?: number;
    districtName?: string;
    districtType?: number;
    gmtCreate?: string;
    gmtModified?: string;
    id?: number;
    parentDistrictId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoResponseBodyContent extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    jobNumber?: string;
    roleCode?: string;
    roleName?: string;
    status?: number;
    userCode?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRolesResponseBodyContent extends $tea.Model {
    gmtCreate?: string;
    id?: number;
    isDeleted?: number;
    readOnly?: number;
    remark?: string;
    roleCode?: string;
    roleName?: string;
    sort?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobCodeDictionaryResponseBodyContent extends $tea.Model {
    category?: string;
    code?: string;
    displayName?: string;
    doctorType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatusCodeDictionaryResponseBodyContent extends $tea.Model {
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMedicalEventsResponseBodyContent extends $tea.Model {
    code?: string;
    content?: string;
    eventId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsResponseBodyContentCredentialList extends $tea.Model {
    credentialName?: string;
    credentialType?: number;
    termOfValidity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsResponseBodyContent extends $tea.Model {
    credentialList?: QueryUserCredentialsResponseBodyContentCredentialList[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtInfoResponseBodyContent extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    status?: number;
    userCode?: string;
    userExtendDisplayName?: string;
    userExtendKey?: string;
    userExtendValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesResponseBodyContent extends $tea.Model {
    userCode?: string;
    userExtendDisplayName?: string;
    userExtendKey?: string;
    userExtendValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentDept extends $tea.Model {
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    name?: string;
    relId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentGroup extends $tea.Model {
    deptId?: number;
    deptName?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    name?: string;
    relId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentJob extends $tea.Model {
    bizType?: string;
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentJobStatus extends $tea.Model {
    bizType?: string;
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentJobStatusList extends $tea.Model {
    bizType?: string;
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentUserProb extends $tea.Model {
    bizType?: string;
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContent extends $tea.Model {
    comments?: string;
    dept?: QueryUserInfoResponseBodyContentDept[];
    group?: QueryUserInfoResponseBodyContentGroup[];
    job?: QueryUserInfoResponseBodyContentJob;
    jobNum?: string;
    jobStatus?: QueryUserInfoResponseBodyContentJobStatus;
    jobStatusList?: QueryUserInfoResponseBodyContentJobStatusList[];
    uid?: string;
    userName?: string;
    userProb?: QueryUserInfoResponseBodyContentUserProb;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserProbCodeDictionaryResponseBodyContent extends $tea.Model {
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRolesResponseBodyContent extends $tea.Model {
    roleCode?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptResponseBodyResult extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberResponseBodyResult extends $tea.Model {
    dingMemberStatus?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoResponseBodyResultPartnerTypeInfoList extends $tea.Model {
    id?: number;
    name?: string;
    superId?: number;
    superName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoResponseBodyResult extends $tea.Model {
    deptId?: number;
    deptType?: string;
    hasSubDept?: boolean;
    name?: string;
    partnerNumber?: string;
    partnerTypeInfoList?: SupplyChainQueryDeptInfoResponseBodyResultPartnerTypeInfoList[];
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberResponseBodyResultRoleInfoList extends $tea.Model {
    roleId?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberResponseBodyResult extends $tea.Model {
    deptIdList?: number[];
    dingMemberStatus?: string;
    isActive?: boolean;
    memberName?: string;
    memberTitle?: string;
    memberWorkNumber?: string;
    roleInfoList?: SupplyGetMemberResponseBodyResultRoleInfoList[];
    supplyNodeList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersResponseBodyList extends $tea.Model {
    dingMemberStatus?: string;
    isActive?: boolean;
    memberName?: string;
    memberTitle?: string;
    memberWorkNumber?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsResponseBodyResult extends $tea.Model {
    name?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersResponseBodyResult extends $tea.Model {
    deptId?: string;
    deptName?: string;
    interfaceType?: string;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeResponseBodyResult extends $tea.Model {
    labelId?: number;
    name?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleResponseBodyResult extends $tea.Model {
    isRoleGroup?: boolean;
    roleId?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptResponseBodyResultPartnerTypeInfoList extends $tea.Model {
    id?: number;
    name?: string;
    superId?: number;
    superName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptResponseBodyResult extends $tea.Model {
    deptId?: number;
    deptType?: string;
    hasSubDept?: boolean;
    name?: string;
    partnerNumber?: string;
    partnerTypeInfoList?: SupplyListSubDeptResponseBodyResultPartnerTypeInfoList[];
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeResponseBodyResult extends $tea.Model {
    labelId?: number;
    name?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    campusAddRenterMemberWithOptions(request: CampusAddRenterMemberRequest, headers: CampusAddRenterMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CampusAddRenterMemberResponse>;
    campusAddRenterMember(request: CampusAddRenterMemberRequest): Promise<CampusAddRenterMemberResponse>;
    campusCreateCampusWithOptions(request: CampusCreateCampusRequest, headers: CampusCreateCampusHeaders, runtime: $Util.RuntimeOptions): Promise<CampusCreateCampusResponse>;
    campusCreateCampus(request: CampusCreateCampusRequest): Promise<CampusCreateCampusResponse>;
    campusCreateCampusGroupWithOptions(request: CampusCreateCampusGroupRequest, headers: CampusCreateCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusCreateCampusGroupResponse>;
    campusCreateCampusGroup(request: CampusCreateCampusGroupRequest): Promise<CampusCreateCampusGroupResponse>;
    campusCreateRenterWithOptions(request: CampusCreateRenterRequest, headers: CampusCreateRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusCreateRenterResponse>;
    campusCreateRenter(request: CampusCreateRenterRequest): Promise<CampusCreateRenterResponse>;
    campusDelRenterMemberWithOptions(request: CampusDelRenterMemberRequest, headers: CampusDelRenterMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CampusDelRenterMemberResponse>;
    campusDelRenterMember(request: CampusDelRenterMemberRequest): Promise<CampusDelRenterMemberResponse>;
    campusDeleteCampusGroupWithOptions(request: CampusDeleteCampusGroupRequest, headers: CampusDeleteCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusDeleteCampusGroupResponse>;
    campusDeleteCampusGroup(request: CampusDeleteCampusGroupRequest): Promise<CampusDeleteCampusGroupResponse>;
    campusDeleteRenterWithOptions(request: CampusDeleteRenterRequest, headers: CampusDeleteRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusDeleteRenterResponse>;
    campusDeleteRenter(request: CampusDeleteRenterRequest): Promise<CampusDeleteRenterResponse>;
    campusGetCampusWithOptions(request: CampusGetCampusRequest, headers: CampusGetCampusHeaders, runtime: $Util.RuntimeOptions): Promise<CampusGetCampusResponse>;
    campusGetCampus(request: CampusGetCampusRequest): Promise<CampusGetCampusResponse>;
    campusGetCampusGroupWithOptions(request: CampusGetCampusGroupRequest, headers: CampusGetCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusGetCampusGroupResponse>;
    campusGetCampusGroup(request: CampusGetCampusGroupRequest): Promise<CampusGetCampusGroupResponse>;
    campusGetRenterWithOptions(request: CampusGetRenterRequest, headers: CampusGetRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusGetRenterResponse>;
    campusGetRenter(request: CampusGetRenterRequest): Promise<CampusGetRenterResponse>;
    campusGetRenterMemberWithOptions(request: CampusGetRenterMemberRequest, headers: CampusGetRenterMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CampusGetRenterMemberResponse>;
    campusGetRenterMember(request: CampusGetRenterMemberRequest): Promise<CampusGetRenterMemberResponse>;
    campusListCampusWithOptions(request: CampusListCampusRequest, headers: CampusListCampusHeaders, runtime: $Util.RuntimeOptions): Promise<CampusListCampusResponse>;
    campusListCampus(request: CampusListCampusRequest): Promise<CampusListCampusResponse>;
    campusListCampusGroupWithOptions(headers: CampusListCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusListCampusGroupResponse>;
    campusListCampusGroup(): Promise<CampusListCampusGroupResponse>;
    campusListRenterWithOptions(headers: CampusListRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusListRenterResponse>;
    campusListRenter(): Promise<CampusListRenterResponse>;
    campusListRenterMembersWithOptions(request: CampusListRenterMembersRequest, headers: CampusListRenterMembersHeaders, runtime: $Util.RuntimeOptions): Promise<CampusListRenterMembersResponse>;
    campusListRenterMembers(request: CampusListRenterMembersRequest): Promise<CampusListRenterMembersResponse>;
    campusUpdateCampusWithOptions(request: CampusUpdateCampusRequest, headers: CampusUpdateCampusHeaders, runtime: $Util.RuntimeOptions): Promise<CampusUpdateCampusResponse>;
    campusUpdateCampus(request: CampusUpdateCampusRequest): Promise<CampusUpdateCampusResponse>;
    campusUpdateCampusGroupWithOptions(request: CampusUpdateCampusGroupRequest, headers: CampusUpdateCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusUpdateCampusGroupResponse>;
    campusUpdateCampusGroup(request: CampusUpdateCampusGroupRequest): Promise<CampusUpdateCampusGroupResponse>;
    campusUpdateRenterWithOptions(request: CampusUpdateRenterRequest, headers: CampusUpdateRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusUpdateRenterResponse>;
    campusUpdateRenter(request: CampusUpdateRenterRequest): Promise<CampusUpdateRenterResponse>;
    campusUpdateRenterMemberWithOptions(request: CampusUpdateRenterMemberRequest, headers: CampusUpdateRenterMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CampusUpdateRenterMemberResponse>;
    campusUpdateRenterMember(request: CampusUpdateRenterMemberRequest): Promise<CampusUpdateRenterMemberResponse>;
    collegeActiveCollegeDeptGroupWithOptions(request: CollegeActiveCollegeDeptGroupRequest, headers: CollegeActiveCollegeDeptGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeActiveCollegeDeptGroupResponse>;
    collegeActiveCollegeDeptGroup(request: CollegeActiveCollegeDeptGroupRequest): Promise<CollegeActiveCollegeDeptGroupResponse>;
    collegeAddCollegeDeptWithOptions(request: CollegeAddCollegeDeptRequest, headers: CollegeAddCollegeDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeAddCollegeDeptResponse>;
    collegeAddCollegeDept(request: CollegeAddCollegeDeptRequest): Promise<CollegeAddCollegeDeptResponse>;
    collegeAddManagerWithOptions(request: CollegeAddManagerRequest, headers: CollegeAddManagerHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeAddManagerResponse>;
    collegeAddManager(request: CollegeAddManagerRequest): Promise<CollegeAddManagerResponse>;
    collegeAddStudentWithOptions(request: CollegeAddStudentRequest, headers: CollegeAddStudentHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeAddStudentResponse>;
    collegeAddStudent(request: CollegeAddStudentRequest): Promise<CollegeAddStudentResponse>;
    collegeChangeStudentDeptWithOptions(request: CollegeChangeStudentDeptRequest, headers: CollegeChangeStudentDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeChangeStudentDeptResponse>;
    collegeChangeStudentDept(request: CollegeChangeStudentDeptRequest): Promise<CollegeChangeStudentDeptResponse>;
    collegeDeleteCollegeDeptWithOptions(request: CollegeDeleteCollegeDeptRequest, headers: CollegeDeleteCollegeDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeDeleteCollegeDeptResponse>;
    collegeDeleteCollegeDept(request: CollegeDeleteCollegeDeptRequest): Promise<CollegeDeleteCollegeDeptResponse>;
    collegeListCollegeSubDeptWithOptions(request: CollegeListCollegeSubDeptRequest, headers: CollegeListCollegeSubDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeListCollegeSubDeptResponse>;
    collegeListCollegeSubDept(request: CollegeListCollegeSubDeptRequest): Promise<CollegeListCollegeSubDeptResponse>;
    collegeListDeptManagerWithOptions(request: CollegeListDeptManagerRequest, headers: CollegeListDeptManagerHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeListDeptManagerResponse>;
    collegeListDeptManager(request: CollegeListDeptManagerRequest): Promise<CollegeListDeptManagerResponse>;
    collegeListStudentInfoWithOptions(request: CollegeListStudentInfoRequest, headers: CollegeListStudentInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeListStudentInfoResponse>;
    collegeListStudentInfo(request: CollegeListStudentInfoRequest): Promise<CollegeListStudentInfoResponse>;
    collegeListUncheckedStudentWithOptions(request: CollegeListUncheckedStudentRequest, headers: CollegeListUncheckedStudentHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeListUncheckedStudentResponse>;
    collegeListUncheckedStudent(request: CollegeListUncheckedStudentRequest): Promise<CollegeListUncheckedStudentResponse>;
    collegeQueryCollegeDeptGroupInfoWithOptions(request: CollegeQueryCollegeDeptGroupInfoRequest, headers: CollegeQueryCollegeDeptGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryCollegeDeptGroupInfoResponse>;
    collegeQueryCollegeDeptGroupInfo(request: CollegeQueryCollegeDeptGroupInfoRequest): Promise<CollegeQueryCollegeDeptGroupInfoResponse>;
    collegeQueryCollegeDeptInfoWithOptions(request: CollegeQueryCollegeDeptInfoRequest, headers: CollegeQueryCollegeDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryCollegeDeptInfoResponse>;
    collegeQueryCollegeDeptInfo(request: CollegeQueryCollegeDeptInfoRequest): Promise<CollegeQueryCollegeDeptInfoResponse>;
    collegeQueryStudentInfoByDeptWithOptions(request: CollegeQueryStudentInfoByDeptRequest, headers: CollegeQueryStudentInfoByDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryStudentInfoByDeptResponse>;
    collegeQueryStudentInfoByDept(request: CollegeQueryStudentInfoByDeptRequest): Promise<CollegeQueryStudentInfoByDeptResponse>;
    collegeQueryStudentInfoByMobileWithOptions(request: CollegeQueryStudentInfoByMobileRequest, headers: CollegeQueryStudentInfoByMobileHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryStudentInfoByMobileResponse>;
    collegeQueryStudentInfoByMobile(request: CollegeQueryStudentInfoByMobileRequest): Promise<CollegeQueryStudentInfoByMobileResponse>;
    collegeQueryStudentInfoByStudentIdWithOptions(request: CollegeQueryStudentInfoByStudentIdRequest, headers: CollegeQueryStudentInfoByStudentIdHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryStudentInfoByStudentIdResponse>;
    collegeQueryStudentInfoByStudentId(request: CollegeQueryStudentInfoByStudentIdRequest): Promise<CollegeQueryStudentInfoByStudentIdResponse>;
    collegeRemoveManagerWithOptions(request: CollegeRemoveManagerRequest, headers: CollegeRemoveManagerHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeRemoveManagerResponse>;
    collegeRemoveManager(request: CollegeRemoveManagerRequest): Promise<CollegeRemoveManagerResponse>;
    collegeRemoveStudentWithOptions(request: CollegeRemoveStudentRequest, headers: CollegeRemoveStudentHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeRemoveStudentResponse>;
    collegeRemoveStudent(request: CollegeRemoveStudentRequest): Promise<CollegeRemoveStudentResponse>;
    collegeUpdateCollegeDeptWithOptions(request: CollegeUpdateCollegeDeptRequest, headers: CollegeUpdateCollegeDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeUpdateCollegeDeptResponse>;
    collegeUpdateCollegeDept(request: CollegeUpdateCollegeDeptRequest): Promise<CollegeUpdateCollegeDeptResponse>;
    collegeUpdateStudentDeptInfoWithOptions(request: CollegeUpdateStudentDeptInfoRequest, headers: CollegeUpdateStudentDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeUpdateStudentDeptInfoResponse>;
    collegeUpdateStudentDeptInfo(request: CollegeUpdateStudentDeptInfoRequest): Promise<CollegeUpdateStudentDeptInfoResponse>;
    collegeUpdateStudentInfoWithOptions(request: CollegeUpdateStudentInfoRequest, headers: CollegeUpdateStudentInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeUpdateStudentInfoResponse>;
    collegeUpdateStudentInfo(request: CollegeUpdateStudentInfoRequest): Promise<CollegeUpdateStudentInfoResponse>;
    collegeUpdateStudentMoblieWithOptions(request: CollegeUpdateStudentMoblieRequest, headers: CollegeUpdateStudentMoblieHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeUpdateStudentMoblieResponse>;
    collegeUpdateStudentMoblie(request: CollegeUpdateStudentMoblieRequest): Promise<CollegeUpdateStudentMoblieResponse>;
    customizeContactCreateWithOptions(request: CustomizeContactCreateRequest, headers: CustomizeContactCreateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactCreateResponse>;
    customizeContactCreate(request: CustomizeContactCreateRequest): Promise<CustomizeContactCreateResponse>;
    customizeContactDeleteWithOptions(request: CustomizeContactDeleteRequest, headers: CustomizeContactDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeleteResponse>;
    customizeContactDelete(request: CustomizeContactDeleteRequest): Promise<CustomizeContactDeleteResponse>;
    customizeContactDeptCreateWithOptions(request: CustomizeContactDeptCreateRequest, headers: CustomizeContactDeptCreateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptCreateResponse>;
    customizeContactDeptCreate(request: CustomizeContactDeptCreateRequest): Promise<CustomizeContactDeptCreateResponse>;
    customizeContactDeptDeleteWithOptions(request: CustomizeContactDeptDeleteRequest, headers: CustomizeContactDeptDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptDeleteResponse>;
    customizeContactDeptDelete(request: CustomizeContactDeptDeleteRequest): Promise<CustomizeContactDeptDeleteResponse>;
    customizeContactDeptGroupCreateWithOptions(request: CustomizeContactDeptGroupCreateRequest, headers: CustomizeContactDeptGroupCreateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptGroupCreateResponse>;
    customizeContactDeptGroupCreate(request: CustomizeContactDeptGroupCreateRequest): Promise<CustomizeContactDeptGroupCreateResponse>;
    customizeContactDeptInfoWithOptions(request: CustomizeContactDeptInfoRequest, headers: CustomizeContactDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptInfoResponse>;
    customizeContactDeptInfo(request: CustomizeContactDeptInfoRequest): Promise<CustomizeContactDeptInfoResponse>;
    customizeContactDeptListWithOptions(request: CustomizeContactDeptListRequest, headers: CustomizeContactDeptListHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptListResponse>;
    customizeContactDeptList(request: CustomizeContactDeptListRequest): Promise<CustomizeContactDeptListResponse>;
    customizeContactDeptUpdateWithOptions(request: CustomizeContactDeptUpdateRequest, headers: CustomizeContactDeptUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptUpdateResponse>;
    customizeContactDeptUpdate(request: CustomizeContactDeptUpdateRequest): Promise<CustomizeContactDeptUpdateResponse>;
    customizeContactEmpAddWithOptions(request: CustomizeContactEmpAddRequest, headers: CustomizeContactEmpAddHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactEmpAddResponse>;
    customizeContactEmpAdd(request: CustomizeContactEmpAddRequest): Promise<CustomizeContactEmpAddResponse>;
    customizeContactEmpDeleteWithOptions(request: CustomizeContactEmpDeleteRequest, headers: CustomizeContactEmpDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactEmpDeleteResponse>;
    customizeContactEmpDelete(request: CustomizeContactEmpDeleteRequest): Promise<CustomizeContactEmpDeleteResponse>;
    customizeContactEmpListWithOptions(request: CustomizeContactEmpListRequest, headers: CustomizeContactEmpListHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactEmpListResponse>;
    customizeContactEmpList(request: CustomizeContactEmpListRequest): Promise<CustomizeContactEmpListResponse>;
    customizeContactListWithOptions(headers: CustomizeContactListHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactListResponse>;
    customizeContactList(): Promise<CustomizeContactListResponse>;
    customizeContactUpdateWithOptions(request: CustomizeContactUpdateRequest, headers: CustomizeContactUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactUpdateResponse>;
    customizeContactUpdate(request: CustomizeContactUpdateRequest): Promise<CustomizeContactUpdateResponse>;
    dIgitalStoreMessagePushWithOptions(tmpReq: DIgitalStoreMessagePushRequest, headers: DIgitalStoreMessagePushHeaders, runtime: $Util.RuntimeOptions): Promise<DIgitalStoreMessagePushResponse>;
    dIgitalStoreMessagePush(request: DIgitalStoreMessagePushRequest): Promise<DIgitalStoreMessagePushResponse>;
    digitalStoreCardRecordWithOptions(request: DigitalStoreCardRecordRequest, headers: DigitalStoreCardRecordHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreCardRecordResponse>;
    digitalStoreCardRecord(request: DigitalStoreCardRecordRequest): Promise<DigitalStoreCardRecordResponse>;
    digitalStoreContactInfoWithOptions(headers: DigitalStoreContactInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreContactInfoResponse>;
    digitalStoreContactInfo(): Promise<DigitalStoreContactInfoResponse>;
    digitalStoreConversationsWithOptions(request: DigitalStoreConversationsRequest, headers: DigitalStoreConversationsHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreConversationsResponse>;
    digitalStoreConversations(request: DigitalStoreConversationsRequest): Promise<DigitalStoreConversationsResponse>;
    digitalStoreExportCardRecordWithOptions(request: DigitalStoreExportCardRecordRequest, headers: DigitalStoreExportCardRecordHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreExportCardRecordResponse>;
    digitalStoreExportCardRecord(request: DigitalStoreExportCardRecordRequest): Promise<DigitalStoreExportCardRecordResponse>;
    digitalStoreExportCardRecordDetailWithOptions(request: DigitalStoreExportCardRecordDetailRequest, headers: DigitalStoreExportCardRecordDetailHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreExportCardRecordDetailResponse>;
    digitalStoreExportCardRecordDetail(request: DigitalStoreExportCardRecordDetailRequest): Promise<DigitalStoreExportCardRecordDetailResponse>;
    digitalStoreGroupInfoWithOptions(request: DigitalStoreGroupInfoRequest, headers: DigitalStoreGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreGroupInfoResponse>;
    digitalStoreGroupInfo(request: DigitalStoreGroupInfoRequest): Promise<DigitalStoreGroupInfoResponse>;
    digitalStoreGroupsWithOptions(headers: DigitalStoreGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreGroupsResponse>;
    digitalStoreGroups(): Promise<DigitalStoreGroupsResponse>;
    digitalStoreNodeInfoWithOptions(request: DigitalStoreNodeInfoRequest, headers: DigitalStoreNodeInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreNodeInfoResponse>;
    digitalStoreNodeInfo(request: DigitalStoreNodeInfoRequest): Promise<DigitalStoreNodeInfoResponse>;
    digitalStoreRightsInfoWithOptions(headers: DigitalStoreRightsInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreRightsInfoResponse>;
    digitalStoreRightsInfo(): Promise<DigitalStoreRightsInfoResponse>;
    digitalStoreRolesWithOptions(headers: DigitalStoreRolesHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreRolesResponse>;
    digitalStoreRoles(): Promise<DigitalStoreRolesResponse>;
    digitalStoreSceneScopeWithOptions(request: DigitalStoreSceneScopeRequest, headers: DigitalStoreSceneScopeHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreSceneScopeResponse>;
    digitalStoreSceneScope(request: DigitalStoreSceneScopeRequest): Promise<DigitalStoreSceneScopeResponse>;
    digitalStoreStoreInfoWithOptions(request: DigitalStoreStoreInfoRequest, headers: DigitalStoreStoreInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreStoreInfoResponse>;
    digitalStoreStoreInfo(request: DigitalStoreStoreInfoRequest): Promise<DigitalStoreStoreInfoResponse>;
    digitalStoreSubNodesWithOptions(request: DigitalStoreSubNodesRequest, headers: DigitalStoreSubNodesHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreSubNodesResponse>;
    digitalStoreSubNodes(request: DigitalStoreSubNodesRequest): Promise<DigitalStoreSubNodesResponse>;
    digitalStoreUpdateAuthInfoWithOptions(request: DigitalStoreUpdateAuthInfoRequest, headers: DigitalStoreUpdateAuthInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreUpdateAuthInfoResponse>;
    digitalStoreUpdateAuthInfo(request: DigitalStoreUpdateAuthInfoRequest): Promise<DigitalStoreUpdateAuthInfoResponse>;
    digitalStoreUserInfoWithOptions(request: DigitalStoreUserInfoRequest, headers: DigitalStoreUserInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreUserInfoResponse>;
    digitalStoreUserInfo(request: DigitalStoreUserInfoRequest): Promise<DigitalStoreUserInfoResponse>;
    digitalStoreUsersWithOptions(request: DigitalStoreUsersRequest, headers: DigitalStoreUsersHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreUsersResponse>;
    digitalStoreUsers(request: DigitalStoreUsersRequest): Promise<DigitalStoreUsersResponse>;
    digitalStorelistExportTaskRecordWithOptions(request: DigitalStorelistExportTaskRecordRequest, headers: DigitalStorelistExportTaskRecordHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStorelistExportTaskRecordResponse>;
    digitalStorelistExportTaskRecord(request: DigitalStorelistExportTaskRecordRequest): Promise<DigitalStorelistExportTaskRecordResponse>;
    externalQueryExternalAppOrgsWithOptions(request: ExternalQueryExternalAppOrgsRequest, headers: ExternalQueryExternalAppOrgsHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalQueryExternalAppOrgsResponse>;
    externalQueryExternalAppOrgs(request: ExternalQueryExternalAppOrgsRequest): Promise<ExternalQueryExternalAppOrgsResponse>;
    externalQueryExternalBelongMainOrgWithOptions(request: ExternalQueryExternalBelongMainOrgRequest, headers: ExternalQueryExternalBelongMainOrgHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalQueryExternalBelongMainOrgResponse>;
    externalQueryExternalBelongMainOrg(request: ExternalQueryExternalBelongMainOrgRequest): Promise<ExternalQueryExternalBelongMainOrgResponse>;
    externalQueryExternalOrgsWithOptions(request: ExternalQueryExternalOrgsRequest, headers: ExternalQueryExternalOrgsHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalQueryExternalOrgsResponse>;
    externalQueryExternalOrgs(request: ExternalQueryExternalOrgsRequest): Promise<ExternalQueryExternalOrgsResponse>;
    hospitalDataCheckWithOptions(request: HospitalDataCheckRequest, headers: HospitalDataCheckHeaders, runtime: $Util.RuntimeOptions): Promise<HospitalDataCheckResponse>;
    hospitalDataCheck(request: HospitalDataCheckRequest): Promise<HospitalDataCheckResponse>;
    industryManufactureCommonEventWithOptions(request: IndustryManufactureCommonEventRequest, headers: IndustryManufactureCommonEventHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureCommonEventResponse>;
    industryManufactureCommonEvent(request: IndustryManufactureCommonEventRequest): Promise<IndustryManufactureCommonEventResponse>;
    industryManufactureCostRecordListGetWithOptions(request: IndustryManufactureCostRecordListGetRequest, headers: IndustryManufactureCostRecordListGetHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureCostRecordListGetResponse>;
    industryManufactureCostRecordListGet(request: IndustryManufactureCostRecordListGetRequest): Promise<IndustryManufactureCostRecordListGetResponse>;
    industryManufactureFeeListGetWithOptions(request: IndustryManufactureFeeListGetRequest, headers: IndustryManufactureFeeListGetHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureFeeListGetResponse>;
    industryManufactureFeeListGet(request: IndustryManufactureFeeListGetRequest): Promise<IndustryManufactureFeeListGetResponse>;
    industryManufactureLabourCostWithOptions(request: IndustryManufactureLabourCostRequest, headers: IndustryManufactureLabourCostHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureLabourCostResponse>;
    industryManufactureLabourCost(request: IndustryManufactureLabourCostRequest): Promise<IndustryManufactureLabourCostResponse>;
    industryManufactureMaterialListWithOptions(request: IndustryManufactureMaterialListRequest, headers: IndustryManufactureMaterialListHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMaterialListResponse>;
    industryManufactureMaterialList(request: IndustryManufactureMaterialListRequest): Promise<IndustryManufactureMaterialListResponse>;
    industryManufactureMesDispatchTaskWithOptions(request: IndustryManufactureMesDispatchTaskRequest, headers: IndustryManufactureMesDispatchTaskHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesDispatchTaskResponse>;
    industryManufactureMesDispatchTask(request: IndustryManufactureMesDispatchTaskRequest): Promise<IndustryManufactureMesDispatchTaskResponse>;
    industryManufactureMesMaterialWithOptions(request: IndustryManufactureMesMaterialRequest, headers: IndustryManufactureMesMaterialHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesMaterialResponse>;
    industryManufactureMesMaterial(request: IndustryManufactureMesMaterialRequest): Promise<IndustryManufactureMesMaterialResponse>;
    industryManufactureMesOutPlanWithOptions(request: IndustryManufactureMesOutPlanRequest, headers: IndustryManufactureMesOutPlanHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesOutPlanResponse>;
    industryManufactureMesOutPlan(request: IndustryManufactureMesOutPlanRequest): Promise<IndustryManufactureMesOutPlanResponse>;
    industryManufactureMesOutputWithOptions(request: IndustryManufactureMesOutputRequest, headers: IndustryManufactureMesOutputHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesOutputResponse>;
    industryManufactureMesOutput(request: IndustryManufactureMesOutputRequest): Promise<IndustryManufactureMesOutputResponse>;
    industryManufactureMesProcessWithOptions(request: IndustryManufactureMesProcessRequest, headers: IndustryManufactureMesProcessHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesProcessResponse>;
    industryManufactureMesProcess(request: IndustryManufactureMesProcessRequest): Promise<IndustryManufactureMesProcessResponse>;
    industryManufactureMesProductionPlanWithOptions(request: IndustryManufactureMesProductionPlanRequest, headers: IndustryManufactureMesProductionPlanHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesProductionPlanResponse>;
    industryManufactureMesProductionPlan(request: IndustryManufactureMesProductionPlanRequest): Promise<IndustryManufactureMesProductionPlanResponse>;
    industryManufactureMesSubCooperationTeamWithOptions(request: IndustryManufactureMesSubCooperationTeamRequest, headers: IndustryManufactureMesSubCooperationTeamHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesSubCooperationTeamResponse>;
    industryManufactureMesSubCooperationTeam(request: IndustryManufactureMesSubCooperationTeamRequest): Promise<IndustryManufactureMesSubCooperationTeamResponse>;
    industryManufactureMesTeamMgmtWithOptions(request: IndustryManufactureMesTeamMgmtRequest, headers: IndustryManufactureMesTeamMgmtHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesTeamMgmtResponse>;
    industryManufactureMesTeamMgmt(request: IndustryManufactureMesTeamMgmtRequest): Promise<IndustryManufactureMesTeamMgmtResponse>;
    industryMmanufactureMaterialCostGetWithOptions(request: IndustryMmanufactureMaterialCostGetRequest, headers: IndustryMmanufactureMaterialCostGetHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryMmanufactureMaterialCostGetResponse>;
    industryMmanufactureMaterialCostGet(request: IndustryMmanufactureMaterialCostGetRequest): Promise<IndustryMmanufactureMaterialCostGetResponse>;
    pushDingMessageWithOptions(request: PushDingMessageRequest, headers: PushDingMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushDingMessageResponse>;
    pushDingMessage(request: PushDingMessageRequest): Promise<PushDingMessageResponse>;
    queryAllDepartmentWithOptions(request: QueryAllDepartmentRequest, headers: QueryAllDepartmentHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllDepartmentResponse>;
    queryAllDepartment(request: QueryAllDepartmentRequest): Promise<QueryAllDepartmentResponse>;
    queryAllDoctorsWithOptions(request: QueryAllDoctorsRequest, headers: QueryAllDoctorsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllDoctorsResponse>;
    queryAllDoctors(request: QueryAllDoctorsRequest): Promise<QueryAllDoctorsResponse>;
    queryAllGroupWithOptions(request: QueryAllGroupRequest, headers: QueryAllGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllGroupResponse>;
    queryAllGroup(request: QueryAllGroupRequest): Promise<QueryAllGroupResponse>;
    queryAllGroupsInDeptWithOptions(deptId: string, request: QueryAllGroupsInDeptRequest, headers: QueryAllGroupsInDeptHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllGroupsInDeptResponse>;
    queryAllGroupsInDept(deptId: string, request: QueryAllGroupsInDeptRequest): Promise<QueryAllGroupsInDeptResponse>;
    queryAllMemberByDeptWithOptions(deptId: string, request: QueryAllMemberByDeptRequest, headers: QueryAllMemberByDeptHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllMemberByDeptResponse>;
    queryAllMemberByDept(deptId: string, request: QueryAllMemberByDeptRequest): Promise<QueryAllMemberByDeptResponse>;
    queryAllMemberByGroupWithOptions(groupId: string, request: QueryAllMemberByGroupRequest, headers: QueryAllMemberByGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllMemberByGroupResponse>;
    queryAllMemberByGroup(groupId: string, request: QueryAllMemberByGroupRequest): Promise<QueryAllMemberByGroupResponse>;
    queryBizOptLogWithOptions(request: QueryBizOptLogRequest, headers: QueryBizOptLogHeaders, runtime: $Util.RuntimeOptions): Promise<QueryBizOptLogResponse>;
    queryBizOptLog(request: QueryBizOptLogRequest): Promise<QueryBizOptLogResponse>;
    queryDepartmentExtendInfoWithOptions(request: QueryDepartmentExtendInfoRequest, headers: QueryDepartmentExtendInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDepartmentExtendInfoResponse>;
    queryDepartmentExtendInfo(request: QueryDepartmentExtendInfoRequest): Promise<QueryDepartmentExtendInfoResponse>;
    queryDepartmentInfoWithOptions(deptId: string, headers: QueryDepartmentInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDepartmentInfoResponse>;
    queryDepartmentInfo(deptId: string): Promise<QueryDepartmentInfoResponse>;
    queryDoctorDetailsByJobNumberWithOptions(jobNumber: string, request: QueryDoctorDetailsByJobNumberRequest, headers: QueryDoctorDetailsByJobNumberHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDoctorDetailsByJobNumberResponse>;
    queryDoctorDetailsByJobNumber(jobNumber: string, request: QueryDoctorDetailsByJobNumberRequest): Promise<QueryDoctorDetailsByJobNumberResponse>;
    queryGroupInfoWithOptions(groupId: string, headers: QueryGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupInfoResponse>;
    queryGroupInfo(groupId: string): Promise<QueryGroupInfoResponse>;
    queryHospitalDistrictInfoWithOptions(request: QueryHospitalDistrictInfoRequest, headers: QueryHospitalDistrictInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHospitalDistrictInfoResponse>;
    queryHospitalDistrictInfo(request: QueryHospitalDistrictInfoRequest): Promise<QueryHospitalDistrictInfoResponse>;
    queryHospitalRoleUserInfoWithOptions(request: QueryHospitalRoleUserInfoRequest, headers: QueryHospitalRoleUserInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHospitalRoleUserInfoResponse>;
    queryHospitalRoleUserInfo(request: QueryHospitalRoleUserInfoRequest): Promise<QueryHospitalRoleUserInfoResponse>;
    queryHospitalRolesWithOptions(headers: QueryHospitalRolesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHospitalRolesResponse>;
    queryHospitalRoles(): Promise<QueryHospitalRolesResponse>;
    queryJobCodeDictionaryWithOptions(headers: QueryJobCodeDictionaryHeaders, runtime: $Util.RuntimeOptions): Promise<QueryJobCodeDictionaryResponse>;
    queryJobCodeDictionary(): Promise<QueryJobCodeDictionaryResponse>;
    queryJobStatusCodeDictionaryWithOptions(headers: QueryJobStatusCodeDictionaryHeaders, runtime: $Util.RuntimeOptions): Promise<QueryJobStatusCodeDictionaryResponse>;
    queryJobStatusCodeDictionary(): Promise<QueryJobStatusCodeDictionaryResponse>;
    queryMedicalEventsWithOptions(headers: QueryMedicalEventsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMedicalEventsResponse>;
    queryMedicalEvents(): Promise<QueryMedicalEventsResponse>;
    queryUserCredentialsWithOptions(request: QueryUserCredentialsRequest, headers: QueryUserCredentialsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserCredentialsResponse>;
    queryUserCredentials(request: QueryUserCredentialsRequest): Promise<QueryUserCredentialsResponse>;
    queryUserExtInfoWithOptions(userId: string, headers: QueryUserExtInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserExtInfoResponse>;
    queryUserExtInfo(userId: string): Promise<QueryUserExtInfoResponse>;
    queryUserExtendValuesWithOptions(request: QueryUserExtendValuesRequest, headers: QueryUserExtendValuesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserExtendValuesResponse>;
    queryUserExtendValues(request: QueryUserExtendValuesRequest): Promise<QueryUserExtendValuesResponse>;
    queryUserInfoWithOptions(userId: string, request: QueryUserInfoRequest, headers: QueryUserInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserInfoResponse>;
    queryUserInfo(userId: string, request: QueryUserInfoRequest): Promise<QueryUserInfoResponse>;
    queryUserProbCodeDictionaryWithOptions(headers: QueryUserProbCodeDictionaryHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserProbCodeDictionaryResponse>;
    queryUserProbCodeDictionary(): Promise<QueryUserProbCodeDictionaryResponse>;
    queryUserRolesWithOptions(userId: string, headers: QueryUserRolesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserRolesResponse>;
    queryUserRoles(userId: string): Promise<QueryUserRolesResponse>;
    saveUserExtendValuesWithOptions(userId: string, request: SaveUserExtendValuesRequest, headers: SaveUserExtendValuesHeaders, runtime: $Util.RuntimeOptions): Promise<SaveUserExtendValuesResponse>;
    saveUserExtendValues(userId: string, request: SaveUserExtendValuesRequest): Promise<SaveUserExtendValuesResponse>;
    supplAddRoleWithOptions(request: SupplAddRoleRequest, headers: SupplAddRoleHeaders, runtime: $Util.RuntimeOptions): Promise<SupplAddRoleResponse>;
    supplAddRole(request: SupplAddRoleRequest): Promise<SupplAddRoleResponse>;
    supplyAddDeptWithOptions(request: SupplyAddDeptRequest, headers: SupplyAddDeptHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddDeptResponse>;
    supplyAddDept(request: SupplyAddDeptRequest): Promise<SupplyAddDeptResponse>;
    supplyAddMemberWithOptions(request: SupplyAddMemberRequest, headers: SupplyAddMemberHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddMemberResponse>;
    supplyAddMember(request: SupplyAddMemberRequest): Promise<SupplyAddMemberResponse>;
    supplyAddPartnerAdminsWithOptions(request: SupplyAddPartnerAdminsRequest, headers: SupplyAddPartnerAdminsHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddPartnerAdminsResponse>;
    supplyAddPartnerAdmins(request: SupplyAddPartnerAdminsRequest): Promise<SupplyAddPartnerAdminsResponse>;
    supplyAddPartnerManagersWithOptions(request: SupplyAddPartnerManagersRequest, headers: SupplyAddPartnerManagersHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddPartnerManagersResponse>;
    supplyAddPartnerManagers(request: SupplyAddPartnerManagersRequest): Promise<SupplyAddPartnerManagersResponse>;
    supplyAddPartnerTypeWithOptions(request: SupplyAddPartnerTypeRequest, headers: SupplyAddPartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddPartnerTypeResponse>;
    supplyAddPartnerType(request: SupplyAddPartnerTypeRequest): Promise<SupplyAddPartnerTypeResponse>;
    supplyChainDeleteDeptWithOptions(request: SupplyChainDeleteDeptRequest, headers: SupplyChainDeleteDeptHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyChainDeleteDeptResponse>;
    supplyChainDeleteDept(request: SupplyChainDeleteDeptRequest): Promise<SupplyChainDeleteDeptResponse>;
    supplyChainQueryDeptInfoWithOptions(request: SupplyChainQueryDeptInfoRequest, headers: SupplyChainQueryDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyChainQueryDeptInfoResponse>;
    supplyChainQueryDeptInfo(request: SupplyChainQueryDeptInfoRequest): Promise<SupplyChainQueryDeptInfoResponse>;
    supplyChainUpdateDeptInfoWithOptions(request: SupplyChainUpdateDeptInfoRequest, headers: SupplyChainUpdateDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyChainUpdateDeptInfoResponse>;
    supplyChainUpdateDeptInfo(request: SupplyChainUpdateDeptInfoRequest): Promise<SupplyChainUpdateDeptInfoResponse>;
    supplyDeleteMemberWithOptions(request: SupplyDeleteMemberRequest, headers: SupplyDeleteMemberHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeleteMemberResponse>;
    supplyDeleteMember(request: SupplyDeleteMemberRequest): Promise<SupplyDeleteMemberResponse>;
    supplyDeletePartnerAdminsWithOptions(request: SupplyDeletePartnerAdminsRequest, headers: SupplyDeletePartnerAdminsHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeletePartnerAdminsResponse>;
    supplyDeletePartnerAdmins(request: SupplyDeletePartnerAdminsRequest): Promise<SupplyDeletePartnerAdminsResponse>;
    supplyDeletePartnerManagersWithOptions(request: SupplyDeletePartnerManagersRequest, headers: SupplyDeletePartnerManagersHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeletePartnerManagersResponse>;
    supplyDeletePartnerManagers(request: SupplyDeletePartnerManagersRequest): Promise<SupplyDeletePartnerManagersResponse>;
    supplyDeletePartnerTypeWithOptions(request: SupplyDeletePartnerTypeRequest, headers: SupplyDeletePartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeletePartnerTypeResponse>;
    supplyDeletePartnerType(request: SupplyDeletePartnerTypeRequest): Promise<SupplyDeletePartnerTypeResponse>;
    supplyDeleteRoleWithOptions(request: SupplyDeleteRoleRequest, headers: SupplyDeleteRoleHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeleteRoleResponse>;
    supplyDeleteRole(request: SupplyDeleteRoleRequest): Promise<SupplyDeleteRoleResponse>;
    supplyGetMemberWithOptions(request: SupplyGetMemberRequest, headers: SupplyGetMemberHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyGetMemberResponse>;
    supplyGetMember(request: SupplyGetMemberRequest): Promise<SupplyGetMemberResponse>;
    supplyListDeptMembersWithOptions(request: SupplyListDeptMembersRequest, headers: SupplyListDeptMembersHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListDeptMembersResponse>;
    supplyListDeptMembers(request: SupplyListDeptMembersRequest): Promise<SupplyListDeptMembersResponse>;
    supplyListPartnerAdminsWithOptions(request: SupplyListPartnerAdminsRequest, headers: SupplyListPartnerAdminsHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListPartnerAdminsResponse>;
    supplyListPartnerAdmins(request: SupplyListPartnerAdminsRequest): Promise<SupplyListPartnerAdminsResponse>;
    supplyListPartnerManagersWithOptions(request: SupplyListPartnerManagersRequest, headers: SupplyListPartnerManagersHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListPartnerManagersResponse>;
    supplyListPartnerManagers(request: SupplyListPartnerManagersRequest): Promise<SupplyListPartnerManagersResponse>;
    supplyListPartnerTypeWithOptions(request: SupplyListPartnerTypeRequest, headers: SupplyListPartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListPartnerTypeResponse>;
    supplyListPartnerType(request: SupplyListPartnerTypeRequest): Promise<SupplyListPartnerTypeResponse>;
    supplyListRoleWithOptions(request: SupplyListRoleRequest, headers: SupplyListRoleHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListRoleResponse>;
    supplyListRole(request: SupplyListRoleRequest): Promise<SupplyListRoleResponse>;
    supplyListSubDeptWithOptions(request: SupplyListSubDeptRequest, headers: SupplyListSubDeptHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListSubDeptResponse>;
    supplyListSubDept(request: SupplyListSubDeptRequest): Promise<SupplyListSubDeptResponse>;
    supplyQueryPartnerTypeWithOptions(request: SupplyQueryPartnerTypeRequest, headers: SupplyQueryPartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyQueryPartnerTypeResponse>;
    supplyQueryPartnerType(request: SupplyQueryPartnerTypeRequest): Promise<SupplyQueryPartnerTypeResponse>;
    supplyUpdateMemberWithOptions(request: SupplyUpdateMemberRequest, headers: SupplyUpdateMemberHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyUpdateMemberResponse>;
    supplyUpdateMember(request: SupplyUpdateMemberRequest): Promise<SupplyUpdateMemberResponse>;
    supplyUpdatePartnerTypeWithOptions(request: SupplyUpdatePartnerTypeRequest, headers: SupplyUpdatePartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyUpdatePartnerTypeResponse>;
    supplyUpdatePartnerType(request: SupplyUpdatePartnerTypeRequest): Promise<SupplyUpdatePartnerTypeResponse>;
    supplyUpdateRoleWithOptions(request: SupplyUpdateRoleRequest, headers: SupplyUpdateRoleHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyUpdateRoleResponse>;
    supplyUpdateRole(request: SupplyUpdateRoleRequest): Promise<SupplyUpdateRoleResponse>;
    updateUserExtendInfoWithOptions(userId: string, request: UpdateUserExtendInfoRequest, headers: UpdateUserExtendInfoHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateUserExtendInfoResponse>;
    updateUserExtendInfo(userId: string, request: UpdateUserExtendInfoRequest): Promise<UpdateUserExtendInfoResponse>;
}
