/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class GetTravelProcessDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailRequest extends $tea.Model {
    processInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBody extends $tea.Model {
    result?: GetTravelProcessDetailResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTravelProcessDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoRequest extends $tea.Model {
    bizTypeList?: string[];
    gmtOrgPay?: string;
    gmtSign?: string;
    orgPayStatus?: string;
    signStatus?: string;
    targetCorpId?: string;
    tmcProductDetailList?: SyncBusinessSignInfoRequestTmcProductDetailList[];
    tmcProductList?: SyncBusinessSignInfoRequestTmcProductList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoResponseBody extends $tea.Model {
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SyncBusinessSignInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyRequest extends $tea.Model {
    actionType?: string;
    secretString?: string;
    targetCorpId?: string;
    tripAppKey?: string;
    tripAppSecurity?: string;
    tripCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyResponseBody extends $tea.Model {
    result?: SyncSecretKeyResponseBodyResult;
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SyncSecretKeyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequest extends $tea.Model {
    channelType?: string;
    currency?: string;
    dingUserId?: string;
    discountAmount?: string;
    endorseFlag?: boolean;
    event?: SyncTripOrderRequestEvent;
    gmtOrder?: string;
    gmtPay?: string;
    gmtRefund?: string;
    invoiceApplyUrl?: string;
    journeyBizNo?: string;
    orderDetails?: SyncTripOrderRequestOrderDetails[];
    orderNo?: string;
    orderUrl?: string;
    processId?: string;
    realAmount?: string;
    refundAmount?: string;
    relativeOrderNo?: string;
    source?: string;
    supplyLogo?: string;
    supplyName?: string;
    targetCorpId?: string;
    tmcCorpId?: string;
    totalAmount?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderResponseBody extends $tea.Model {
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SyncTripOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBodyResultJourneysArrival extends $tea.Model {
    code?: string;
    name?: string;
    nationalCityCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBodyResultJourneysDeparture extends $tea.Model {
    code?: string;
    name?: string;
    nationalCityCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBodyResultJourneys extends $tea.Model {
    arrival?: GetTravelProcessDetailResponseBodyResultJourneysArrival;
    departure?: GetTravelProcessDetailResponseBodyResultJourneysDeparture;
    endTime?: string;
    journeyBizNo?: string;
    startTime?: string;
    travelType?: string;
    tripWay?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBodyResult extends $tea.Model {
    businessId?: string;
    corpId?: string;
    costCenter?: string;
    itineraryProject?: string;
    journeys?: GetTravelProcessDetailResponseBodyResultJourneys[];
    mainProcessInstanceId?: string;
    memo?: string;
    originatorId?: string;
    processInstanceId?: string;
    processResult?: string;
    processStatus?: string;
    remark?: string;
    travelCategory?: string;
    travelers?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoRequestTmcProductDetailList extends $tea.Model {
    gmtOrgPay?: string;
    payType?: string;
    product?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoRequestTmcProductListProductDetailList extends $tea.Model {
    categoryType?: string;
    gmtOrgPay?: string;
    openStatus?: boolean;
    payType?: string;
    product?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoRequestTmcProductList extends $tea.Model {
    productDetailList?: SyncBusinessSignInfoRequestTmcProductListProductDetailList[];
    tmcCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyResponseBodyResult extends $tea.Model {
    secretString?: string;
    targetCorpId?: string;
    tripAppKey?: string;
    tripAppSecurity?: string;
    tripCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequestEvent extends $tea.Model {
    action?: string;
    gmtAction?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequestOrderDetailsHotelLocation extends $tea.Model {
    lat?: string;
    lon?: string;
    source?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequestOrderDetailsOpenConsumerInfo extends $tea.Model {
    corpId?: string;
    name?: string;
    staffFlag?: boolean;
    status?: string;
    ticketAmount?: string;
    ticketNo?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequestOrderDetails extends $tea.Model {
    arrivalTime?: string;
    carColor?: string;
    carModel?: string;
    carNumber?: string;
    cateringType?: string;
    checkInTime?: string;
    checkOutTime?: string;
    departTime?: string;
    destinationCity?: string;
    destinationCityCode?: string;
    destinationStation?: string;
    detailAmount?: string;
    hotelAddress?: string;
    hotelCity?: string;
    hotelLocation?: SyncTripOrderRequestOrderDetailsHotelLocation;
    hotelName?: string;
    openConsumerInfo?: SyncTripOrderRequestOrderDetailsOpenConsumerInfo[];
    originCity?: string;
    originCityCode?: string;
    originStation?: string;
    roomCount?: number;
    seatInfo?: string;
    serviceType?: string;
    subSupplyLogo?: string;
    subSupplyName?: string;
    taxiType?: string;
    telephone?: string;
    transportNumber?: string;
    typeDescription?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    getTravelProcessDetailWithOptions(request: GetTravelProcessDetailRequest, headers: GetTravelProcessDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetTravelProcessDetailResponse>;
    getTravelProcessDetail(request: GetTravelProcessDetailRequest): Promise<GetTravelProcessDetailResponse>;
    syncBusinessSignInfoWithOptions(request: SyncBusinessSignInfoRequest, headers: SyncBusinessSignInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SyncBusinessSignInfoResponse>;
    syncBusinessSignInfo(request: SyncBusinessSignInfoRequest): Promise<SyncBusinessSignInfoResponse>;
    syncSecretKeyWithOptions(request: SyncSecretKeyRequest, headers: SyncSecretKeyHeaders, runtime: $Util.RuntimeOptions): Promise<SyncSecretKeyResponse>;
    syncSecretKey(request: SyncSecretKeyRequest): Promise<SyncSecretKeyResponse>;
    syncTripOrderWithOptions(request: SyncTripOrderRequest, headers: SyncTripOrderHeaders, runtime: $Util.RuntimeOptions): Promise<SyncTripOrderResponse>;
    syncTripOrder(request: SyncTripOrderRequest): Promise<SyncTripOrderResponse>;
}
