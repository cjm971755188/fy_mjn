"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class NlpWordDistinguishHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.NlpWordDistinguishHeaders = NlpWordDistinguishHeaders;
class NlpWordDistinguishRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attachExtractDecisionInfo: 'attachExtractDecisionInfo',
            isvAppId: 'isvAppId',
            text: 'text',
        };
    }
    static types() {
        return {
            attachExtractDecisionInfo: NlpWordDistinguishRequestAttachExtractDecisionInfo,
            isvAppId: 'string',
            text: 'string',
        };
    }
}
exports.NlpWordDistinguishRequest = NlpWordDistinguishRequest;
class NlpWordDistinguishResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
            wordEntities: 'wordEntities',
        };
    }
    static types() {
        return {
            requestId: 'string',
            wordEntities: { 'type': 'array', 'itemType': NlpWordDistinguishResponseBodyWordEntities },
        };
    }
}
exports.NlpWordDistinguishResponseBody = NlpWordDistinguishResponseBody;
class NlpWordDistinguishResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: NlpWordDistinguishResponseBody,
        };
    }
}
exports.NlpWordDistinguishResponse = NlpWordDistinguishResponse;
class OkrOpenRecommendHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.OkrOpenRecommendHeaders = OkrOpenRecommendHeaders;
class OkrOpenRecommendRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            candidateOkrItems: 'candidateOkrItems',
            corpId: 'corpId',
            deptIds: 'deptIds',
            isvAppId: 'isvAppId',
            userId: 'userId',
            words: 'words',
        };
    }
    static types() {
        return {
            candidateOkrItems: { 'type': 'array', 'itemType': OkrOpenRecommendRequestCandidateOkrItems },
            corpId: 'string',
            deptIds: { 'type': 'array', 'itemType': 'string' },
            isvAppId: 'string',
            userId: 'string',
            words: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.OkrOpenRecommendRequest = OkrOpenRecommendRequest;
class OkrOpenRecommendResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            okrRecommendItems: 'okrRecommendItems',
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            okrRecommendItems: { 'type': 'array', 'itemType': OkrOpenRecommendResponseBodyOkrRecommendItems },
            requestId: 'string',
        };
    }
}
exports.OkrOpenRecommendResponseBody = OkrOpenRecommendResponseBody;
class OkrOpenRecommendResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OkrOpenRecommendResponseBody,
        };
    }
}
exports.OkrOpenRecommendResponse = OkrOpenRecommendResponse;
class NlpWordDistinguishRequestAttachExtractDecisionInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            blackWords: 'blackWords',
            candidateWords: 'candidateWords',
            corpId: 'corpId',
            deptIds: 'deptIds',
            userId: 'userId',
        };
    }
    static types() {
        return {
            blackWords: { 'type': 'array', 'itemType': 'string' },
            candidateWords: { 'type': 'array', 'itemType': 'string' },
            corpId: 'string',
            deptIds: { 'type': 'array', 'itemType': 'string' },
            userId: 'string',
        };
    }
}
exports.NlpWordDistinguishRequestAttachExtractDecisionInfo = NlpWordDistinguishRequestAttachExtractDecisionInfo;
class NlpWordDistinguishResponseBodyWordEntities extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            word: 'word',
        };
    }
    static types() {
        return {
            word: 'string',
        };
    }
}
exports.NlpWordDistinguishResponseBodyWordEntities = NlpWordDistinguishResponseBodyWordEntities;
class OkrOpenRecommendRequestCandidateOkrItemsOkrInfosKeyResultInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kr: 'kr',
            krId: 'krId',
            words: 'words',
        };
    }
    static types() {
        return {
            kr: 'string',
            krId: 'string',
            words: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.OkrOpenRecommendRequestCandidateOkrItemsOkrInfosKeyResultInfos = OkrOpenRecommendRequestCandidateOkrItemsOkrInfosKeyResultInfos;
class OkrOpenRecommendRequestCandidateOkrItemsOkrInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            keyResultInfos: 'keyResultInfos',
            objective: 'objective',
            objectiveId: 'objectiveId',
            words: 'words',
        };
    }
    static types() {
        return {
            keyResultInfos: { 'type': 'array', 'itemType': OkrOpenRecommendRequestCandidateOkrItemsOkrInfosKeyResultInfos },
            objective: 'string',
            objectiveId: 'string',
            words: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.OkrOpenRecommendRequestCandidateOkrItemsOkrInfos = OkrOpenRecommendRequestCandidateOkrItemsOkrInfos;
class OkrOpenRecommendRequestCandidateOkrItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            okrInfos: 'okrInfos',
            relation: 'relation',
            userId: 'userId',
        };
    }
    static types() {
        return {
            okrInfos: { 'type': 'array', 'itemType': OkrOpenRecommendRequestCandidateOkrItemsOkrInfos },
            relation: 'string',
            userId: 'string',
        };
    }
}
exports.OkrOpenRecommendRequestCandidateOkrItems = OkrOpenRecommendRequestCandidateOkrItems;
class OkrOpenRecommendResponseBodyOkrRecommendItemsKrResultRelatedResults extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            krId: 'krId',
            semanticLevel: 'semanticLevel',
            words: 'words',
        };
    }
    static types() {
        return {
            krId: 'string',
            semanticLevel: 'number',
            words: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.OkrOpenRecommendResponseBodyOkrRecommendItemsKrResultRelatedResults = OkrOpenRecommendResponseBodyOkrRecommendItemsKrResultRelatedResults;
class OkrOpenRecommendResponseBodyOkrRecommendItemsObjectiveRelatedResults extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            objectiveId: 'objectiveId',
            semanticLevel: 'semanticLevel',
            words: 'words',
        };
    }
    static types() {
        return {
            objectiveId: 'string',
            semanticLevel: 'number',
            words: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.OkrOpenRecommendResponseBodyOkrRecommendItemsObjectiveRelatedResults = OkrOpenRecommendResponseBodyOkrRecommendItemsObjectiveRelatedResults;
class OkrOpenRecommendResponseBodyOkrRecommendItems extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            krResultRelatedResults: 'krResultRelatedResults',
            objectiveRelatedResults: 'objectiveRelatedResults',
            relatedLevel: 'relatedLevel',
            semanticLevel: 'semanticLevel',
            userId: 'userId',
        };
    }
    static types() {
        return {
            krResultRelatedResults: { 'type': 'array', 'itemType': OkrOpenRecommendResponseBodyOkrRecommendItemsKrResultRelatedResults },
            objectiveRelatedResults: { 'type': 'array', 'itemType': OkrOpenRecommendResponseBodyOkrRecommendItemsObjectiveRelatedResults },
            relatedLevel: 'number',
            semanticLevel: 'number',
            userId: 'string',
        };
    }
}
exports.OkrOpenRecommendResponseBodyOkrRecommendItems = OkrOpenRecommendResponseBodyOkrRecommendItems;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async nlpWordDistinguishWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attachExtractDecisionInfo)) {
            body["attachExtractDecisionInfo"] = request.attachExtractDecisionInfo;
        }
        if (!tea_util_1.default.isUnset(request.isvAppId)) {
            body["isvAppId"] = request.isvAppId;
        }
        if (!tea_util_1.default.isUnset(request.text)) {
            body["text"] = request.text;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "NlpWordDistinguish",
            version: "algo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/algo/okrs/keywords/extract`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new NlpWordDistinguishResponse({}));
    }
    async nlpWordDistinguish(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new NlpWordDistinguishHeaders({});
        return await this.nlpWordDistinguishWithOptions(request, headers, runtime);
    }
    async okrOpenRecommendWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.candidateOkrItems)) {
            body["candidateOkrItems"] = request.candidateOkrItems;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.deptIds)) {
            body["deptIds"] = request.deptIds;
        }
        if (!tea_util_1.default.isUnset(request.isvAppId)) {
            body["isvAppId"] = request.isvAppId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.words)) {
            body["words"] = request.words;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "OkrOpenRecommend",
            version: "algo_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/algo/okrs/recommend`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OkrOpenRecommendResponse({}));
    }
    async okrOpenRecommend(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OkrOpenRecommendHeaders({});
        return await this.okrOpenRecommendWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map