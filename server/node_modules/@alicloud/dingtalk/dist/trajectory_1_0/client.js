"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class QueryAppActiveUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryAppActiveUsersHeaders = QueryAppActiveUsersHeaders;
class QueryAppActiveUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            needPositionInfo: 'needPositionInfo',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            needPositionInfo: 'boolean',
            nextToken: 'number',
        };
    }
}
exports.QueryAppActiveUsersRequest = QueryAppActiveUsersRequest;
class QueryAppActiveUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryAppActiveUsersResponseBodyList },
            nextToken: 'number',
            totalCount: 'number',
        };
    }
}
exports.QueryAppActiveUsersResponseBody = QueryAppActiveUsersResponseBody;
class QueryAppActiveUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAppActiveUsersResponseBody,
        };
    }
}
exports.QueryAppActiveUsersResponse = QueryAppActiveUsersResponse;
class QueryCollectingTraceTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCollectingTraceTaskHeaders = QueryCollectingTraceTaskHeaders;
class QueryCollectingTraceTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryCollectingTraceTaskRequest = QueryCollectingTraceTaskRequest;
class QueryCollectingTraceTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': QueryCollectingTraceTaskResponseBodyList },
        };
    }
}
exports.QueryCollectingTraceTaskResponseBody = QueryCollectingTraceTaskResponseBody;
class QueryCollectingTraceTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCollectingTraceTaskResponseBody,
        };
    }
}
exports.QueryCollectingTraceTaskResponse = QueryCollectingTraceTaskResponse;
class QueryPageTraceDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryPageTraceDataHeaders = QueryPageTraceDataHeaders;
class QueryPageTraceDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            staffId: 'staffId',
            startTime: 'startTime',
            traceId: 'traceId',
        };
    }
    static types() {
        return {
            endTime: 'number',
            maxResults: 'number',
            nextToken: 'number',
            staffId: 'string',
            startTime: 'number',
            traceId: 'string',
        };
    }
}
exports.QueryPageTraceDataRequest = QueryPageTraceDataRequest;
class QueryPageTraceDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryPageTraceDataResponseBodyList },
            nextToken: 'number',
        };
    }
}
exports.QueryPageTraceDataResponseBody = QueryPageTraceDataResponseBody;
class QueryPageTraceDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryPageTraceDataResponseBody,
        };
    }
}
exports.QueryPageTraceDataResponse = QueryPageTraceDataResponse;
class QueryAppActiveUsersResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appTraceId: 'appTraceId',
            latitude: 'latitude',
            longitude: 'longitude',
            reportTime: 'reportTime',
            startTime: 'startTime',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appTraceId: 'string',
            latitude: 'number',
            longitude: 'number',
            reportTime: 'number',
            startTime: 'number',
            userId: 'string',
        };
    }
}
exports.QueryAppActiveUsersResponseBodyList = QueryAppActiveUsersResponseBodyList;
class QueryCollectingTraceTaskResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appTraceId: 'appTraceId',
            geoCollectPeriod: 'geoCollectPeriod',
            geoReportPeriod: 'geoReportPeriod',
            geoReportStatus: 'geoReportStatus',
            reportEndTime: 'reportEndTime',
            reportStartTime: 'reportStartTime',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appTraceId: 'string',
            geoCollectPeriod: 'number',
            geoReportPeriod: 'number',
            geoReportStatus: 'number',
            reportEndTime: 'number',
            reportStartTime: 'number',
            userId: 'string',
        };
    }
}
exports.QueryCollectingTraceTaskResponseBodyList = QueryCollectingTraceTaskResponseBodyList;
class QueryPageTraceDataResponseBodyListCoordinates extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            latitude: 'latitude',
            longitude: 'longitude',
        };
    }
    static types() {
        return {
            latitude: 'number',
            longitude: 'number',
        };
    }
}
exports.QueryPageTraceDataResponseBodyListCoordinates = QueryPageTraceDataResponseBodyListCoordinates;
class QueryPageTraceDataResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            coordinates: 'coordinates',
            gmtLocation: 'gmtLocation',
            gmtUpload: 'gmtUpload',
        };
    }
    static types() {
        return {
            coordinates: QueryPageTraceDataResponseBodyListCoordinates,
            gmtLocation: 'number',
            gmtUpload: 'number',
        };
    }
}
exports.QueryPageTraceDataResponseBodyList = QueryPageTraceDataResponseBodyList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async queryAppActiveUsersWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.needPositionInfo)) {
            query["needPositionInfo"] = request.needPositionInfo;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAppActiveUsers",
            version: "trajectory_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/trajectory/activeUsers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAppActiveUsersResponse({}));
    }
    async queryAppActiveUsers(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAppActiveUsersHeaders({});
        return await this.queryAppActiveUsersWithOptions(request, headers, runtime);
    }
    async queryCollectingTraceTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userIds)) {
            body["userIds"] = request.userIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryCollectingTraceTask",
            version: "trajectory_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/trajectory/currentTasks/queryByUserIds`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCollectingTraceTaskResponse({}));
    }
    async queryCollectingTraceTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCollectingTraceTaskHeaders({});
        return await this.queryCollectingTraceTaskWithOptions(request, headers, runtime);
    }
    async queryPageTraceDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.staffId)) {
            query["staffId"] = request.staffId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.traceId)) {
            query["traceId"] = request.traceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryPageTraceData",
            version: "trajectory_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/trajectory/data`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryPageTraceDataResponse({}));
    }
    async queryPageTraceData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryPageTraceDataHeaders({});
        return await this.queryPageTraceDataWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map