"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class ExecuteAgentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExecuteAgentHeaders = ExecuteAgentHeaders;
class ExecuteAgentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentCode: 'agentCode',
            inputs: 'inputs',
            scenarioCode: 'scenarioCode',
            scenarioInstanceId: 'scenarioInstanceId',
            skillId: 'skillId',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            inputs: ExecuteAgentRequestInputs,
            scenarioCode: 'string',
            scenarioInstanceId: 'string',
            skillId: 'string',
        };
    }
}
exports.ExecuteAgentRequest = ExecuteAgentRequest;
class ExecuteAgentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: ExecuteAgentResponseBodyResult,
        };
    }
}
exports.ExecuteAgentResponseBody = ExecuteAgentResponseBody;
class ExecuteAgentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExecuteAgentResponseBody,
        };
    }
}
exports.ExecuteAgentResponse = ExecuteAgentResponse;
class QueryConversationMessageForAIHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryConversationMessageForAIHeaders = QueryConversationMessageForAIHeaders;
class QueryConversationMessageForAIRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openMsgIds: 'openMsgIds',
            recentDays: 'recentDays',
            recentHours: 'recentHours',
            recentN: 'recentN',
        };
    }
    static types() {
        return {
            openMsgIds: { 'type': 'array', 'itemType': 'string' },
            recentDays: 'number',
            recentHours: 'number',
            recentN: 'number',
        };
    }
}
exports.QueryConversationMessageForAIRequest = QueryConversationMessageForAIRequest;
class QueryConversationMessageForAIShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openMsgIdsShrink: 'openMsgIds',
            recentDays: 'recentDays',
            recentHours: 'recentHours',
            recentN: 'recentN',
        };
    }
    static types() {
        return {
            openMsgIdsShrink: 'string',
            recentDays: 'number',
            recentHours: 'number',
            recentN: 'number',
        };
    }
}
exports.QueryConversationMessageForAIShrinkRequest = QueryConversationMessageForAIShrinkRequest;
class QueryConversationMessageForAIResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            messages: 'messages',
        };
    }
    static types() {
        return {
            messages: { 'type': 'array', 'itemType': QueryConversationMessageForAIResponseBodyMessages },
        };
    }
}
exports.QueryConversationMessageForAIResponseBody = QueryConversationMessageForAIResponseBody;
class QueryConversationMessageForAIResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryConversationMessageForAIResponseBody,
        };
    }
}
exports.QueryConversationMessageForAIResponse = QueryConversationMessageForAIResponse;
class QueryMemoryLearningTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryMemoryLearningTaskHeaders = QueryMemoryLearningTaskHeaders;
class QueryMemoryLearningTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentCode: 'agentCode',
            learningCode: 'learningCode',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            learningCode: 'string',
        };
    }
}
exports.QueryMemoryLearningTaskRequest = QueryMemoryLearningTaskRequest;
class QueryMemoryLearningTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryMemoryLearningTaskResponseBodyResult,
        };
    }
}
exports.QueryMemoryLearningTaskResponseBody = QueryMemoryLearningTaskResponseBody;
class QueryMemoryLearningTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMemoryLearningTaskResponseBody,
        };
    }
}
exports.QueryMemoryLearningTaskResponse = QueryMemoryLearningTaskResponse;
class SubmitMemoryLearningTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SubmitMemoryLearningTaskHeaders = SubmitMemoryLearningTaskHeaders;
class SubmitMemoryLearningTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentCode: 'agentCode',
            content: 'content',
            learningMode: 'learningMode',
            memoryKey: 'memoryKey',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            content: SubmitMemoryLearningTaskRequestContent,
            learningMode: 'string',
            memoryKey: 'string',
        };
    }
}
exports.SubmitMemoryLearningTaskRequest = SubmitMemoryLearningTaskRequest;
class SubmitMemoryLearningTaskShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentCode: 'agentCode',
            contentShrink: 'content',
            learningMode: 'learningMode',
            memoryKey: 'memoryKey',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            contentShrink: 'string',
            learningMode: 'string',
            memoryKey: 'string',
        };
    }
}
exports.SubmitMemoryLearningTaskShrinkRequest = SubmitMemoryLearningTaskShrinkRequest;
class SubmitMemoryLearningTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: SubmitMemoryLearningTaskResponseBodyResult,
        };
    }
}
exports.SubmitMemoryLearningTaskResponseBody = SubmitMemoryLearningTaskResponseBody;
class SubmitMemoryLearningTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SubmitMemoryLearningTaskResponseBody,
        };
    }
}
exports.SubmitMemoryLearningTaskResponse = SubmitMemoryLearningTaskResponse;
class ExecuteAgentRequestInputs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            input: 'input',
        };
    }
    static types() {
        return {
            cardData: 'any',
            cardTemplateId: 'string',
            input: 'string',
        };
    }
}
exports.ExecuteAgentRequestInputs = ExecuteAgentRequestInputs;
class ExecuteAgentResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            executeResult: 'executeResult',
            skillId: 'skillId',
        };
    }
    static types() {
        return {
            executeResult: 'string',
            skillId: 'string',
        };
    }
}
exports.ExecuteAgentResponseBodyResult = ExecuteAgentResponseBodyResult;
class QueryConversationMessageForAIResponseBodyMessagesAtUsers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentCode: 'agentCode',
            nick: 'nick',
            type: 'type',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            nick: 'string',
            type: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.QueryConversationMessageForAIResponseBodyMessagesAtUsers = QueryConversationMessageForAIResponseBodyMessagesAtUsers;
class QueryConversationMessageForAIResponseBodyMessagesSender extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentCode: 'agentCode',
            nick: 'nick',
            type: 'type',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            nick: 'string',
            type: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
}
exports.QueryConversationMessageForAIResponseBodyMessagesSender = QueryConversationMessageForAIResponseBodyMessagesSender;
class QueryConversationMessageForAIResponseBodyMessages extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            atAll: 'atAll',
            atUsers: 'atUsers',
            msgContent: 'msgContent',
            msgType: 'msgType',
            sendTime: 'sendTime',
            sender: 'sender',
            summary: 'summary',
        };
    }
    static types() {
        return {
            atAll: 'boolean',
            atUsers: { 'type': 'array', 'itemType': QueryConversationMessageForAIResponseBodyMessagesAtUsers },
            msgContent: 'string',
            msgType: 'string',
            sendTime: 'string',
            sender: QueryConversationMessageForAIResponseBodyMessagesSender,
            summary: 'string',
        };
    }
}
exports.QueryConversationMessageForAIResponseBodyMessages = QueryConversationMessageForAIResponseBodyMessages;
class QueryMemoryLearningTaskResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'status',
            success: 'success',
        };
    }
    static types() {
        return {
            status: 'string',
            success: 'boolean',
        };
    }
}
exports.QueryMemoryLearningTaskResponseBodyResult = QueryMemoryLearningTaskResponseBodyResult;
class SubmitMemoryLearningTaskRequestContent extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            knowledgeBaseUrl: 'knowledgeBaseUrl',
            type: 'type',
        };
    }
    static types() {
        return {
            knowledgeBaseUrl: 'string',
            type: 'string',
        };
    }
}
exports.SubmitMemoryLearningTaskRequestContent = SubmitMemoryLearningTaskRequestContent;
class SubmitMemoryLearningTaskResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            learningCode: 'learningCode',
            status: 'status',
            success: 'success',
        };
    }
    static types() {
        return {
            learningCode: 'string',
            status: 'string',
            success: 'boolean',
        };
    }
}
exports.SubmitMemoryLearningTaskResponseBodyResult = SubmitMemoryLearningTaskResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async executeAgentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentCode)) {
            body["agentCode"] = request.agentCode;
        }
        if (!tea_util_1.default.isUnset(request.inputs)) {
            body["inputs"] = request.inputs;
        }
        if (!tea_util_1.default.isUnset(request.scenarioCode)) {
            body["scenarioCode"] = request.scenarioCode;
        }
        if (!tea_util_1.default.isUnset(request.scenarioInstanceId)) {
            body["scenarioInstanceId"] = request.scenarioInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.skillId)) {
            body["skillId"] = request.skillId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ExecuteAgent",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/me/agents/execute`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExecuteAgentResponse({}));
    }
    async executeAgent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExecuteAgentHeaders({});
        return await this.executeAgentWithOptions(request, headers, runtime);
    }
    async queryConversationMessageForAIWithOptions(cid, tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new QueryConversationMessageForAIShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.openMsgIds)) {
            request.openMsgIdsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.openMsgIds, "openMsgIds", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.openMsgIdsShrink)) {
            query["openMsgIds"] = request.openMsgIdsShrink;
        }
        if (!tea_util_1.default.isUnset(request.recentDays)) {
            query["recentDays"] = request.recentDays;
        }
        if (!tea_util_1.default.isUnset(request.recentHours)) {
            query["recentHours"] = request.recentHours;
        }
        if (!tea_util_1.default.isUnset(request.recentN)) {
            query["recentN"] = request.recentN;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryConversationMessageForAI",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/me/memory/im/${cid}/messages`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryConversationMessageForAIResponse({}));
    }
    async queryConversationMessageForAI(cid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryConversationMessageForAIHeaders({});
        return await this.queryConversationMessageForAIWithOptions(cid, request, headers, runtime);
    }
    async queryMemoryLearningTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.agentCode)) {
            query["agentCode"] = request.agentCode;
        }
        if (!tea_util_1.default.isUnset(request.learningCode)) {
            query["learningCode"] = request.learningCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMemoryLearningTask",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/me/memory/learningTask/get`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMemoryLearningTaskResponse({}));
    }
    async queryMemoryLearningTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMemoryLearningTaskHeaders({});
        return await this.queryMemoryLearningTaskWithOptions(request, headers, runtime);
    }
    async submitMemoryLearningTaskWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new SubmitMemoryLearningTaskShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.content)) {
            request.contentShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.content, "content", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.agentCode)) {
            query["agentCode"] = request.agentCode;
        }
        if (!tea_util_1.default.isUnset(request.contentShrink)) {
            query["content"] = request.contentShrink;
        }
        if (!tea_util_1.default.isUnset(request.learningMode)) {
            query["learningMode"] = request.learningMode;
        }
        if (!tea_util_1.default.isUnset(request.memoryKey)) {
            query["memoryKey"] = request.memoryKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SubmitMemoryLearningTask",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/me/memory/learningTask/put`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SubmitMemoryLearningTaskResponse({}));
    }
    async submitMemoryLearningTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SubmitMemoryLearningTaskHeaders({});
        return await this.submitMemoryLearningTaskWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map