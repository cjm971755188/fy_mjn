"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreatePackageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreatePackageHeaders = CreatePackageHeaders;
class CreatePackageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            appId: 'appId',
            homeUrl: 'homeUrl',
            ossObjectKey: 'ossObjectKey',
        };
    }
    static types() {
        return {
            agentId: 'number',
            appId: 'number',
            homeUrl: 'string',
            ossObjectKey: 'string',
        };
    }
}
exports.CreatePackageRequest = CreatePackageRequest;
class CreatePackageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
}
exports.CreatePackageResponseBody = CreatePackageResponseBody;
class CreatePackageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreatePackageResponseBody,
        };
    }
}
exports.CreatePackageResponse = CreatePackageResponse;
class GetAccessTokenHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAccessTokenHeaders = GetAccessTokenHeaders;
class GetAccessTokenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            appId: 'appId',
        };
    }
    static types() {
        return {
            agentId: 'number',
            appId: 'number',
        };
    }
}
exports.GetAccessTokenRequest = GetAccessTokenRequest;
class GetAccessTokenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKeyId: 'accessKeyId',
            accessKeySecret: 'accessKeySecret',
            bucket: 'bucket',
            endpoint: 'endpoint',
            expiration: 'expiration',
            name: 'name',
            region: 'region',
            stsToken: 'stsToken',
        };
    }
    static types() {
        return {
            accessKeyId: 'string',
            accessKeySecret: 'string',
            bucket: 'string',
            endpoint: 'string',
            expiration: 'string',
            name: 'string',
            region: 'string',
            stsToken: 'string',
        };
    }
}
exports.GetAccessTokenResponseBody = GetAccessTokenResponseBody;
class GetAccessTokenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAccessTokenResponseBody,
        };
    }
}
exports.GetAccessTokenResponse = GetAccessTokenResponse;
class GetCreateStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCreateStatusHeaders = GetCreateStatusHeaders;
class GetCreateStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
}
exports.GetCreateStatusRequest = GetCreateStatusRequest;
class GetCreateStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            buildTime: 'buildTime',
            finished: 'finished',
            packageSize: 'packageSize',
            status: 'status',
            taskId: 'taskId',
            version: 'version',
        };
    }
    static types() {
        return {
            buildTime: 'number',
            finished: 'boolean',
            packageSize: 'number',
            status: 'string',
            taskId: 'string',
            version: 'string',
        };
    }
}
exports.GetCreateStatusResponseBody = GetCreateStatusResponseBody;
class GetCreateStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCreateStatusResponseBody,
        };
    }
}
exports.GetCreateStatusResponse = GetCreateStatusResponse;
class PublishPackageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PublishPackageHeaders = PublishPackageHeaders;
class PublishPackageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            appId: 'appId',
            version: 'version',
        };
    }
    static types() {
        return {
            agentId: 'number',
            appId: 'number',
            version: 'string',
        };
    }
}
exports.PublishPackageRequest = PublishPackageRequest;
class PublishPackageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.PublishPackageResponseBody = PublishPackageResponseBody;
class PublishPackageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PublishPackageResponseBody,
        };
    }
}
exports.PublishPackageResponse = PublishPackageResponse;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async createPackageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            body["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.homeUrl)) {
            body["homeUrl"] = request.homeUrl;
        }
        if (!tea_util_1.default.isUnset(request.ossObjectKey)) {
            body["ossObjectKey"] = request.ossObjectKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreatePackage",
            version: "h5package_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h5package/asyncUpload`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreatePackageResponse({}));
    }
    async createPackage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreatePackageHeaders({});
        return await this.createPackageWithOptions(request, headers, runtime);
    }
    async getAccessTokenWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            query["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.appId)) {
            query["appId"] = request.appId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAccessToken",
            version: "h5package_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h5package/uploadTokens`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAccessTokenResponse({}));
    }
    async getAccessToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAccessTokenHeaders({});
        return await this.getAccessTokenWithOptions(request, headers, runtime);
    }
    async getCreateStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCreateStatus",
            version: "h5package_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h5package/uploadStatus`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCreateStatusResponse({}));
    }
    async getCreateStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCreateStatusHeaders({});
        return await this.getCreateStatusWithOptions(request, headers, runtime);
    }
    async publishPackageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            body["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PublishPackage",
            version: "h5package_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/h5package/publish`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PublishPackageResponse({}));
    }
    async publishPackage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PublishPackageHeaders({});
        return await this.publishPackageWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map