/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class EditContactHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditContactRequest extends $tea.Model {
    data?: EditContactRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditContactResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditContactResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerRequest extends $tea.Model {
    data?: EditCustomerRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditCustomerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerPoolHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerPoolRequest extends $tea.Model {
    data?: EditCustomerPoolRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerPoolResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerPoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditCustomerPoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditExchangeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditExchangeRequest extends $tea.Model {
    data?: EditExchangeRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditExchangeResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditExchangeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditExchangeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditGoodsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditGoodsRequest extends $tea.Model {
    data?: EditGoodsRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditGoodsResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditGoodsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditGoodsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditIntostockHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditIntostockRequest extends $tea.Model {
    data?: EditIntostockRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditIntostockResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditIntostockResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditIntostockResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditInvoiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditInvoiceRequest extends $tea.Model {
    data?: EditInvoiceRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditInvoiceResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditInvoiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditInvoiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOrderRequest extends $tea.Model {
    data?: EditOrderRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOrderResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOutstockHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOutstockRequest extends $tea.Model {
    data?: EditOutstockRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOutstockResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOutstockResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditOutstockResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditProductionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditProductionRequest extends $tea.Model {
    data?: EditProductionRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditProductionResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditProductionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditProductionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditPurchaseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditPurchaseRequest extends $tea.Model {
    data?: EditPurchaseRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditPurchaseResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditPurchaseResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditPurchaseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditQuotationRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditQuotationRecordRequest extends $tea.Model {
    data?: EditQuotationRecordRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditQuotationRecordResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditQuotationRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditQuotationRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditSalesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditSalesRequest extends $tea.Model {
    data?: EditSalesRequestData;
    datatype?: number;
    msgid?: number;
    stamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditSalesResponseBody extends $tea.Model {
    msgid?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditSalesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EditSalesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataListRequest extends $tea.Model {
    datatype?: string;
    page?: number;
    pagesize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataListResponseBody extends $tea.Model {
    data?: GetDataListResponseBodyData[];
    dataname?: {
        [key: string]: string;
    };
    page?: number;
    pageSize?: number;
    time?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDataListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataViewHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataViewRequest extends $tea.Model {
    datatype?: string;
    msgid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataViewResponseBody extends $tea.Model {
    data?: GetDataViewResponseBodyData;
    dataname?: {
        [key: string]: {
            [key: string]: any;
        };
    };
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataViewResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDataViewResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditContactRequestData extends $tea.Model {
    dataUserid?: string;
    lxrAddress?: string;
    lxrBirthday?: string;
    lxrChengwei?: string;
    lxrCtnumber?: string;
    lxrCttype?: string;
    lxrCustomerid?: string;
    lxrDepartment?: string;
    lxrDingtalk?: string;
    lxrEmail?: string;
    lxrFax?: string;
    lxrGroup?: string;
    lxrHandset?: string;
    lxrHeadship?: string;
    lxrLike?: string;
    lxrName?: string;
    lxrPhoto?: string;
    lxrPreside?: string;
    lxrPst?: string;
    lxrQq?: string;
    lxrRemark?: string;
    lxrSex?: string;
    lxrSkype?: string;
    lxrTel?: string;
    lxrType?: string;
    lxrWangwang?: string;
    lxrWeixin?: string;
    lxrWorktel?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerRequestData extends $tea.Model {
    dataUserid?: string;
    khAddress?: string;
    khAppellation?: string;
    khBefontof?: string;
    khBillinfo?: string;
    khCity?: string;
    khClass?: string;
    khCoaddress?: string;
    khContype?: string;
    khCountry?: string;
    khCreditgrade?: string;
    khCtnumber?: string;
    khCttype?: string;
    khDepartment?: string;
    khDingtalk?: string;
    khEmail?: string;
    khEmployees?: string;
    khFax?: string;
    khFrom?: string;
    khHandset?: string;
    khHeadship?: string;
    khHotfl?: string;
    khHotlevel?: string;
    khHotmemo?: string;
    khHottype?: string;
    khIndustry?: string;
    khInfo?: string;
    khJibie?: string;
    khName?: string;
    khPkhid?: string;
    khPreside?: string;
    khProvince?: string;
    khPst?: string;
    khQq?: string;
    khRalagrade?: string;
    khRemark?: string;
    khSex?: string;
    khShortname?: string;
    khSkype?: string;
    khSn?: string;
    khStatus?: string;
    khTel?: string;
    khType?: string;
    khValrating?: string;
    khWangwang?: string;
    khWeb?: string;
    khWeixin?: string;
    khWorktel?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditCustomerPoolRequestData extends $tea.Model {
    dataUserid?: string;
    khAddress?: string;
    khAppellation?: string;
    khBefontof?: string;
    khBillinfo?: string;
    khCity?: string;
    khClass?: string;
    khCoaddress?: string;
    khContype?: string;
    khCountry?: string;
    khCreditgrade?: string;
    khCtnumber?: string;
    khCttype?: string;
    khDepartment?: string;
    khDingtalk?: string;
    khEmail?: string;
    khEmployees?: string;
    khFax?: string;
    khFrom?: string;
    khGenzongtime?: string;
    khHandset?: string;
    khHeadship?: string;
    khHotfl?: string;
    khHotlevel?: string;
    khHotmemo?: string;
    khHottype?: string;
    khIndustry?: string;
    khInfo?: string;
    khJibie?: string;
    khName?: string;
    khPkhid?: string;
    khPreside?: string;
    khProvince?: string;
    khPst?: string;
    khQq?: string;
    khRalagrade?: string;
    khRemark?: string;
    khSex?: string;
    khShortname?: string;
    khSkype?: string;
    khSn?: string;
    khStatus?: string;
    khTel?: string;
    khType?: string;
    khValrating?: string;
    khWangwang?: string;
    khWeb?: string;
    khWeixin?: string;
    khWorktel?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditExchangeRequestData extends $tea.Model {
    childMx?: string;
    dataUserid?: string;
    hhCustomerid?: string;
    hhDate?: string;
    hhInempid?: string;
    hhInlibid?: string;
    hhIntime?: string;
    hhNumber?: string;
    hhOrderid?: string;
    hhOutempid?: string;
    hhOutlibid?: string;
    hhOuttime?: string;
    hhRemark?: string;
    hhState?: string;
    hhTitle?: string;
    hhType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditGoodsRequestData extends $tea.Model {
    addedtime?: string;
    cbprice?: string;
    cpParentid?: string;
    cparea?: string;
    cpbarcode?: string;
    cpbrand?: string;
    cpcontent?: string;
    cpguige?: string;
    cpimg?: string;
    cpname?: string;
    cpno?: string;
    cpremark?: string;
    cptype?: string;
    cpunit?: string;
    cpweight?: string;
    dataUserid?: string;
    gysid?: string;
    ispicimanage?: string;
    issnmanage?: string;
    isstock?: string;
    isstop?: string;
    preprice1?: string;
    preprice2?: string;
    preprice3?: string;
    preprice4?: string;
    stockdown?: string;
    stockup?: string;
    typeid?: string;
    unitrate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditIntostockRequestData extends $tea.Model {
    askempid?: string;
    auditreson?: string;
    billno?: string;
    childMx?: string;
    customerid?: string;
    dataUserid?: string;
    empid?: string;
    inorout?: string;
    libiodate?: string;
    libioname?: string;
    libiostate?: string;
    orderid?: string;
    remark?: string;
    stocklibid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditInvoiceRequestData extends $tea.Model {
    childMx?: string;
    dataUserid?: string;
    fhAddress?: string;
    fhCustomerid?: string;
    fhDate?: string;
    fhEmail?: string;
    fhHandset?: string;
    fhHtorder?: string;
    fhJianshu?: string;
    fhKg?: string;
    fhLinkman?: string;
    fhLxrid?: string;
    fhMode?: string;
    fhMsn?: string;
    fhNumber?: string;
    fhPost?: string;
    fhPreside?: string;
    fhRemark?: string;
    fhShipper?: string;
    fhState?: string;
    fhTel?: string;
    fhTitle?: string;
    fhYunfei?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOrderRequestData extends $tea.Model {
    childMx?: string;
    dataUserid?: string;
    fahuoaddressid?: string;
    htBegindate?: string;
    htContract?: string;
    htCustomerid?: string;
    htCusub?: string;
    htDate?: string;
    htDeliplace?: string;
    htEnddate?: string;
    htFjmoney?: string;
    htFjmoneylx?: string;
    htKjmoney?: string;
    htLxrid?: string;
    htLxrinfo?: string;
    htMoneyzhekou?: string;
    htNumber?: string;
    htOrder?: string;
    htPaymode?: string;
    htPreside?: string;
    htRemark?: string;
    htState?: string;
    htSummemo?: string;
    htSummoney?: string;
    htTitle?: string;
    htType?: string;
    htWesub?: string;
    htWuliutype?: string;
    htXshid?: string;
    htYunfeimoney?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditOutstockRequestData extends $tea.Model {
    askempid?: string;
    auditreson?: string;
    billno?: string;
    childMx?: string;
    customerid?: string;
    dataUserid?: string;
    empid?: string;
    inorout?: string;
    libiodate?: string;
    libioname?: string;
    libiostate?: string;
    orderid?: string;
    remark?: string;
    stocklibid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditProductionRequestData extends $tea.Model {
    dataUserid?: string;
    schCustomerid?: string;
    schEndtime?: string;
    schFinished?: string;
    schHtid?: string;
    schMakeemp?: string;
    schNumber?: string;
    schPlanendtime?: string;
    schPrincipal?: string;
    schRemark?: string;
    schStarttime?: string;
    schStatesstr?: string;
    schTitle?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditPurchaseRequestData extends $tea.Model {
    cgFjmoney?: string;
    cgFjmoneylx?: string;
    cgKjmoney?: string;
    cgMoneyzhekou?: string;
    cgZxstate?: string;
    cgdate?: string;
    cgname?: string;
    cgno?: string;
    cgremark?: string;
    cgtype?: string;
    childMx?: string;
    dataUserid?: string;
    empid?: string;
    gysLxrid?: string;
    gysLxrinfo?: string;
    gysid?: string;
    gysjingban?: string;
    orderHtid?: string;
    orderKhid?: string;
    summoney?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditQuotationRecordRequestData extends $tea.Model {
    bjBjren?: string;
    bjBzremark?: string;
    bjCustomerid?: string;
    bjDate?: string;
    bjFjmoney?: string;
    bjFjmoneylx?: string;
    bjFkremark?: string;
    bjJfremark?: string;
    bjJshren?: string;
    bjKjmoney?: string;
    bjLianxi?: string;
    bjMoneyzhekou?: string;
    bjNumber?: string;
    bjPrice?: string;
    bjRemark?: string;
    bjState?: string;
    bjTitle?: string;
    bjXshid?: string;
    childMx?: string;
    dataUserid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditSalesRequestData extends $tea.Model {
    dataUserid?: string;
    xshCustomerid?: string;
    xshDate?: string;
    xshExpdate?: string;
    xshExpmoney?: string;
    xshFrom?: string;
    xshKnx?: string;
    xshLianxi?: string;
    xshLxrid?: string;
    xshMoneynote?: string;
    xshNumber?: string;
    xshPhase?: string;
    xshPhasenote?: string;
    xshPreside?: string;
    xshProvider?: string;
    xshRequire?: string;
    xshState?: string;
    xshTitle?: string;
    xshType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataListResponseBodyData extends $tea.Model {
    detail?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDataViewResponseBodyData extends $tea.Model {
    detail?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    editContactWithOptions(request: EditContactRequest, headers: EditContactHeaders, runtime: $Util.RuntimeOptions): Promise<EditContactResponse>;
    editContact(request: EditContactRequest): Promise<EditContactResponse>;
    editCustomerWithOptions(request: EditCustomerRequest, headers: EditCustomerHeaders, runtime: $Util.RuntimeOptions): Promise<EditCustomerResponse>;
    editCustomer(request: EditCustomerRequest): Promise<EditCustomerResponse>;
    editCustomerPoolWithOptions(request: EditCustomerPoolRequest, headers: EditCustomerPoolHeaders, runtime: $Util.RuntimeOptions): Promise<EditCustomerPoolResponse>;
    editCustomerPool(request: EditCustomerPoolRequest): Promise<EditCustomerPoolResponse>;
    editExchangeWithOptions(request: EditExchangeRequest, headers: EditExchangeHeaders, runtime: $Util.RuntimeOptions): Promise<EditExchangeResponse>;
    editExchange(request: EditExchangeRequest): Promise<EditExchangeResponse>;
    editGoodsWithOptions(request: EditGoodsRequest, headers: EditGoodsHeaders, runtime: $Util.RuntimeOptions): Promise<EditGoodsResponse>;
    editGoods(request: EditGoodsRequest): Promise<EditGoodsResponse>;
    editIntostockWithOptions(request: EditIntostockRequest, headers: EditIntostockHeaders, runtime: $Util.RuntimeOptions): Promise<EditIntostockResponse>;
    editIntostock(request: EditIntostockRequest): Promise<EditIntostockResponse>;
    editInvoiceWithOptions(request: EditInvoiceRequest, headers: EditInvoiceHeaders, runtime: $Util.RuntimeOptions): Promise<EditInvoiceResponse>;
    editInvoice(request: EditInvoiceRequest): Promise<EditInvoiceResponse>;
    editOrderWithOptions(request: EditOrderRequest, headers: EditOrderHeaders, runtime: $Util.RuntimeOptions): Promise<EditOrderResponse>;
    editOrder(request: EditOrderRequest): Promise<EditOrderResponse>;
    editOutstockWithOptions(request: EditOutstockRequest, headers: EditOutstockHeaders, runtime: $Util.RuntimeOptions): Promise<EditOutstockResponse>;
    editOutstock(request: EditOutstockRequest): Promise<EditOutstockResponse>;
    editProductionWithOptions(request: EditProductionRequest, headers: EditProductionHeaders, runtime: $Util.RuntimeOptions): Promise<EditProductionResponse>;
    editProduction(request: EditProductionRequest): Promise<EditProductionResponse>;
    editPurchaseWithOptions(request: EditPurchaseRequest, headers: EditPurchaseHeaders, runtime: $Util.RuntimeOptions): Promise<EditPurchaseResponse>;
    editPurchase(request: EditPurchaseRequest): Promise<EditPurchaseResponse>;
    editQuotationRecordWithOptions(request: EditQuotationRecordRequest, headers: EditQuotationRecordHeaders, runtime: $Util.RuntimeOptions): Promise<EditQuotationRecordResponse>;
    editQuotationRecord(request: EditQuotationRecordRequest): Promise<EditQuotationRecordResponse>;
    editSalesWithOptions(request: EditSalesRequest, headers: EditSalesHeaders, runtime: $Util.RuntimeOptions): Promise<EditSalesResponse>;
    editSales(request: EditSalesRequest): Promise<EditSalesResponse>;
    getDataListWithOptions(request: GetDataListRequest, headers: GetDataListHeaders, runtime: $Util.RuntimeOptions): Promise<GetDataListResponse>;
    getDataList(request: GetDataListRequest): Promise<GetDataListResponse>;
    getDataViewWithOptions(request: GetDataViewRequest, headers: GetDataViewHeaders, runtime: $Util.RuntimeOptions): Promise<GetDataViewResponse>;
    getDataView(request: GetDataViewRequest): Promise<GetDataViewResponse>;
}
