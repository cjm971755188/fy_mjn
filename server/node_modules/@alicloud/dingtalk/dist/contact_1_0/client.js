"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddAccountMappingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddAccountMappingHeaders = AddAccountMappingHeaders;
class AddAccountMappingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domain: 'domain',
            extension: 'extension',
            outId: 'outId',
            outTenantId: 'outTenantId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            domain: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            outId: 'string',
            outTenantId: 'string',
            userId: 'string',
        };
    }
}
exports.AddAccountMappingRequest = AddAccountMappingRequest;
class AddAccountMappingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.AddAccountMappingResponseBody = AddAccountMappingResponseBody;
class AddAccountMappingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddAccountMappingResponseBody,
        };
    }
}
exports.AddAccountMappingResponse = AddAccountMappingResponse;
class AddContactHideBySceneSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddContactHideBySceneSettingHeaders = AddContactHideBySceneSettingHeaders;
class AddContactHideBySceneSettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeTagIds: 'excludeTagIds',
            excludeUserIds: 'excludeUserIds',
            name: 'name',
            nodeListSceneConfig: 'nodeListSceneConfig',
            objectDeptIds: 'objectDeptIds',
            objectTagIds: 'objectTagIds',
            objectUserIds: 'objectUserIds',
            profileSceneConfig: 'profileSceneConfig',
            searchSceneConfig: 'searchSceneConfig',
        };
    }
    static types() {
        return {
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            excludeUserIds: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            nodeListSceneConfig: AddContactHideBySceneSettingRequestNodeListSceneConfig,
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
            objectUserIds: { 'type': 'array', 'itemType': 'string' },
            profileSceneConfig: AddContactHideBySceneSettingRequestProfileSceneConfig,
            searchSceneConfig: AddContactHideBySceneSettingRequestSearchSceneConfig,
        };
    }
}
exports.AddContactHideBySceneSettingRequest = AddContactHideBySceneSettingRequest;
class AddContactHideBySceneSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            settingId: 'settingId',
        };
    }
    static types() {
        return {
            settingId: 'number',
        };
    }
}
exports.AddContactHideBySceneSettingResponseBody = AddContactHideBySceneSettingResponseBody;
class AddContactHideBySceneSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddContactHideBySceneSettingResponseBody,
        };
    }
}
exports.AddContactHideBySceneSettingResponse = AddContactHideBySceneSettingResponse;
class AddEmpAttributeHideBySceneSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddEmpAttributeHideBySceneSettingHeaders = AddEmpAttributeHideBySceneSettingHeaders;
class AddEmpAttributeHideBySceneSettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatSubtitleConfig: 'chatSubtitleConfig',
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeTagIds: 'excludeTagIds',
            excludeUserIds: 'excludeUserIds',
            hideFields: 'hideFields',
            name: 'name',
            objectDeptIds: 'objectDeptIds',
            objectTagIds: 'objectTagIds',
            objectUserIds: 'objectUserIds',
            profileSceneConfig: 'profileSceneConfig',
            searchSceneConfig: 'searchSceneConfig',
        };
    }
    static types() {
        return {
            chatSubtitleConfig: AddEmpAttributeHideBySceneSettingRequestChatSubtitleConfig,
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            excludeUserIds: { 'type': 'array', 'itemType': 'string' },
            hideFields: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
            objectUserIds: { 'type': 'array', 'itemType': 'string' },
            profileSceneConfig: AddEmpAttributeHideBySceneSettingRequestProfileSceneConfig,
            searchSceneConfig: AddEmpAttributeHideBySceneSettingRequestSearchSceneConfig,
        };
    }
}
exports.AddEmpAttributeHideBySceneSettingRequest = AddEmpAttributeHideBySceneSettingRequest;
class AddEmpAttributeHideBySceneSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            settingId: 'settingId',
        };
    }
    static types() {
        return {
            settingId: 'number',
        };
    }
}
exports.AddEmpAttributeHideBySceneSettingResponseBody = AddEmpAttributeHideBySceneSettingResponseBody;
class AddEmpAttributeHideBySceneSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddEmpAttributeHideBySceneSettingResponseBody,
        };
    }
}
exports.AddEmpAttributeHideBySceneSettingResponse = AddEmpAttributeHideBySceneSettingResponse;
class AnnualCertificationAuditHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AnnualCertificationAuditHeaders = AnnualCertificationAuditHeaders;
class AnnualCertificationAuditRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applicantMobile: 'applicantMobile',
            applicantName: 'applicantName',
            applicationLetter: 'applicationLetter',
            authStatus: 'authStatus',
            certificateType: 'certificateType',
            corpName: 'corpName',
            depositaryBank: 'depositaryBank',
            extension: 'extension',
            legalPerson: 'legalPerson',
            licenseNumber: 'licenseNumber',
            licenseUrl: 'licenseUrl',
            orderId: 'orderId',
            publicAccount: 'publicAccount',
            reasonCode: 'reasonCode',
            reasonMsg: 'reasonMsg',
            tag: 'tag',
        };
    }
    static types() {
        return {
            applicantMobile: 'string',
            applicantName: 'string',
            applicationLetter: 'string',
            authStatus: 'number',
            certificateType: 'number',
            corpName: 'string',
            depositaryBank: 'string',
            extension: 'string',
            legalPerson: 'string',
            licenseNumber: 'string',
            licenseUrl: 'string',
            orderId: 'string',
            publicAccount: 'string',
            reasonCode: 'string',
            reasonMsg: 'string',
            tag: 'string',
        };
    }
}
exports.AnnualCertificationAuditRequest = AnnualCertificationAuditRequest;
class AnnualCertificationAuditResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.AnnualCertificationAuditResponseBody = AnnualCertificationAuditResponseBody;
class AnnualCertificationAuditResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AnnualCertificationAuditResponseBody,
        };
    }
}
exports.AnnualCertificationAuditResponse = AnnualCertificationAuditResponse;
class BatchApproveUnionApplyHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchApproveUnionApplyHeaders = BatchApproveUnionApplyHeaders;
class BatchApproveUnionApplyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': BatchApproveUnionApplyRequestBody },
        };
    }
}
exports.BatchApproveUnionApplyRequest = BatchApproveUnionApplyRequest;
class BatchApproveUnionApplyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.BatchApproveUnionApplyResponseBody = BatchApproveUnionApplyResponseBody;
class BatchApproveUnionApplyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchApproveUnionApplyResponseBody,
        };
    }
}
exports.BatchApproveUnionApplyResponse = BatchApproveUnionApplyResponse;
class ChangeMainAdminHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ChangeMainAdminHeaders = ChangeMainAdminHeaders;
class ChangeMainAdminRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            effectCorpId: 'effectCorpId',
            sourceUserId: 'sourceUserId',
            targetUserId: 'targetUserId',
        };
    }
    static types() {
        return {
            effectCorpId: 'string',
            sourceUserId: 'string',
            targetUserId: 'string',
        };
    }
}
exports.ChangeMainAdminRequest = ChangeMainAdminRequest;
class ChangeMainAdminResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.ChangeMainAdminResponse = ChangeMainAdminResponse;
class CreateCooperateOrgHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateCooperateOrgHeaders = CreateCooperateOrgHeaders;
class CreateCooperateOrgRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            industryCode: 'industryCode',
            logoMediaId: 'logoMediaId',
            orgName: 'orgName',
        };
    }
    static types() {
        return {
            industryCode: 'number',
            logoMediaId: 'string',
            orgName: 'string',
        };
    }
}
exports.CreateCooperateOrgRequest = CreateCooperateOrgRequest;
class CreateCooperateOrgResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cooperateCorpId: 'cooperateCorpId',
        };
    }
    static types() {
        return {
            cooperateCorpId: 'string',
        };
    }
}
exports.CreateCooperateOrgResponseBody = CreateCooperateOrgResponseBody;
class CreateCooperateOrgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCooperateOrgResponseBody,
        };
    }
}
exports.CreateCooperateOrgResponse = CreateCooperateOrgResponse;
class CreateManagementGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateManagementGroupHeaders = CreateManagementGroupHeaders;
class CreateManagementGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'groupName',
            members: 'members',
            resourceIds: 'resourceIds',
            scope: 'scope',
        };
    }
    static types() {
        return {
            groupName: 'string',
            members: { 'type': 'array', 'itemType': CreateManagementGroupRequestMembers },
            resourceIds: { 'type': 'array', 'itemType': 'string' },
            scope: CreateManagementGroupRequestScope,
        };
    }
}
exports.CreateManagementGroupRequest = CreateManagementGroupRequest;
class CreateManagementGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
        };
    }
    static types() {
        return {
            groupId: 'string',
        };
    }
}
exports.CreateManagementGroupResponseBody = CreateManagementGroupResponseBody;
class CreateManagementGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateManagementGroupResponseBody,
        };
    }
}
exports.CreateManagementGroupResponse = CreateManagementGroupResponse;
class CreateSecondaryManagementGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateSecondaryManagementGroupHeaders = CreateSecondaryManagementGroupHeaders;
class CreateSecondaryManagementGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'groupName',
            members: 'members',
            resourceIds: 'resourceIds',
            scope: 'scope',
            userId: 'userId',
        };
    }
    static types() {
        return {
            groupName: 'string',
            members: { 'type': 'array', 'itemType': CreateSecondaryManagementGroupRequestMembers },
            resourceIds: { 'type': 'array', 'itemType': 'string' },
            scope: CreateSecondaryManagementGroupRequestScope,
            userId: 'string',
        };
    }
}
exports.CreateSecondaryManagementGroupRequest = CreateSecondaryManagementGroupRequest;
class CreateSecondaryManagementGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
        };
    }
    static types() {
        return {
            groupId: 'string',
        };
    }
}
exports.CreateSecondaryManagementGroupResponseBody = CreateSecondaryManagementGroupResponseBody;
class CreateSecondaryManagementGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateSecondaryManagementGroupResponseBody,
        };
    }
}
exports.CreateSecondaryManagementGroupResponse = CreateSecondaryManagementGroupResponse;
class DelAccountMappingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DelAccountMappingHeaders = DelAccountMappingHeaders;
class DelAccountMappingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domain: 'domain',
            userId: 'userId',
        };
    }
    static types() {
        return {
            domain: 'string',
            userId: 'string',
        };
    }
}
exports.DelAccountMappingRequest = DelAccountMappingRequest;
class DelAccountMappingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DelAccountMappingResponseBody = DelAccountMappingResponseBody;
class DelAccountMappingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DelAccountMappingResponseBody,
        };
    }
}
exports.DelAccountMappingResponse = DelAccountMappingResponse;
class DeleteContactHideBySceneSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteContactHideBySceneSettingHeaders = DeleteContactHideBySceneSettingHeaders;
class DeleteContactHideBySceneSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteContactHideBySceneSettingResponseBody = DeleteContactHideBySceneSettingResponseBody;
class DeleteContactHideBySceneSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteContactHideBySceneSettingResponseBody,
        };
    }
}
exports.DeleteContactHideBySceneSettingResponse = DeleteContactHideBySceneSettingResponse;
class DeleteContactHideSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteContactHideSettingHeaders = DeleteContactHideSettingHeaders;
class DeleteContactHideSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteContactHideSettingResponse = DeleteContactHideSettingResponse;
class DeleteContactRestrictSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteContactRestrictSettingHeaders = DeleteContactRestrictSettingHeaders;
class DeleteContactRestrictSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteContactRestrictSettingResponseBody = DeleteContactRestrictSettingResponseBody;
class DeleteContactRestrictSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteContactRestrictSettingResponseBody,
        };
    }
}
exports.DeleteContactRestrictSettingResponse = DeleteContactRestrictSettingResponse;
class DeleteEmpAttributeHideBySceneSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteEmpAttributeHideBySceneSettingHeaders = DeleteEmpAttributeHideBySceneSettingHeaders;
class DeleteEmpAttributeHideBySceneSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.DeleteEmpAttributeHideBySceneSettingResponseBody = DeleteEmpAttributeHideBySceneSettingResponseBody;
class DeleteEmpAttributeHideBySceneSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteEmpAttributeHideBySceneSettingResponseBody,
        };
    }
}
exports.DeleteEmpAttributeHideBySceneSettingResponse = DeleteEmpAttributeHideBySceneSettingResponse;
class DeleteEmpAttributeVisibilityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteEmpAttributeVisibilityHeaders = DeleteEmpAttributeVisibilityHeaders;
class DeleteEmpAttributeVisibilityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteEmpAttributeVisibilityResponse = DeleteEmpAttributeVisibilityResponse;
class DeleteManagementGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteManagementGroupHeaders = DeleteManagementGroupHeaders;
class DeleteManagementGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteManagementGroupResponse = DeleteManagementGroupResponse;
class GetAccountMappingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAccountMappingHeaders = GetAccountMappingHeaders;
class GetAccountMappingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domain: 'domain',
            userId: 'userId',
        };
    }
    static types() {
        return {
            domain: 'string',
            userId: 'string',
        };
    }
}
exports.GetAccountMappingRequest = GetAccountMappingRequest;
class GetAccountMappingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: GetAccountMappingResponseBodyResult,
        };
    }
}
exports.GetAccountMappingResponseBody = GetAccountMappingResponseBody;
class GetAccountMappingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAccountMappingResponseBody,
        };
    }
}
exports.GetAccountMappingResponse = GetAccountMappingResponse;
class GetApplyInviteInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetApplyInviteInfoHeaders = GetApplyInviteInfoHeaders;
class GetApplyInviteInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptId: 'deptId',
            inviterUserId: 'inviterUserId',
        };
    }
    static types() {
        return {
            deptId: 'number',
            inviterUserId: 'string',
        };
    }
}
exports.GetApplyInviteInfoRequest = GetApplyInviteInfoRequest;
class GetApplyInviteInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            auditType: 'auditType',
            empApplyJoinDept: 'empApplyJoinDept',
            inviteSwitch: 'inviteSwitch',
            inviteUrl: 'inviteUrl',
            linkInvite: 'linkInvite',
            orgApplyCodeInvite: 'orgApplyCodeInvite',
            searchNameInvite: 'searchNameInvite',
        };
    }
    static types() {
        return {
            auditType: 'number',
            empApplyJoinDept: 'boolean',
            inviteSwitch: 'boolean',
            inviteUrl: 'string',
            linkInvite: 'boolean',
            orgApplyCodeInvite: 'boolean',
            searchNameInvite: 'boolean',
        };
    }
}
exports.GetApplyInviteInfoResponseBody = GetApplyInviteInfoResponseBody;
class GetApplyInviteInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetApplyInviteInfoResponseBody,
        };
    }
}
exports.GetApplyInviteInfoResponse = GetApplyInviteInfoResponse;
class GetBranchAuthDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetBranchAuthDataHeaders = GetBranchAuthDataHeaders;
class GetBranchAuthDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
            branchCorpId: 'branchCorpId',
            code: 'code',
        };
    }
    static types() {
        return {
            body: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            branchCorpId: 'string',
            code: 'string',
        };
    }
}
exports.GetBranchAuthDataRequest = GetBranchAuthDataRequest;
class GetBranchAuthDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetBranchAuthDataResponseBodyResult },
        };
    }
}
exports.GetBranchAuthDataResponseBody = GetBranchAuthDataResponseBody;
class GetBranchAuthDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetBranchAuthDataResponseBody,
        };
    }
}
exports.GetBranchAuthDataResponse = GetBranchAuthDataResponse;
class GetCardInUserHolderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCardInUserHolderHeaders = GetCardInUserHolderHeaders;
class GetCardInUserHolderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            cardAcceptStatus: 'cardAcceptStatus',
            cardAcceptTimeLong: 'cardAcceptTimeLong',
            cardId: 'cardId',
            cardSource: 'cardSource',
            extension: 'extension',
            industryName: 'industryName',
            introduce: 'introduce',
            name: 'name',
            orgName: 'orgName',
            templateId: 'templateId',
            title: 'title',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            cardAcceptStatus: 'number',
            cardAcceptTimeLong: 'number',
            cardId: 'string',
            cardSource: 'number',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            industryName: 'string',
            introduce: 'string',
            name: 'string',
            orgName: 'string',
            templateId: 'string',
            title: 'string',
        };
    }
}
exports.GetCardInUserHolderResponseBody = GetCardInUserHolderResponseBody;
class GetCardInUserHolderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCardInUserHolderResponseBody,
        };
    }
}
exports.GetCardInUserHolderResponse = GetCardInUserHolderResponse;
class GetCardInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCardInfoHeaders = GetCardInfoHeaders;
class GetCardInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            adminRole: 'adminRole',
            avatarUrl: 'avatarUrl',
            cardId: 'cardId',
            extension: 'extension',
            industryName: 'industryName',
            introduce: 'introduce',
            name: 'name',
            orgName: 'orgName',
            settings: 'settings',
            templateId: 'templateId',
            title: 'title',
        };
    }
    static types() {
        return {
            adminRole: 'number',
            avatarUrl: 'string',
            cardId: 'string',
            extension: GetCardInfoResponseBodyExtension,
            industryName: 'string',
            introduce: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            name: 'string',
            orgName: 'string',
            settings: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            templateId: 'string',
            title: 'string',
        };
    }
}
exports.GetCardInfoResponseBody = GetCardInfoResponseBody;
class GetCardInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCardInfoResponseBody,
        };
    }
}
exports.GetCardInfoResponse = GetCardInfoResponse;
class GetContactHideBySceneSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetContactHideBySceneSettingHeaders = GetContactHideBySceneSettingHeaders;
class GetContactHideBySceneSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeTagIds: 'excludeTagIds',
            excludeUserIds: 'excludeUserIds',
            id: 'id',
            name: 'name',
            nodeListSceneConfig: 'nodeListSceneConfig',
            objectDeptIds: 'objectDeptIds',
            objectTagIds: 'objectTagIds',
            objectUserIds: 'objectUserIds',
            profileSceneConfig: 'profileSceneConfig',
            searchSceneConfig: 'searchSceneConfig',
        };
    }
    static types() {
        return {
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            excludeUserIds: { 'type': 'array', 'itemType': 'string' },
            id: 'number',
            name: 'string',
            nodeListSceneConfig: GetContactHideBySceneSettingResponseBodyNodeListSceneConfig,
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
            objectUserIds: { 'type': 'array', 'itemType': 'string' },
            profileSceneConfig: GetContactHideBySceneSettingResponseBodyProfileSceneConfig,
            searchSceneConfig: GetContactHideBySceneSettingResponseBodySearchSceneConfig,
        };
    }
}
exports.GetContactHideBySceneSettingResponseBody = GetContactHideBySceneSettingResponseBody;
class GetContactHideBySceneSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetContactHideBySceneSettingResponseBody,
        };
    }
}
exports.GetContactHideBySceneSettingResponse = GetContactHideBySceneSettingResponse;
class GetCooperateOrgInviteInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCooperateOrgInviteInfoHeaders = GetCooperateOrgInviteInfoHeaders;
class GetCooperateOrgInviteInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inviteUrl: 'inviteUrl',
        };
    }
    static types() {
        return {
            inviteUrl: 'string',
        };
    }
}
exports.GetCooperateOrgInviteInfoResponseBody = GetCooperateOrgInviteInfoResponseBody;
class GetCooperateOrgInviteInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCooperateOrgInviteInfoResponseBody,
        };
    }
}
exports.GetCooperateOrgInviteInfoResponse = GetCooperateOrgInviteInfoResponse;
class GetCorpCardStyleListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCorpCardStyleListHeaders = GetCorpCardStyleListHeaders;
class GetCorpCardStyleListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
        };
    }
}
exports.GetCorpCardStyleListResponseBody = GetCorpCardStyleListResponseBody;
class GetCorpCardStyleListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCorpCardStyleListResponseBody,
        };
    }
}
exports.GetCorpCardStyleListResponse = GetCorpCardStyleListResponse;
class GetDingIdByMigrationDingIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDingIdByMigrationDingIdHeaders = GetDingIdByMigrationDingIdHeaders;
class GetDingIdByMigrationDingIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            migrationDingId: 'migrationDingId',
        };
    }
    static types() {
        return {
            migrationDingId: 'string',
        };
    }
}
exports.GetDingIdByMigrationDingIdRequest = GetDingIdByMigrationDingIdRequest;
class GetDingIdByMigrationDingIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingId: 'dingId',
        };
    }
    static types() {
        return {
            dingId: 'string',
        };
    }
}
exports.GetDingIdByMigrationDingIdResponseBody = GetDingIdByMigrationDingIdResponseBody;
class GetDingIdByMigrationDingIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDingIdByMigrationDingIdResponseBody,
        };
    }
}
exports.GetDingIdByMigrationDingIdResponse = GetDingIdByMigrationDingIdResponse;
class GetEmpAttributeHideBySceneSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetEmpAttributeHideBySceneSettingHeaders = GetEmpAttributeHideBySceneSettingHeaders;
class GetEmpAttributeHideBySceneSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatSubtitleConfig: 'chatSubtitleConfig',
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeTagIds: 'excludeTagIds',
            excludeUserIds: 'excludeUserIds',
            hideFields: 'hideFields',
            id: 'id',
            name: 'name',
            objectDeptIds: 'objectDeptIds',
            objectTagIds: 'objectTagIds',
            objectUserIds: 'objectUserIds',
            profileSceneConfig: 'profileSceneConfig',
            searchSceneConfig: 'searchSceneConfig',
        };
    }
    static types() {
        return {
            chatSubtitleConfig: GetEmpAttributeHideBySceneSettingResponseBodyChatSubtitleConfig,
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            excludeUserIds: { 'type': 'array', 'itemType': 'string' },
            hideFields: { 'type': 'array', 'itemType': 'string' },
            id: 'number',
            name: 'string',
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
            objectUserIds: { 'type': 'array', 'itemType': 'string' },
            profileSceneConfig: GetEmpAttributeHideBySceneSettingResponseBodyProfileSceneConfig,
            searchSceneConfig: GetEmpAttributeHideBySceneSettingResponseBodySearchSceneConfig,
        };
    }
}
exports.GetEmpAttributeHideBySceneSettingResponseBody = GetEmpAttributeHideBySceneSettingResponseBody;
class GetEmpAttributeHideBySceneSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetEmpAttributeHideBySceneSettingResponseBody,
        };
    }
}
exports.GetEmpAttributeHideBySceneSettingResponse = GetEmpAttributeHideBySceneSettingResponse;
class GetLatestDingIndexHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetLatestDingIndexHeaders = GetLatestDingIndexHeaders;
class GetLatestDingIndexResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            idxCarbon: 'idxCarbon',
            idxEfficiency: 'idxEfficiency',
            idxMonthlyAvg: 'idxMonthlyAvg',
            idxTotal: 'idxTotal',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            idxCarbon: 'number',
            idxEfficiency: 'number',
            idxMonthlyAvg: 'number',
            idxTotal: 'number',
            statDate: 'string',
        };
    }
}
exports.GetLatestDingIndexResponseBody = GetLatestDingIndexResponseBody;
class GetLatestDingIndexResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetLatestDingIndexResponseBody,
        };
    }
}
exports.GetLatestDingIndexResponse = GetLatestDingIndexResponse;
class GetMigrationDingIdByDingIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetMigrationDingIdByDingIdHeaders = GetMigrationDingIdByDingIdHeaders;
class GetMigrationDingIdByDingIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dingId: 'dingId',
        };
    }
    static types() {
        return {
            dingId: 'string',
        };
    }
}
exports.GetMigrationDingIdByDingIdRequest = GetMigrationDingIdByDingIdRequest;
class GetMigrationDingIdByDingIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            migrationDingIdList: 'migrationDingIdList',
        };
    }
    static types() {
        return {
            migrationDingIdList: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.GetMigrationDingIdByDingIdResponseBody = GetMigrationDingIdByDingIdResponseBody;
class GetMigrationDingIdByDingIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMigrationDingIdByDingIdResponseBody,
        };
    }
}
exports.GetMigrationDingIdByDingIdResponse = GetMigrationDingIdByDingIdResponse;
class GetMigrationUnionIdByUnionIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetMigrationUnionIdByUnionIdHeaders = GetMigrationUnionIdByUnionIdHeaders;
class GetMigrationUnionIdByUnionIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.GetMigrationUnionIdByUnionIdRequest = GetMigrationUnionIdByUnionIdRequest;
class GetMigrationUnionIdByUnionIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            migrationUnionIdList: 'migrationUnionIdList',
        };
    }
    static types() {
        return {
            migrationUnionIdList: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.GetMigrationUnionIdByUnionIdResponseBody = GetMigrationUnionIdByUnionIdResponseBody;
class GetMigrationUnionIdByUnionIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMigrationUnionIdByUnionIdResponseBody,
        };
    }
}
exports.GetMigrationUnionIdByUnionIdResponse = GetMigrationUnionIdByUnionIdResponse;
class GetOrgAuthInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOrgAuthInfoHeaders = GetOrgAuthInfoHeaders;
class GetOrgAuthInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            targetCorpId: 'targetCorpId',
        };
    }
    static types() {
        return {
            targetCorpId: 'string',
        };
    }
}
exports.GetOrgAuthInfoRequest = GetOrgAuthInfoRequest;
class GetOrgAuthInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authLevel: 'authLevel',
            legalPerson: 'legalPerson',
            licenseOrgName: 'licenseOrgName',
            licenseUrl: 'licenseUrl',
            orgName: 'orgName',
            organizationCode: 'organizationCode',
            registrationNum: 'registrationNum',
            unifiedSocialCredit: 'unifiedSocialCredit',
        };
    }
    static types() {
        return {
            authLevel: 'number',
            legalPerson: 'string',
            licenseOrgName: 'string',
            licenseUrl: 'string',
            orgName: 'string',
            organizationCode: 'string',
            registrationNum: 'string',
            unifiedSocialCredit: 'string',
        };
    }
}
exports.GetOrgAuthInfoResponseBody = GetOrgAuthInfoResponseBody;
class GetOrgAuthInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOrgAuthInfoResponseBody,
        };
    }
}
exports.GetOrgAuthInfoResponse = GetOrgAuthInfoResponse;
class GetTranslateFileJobResultHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTranslateFileJobResultHeaders = GetTranslateFileJobResultHeaders;
class GetTranslateFileJobResultRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobId: 'jobId',
        };
    }
    static types() {
        return {
            jobId: 'string',
        };
    }
}
exports.GetTranslateFileJobResultRequest = GetTranslateFileJobResultRequest;
class GetTranslateFileJobResultResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            status: 'status',
            url: 'url',
        };
    }
    static types() {
        return {
            status: 'string',
            url: 'string',
        };
    }
}
exports.GetTranslateFileJobResultResponseBody = GetTranslateFileJobResultResponseBody;
class GetTranslateFileJobResultResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTranslateFileJobResultResponseBody,
        };
    }
}
exports.GetTranslateFileJobResultResponse = GetTranslateFileJobResultResponse;
class GetUnionIdByMigrationUnionIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUnionIdByMigrationUnionIdHeaders = GetUnionIdByMigrationUnionIdHeaders;
class GetUnionIdByMigrationUnionIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            migrationUnionId: 'migrationUnionId',
        };
    }
    static types() {
        return {
            migrationUnionId: 'string',
        };
    }
}
exports.GetUnionIdByMigrationUnionIdRequest = GetUnionIdByMigrationUnionIdRequest;
class GetUnionIdByMigrationUnionIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.GetUnionIdByMigrationUnionIdResponseBody = GetUnionIdByMigrationUnionIdResponseBody;
class GetUnionIdByMigrationUnionIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUnionIdByMigrationUnionIdResponseBody,
        };
    }
}
exports.GetUnionIdByMigrationUnionIdResponse = GetUnionIdByMigrationUnionIdResponse;
class GetUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserHeaders = GetUserHeaders;
class GetUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            email: 'email',
            mobile: 'mobile',
            nick: 'nick',
            openId: 'openId',
            stateCode: 'stateCode',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            email: 'string',
            mobile: 'string',
            nick: 'string',
            openId: 'string',
            stateCode: 'string',
            unionId: 'string',
        };
    }
}
exports.GetUserResponseBody = GetUserResponseBody;
class GetUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserResponseBody,
        };
    }
}
exports.GetUserResponse = GetUserResponse;
class GetUserCardHolderListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserCardHolderListHeaders = GetUserCardHolderListHeaders;
class GetUserCardHolderListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.GetUserCardHolderListRequest = GetUserCardHolderListRequest;
class GetUserCardHolderListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': GetUserCardHolderListResponseBodyList },
            nextToken: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetUserCardHolderListResponseBody = GetUserCardHolderListResponseBody;
class GetUserCardHolderListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserCardHolderListResponseBody,
        };
    }
}
exports.GetUserCardHolderListResponse = GetUserCardHolderListResponse;
class IsFriendHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IsFriendHeaders = IsFriendHeaders;
class IsFriendRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            mobileNo: 'mobileNo',
            userId: 'userId',
        };
    }
    static types() {
        return {
            mobileNo: 'string',
            userId: 'string',
        };
    }
}
exports.IsFriendRequest = IsFriendRequest;
class IsFriendResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isFriend: 'isFriend',
        };
    }
    static types() {
        return {
            isFriend: 'boolean',
        };
    }
}
exports.IsFriendResponseBody = IsFriendResponseBody;
class IsFriendResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IsFriendResponseBody,
        };
    }
}
exports.IsFriendResponse = IsFriendResponse;
class IsvCardEventPushHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.IsvCardEventPushHeaders = IsvCardEventPushHeaders;
class IsvCardEventPushRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            eventParams: 'eventParams',
            eventType: 'eventType',
            isvCardId: 'isvCardId',
            isvToken: 'isvToken',
            isvUid: 'isvUid',
        };
    }
    static types() {
        return {
            eventParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            eventType: 'string',
            isvCardId: 'string',
            isvToken: 'string',
            isvUid: 'string',
        };
    }
}
exports.IsvCardEventPushRequest = IsvCardEventPushRequest;
class IsvCardEventPushResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.IsvCardEventPushResponseBody = IsvCardEventPushResponseBody;
class IsvCardEventPushResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: IsvCardEventPushResponseBody,
        };
    }
}
exports.IsvCardEventPushResponse = IsvCardEventPushResponse;
class ListBasicRoleInPageHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListBasicRoleInPageHeaders = ListBasicRoleInPageHeaders;
class ListBasicRoleInPageRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            agentId: 'string',
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.ListBasicRoleInPageRequest = ListBasicRoleInPageRequest;
class ListBasicRoleInPageResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': ListBasicRoleInPageResponseBodyList },
            nextToken: 'number',
        };
    }
}
exports.ListBasicRoleInPageResponseBody = ListBasicRoleInPageResponseBody;
class ListBasicRoleInPageResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListBasicRoleInPageResponseBody,
        };
    }
}
exports.ListBasicRoleInPageResponse = ListBasicRoleInPageResponse;
class ListContactHideSettingsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListContactHideSettingsHeaders = ListContactHideSettingsHeaders;
class ListContactHideSettingsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.ListContactHideSettingsRequest = ListContactHideSettingsRequest;
class ListContactHideSettingsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': ListContactHideSettingsResponseBodyList },
            nextToken: 'number',
        };
    }
}
exports.ListContactHideSettingsResponseBody = ListContactHideSettingsResponseBody;
class ListContactHideSettingsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListContactHideSettingsResponseBody,
        };
    }
}
exports.ListContactHideSettingsResponse = ListContactHideSettingsResponse;
class ListContactRestrictSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListContactRestrictSettingHeaders = ListContactRestrictSettingHeaders;
class ListContactRestrictSettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.ListContactRestrictSettingRequest = ListContactRestrictSettingRequest;
class ListContactRestrictSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': ListContactRestrictSettingResponseBodyList },
            nextToken: 'number',
        };
    }
}
exports.ListContactRestrictSettingResponseBody = ListContactRestrictSettingResponseBody;
class ListContactRestrictSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListContactRestrictSettingResponseBody,
        };
    }
}
exports.ListContactRestrictSettingResponse = ListContactRestrictSettingResponse;
class ListEmpAttributeVisibilityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListEmpAttributeVisibilityHeaders = ListEmpAttributeVisibilityHeaders;
class ListEmpAttributeVisibilityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.ListEmpAttributeVisibilityRequest = ListEmpAttributeVisibilityRequest;
class ListEmpAttributeVisibilityResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextCursor: 'nextCursor',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': ListEmpAttributeVisibilityResponseBodyList },
            nextCursor: 'number',
        };
    }
}
exports.ListEmpAttributeVisibilityResponseBody = ListEmpAttributeVisibilityResponseBody;
class ListEmpAttributeVisibilityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListEmpAttributeVisibilityResponseBody,
        };
    }
}
exports.ListEmpAttributeVisibilityResponse = ListEmpAttributeVisibilityResponse;
class ListEmpLeaveRecordsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListEmpLeaveRecordsHeaders = ListEmpLeaveRecordsHeaders;
class ListEmpLeaveRecordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'string',
            maxResults: 'number',
            nextToken: 'string',
            startTime: 'string',
        };
    }
}
exports.ListEmpLeaveRecordsRequest = ListEmpLeaveRecordsRequest;
class ListEmpLeaveRecordsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            records: 'records',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            records: { 'type': 'array', 'itemType': ListEmpLeaveRecordsResponseBodyRecords },
        };
    }
}
exports.ListEmpLeaveRecordsResponseBody = ListEmpLeaveRecordsResponseBody;
class ListEmpLeaveRecordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListEmpLeaveRecordsResponseBody,
        };
    }
}
exports.ListEmpLeaveRecordsResponse = ListEmpLeaveRecordsResponse;
class ListManagementGroupsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListManagementGroupsHeaders = ListManagementGroupsHeaders;
class ListManagementGroupsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
        };
    }
}
exports.ListManagementGroupsRequest = ListManagementGroupsRequest;
class ListManagementGroupsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groups: 'groups',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            groups: { 'type': 'array', 'itemType': ListManagementGroupsResponseBodyGroups },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
}
exports.ListManagementGroupsResponseBody = ListManagementGroupsResponseBody;
class ListManagementGroupsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListManagementGroupsResponseBody,
        };
    }
}
exports.ListManagementGroupsResponse = ListManagementGroupsResponse;
class ListOwnedOrgByStaffIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListOwnedOrgByStaffIdHeaders = ListOwnedOrgByStaffIdHeaders;
class ListOwnedOrgByStaffIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.ListOwnedOrgByStaffIdRequest = ListOwnedOrgByStaffIdRequest;
class ListOwnedOrgByStaffIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            orgList: 'orgList',
        };
    }
    static types() {
        return {
            orgList: { 'type': 'array', 'itemType': ListOwnedOrgByStaffIdResponseBodyOrgList },
        };
    }
}
exports.ListOwnedOrgByStaffIdResponseBody = ListOwnedOrgByStaffIdResponseBody;
class ListOwnedOrgByStaffIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListOwnedOrgByStaffIdResponseBody,
        };
    }
}
exports.ListOwnedOrgByStaffIdResponse = ListOwnedOrgByStaffIdResponse;
class ListSeniorSettingsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListSeniorSettingsHeaders = ListSeniorSettingsHeaders;
class ListSeniorSettingsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            seniorStaffId: 'seniorStaffId',
        };
    }
    static types() {
        return {
            seniorStaffId: 'string',
        };
    }
}
exports.ListSeniorSettingsRequest = ListSeniorSettingsRequest;
class ListSeniorSettingsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            protectScenes: 'protectScenes',
            seniorStaffId: 'seniorStaffId',
            seniorWhiteList: 'seniorWhiteList',
        };
    }
    static types() {
        return {
            protectScenes: { 'type': 'array', 'itemType': 'string' },
            seniorStaffId: 'string',
            seniorWhiteList: { 'type': 'array', 'itemType': ListSeniorSettingsResponseBodySeniorWhiteList },
        };
    }
}
exports.ListSeniorSettingsResponseBody = ListSeniorSettingsResponseBody;
class ListSeniorSettingsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListSeniorSettingsResponseBody,
        };
    }
}
exports.ListSeniorSettingsResponse = ListSeniorSettingsResponse;
class MultiOrgPermissionGrantHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.MultiOrgPermissionGrantHeaders = MultiOrgPermissionGrantHeaders;
class MultiOrgPermissionGrantRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            grantDeptIdList: 'grantDeptIdList',
            joinCorpId: 'joinCorpId',
        };
    }
    static types() {
        return {
            grantDeptIdList: { 'type': 'array', 'itemType': 'number' },
            joinCorpId: 'string',
        };
    }
}
exports.MultiOrgPermissionGrantRequest = MultiOrgPermissionGrantRequest;
class MultiOrgPermissionGrantResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.MultiOrgPermissionGrantResponse = MultiOrgPermissionGrantResponse;
class QueryCardVisitorStatisticDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCardVisitorStatisticDataHeaders = QueryCardVisitorStatisticDataHeaders;
class QueryCardVisitorStatisticDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            unionId: 'string',
        };
    }
}
exports.QueryCardVisitorStatisticDataRequest = QueryCardVisitorStatisticDataRequest;
class QueryCardVisitorStatisticDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardSendCnt: 'cardSendCnt',
            todayVisitAddCnt: 'todayVisitAddCnt',
            todayVisitCnt: 'todayVisitCnt',
            totalVisitAddCnt: 'totalVisitAddCnt',
            totalVisitCnt: 'totalVisitCnt',
            wechatTodayVisitAddCnt: 'wechatTodayVisitAddCnt',
            wechatTodayVisitCnt: 'wechatTodayVisitCnt',
            wechatTotalVisitAddCnt: 'wechatTotalVisitAddCnt',
            wechatTotalVisitCnt: 'wechatTotalVisitCnt',
        };
    }
    static types() {
        return {
            cardSendCnt: 'number',
            todayVisitAddCnt: 'number',
            todayVisitCnt: 'number',
            totalVisitAddCnt: 'number',
            totalVisitCnt: 'number',
            wechatTodayVisitAddCnt: 'number',
            wechatTodayVisitCnt: 'number',
            wechatTotalVisitAddCnt: 'number',
            wechatTotalVisitCnt: 'number',
        };
    }
}
exports.QueryCardVisitorStatisticDataResponseBody = QueryCardVisitorStatisticDataResponseBody;
class QueryCardVisitorStatisticDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCardVisitorStatisticDataResponseBody,
        };
    }
}
exports.QueryCardVisitorStatisticDataResponse = QueryCardVisitorStatisticDataResponse;
class QueryCorpStatisticDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCorpStatisticDataHeaders = QueryCorpStatisticDataHeaders;
class QueryCorpStatisticDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
            templateIds: 'templateIds',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            endTime: 'string',
            startTime: 'string',
            templateIds: { 'type': 'array', 'itemType': 'string' },
            unionId: 'string',
        };
    }
}
exports.QueryCorpStatisticDataRequest = QueryCorpStatisticDataRequest;
class QueryCorpStatisticDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': QueryCorpStatisticDataResponseBodyResult },
        };
    }
}
exports.QueryCorpStatisticDataResponseBody = QueryCorpStatisticDataResponseBody;
class QueryCorpStatisticDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCorpStatisticDataResponseBody,
        };
    }
}
exports.QueryCorpStatisticDataResponse = QueryCorpStatisticDataResponse;
class QueryCorpUserStatisticHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryCorpUserStatisticHeaders = QueryCorpUserStatisticHeaders;
class QueryCorpUserStatisticRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            endTime: 'endTime',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            startTime: 'startTime',
            templateIds: 'templateIds',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            endTime: 'string',
            maxResults: 'number',
            nextToken: 'number',
            startTime: 'string',
            templateIds: { 'type': 'array', 'itemType': 'string' },
            unionId: 'string',
        };
    }
}
exports.QueryCorpUserStatisticRequest = QueryCorpUserStatisticRequest;
class QueryCorpUserStatisticResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            nextToken: 'nextToken',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCorpUserStatisticResponseBodyList },
            nextToken: 'number',
            totalCount: 'number',
        };
    }
}
exports.QueryCorpUserStatisticResponseBody = QueryCorpUserStatisticResponseBody;
class QueryCorpUserStatisticResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCorpUserStatisticResponseBody,
        };
    }
}
exports.QueryCorpUserStatisticResponse = QueryCorpUserStatisticResponse;
class QueryResourceManagementMembersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryResourceManagementMembersHeaders = QueryResourceManagementMembersHeaders;
class QueryResourceManagementMembersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            members: 'members',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': QueryResourceManagementMembersResponseBodyMembers },
        };
    }
}
exports.QueryResourceManagementMembersResponseBody = QueryResourceManagementMembersResponseBody;
class QueryResourceManagementMembersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryResourceManagementMembersResponseBody,
        };
    }
}
exports.QueryResourceManagementMembersResponse = QueryResourceManagementMembersResponse;
class QueryStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryStatusHeaders = QueryStatusHeaders;
class QueryStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.QueryStatusRequest = QueryStatusRequest;
class QueryStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            disable: 'disable',
        };
    }
    static types() {
        return {
            disable: 'boolean',
        };
    }
}
exports.QueryStatusResponseBody = QueryStatusResponseBody;
class QueryStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryStatusResponseBody,
        };
    }
}
exports.QueryStatusResponse = QueryStatusResponse;
class QueryUserManagementResourcesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryUserManagementResourcesHeaders = QueryUserManagementResourcesHeaders;
class QueryUserManagementResourcesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resourceIds: 'resourceIds',
        };
    }
    static types() {
        return {
            resourceIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryUserManagementResourcesResponseBody = QueryUserManagementResourcesResponseBody;
class QueryUserManagementResourcesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserManagementResourcesResponseBody,
        };
    }
}
exports.QueryUserManagementResourcesResponse = QueryUserManagementResourcesResponse;
class QueryVerifyResultHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryVerifyResultHeaders = QueryVerifyResultHeaders;
class QueryVerifyResultRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            verifyId: 'verifyId',
        };
    }
    static types() {
        return {
            verifyId: 'string',
        };
    }
}
exports.QueryVerifyResultRequest = QueryVerifyResultRequest;
class QueryVerifyResultResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            factorCode: 'factorCode',
            factorDesc: 'factorDesc',
            resultCode: 'resultCode',
            resultDesc: 'resultDesc',
            state: 'state',
            userId: 'userId',
            verifyTimestamp: 'verifyTimestamp',
        };
    }
    static types() {
        return {
            corpId: 'string',
            factorCode: 'string',
            factorDesc: 'string',
            resultCode: 'string',
            resultDesc: 'string',
            state: 'string',
            userId: 'string',
            verifyTimestamp: 'number',
        };
    }
}
exports.QueryVerifyResultResponseBody = QueryVerifyResultResponseBody;
class QueryVerifyResultResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryVerifyResultResponseBody,
        };
    }
}
exports.QueryVerifyResultResponse = QueryVerifyResultResponse;
class SearchDepartmentHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchDepartmentHeaders = SearchDepartmentHeaders;
class SearchDepartmentRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            offset: 'offset',
            queryWord: 'queryWord',
            size: 'size',
        };
    }
    static types() {
        return {
            offset: 'number',
            queryWord: 'string',
            size: 'number',
        };
    }
}
exports.SearchDepartmentRequest = SearchDepartmentRequest;
class SearchDepartmentResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': 'number' },
            totalCount: 'number',
        };
    }
}
exports.SearchDepartmentResponseBody = SearchDepartmentResponseBody;
class SearchDepartmentResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchDepartmentResponseBody,
        };
    }
}
exports.SearchDepartmentResponse = SearchDepartmentResponse;
class SearchUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchUserHeaders = SearchUserHeaders;
class SearchUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fullMatchField: 'fullMatchField',
            offset: 'offset',
            queryWord: 'queryWord',
            size: 'size',
        };
    }
    static types() {
        return {
            fullMatchField: 'number',
            offset: 'number',
            queryWord: 'string',
            size: 'number',
        };
    }
}
exports.SearchUserRequest = SearchUserRequest;
class SearchUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': 'string' },
            totalCount: 'number',
        };
    }
}
exports.SearchUserResponseBody = SearchUserResponseBody;
class SearchUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchUserResponseBody,
        };
    }
}
exports.SearchUserResponse = SearchUserResponse;
class SeparateBranchOrgHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SeparateBranchOrgHeaders = SeparateBranchOrgHeaders;
class SeparateBranchOrgRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attachDeptId: 'attachDeptId',
        };
    }
    static types() {
        return {
            attachDeptId: 'number',
        };
    }
}
exports.SeparateBranchOrgRequest = SeparateBranchOrgRequest;
class SeparateBranchOrgResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.SeparateBranchOrgResponseBody = SeparateBranchOrgResponseBody;
class SeparateBranchOrgResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SeparateBranchOrgResponseBody,
        };
    }
}
exports.SeparateBranchOrgResponse = SeparateBranchOrgResponse;
class SetDisableHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetDisableHeaders = SetDisableHeaders;
class SetDisableRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            reason: 'reason',
            userId: 'userId',
        };
    }
    static types() {
        return {
            reason: 'string',
            userId: 'string',
        };
    }
}
exports.SetDisableRequest = SetDisableRequest;
class SetDisableResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.SetDisableResponseBody = SetDisableResponseBody;
class SetDisableResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetDisableResponseBody,
        };
    }
}
exports.SetDisableResponse = SetDisableResponse;
class SetEnableHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetEnableHeaders = SetEnableHeaders;
class SetEnableRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.SetEnableRequest = SetEnableRequest;
class SetEnableResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.SetEnableResponseBody = SetEnableResponseBody;
class SetEnableResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetEnableResponseBody,
        };
    }
}
exports.SetEnableResponse = SetEnableResponse;
class SignOutHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SignOutHeaders = SignOutHeaders;
class SignOutRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            reason: 'reason',
            userId: 'userId',
        };
    }
    static types() {
        return {
            reason: 'string',
            userId: 'string',
        };
    }
}
exports.SignOutRequest = SignOutRequest;
class SignOutResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.SignOutResponseBody = SignOutResponseBody;
class SignOutResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SignOutResponseBody,
        };
    }
}
exports.SignOutResponse = SignOutResponse;
class SortUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SortUserHeaders = SortUserHeaders;
class SortUserRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            sortType: 'sortType',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            sortType: 'number',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.SortUserRequest = SortUserRequest;
class SortUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.SortUserResponseBody = SortUserResponseBody;
class SortUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SortUserResponseBody,
        };
    }
}
exports.SortUserResponse = SortUserResponse;
class TransformToExclusiveAccountHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.TransformToExclusiveAccountHeaders = TransformToExclusiveAccountHeaders;
class TransformToExclusiveAccountRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            idpDingTalk: 'idpDingTalk',
            initPassword: 'initPassword',
            loginId: 'loginId',
            transformType: 'transformType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            idpDingTalk: 'boolean',
            initPassword: 'string',
            loginId: 'string',
            transformType: 'string',
            userId: 'string',
        };
    }
}
exports.TransformToExclusiveAccountRequest = TransformToExclusiveAccountRequest;
class TransformToExclusiveAccountResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.TransformToExclusiveAccountResponse = TransformToExclusiveAccountResponse;
class TranslateFileHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.TranslateFileHeaders = TranslateFileHeaders;
class TranslateFileRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            medias: 'medias',
            outputFileName: 'outputFileName',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            medias: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            outputFileName: 'string',
            unionId: 'string',
        };
    }
}
exports.TranslateFileRequest = TranslateFileRequest;
class TranslateFileResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            jobId: 'jobId',
        };
    }
    static types() {
        return {
            jobId: 'string',
        };
    }
}
exports.TranslateFileResponseBody = TranslateFileResponseBody;
class TranslateFileResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TranslateFileResponseBody,
        };
    }
}
exports.TranslateFileResponse = TranslateFileResponse;
class UniqueQueryUserCardHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UniqueQueryUserCardHeaders = UniqueQueryUserCardHeaders;
class UniqueQueryUserCardRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateId: 'templateId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            templateId: 'string',
            unionId: 'string',
        };
    }
}
exports.UniqueQueryUserCardRequest = UniqueQueryUserCardRequest;
class UniqueQueryUserCardResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            cardId: 'cardId',
            extension: 'extension',
            industryName: 'industryName',
            introduce: 'introduce',
            name: 'name',
            orgName: 'orgName',
            settings: 'settings',
            templateId: 'templateId',
            title: 'title',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            cardId: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            industryName: 'string',
            introduce: 'string',
            name: 'string',
            orgName: 'string',
            settings: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            templateId: 'string',
            title: 'string',
        };
    }
}
exports.UniqueQueryUserCardResponseBody = UniqueQueryUserCardResponseBody;
class UniqueQueryUserCardResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UniqueQueryUserCardResponseBody,
        };
    }
}
exports.UniqueQueryUserCardResponse = UniqueQueryUserCardResponse;
class UpdateBranchAttributesInCooperateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateBranchAttributesInCooperateHeaders = UpdateBranchAttributesInCooperateHeaders;
class UpdateBranchAttributesInCooperateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': UpdateBranchAttributesInCooperateRequestBody },
        };
    }
}
exports.UpdateBranchAttributesInCooperateRequest = UpdateBranchAttributesInCooperateRequest;
class UpdateBranchAttributesInCooperateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateBranchAttributesInCooperateResponse = UpdateBranchAttributesInCooperateResponse;
class UpdateBranchVisibleSettingInCooperateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateBranchVisibleSettingInCooperateHeaders = UpdateBranchVisibleSettingInCooperateHeaders;
class UpdateBranchVisibleSettingInCooperateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': UpdateBranchVisibleSettingInCooperateRequestBody },
        };
    }
}
exports.UpdateBranchVisibleSettingInCooperateRequest = UpdateBranchVisibleSettingInCooperateRequest;
class UpdateBranchVisibleSettingInCooperateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateBranchVisibleSettingInCooperateResponse = UpdateBranchVisibleSettingInCooperateResponse;
class UpdateContactHideBySceneSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateContactHideBySceneSettingHeaders = UpdateContactHideBySceneSettingHeaders;
class UpdateContactHideBySceneSettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeTagIds: 'excludeTagIds',
            excludeUserIds: 'excludeUserIds',
            name: 'name',
            nodeListSceneConfig: 'nodeListSceneConfig',
            objectDeptIds: 'objectDeptIds',
            objectTagIds: 'objectTagIds',
            objectUserIds: 'objectUserIds',
            profileSceneConfig: 'profileSceneConfig',
            searchSceneConfig: 'searchSceneConfig',
        };
    }
    static types() {
        return {
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            excludeUserIds: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            nodeListSceneConfig: UpdateContactHideBySceneSettingRequestNodeListSceneConfig,
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
            objectUserIds: { 'type': 'array', 'itemType': 'string' },
            profileSceneConfig: UpdateContactHideBySceneSettingRequestProfileSceneConfig,
            searchSceneConfig: UpdateContactHideBySceneSettingRequestSearchSceneConfig,
        };
    }
}
exports.UpdateContactHideBySceneSettingRequest = UpdateContactHideBySceneSettingRequest;
class UpdateContactHideBySceneSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateContactHideBySceneSettingResponseBody = UpdateContactHideBySceneSettingResponseBody;
class UpdateContactHideBySceneSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateContactHideBySceneSettingResponseBody,
        };
    }
}
exports.UpdateContactHideBySceneSettingResponse = UpdateContactHideBySceneSettingResponse;
class UpdateContactHideSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateContactHideSettingHeaders = UpdateContactHideSettingHeaders;
class UpdateContactHideSettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeStaffIds: 'excludeStaffIds',
            excludeTagIds: 'excludeTagIds',
            hideInSearch: 'hideInSearch',
            hideInUserProfile: 'hideInUserProfile',
            id: 'id',
            name: 'name',
            objectDeptIds: 'objectDeptIds',
            objectStaffIds: 'objectStaffIds',
            objectTagIds: 'objectTagIds',
        };
    }
    static types() {
        return {
            active: 'boolean',
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeStaffIds: { 'type': 'array', 'itemType': 'string' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            hideInSearch: 'boolean',
            hideInUserProfile: 'boolean',
            id: 'number',
            name: 'string',
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectStaffIds: { 'type': 'array', 'itemType': 'string' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.UpdateContactHideSettingRequest = UpdateContactHideSettingRequest;
class UpdateContactHideSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
}
exports.UpdateContactHideSettingResponseBody = UpdateContactHideSettingResponseBody;
class UpdateContactHideSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateContactHideSettingResponseBody,
        };
    }
}
exports.UpdateContactHideSettingResponse = UpdateContactHideSettingResponse;
class UpdateContactRestrictSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateContactRestrictSettingHeaders = UpdateContactRestrictSettingHeaders;
class UpdateContactRestrictSettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeTagIds: 'excludeTagIds',
            excludeUserIds: 'excludeUserIds',
            id: 'id',
            name: 'name',
            restrictInSearch: 'restrictInSearch',
            restrictInUserProfile: 'restrictInUserProfile',
            subjectDeptIds: 'subjectDeptIds',
            subjectTagIds: 'subjectTagIds',
            subjectUserIds: 'subjectUserIds',
            type: 'type',
        };
    }
    static types() {
        return {
            active: 'boolean',
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            excludeUserIds: { 'type': 'array', 'itemType': 'string' },
            id: 'number',
            name: 'string',
            restrictInSearch: 'boolean',
            restrictInUserProfile: 'boolean',
            subjectDeptIds: { 'type': 'array', 'itemType': 'number' },
            subjectTagIds: { 'type': 'array', 'itemType': 'number' },
            subjectUserIds: { 'type': 'array', 'itemType': 'string' },
            type: 'string',
        };
    }
}
exports.UpdateContactRestrictSettingRequest = UpdateContactRestrictSettingRequest;
class UpdateContactRestrictSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
}
exports.UpdateContactRestrictSettingResponseBody = UpdateContactRestrictSettingResponseBody;
class UpdateContactRestrictSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateContactRestrictSettingResponseBody,
        };
    }
}
exports.UpdateContactRestrictSettingResponse = UpdateContactRestrictSettingResponse;
class UpdateDeptSettngTailFirstHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateDeptSettngTailFirstHeaders = UpdateDeptSettngTailFirstHeaders;
class UpdateDeptSettngTailFirstRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enable: 'enable',
        };
    }
    static types() {
        return {
            enable: 'boolean',
        };
    }
}
exports.UpdateDeptSettngTailFirstRequest = UpdateDeptSettngTailFirstRequest;
class UpdateDeptSettngTailFirstResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateDeptSettngTailFirstResponse = UpdateDeptSettngTailFirstResponse;
class UpdateEmpAttrbuteVisibilitySettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateEmpAttrbuteVisibilitySettingHeaders = UpdateEmpAttrbuteVisibilitySettingHeaders;
class UpdateEmpAttrbuteVisibilitySettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeStaffIds: 'excludeStaffIds',
            excludeTagIds: 'excludeTagIds',
            hideFields: 'hideFields',
            id: 'id',
            name: 'name',
            objectDeptIds: 'objectDeptIds',
            objectStaffIds: 'objectStaffIds',
            objectTagIds: 'objectTagIds',
        };
    }
    static types() {
        return {
            active: 'boolean',
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeStaffIds: { 'type': 'array', 'itemType': 'string' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            hideFields: { 'type': 'array', 'itemType': 'string' },
            id: 'number',
            name: 'string',
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectStaffIds: { 'type': 'array', 'itemType': 'string' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.UpdateEmpAttrbuteVisibilitySettingRequest = UpdateEmpAttrbuteVisibilitySettingRequest;
class UpdateEmpAttrbuteVisibilitySettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
}
exports.UpdateEmpAttrbuteVisibilitySettingResponseBody = UpdateEmpAttrbuteVisibilitySettingResponseBody;
class UpdateEmpAttrbuteVisibilitySettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateEmpAttrbuteVisibilitySettingResponseBody,
        };
    }
}
exports.UpdateEmpAttrbuteVisibilitySettingResponse = UpdateEmpAttrbuteVisibilitySettingResponse;
class UpdateEmpAttributeHideBySceneSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateEmpAttributeHideBySceneSettingHeaders = UpdateEmpAttributeHideBySceneSettingHeaders;
class UpdateEmpAttributeHideBySceneSettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            chatSubtitleConfig: 'chatSubtitleConfig',
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeTagIds: 'excludeTagIds',
            excludeUserIds: 'excludeUserIds',
            hideFields: 'hideFields',
            name: 'name',
            objectDeptIds: 'objectDeptIds',
            objectTagIds: 'objectTagIds',
            objectUserIds: 'objectUserIds',
            profileSceneConfig: 'profileSceneConfig',
            searchSceneConfig: 'searchSceneConfig',
        };
    }
    static types() {
        return {
            chatSubtitleConfig: UpdateEmpAttributeHideBySceneSettingRequestChatSubtitleConfig,
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            excludeUserIds: { 'type': 'array', 'itemType': 'string' },
            hideFields: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
            objectUserIds: { 'type': 'array', 'itemType': 'string' },
            profileSceneConfig: UpdateEmpAttributeHideBySceneSettingRequestProfileSceneConfig,
            searchSceneConfig: UpdateEmpAttributeHideBySceneSettingRequestSearchSceneConfig,
        };
    }
}
exports.UpdateEmpAttributeHideBySceneSettingRequest = UpdateEmpAttributeHideBySceneSettingRequest;
class UpdateEmpAttributeHideBySceneSettingResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
}
exports.UpdateEmpAttributeHideBySceneSettingResponseBody = UpdateEmpAttributeHideBySceneSettingResponseBody;
class UpdateEmpAttributeHideBySceneSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateEmpAttributeHideBySceneSettingResponseBody,
        };
    }
}
exports.UpdateEmpAttributeHideBySceneSettingResponse = UpdateEmpAttributeHideBySceneSettingResponse;
class UpdateManagementGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateManagementGroupHeaders = UpdateManagementGroupHeaders;
class UpdateManagementGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupName: 'groupName',
            members: 'members',
            resourceIds: 'resourceIds',
            scope: 'scope',
        };
    }
    static types() {
        return {
            groupName: 'string',
            members: { 'type': 'array', 'itemType': UpdateManagementGroupRequestMembers },
            resourceIds: { 'type': 'array', 'itemType': 'string' },
            scope: UpdateManagementGroupRequestScope,
        };
    }
}
exports.UpdateManagementGroupRequest = UpdateManagementGroupRequest;
class UpdateManagementGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateManagementGroupResponse = UpdateManagementGroupResponse;
class UpdateSeniorSettingHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateSeniorSettingHeaders = UpdateSeniorSettingHeaders;
class UpdateSeniorSettingRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            open: 'open',
            permitDeptIds: 'permitDeptIds',
            permitStaffIds: 'permitStaffIds',
            permitTagIds: 'permitTagIds',
            protectScenes: 'protectScenes',
            seniorStaffId: 'seniorStaffId',
        };
    }
    static types() {
        return {
            open: 'boolean',
            permitDeptIds: { 'type': 'array', 'itemType': 'number' },
            permitStaffIds: { 'type': 'array', 'itemType': 'string' },
            permitTagIds: { 'type': 'array', 'itemType': 'number' },
            protectScenes: { 'type': 'array', 'itemType': 'string' },
            seniorStaffId: 'string',
        };
    }
}
exports.UpdateSeniorSettingRequest = UpdateSeniorSettingRequest;
class UpdateSeniorSettingResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateSeniorSettingResponse = UpdateSeniorSettingResponse;
class UpdateUserOwnnessHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateUserOwnnessHeaders = UpdateUserOwnnessHeaders;
class UpdateUserOwnnessRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deletedFlag: 'deletedFlag',
            endTime: 'endTime',
            id: 'id',
            ownenssType: 'ownenssType',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            deletedFlag: 'number',
            endTime: 'number',
            id: 'number',
            ownenssType: 'number',
            startTime: 'number',
        };
    }
}
exports.UpdateUserOwnnessRequest = UpdateUserOwnnessRequest;
class UpdateUserOwnnessResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.UpdateUserOwnnessResponseBody = UpdateUserOwnnessResponseBody;
class UpdateUserOwnnessResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateUserOwnnessResponseBody,
        };
    }
}
exports.UpdateUserOwnnessResponse = UpdateUserOwnnessResponse;
class AddContactHideBySceneSettingRequestNodeListSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            deptObjectIncludeEmp: 'deptObjectIncludeEmp',
        };
    }
    static types() {
        return {
            active: 'boolean',
            deptObjectIncludeEmp: 'boolean',
        };
    }
}
exports.AddContactHideBySceneSettingRequestNodeListSceneConfig = AddContactHideBySceneSettingRequestNodeListSceneConfig;
class AddContactHideBySceneSettingRequestProfileSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.AddContactHideBySceneSettingRequestProfileSceneConfig = AddContactHideBySceneSettingRequestProfileSceneConfig;
class AddContactHideBySceneSettingRequestSearchSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            deptObjectIncludeEmp: 'deptObjectIncludeEmp',
        };
    }
    static types() {
        return {
            active: 'boolean',
            deptObjectIncludeEmp: 'boolean',
        };
    }
}
exports.AddContactHideBySceneSettingRequestSearchSceneConfig = AddContactHideBySceneSettingRequestSearchSceneConfig;
class AddEmpAttributeHideBySceneSettingRequestChatSubtitleConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.AddEmpAttributeHideBySceneSettingRequestChatSubtitleConfig = AddEmpAttributeHideBySceneSettingRequestChatSubtitleConfig;
class AddEmpAttributeHideBySceneSettingRequestProfileSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.AddEmpAttributeHideBySceneSettingRequestProfileSceneConfig = AddEmpAttributeHideBySceneSettingRequestProfileSceneConfig;
class AddEmpAttributeHideBySceneSettingRequestSearchSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.AddEmpAttributeHideBySceneSettingRequestSearchSceneConfig = AddEmpAttributeHideBySceneSettingRequestSearchSceneConfig;
class BatchApproveUnionApplyRequestBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            branchCorpId: 'branchCorpId',
            linkDeptId: 'linkDeptId',
            unionRootName: 'unionRootName',
        };
    }
    static types() {
        return {
            branchCorpId: 'string',
            linkDeptId: 'number',
            unionRootName: 'string',
        };
    }
}
exports.BatchApproveUnionApplyRequestBody = BatchApproveUnionApplyRequestBody;
class CreateManagementGroupRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
        };
    }
}
exports.CreateManagementGroupRequestMembers = CreateManagementGroupRequestMembers;
class CreateManagementGroupRequestScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
            scopeType: 'scopeType',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            scopeType: 'number',
        };
    }
}
exports.CreateManagementGroupRequestScope = CreateManagementGroupRequestScope;
class CreateSecondaryManagementGroupRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
        };
    }
}
exports.CreateSecondaryManagementGroupRequestMembers = CreateSecondaryManagementGroupRequestMembers;
class CreateSecondaryManagementGroupRequestScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
            scopeType: 'scopeType',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            scopeType: 'number',
        };
    }
}
exports.CreateSecondaryManagementGroupRequestScope = CreateSecondaryManagementGroupRequestScope;
class GetAccountMappingResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            domain: 'domain',
            extension: 'extension',
            outId: 'outId',
            outTenantId: 'outTenantId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            domain: 'string',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            outId: 'string',
            outTenantId: 'string',
            userId: 'string',
        };
    }
}
exports.GetAccountMappingResponseBodyResult = GetAccountMappingResponseBodyResult;
class GetBranchAuthDataResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fieldCode: 'fieldCode',
            fieldName: 'fieldName',
            fieldValue: 'fieldValue',
        };
    }
    static types() {
        return {
            fieldCode: 'string',
            fieldName: 'string',
            fieldValue: 'string',
        };
    }
}
exports.GetBranchAuthDataResponseBodyResult = GetBranchAuthDataResponseBodyResult;
class GetCardInfoResponseBodyExtensionCardContactInfoAddressArea extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            region: 'region',
            regionFullName: 'regionFullName',
        };
    }
    static types() {
        return {
            region: 'string',
            regionFullName: 'string',
        };
    }
}
exports.GetCardInfoResponseBodyExtensionCardContactInfoAddressArea = GetCardInfoResponseBodyExtensionCardContactInfoAddressArea;
class GetCardInfoResponseBodyExtensionCardContactInfoAddress extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            area: 'area',
            detail: 'detail',
        };
    }
    static types() {
        return {
            area: GetCardInfoResponseBodyExtensionCardContactInfoAddressArea,
            detail: 'string',
        };
    }
}
exports.GetCardInfoResponseBodyExtensionCardContactInfoAddress = GetCardInfoResponseBodyExtensionCardContactInfoAddress;
class GetCardInfoResponseBodyExtensionCardContactInfoEmail extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
        };
    }
}
exports.GetCardInfoResponseBodyExtensionCardContactInfoEmail = GetCardInfoResponseBodyExtensionCardContactInfoEmail;
class GetCardInfoResponseBodyExtensionCardContactInfoLink extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
        };
    }
}
exports.GetCardInfoResponseBodyExtensionCardContactInfoLink = GetCardInfoResponseBodyExtensionCardContactInfoLink;
class GetCardInfoResponseBodyExtensionCardContactInfoTelephone extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
        };
    }
}
exports.GetCardInfoResponseBodyExtensionCardContactInfoTelephone = GetCardInfoResponseBodyExtensionCardContactInfoTelephone;
class GetCardInfoResponseBodyExtensionCardContactInfoWorkPhone extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            label: 'label',
            value: 'value',
        };
    }
    static types() {
        return {
            label: 'string',
            value: 'string',
        };
    }
}
exports.GetCardInfoResponseBodyExtensionCardContactInfoWorkPhone = GetCardInfoResponseBodyExtensionCardContactInfoWorkPhone;
class GetCardInfoResponseBodyExtensionCardContactInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            address: 'address',
            email: 'email',
            link: 'link',
            telephone: 'telephone',
            workPhone: 'workPhone',
        };
    }
    static types() {
        return {
            address: { 'type': 'array', 'itemType': GetCardInfoResponseBodyExtensionCardContactInfoAddress },
            email: { 'type': 'array', 'itemType': GetCardInfoResponseBodyExtensionCardContactInfoEmail },
            link: { 'type': 'array', 'itemType': GetCardInfoResponseBodyExtensionCardContactInfoLink },
            telephone: { 'type': 'array', 'itemType': GetCardInfoResponseBodyExtensionCardContactInfoTelephone },
            workPhone: { 'type': 'array', 'itemType': GetCardInfoResponseBodyExtensionCardContactInfoWorkPhone },
        };
    }
}
exports.GetCardInfoResponseBodyExtensionCardContactInfo = GetCardInfoResponseBodyExtensionCardContactInfo;
class GetCardInfoResponseBodyExtension extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardContactInfo: 'cardContactInfo',
            corpId: 'corpId',
            department: 'department',
            orgAuthed: 'orgAuthed',
            orgLogo: 'orgLogo',
            originCardUrl: 'originCardUrl',
            shareContent: 'shareContent',
            thumbnailUrl: 'thumbnailUrl',
            videoFileName: 'videoFileName',
            videoTitle: 'videoTitle',
            videoUrl: 'videoUrl',
        };
    }
    static types() {
        return {
            cardContactInfo: GetCardInfoResponseBodyExtensionCardContactInfo,
            corpId: 'string',
            department: 'string',
            orgAuthed: 'boolean',
            orgLogo: 'string',
            originCardUrl: 'string',
            shareContent: 'string',
            thumbnailUrl: 'string',
            videoFileName: 'string',
            videoTitle: 'string',
            videoUrl: 'string',
        };
    }
}
exports.GetCardInfoResponseBodyExtension = GetCardInfoResponseBodyExtension;
class GetContactHideBySceneSettingResponseBodyNodeListSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            deptObjectIncludeEmp: 'deptObjectIncludeEmp',
        };
    }
    static types() {
        return {
            active: 'boolean',
            deptObjectIncludeEmp: 'boolean',
        };
    }
}
exports.GetContactHideBySceneSettingResponseBodyNodeListSceneConfig = GetContactHideBySceneSettingResponseBodyNodeListSceneConfig;
class GetContactHideBySceneSettingResponseBodyProfileSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.GetContactHideBySceneSettingResponseBodyProfileSceneConfig = GetContactHideBySceneSettingResponseBodyProfileSceneConfig;
class GetContactHideBySceneSettingResponseBodySearchSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            deptObjectIncludeEmp: 'deptObjectIncludeEmp',
        };
    }
    static types() {
        return {
            active: 'boolean',
            deptObjectIncludeEmp: 'boolean',
        };
    }
}
exports.GetContactHideBySceneSettingResponseBodySearchSceneConfig = GetContactHideBySceneSettingResponseBodySearchSceneConfig;
class GetEmpAttributeHideBySceneSettingResponseBodyChatSubtitleConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.GetEmpAttributeHideBySceneSettingResponseBodyChatSubtitleConfig = GetEmpAttributeHideBySceneSettingResponseBodyChatSubtitleConfig;
class GetEmpAttributeHideBySceneSettingResponseBodyProfileSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.GetEmpAttributeHideBySceneSettingResponseBodyProfileSceneConfig = GetEmpAttributeHideBySceneSettingResponseBodyProfileSceneConfig;
class GetEmpAttributeHideBySceneSettingResponseBodySearchSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.GetEmpAttributeHideBySceneSettingResponseBodySearchSceneConfig = GetEmpAttributeHideBySceneSettingResponseBodySearchSceneConfig;
class GetUserCardHolderListResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            cardAcceptStatus: 'cardAcceptStatus',
            cardAcceptTimeLong: 'cardAcceptTimeLong',
            cardId: 'cardId',
            cardSource: 'cardSource',
            extension: 'extension',
            industryName: 'industryName',
            introduce: 'introduce',
            name: 'name',
            orgName: 'orgName',
            templateId: 'templateId',
            title: 'title',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            cardAcceptStatus: 'number',
            cardAcceptTimeLong: 'number',
            cardId: 'string',
            cardSource: 'number',
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            industryName: 'string',
            introduce: 'string',
            name: 'string',
            orgName: 'string',
            templateId: 'string',
            title: 'string',
        };
    }
}
exports.GetUserCardHolderListResponseBodyList = GetUserCardHolderListResponseBodyList;
class ListBasicRoleInPageResponseBodyListOpenActionOpenConditionOpenContactScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
            includeMemberDepts: 'includeMemberDepts',
            includeSelfManageDepts: 'includeSelfManageDepts',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            includeMemberDepts: 'boolean',
            includeSelfManageDepts: 'boolean',
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListBasicRoleInPageResponseBodyListOpenActionOpenConditionOpenContactScope = ListBasicRoleInPageResponseBodyListOpenActionOpenConditionOpenContactScope;
class ListBasicRoleInPageResponseBodyListOpenActionOpenCondition extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openContactScope: 'openContactScope',
        };
    }
    static types() {
        return {
            openContactScope: ListBasicRoleInPageResponseBodyListOpenActionOpenConditionOpenContactScope,
        };
    }
}
exports.ListBasicRoleInPageResponseBodyListOpenActionOpenCondition = ListBasicRoleInPageResponseBodyListOpenActionOpenCondition;
class ListBasicRoleInPageResponseBodyListOpenAction extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionIds: 'actionIds',
            openCondition: 'openCondition',
        };
    }
    static types() {
        return {
            actionIds: { 'type': 'array', 'itemType': 'string' },
            openCondition: ListBasicRoleInPageResponseBodyListOpenActionOpenCondition,
        };
    }
}
exports.ListBasicRoleInPageResponseBodyListOpenAction = ListBasicRoleInPageResponseBodyListOpenAction;
class ListBasicRoleInPageResponseBodyListOpenMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            belongCorpId: 'belongCorpId',
            memberId: 'memberId',
            memberType: 'memberType',
            operateUserId: 'operateUserId',
        };
    }
    static types() {
        return {
            belongCorpId: 'string',
            memberId: 'string',
            memberType: 'string',
            operateUserId: 'string',
        };
    }
}
exports.ListBasicRoleInPageResponseBodyListOpenMembers = ListBasicRoleInPageResponseBodyListOpenMembers;
class ListBasicRoleInPageResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openAction: 'openAction',
            openMembers: 'openMembers',
            openResources: 'openResources',
            openRoleId: 'openRoleId',
            openRoleName: 'openRoleName',
        };
    }
    static types() {
        return {
            openAction: ListBasicRoleInPageResponseBodyListOpenAction,
            openMembers: { 'type': 'array', 'itemType': ListBasicRoleInPageResponseBodyListOpenMembers },
            openResources: { 'type': 'array', 'itemType': 'string' },
            openRoleId: 'string',
            openRoleName: 'string',
        };
    }
}
exports.ListBasicRoleInPageResponseBodyList = ListBasicRoleInPageResponseBodyList;
class ListContactHideSettingsResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeStaffIds: 'excludeStaffIds',
            excludeTagIds: 'excludeTagIds',
            id: 'id',
            name: 'name',
            objectDeptIds: 'objectDeptIds',
            objectStaffIds: 'objectStaffIds',
            objectTagIds: 'objectTagIds',
        };
    }
    static types() {
        return {
            active: 'boolean',
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeStaffIds: { 'type': 'array', 'itemType': 'string' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            id: 'number',
            name: 'string',
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectStaffIds: { 'type': 'array', 'itemType': 'string' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.ListContactHideSettingsResponseBodyList = ListContactHideSettingsResponseBodyList;
class ListContactRestrictSettingResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeTagIds: 'excludeTagIds',
            excludeUserIds: 'excludeUserIds',
            id: 'id',
            name: 'name',
            restrictInSearch: 'restrictInSearch',
            restrictInUserProfile: 'restrictInUserProfile',
            subjectDeptIds: 'subjectDeptIds',
            subjectTagIds: 'subjectTagIds',
            subjectUserIds: 'subjectUserIds',
            type: 'type',
        };
    }
    static types() {
        return {
            active: 'boolean',
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            excludeUserIds: { 'type': 'array', 'itemType': 'string' },
            id: 'number',
            name: 'string',
            restrictInSearch: 'boolean',
            restrictInUserProfile: 'boolean',
            subjectDeptIds: { 'type': 'array', 'itemType': 'number' },
            subjectTagIds: { 'type': 'array', 'itemType': 'number' },
            subjectUserIds: { 'type': 'array', 'itemType': 'string' },
            type: 'string',
        };
    }
}
exports.ListContactRestrictSettingResponseBodyList = ListContactRestrictSettingResponseBodyList;
class ListEmpAttributeVisibilityResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            description: 'description',
            excludeDeptIds: 'excludeDeptIds',
            excludeStaffIds: 'excludeStaffIds',
            excludeTagIds: 'excludeTagIds',
            gmtCreate: 'gmtCreate',
            gmtModified: 'gmtModified',
            hideFields: 'hideFields',
            id: 'id',
            name: 'name',
            objectDeptIds: 'objectDeptIds',
            objectStaffIds: 'objectStaffIds',
            objectTagIds: 'objectTagIds',
        };
    }
    static types() {
        return {
            active: 'boolean',
            description: 'string',
            excludeDeptIds: { 'type': 'array', 'itemType': 'number' },
            excludeStaffIds: { 'type': 'array', 'itemType': 'string' },
            excludeTagIds: { 'type': 'array', 'itemType': 'number' },
            gmtCreate: 'string',
            gmtModified: 'string',
            hideFields: { 'type': 'array', 'itemType': 'string' },
            id: 'number',
            name: 'string',
            objectDeptIds: { 'type': 'array', 'itemType': 'number' },
            objectStaffIds: { 'type': 'array', 'itemType': 'string' },
            objectTagIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.ListEmpAttributeVisibilityResponseBodyList = ListEmpAttributeVisibilityResponseBodyList;
class ListEmpLeaveRecordsResponseBodyRecords extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            leaveReason: 'leaveReason',
            leaveTime: 'leaveTime',
            mobile: 'mobile',
            name: 'name',
            stateCode: 'stateCode',
            userId: 'userId',
        };
    }
    static types() {
        return {
            leaveReason: 'string',
            leaveTime: 'string',
            mobile: 'string',
            name: 'string',
            stateCode: 'string',
            userId: 'string',
        };
    }
}
exports.ListEmpLeaveRecordsResponseBodyRecords = ListEmpLeaveRecordsResponseBodyRecords;
class ListManagementGroupsResponseBodyGroupsMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
        };
    }
}
exports.ListManagementGroupsResponseBodyGroupsMembers = ListManagementGroupsResponseBodyGroupsMembers;
class ListManagementGroupsResponseBodyGroupsScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
            scopeType: 'scopeType',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            scopeType: 'number',
        };
    }
}
exports.ListManagementGroupsResponseBodyGroupsScope = ListManagementGroupsResponseBodyGroupsScope;
class ListManagementGroupsResponseBodyGroups extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            groupId: 'groupId',
            groupName: 'groupName',
            members: 'members',
            resourceIds: 'resourceIds',
            scope: 'scope',
        };
    }
    static types() {
        return {
            groupId: 'string',
            groupName: 'string',
            members: { 'type': 'array', 'itemType': ListManagementGroupsResponseBodyGroupsMembers },
            resourceIds: { 'type': 'array', 'itemType': 'string' },
            scope: ListManagementGroupsResponseBodyGroupsScope,
        };
    }
}
exports.ListManagementGroupsResponseBodyGroups = ListManagementGroupsResponseBodyGroups;
class ListOwnedOrgByStaffIdResponseBodyOrgList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            corpName: 'corpName',
        };
    }
    static types() {
        return {
            corpId: 'string',
            corpName: 'string',
        };
    }
}
exports.ListOwnedOrgByStaffIdResponseBodyOrgList = ListOwnedOrgByStaffIdResponseBodyOrgList;
class ListSeniorSettingsResponseBodySeniorWhiteList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            id: 'id',
            name: 'name',
            type: 'type',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
            type: 'number',
        };
    }
}
exports.ListSeniorSettingsResponseBodySeniorWhiteList = ListSeniorSettingsResponseBodySeniorWhiteList;
class QueryCorpStatisticDataResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cardBeReceivedTotalCnt: 'cardBeReceivedTotalCnt',
            cardReceiveTotalCnt: 'cardReceiveTotalCnt',
            cardTotalBeVisitedCnt: 'cardTotalBeVisitedCnt',
            dataDate: 'dataDate',
            dingTotalShareCnt: 'dingTotalShareCnt',
            totalSendCnt: 'totalSendCnt',
            wechatTotalShareCnt: 'wechatTotalShareCnt',
        };
    }
    static types() {
        return {
            cardBeReceivedTotalCnt: 'number',
            cardReceiveTotalCnt: 'number',
            cardTotalBeVisitedCnt: 'number',
            dataDate: 'string',
            dingTotalShareCnt: 'number',
            totalSendCnt: 'number',
            wechatTotalShareCnt: 'number',
        };
    }
}
exports.QueryCorpStatisticDataResponseBodyResult = QueryCorpStatisticDataResponseBodyResult;
class QueryCorpUserStatisticResponseBodyList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            avatarUrl: 'avatarUrl',
            name: 'name',
            receiveCnt: 'receiveCnt',
            sendCnt: 'sendCnt',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            avatarUrl: 'string',
            name: 'string',
            receiveCnt: 'number',
            sendCnt: 'number',
            unionId: 'string',
        };
    }
}
exports.QueryCorpUserStatisticResponseBodyList = QueryCorpUserStatisticResponseBodyList;
class QueryResourceManagementMembersResponseBodyMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
        };
    }
}
exports.QueryResourceManagementMembersResponseBodyMembers = QueryResourceManagementMembersResponseBodyMembers;
class UpdateBranchAttributesInCooperateRequestBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            branchCorpId: 'branchCorpId',
            linkDeptId: 'linkDeptId',
            unionRootName: 'unionRootName',
        };
    }
    static types() {
        return {
            branchCorpId: 'string',
            linkDeptId: 'number',
            unionRootName: 'string',
        };
    }
}
exports.UpdateBranchAttributesInCooperateRequestBody = UpdateBranchAttributesInCooperateRequestBody;
class UpdateBranchVisibleSettingInCooperateRequestBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            branchCorpId: 'branchCorpId',
            open: 'open',
            type: 'type',
            visibleBranchCorpIds: 'visibleBranchCorpIds',
            visibleDeptIds: 'visibleDeptIds',
        };
    }
    static types() {
        return {
            branchCorpId: 'string',
            open: 'boolean',
            type: 'number',
            visibleBranchCorpIds: { 'type': 'array', 'itemType': 'string' },
            visibleDeptIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
}
exports.UpdateBranchVisibleSettingInCooperateRequestBody = UpdateBranchVisibleSettingInCooperateRequestBody;
class UpdateContactHideBySceneSettingRequestNodeListSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            deptObjectIncludeEmp: 'deptObjectIncludeEmp',
        };
    }
    static types() {
        return {
            active: 'boolean',
            deptObjectIncludeEmp: 'boolean',
        };
    }
}
exports.UpdateContactHideBySceneSettingRequestNodeListSceneConfig = UpdateContactHideBySceneSettingRequestNodeListSceneConfig;
class UpdateContactHideBySceneSettingRequestProfileSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.UpdateContactHideBySceneSettingRequestProfileSceneConfig = UpdateContactHideBySceneSettingRequestProfileSceneConfig;
class UpdateContactHideBySceneSettingRequestSearchSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
            deptObjectIncludeEmp: 'deptObjectIncludeEmp',
        };
    }
    static types() {
        return {
            active: 'boolean',
            deptObjectIncludeEmp: 'boolean',
        };
    }
}
exports.UpdateContactHideBySceneSettingRequestSearchSceneConfig = UpdateContactHideBySceneSettingRequestSearchSceneConfig;
class UpdateEmpAttributeHideBySceneSettingRequestChatSubtitleConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.UpdateEmpAttributeHideBySceneSettingRequestChatSubtitleConfig = UpdateEmpAttributeHideBySceneSettingRequestChatSubtitleConfig;
class UpdateEmpAttributeHideBySceneSettingRequestProfileSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.UpdateEmpAttributeHideBySceneSettingRequestProfileSceneConfig = UpdateEmpAttributeHideBySceneSettingRequestProfileSceneConfig;
class UpdateEmpAttributeHideBySceneSettingRequestSearchSceneConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            active: 'active',
        };
    }
    static types() {
        return {
            active: 'boolean',
        };
    }
}
exports.UpdateEmpAttributeHideBySceneSettingRequestSearchSceneConfig = UpdateEmpAttributeHideBySceneSettingRequestSearchSceneConfig;
class UpdateManagementGroupRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
        };
    }
}
exports.UpdateManagementGroupRequestMembers = UpdateManagementGroupRequestMembers;
class UpdateManagementGroupRequestScope extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
            scopeType: 'scopeType',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            scopeType: 'number',
        };
    }
}
exports.UpdateManagementGroupRequestScope = UpdateManagementGroupRequestScope;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addAccountMappingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.domain)) {
            body["domain"] = request.domain;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.outId)) {
            body["outId"] = request.outId;
        }
        if (!tea_util_1.default.isUnset(request.outTenantId)) {
            body["outTenantId"] = request.outTenantId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddAccountMapping",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/accountMappings`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddAccountMappingResponse({}));
    }
    async addAccountMapping(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddAccountMappingHeaders({});
        return await this.addAccountMappingWithOptions(request, headers, runtime);
    }
    async addContactHideBySceneSettingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.excludeDeptIds)) {
            body["excludeDeptIds"] = request.excludeDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeTagIds)) {
            body["excludeTagIds"] = request.excludeTagIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeUserIds)) {
            body["excludeUserIds"] = request.excludeUserIds;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.nodeListSceneConfig)) {
            body["nodeListSceneConfig"] = request.nodeListSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.objectDeptIds)) {
            body["objectDeptIds"] = request.objectDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.objectTagIds)) {
            body["objectTagIds"] = request.objectTagIds;
        }
        if (!tea_util_1.default.isUnset(request.objectUserIds)) {
            body["objectUserIds"] = request.objectUserIds;
        }
        if (!tea_util_1.default.isUnset(request.profileSceneConfig)) {
            body["profileSceneConfig"] = request.profileSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.searchSceneConfig)) {
            body["searchSceneConfig"] = request.searchSceneConfig;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddContactHideBySceneSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/organizations/hides/settings`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddContactHideBySceneSettingResponse({}));
    }
    async addContactHideBySceneSetting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddContactHideBySceneSettingHeaders({});
        return await this.addContactHideBySceneSettingWithOptions(request, headers, runtime);
    }
    async addEmpAttributeHideBySceneSettingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.chatSubtitleConfig)) {
            body["chatSubtitleConfig"] = request.chatSubtitleConfig;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.excludeDeptIds)) {
            body["excludeDeptIds"] = request.excludeDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeTagIds)) {
            body["excludeTagIds"] = request.excludeTagIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeUserIds)) {
            body["excludeUserIds"] = request.excludeUserIds;
        }
        if (!tea_util_1.default.isUnset(request.hideFields)) {
            body["hideFields"] = request.hideFields;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.objectDeptIds)) {
            body["objectDeptIds"] = request.objectDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.objectTagIds)) {
            body["objectTagIds"] = request.objectTagIds;
        }
        if (!tea_util_1.default.isUnset(request.objectUserIds)) {
            body["objectUserIds"] = request.objectUserIds;
        }
        if (!tea_util_1.default.isUnset(request.profileSceneConfig)) {
            body["profileSceneConfig"] = request.profileSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.searchSceneConfig)) {
            body["searchSceneConfig"] = request.searchSceneConfig;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddEmpAttributeHideBySceneSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/empAttributes/hides/settings`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddEmpAttributeHideBySceneSettingResponse({}));
    }
    async addEmpAttributeHideBySceneSetting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddEmpAttributeHideBySceneSettingHeaders({});
        return await this.addEmpAttributeHideBySceneSettingWithOptions(request, headers, runtime);
    }
    async annualCertificationAuditWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.applicantMobile)) {
            body["applicantMobile"] = request.applicantMobile;
        }
        if (!tea_util_1.default.isUnset(request.applicantName)) {
            body["applicantName"] = request.applicantName;
        }
        if (!tea_util_1.default.isUnset(request.applicationLetter)) {
            body["applicationLetter"] = request.applicationLetter;
        }
        if (!tea_util_1.default.isUnset(request.authStatus)) {
            body["authStatus"] = request.authStatus;
        }
        if (!tea_util_1.default.isUnset(request.certificateType)) {
            body["certificateType"] = request.certificateType;
        }
        if (!tea_util_1.default.isUnset(request.corpName)) {
            body["corpName"] = request.corpName;
        }
        if (!tea_util_1.default.isUnset(request.depositaryBank)) {
            body["depositaryBank"] = request.depositaryBank;
        }
        if (!tea_util_1.default.isUnset(request.extension)) {
            body["extension"] = request.extension;
        }
        if (!tea_util_1.default.isUnset(request.legalPerson)) {
            body["legalPerson"] = request.legalPerson;
        }
        if (!tea_util_1.default.isUnset(request.licenseNumber)) {
            body["licenseNumber"] = request.licenseNumber;
        }
        if (!tea_util_1.default.isUnset(request.licenseUrl)) {
            body["licenseUrl"] = request.licenseUrl;
        }
        if (!tea_util_1.default.isUnset(request.orderId)) {
            body["orderId"] = request.orderId;
        }
        if (!tea_util_1.default.isUnset(request.publicAccount)) {
            body["publicAccount"] = request.publicAccount;
        }
        if (!tea_util_1.default.isUnset(request.reasonCode)) {
            body["reasonCode"] = request.reasonCode;
        }
        if (!tea_util_1.default.isUnset(request.reasonMsg)) {
            body["reasonMsg"] = request.reasonMsg;
        }
        if (!tea_util_1.default.isUnset(request.tag)) {
            body["tag"] = request.tag;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AnnualCertificationAudit",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/organizations/authorities/audit`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AnnualCertificationAuditResponse({}));
    }
    async annualCertificationAudit(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AnnualCertificationAuditHeaders({});
        return await this.annualCertificationAuditWithOptions(request, headers, runtime);
    }
    async batchApproveUnionApplyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "BatchApproveUnionApply",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cooperateCorps/unionApplications/approve`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchApproveUnionApplyResponse({}));
    }
    async batchApproveUnionApply(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchApproveUnionApplyHeaders({});
        return await this.batchApproveUnionApplyWithOptions(request, headers, runtime);
    }
    async changeMainAdminWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.effectCorpId)) {
            body["effectCorpId"] = request.effectCorpId;
        }
        if (!tea_util_1.default.isUnset(request.sourceUserId)) {
            body["sourceUserId"] = request.sourceUserId;
        }
        if (!tea_util_1.default.isUnset(request.targetUserId)) {
            body["targetUserId"] = request.targetUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChangeMainAdmin",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccounts/mainAdministrators/change`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChangeMainAdminResponse({}));
    }
    async changeMainAdmin(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChangeMainAdminHeaders({});
        return await this.changeMainAdminWithOptions(request, headers, runtime);
    }
    async createCooperateOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.industryCode)) {
            body["industryCode"] = request.industryCode;
        }
        if (!tea_util_1.default.isUnset(request.logoMediaId)) {
            body["logoMediaId"] = request.logoMediaId;
        }
        if (!tea_util_1.default.isUnset(request.orgName)) {
            body["orgName"] = request.orgName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCooperateOrg",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cooperateCorps`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCooperateOrgResponse({}));
    }
    async createCooperateOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCooperateOrgHeaders({});
        return await this.createCooperateOrgWithOptions(request, headers, runtime);
    }
    async createManagementGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.resourceIds)) {
            body["resourceIds"] = request.resourceIds;
        }
        if (!tea_util_1.default.isUnset(request.scope)) {
            body["scope"] = request.scope;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateManagementGroup",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/managementGroups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateManagementGroupResponse({}));
    }
    async createManagementGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateManagementGroupHeaders({});
        return await this.createManagementGroupWithOptions(request, headers, runtime);
    }
    async createSecondaryManagementGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.resourceIds)) {
            body["resourceIds"] = request.resourceIds;
        }
        if (!tea_util_1.default.isUnset(request.scope)) {
            body["scope"] = request.scope;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateSecondaryManagementGroup",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/secondaryAdministrators/managementGroups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateSecondaryManagementGroupResponse({}));
    }
    async createSecondaryManagementGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSecondaryManagementGroupHeaders({});
        return await this.createSecondaryManagementGroupWithOptions(request, headers, runtime);
    }
    async delAccountMappingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.domain)) {
            query["domain"] = request.domain;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DelAccountMapping",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/accountMappings`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DelAccountMappingResponse({}));
    }
    async delAccountMapping(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DelAccountMappingHeaders({});
        return await this.delAccountMappingWithOptions(request, headers, runtime);
    }
    async deleteContactHideBySceneSettingWithOptions(settingId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteContactHideBySceneSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/organizations/hides/settings/${settingId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteContactHideBySceneSettingResponse({}));
    }
    async deleteContactHideBySceneSetting(settingId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteContactHideBySceneSettingHeaders({});
        return await this.deleteContactHideBySceneSettingWithOptions(settingId, headers, runtime);
    }
    async deleteContactHideSettingWithOptions(settingId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteContactHideSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/contactHideSettings/${settingId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteContactHideSettingResponse({}));
    }
    async deleteContactHideSetting(settingId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteContactHideSettingHeaders({});
        return await this.deleteContactHideSettingWithOptions(settingId, headers, runtime);
    }
    async deleteContactRestrictSettingWithOptions(settingId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteContactRestrictSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/restrictions/settings/${settingId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteContactRestrictSettingResponse({}));
    }
    async deleteContactRestrictSetting(settingId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteContactRestrictSettingHeaders({});
        return await this.deleteContactRestrictSettingWithOptions(settingId, headers, runtime);
    }
    async deleteEmpAttributeHideBySceneSettingWithOptions(settingId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteEmpAttributeHideBySceneSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/empAttributes/hides/settings/${settingId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteEmpAttributeHideBySceneSettingResponse({}));
    }
    async deleteEmpAttributeHideBySceneSetting(settingId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteEmpAttributeHideBySceneSettingHeaders({});
        return await this.deleteEmpAttributeHideBySceneSettingWithOptions(settingId, headers, runtime);
    }
    async deleteEmpAttributeVisibilityWithOptions(settingId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteEmpAttributeVisibility",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/staffAttributes/visibilitySettings/${settingId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteEmpAttributeVisibilityResponse({}));
    }
    async deleteEmpAttributeVisibility(settingId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteEmpAttributeVisibilityHeaders({});
        return await this.deleteEmpAttributeVisibilityWithOptions(settingId, headers, runtime);
    }
    async deleteManagementGroupWithOptions(groupId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "DeleteManagementGroup",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/managementGroups/${groupId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteManagementGroupResponse({}));
    }
    async deleteManagementGroup(groupId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteManagementGroupHeaders({});
        return await this.deleteManagementGroupWithOptions(groupId, headers, runtime);
    }
    async getAccountMappingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.domain)) {
            query["domain"] = request.domain;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAccountMapping",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/accountMappings`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAccountMappingResponse({}));
    }
    async getAccountMapping(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAccountMappingHeaders({});
        return await this.getAccountMappingWithOptions(request, headers, runtime);
    }
    async getApplyInviteInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.inviterUserId)) {
            query["inviterUserId"] = request.inviterUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetApplyInviteInfo",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/invites/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetApplyInviteInfoResponse({}));
    }
    async getApplyInviteInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetApplyInviteInfoHeaders({});
        return await this.getApplyInviteInfoWithOptions(request, headers, runtime);
    }
    async getBranchAuthDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.branchCorpId)) {
            query["branchCorpId"] = request.branchCorpId;
        }
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.body)) {
            body["body"] = request.body;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetBranchAuthData",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/branchAuthDatas/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetBranchAuthDataResponse({}));
    }
    async getBranchAuthData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetBranchAuthDataHeaders({});
        return await this.getBranchAuthDataWithOptions(request, headers, runtime);
    }
    async getCardInUserHolderWithOptions(cardId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetCardInUserHolder",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cards/holders/infos/${cardId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCardInUserHolderResponse({}));
    }
    async getCardInUserHolder(cardId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCardInUserHolderHeaders({});
        return await this.getCardInUserHolderWithOptions(cardId, headers, runtime);
    }
    async getCardInfoWithOptions(cardId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetCardInfo",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cards/infos/${cardId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCardInfoResponse({}));
    }
    async getCardInfo(cardId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCardInfoHeaders({});
        return await this.getCardInfoWithOptions(cardId, headers, runtime);
    }
    async getContactHideBySceneSettingWithOptions(settingId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetContactHideBySceneSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/organizations/hides/settings/${settingId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetContactHideBySceneSettingResponse({}));
    }
    async getContactHideBySceneSetting(settingId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetContactHideBySceneSettingHeaders({});
        return await this.getContactHideBySceneSettingWithOptions(settingId, headers, runtime);
    }
    async getCooperateOrgInviteInfoWithOptions(cooperateCorpId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetCooperateOrgInviteInfo",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cooperateCorps/${cooperateCorpId}/inviteInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCooperateOrgInviteInfoResponse({}));
    }
    async getCooperateOrgInviteInfo(cooperateCorpId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCooperateOrgInviteInfoHeaders({});
        return await this.getCooperateOrgInviteInfoWithOptions(cooperateCorpId, headers, runtime);
    }
    async getCorpCardStyleListWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetCorpCardStyleList",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cards/styles/lists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCorpCardStyleListResponse({}));
    }
    async getCorpCardStyleList() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCorpCardStyleListHeaders({});
        return await this.getCorpCardStyleListWithOptions(headers, runtime);
    }
    async getDingIdByMigrationDingIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.migrationDingId)) {
            query["migrationDingId"] = request.migrationDingId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDingIdByMigrationDingId",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccount/getDingIdByMigrationDingIds`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDingIdByMigrationDingIdResponse({}));
    }
    async getDingIdByMigrationDingId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDingIdByMigrationDingIdHeaders({});
        return await this.getDingIdByMigrationDingIdWithOptions(request, headers, runtime);
    }
    async getEmpAttributeHideBySceneSettingWithOptions(settingId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetEmpAttributeHideBySceneSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/empAttributes/hides/settings/${settingId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetEmpAttributeHideBySceneSettingResponse({}));
    }
    async getEmpAttributeHideBySceneSetting(settingId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetEmpAttributeHideBySceneSettingHeaders({});
        return await this.getEmpAttributeHideBySceneSettingWithOptions(settingId, headers, runtime);
    }
    async getLatestDingIndexWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetLatestDingIndex",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/dingIndexs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetLatestDingIndexResponse({}));
    }
    async getLatestDingIndex() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetLatestDingIndexHeaders({});
        return await this.getLatestDingIndexWithOptions(headers, runtime);
    }
    async getMigrationDingIdByDingIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dingId)) {
            query["dingId"] = request.dingId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetMigrationDingIdByDingId",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccount/getMigrationDingIdByDingIds`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMigrationDingIdByDingIdResponse({}));
    }
    async getMigrationDingIdByDingId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMigrationDingIdByDingIdHeaders({});
        return await this.getMigrationDingIdByDingIdWithOptions(request, headers, runtime);
    }
    async getMigrationUnionIdByUnionIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetMigrationUnionIdByUnionId",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccount/getMigrationUnionIdByUnionIds`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMigrationUnionIdByUnionIdResponse({}));
    }
    async getMigrationUnionIdByUnionId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMigrationUnionIdByUnionIdHeaders({});
        return await this.getMigrationUnionIdByUnionIdWithOptions(request, headers, runtime);
    }
    async getOrgAuthInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.targetCorpId)) {
            query["targetCorpId"] = request.targetCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetOrgAuthInfo",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/organizations/authInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOrgAuthInfoResponse({}));
    }
    async getOrgAuthInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOrgAuthInfoHeaders({});
        return await this.getOrgAuthInfoWithOptions(request, headers, runtime);
    }
    async getTranslateFileJobResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.jobId)) {
            query["jobId"] = request.jobId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTranslateFileJobResult",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/files/translateResults`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTranslateFileJobResultResponse({}));
    }
    async getTranslateFileJobResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTranslateFileJobResultHeaders({});
        return await this.getTranslateFileJobResultWithOptions(request, headers, runtime);
    }
    async getUnionIdByMigrationUnionIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.migrationUnionId)) {
            query["migrationUnionId"] = request.migrationUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUnionIdByMigrationUnionId",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccount/getUnionIdByMigrationUnionIds`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUnionIdByMigrationUnionIdResponse({}));
    }
    async getUnionIdByMigrationUnionId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUnionIdByMigrationUnionIdHeaders({});
        return await this.getUnionIdByMigrationUnionIdWithOptions(request, headers, runtime);
    }
    async getUserWithOptions(unionId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetUser",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/users/${unionId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserResponse({}));
    }
    async getUser(unionId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserHeaders({});
        return await this.getUserWithOptions(unionId, headers, runtime);
    }
    async getUserCardHolderListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUserCardHolderList",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cards/holders/lists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserCardHolderListResponse({}));
    }
    async getUserCardHolderList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserCardHolderListHeaders({});
        return await this.getUserCardHolderListWithOptions(request, headers, runtime);
    }
    async isFriendWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.mobileNo)) {
            body["mobileNo"] = request.mobileNo;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IsFriend",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/relationships/friends/judge`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IsFriendResponse({}));
    }
    async isFriend(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IsFriendHeaders({});
        return await this.isFriendWithOptions(request, headers, runtime);
    }
    async isvCardEventPushWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isvCardId)) {
            query["isvCardId"] = request.isvCardId;
        }
        if (!tea_util_1.default.isUnset(request.isvToken)) {
            query["isvToken"] = request.isvToken;
        }
        if (!tea_util_1.default.isUnset(request.isvUid)) {
            query["isvUid"] = request.isvUid;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.eventParams)) {
            body["eventParams"] = request.eventParams;
        }
        if (!tea_util_1.default.isUnset(request.eventType)) {
            body["eventType"] = request.eventType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "IsvCardEventPush",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cards/events/push`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new IsvCardEventPushResponse({}));
    }
    async isvCardEventPush(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new IsvCardEventPushHeaders({});
        return await this.isvCardEventPushWithOptions(request, headers, runtime);
    }
    async listBasicRoleInPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.agentId)) {
            query["agentId"] = request.agentId;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListBasicRoleInPage",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/rbac/administrativeGroups/baseInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListBasicRoleInPageResponse({}));
    }
    async listBasicRoleInPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListBasicRoleInPageHeaders({});
        return await this.listBasicRoleInPageWithOptions(request, headers, runtime);
    }
    async listContactHideSettingsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListContactHideSettings",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/contactHideSettings`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListContactHideSettingsResponse({}));
    }
    async listContactHideSettings(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListContactHideSettingsHeaders({});
        return await this.listContactHideSettingsWithOptions(request, headers, runtime);
    }
    async listContactRestrictSettingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListContactRestrictSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/restrictions/settings`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListContactRestrictSettingResponse({}));
    }
    async listContactRestrictSetting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListContactRestrictSettingHeaders({});
        return await this.listContactRestrictSettingWithOptions(request, headers, runtime);
    }
    async listEmpAttributeVisibilityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListEmpAttributeVisibility",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/staffAttributes/visibilitySettings`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListEmpAttributeVisibilityResponse({}));
    }
    async listEmpAttributeVisibility(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListEmpAttributeVisibilityHeaders({});
        return await this.listEmpAttributeVisibilityWithOptions(request, headers, runtime);
    }
    async listEmpLeaveRecordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListEmpLeaveRecords",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/empLeaveRecords`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListEmpLeaveRecordsResponse({}));
    }
    async listEmpLeaveRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListEmpLeaveRecordsHeaders({});
        return await this.listEmpLeaveRecordsWithOptions(request, headers, runtime);
    }
    async listManagementGroupsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListManagementGroups",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/managementGroups`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListManagementGroupsResponse({}));
    }
    async listManagementGroups(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListManagementGroupsHeaders({});
        return await this.listManagementGroupsWithOptions(request, headers, runtime);
    }
    async listOwnedOrgByStaffIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListOwnedOrgByStaffId",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccounts/ownedOrganizations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListOwnedOrgByStaffIdResponse({}));
    }
    async listOwnedOrgByStaffId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListOwnedOrgByStaffIdHeaders({});
        return await this.listOwnedOrgByStaffIdWithOptions(request, headers, runtime);
    }
    async listSeniorSettingsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.seniorStaffId)) {
            query["seniorStaffId"] = request.seniorStaffId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListSeniorSettings",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/seniorSettings`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListSeniorSettingsResponse({}));
    }
    async listSeniorSettings(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListSeniorSettingsHeaders({});
        return await this.listSeniorSettingsWithOptions(request, headers, runtime);
    }
    async multiOrgPermissionGrantWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.grantDeptIdList)) {
            body["grantDeptIdList"] = request.grantDeptIdList;
        }
        if (!tea_util_1.default.isUnset(request.joinCorpId)) {
            body["joinCorpId"] = request.joinCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "MultiOrgPermissionGrant",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccounts/multiOrgPermissions/auth`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new MultiOrgPermissionGrantResponse({}));
    }
    async multiOrgPermissionGrant(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new MultiOrgPermissionGrantHeaders({});
        return await this.multiOrgPermissionGrantWithOptions(request, headers, runtime);
    }
    async queryCardVisitorStatisticDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCardVisitorStatisticData",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cards/visitors/statistics`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCardVisitorStatisticDataResponse({}));
    }
    async queryCardVisitorStatisticData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCardVisitorStatisticDataHeaders({});
        return await this.queryCardVisitorStatisticDataWithOptions(request, headers, runtime);
    }
    async queryCorpStatisticDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.templateIds)) {
            body["templateIds"] = request.templateIds;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryCorpStatisticData",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cards/templates/statistics/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCorpStatisticDataResponse({}));
    }
    async queryCorpStatisticData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCorpStatisticDataHeaders({});
        return await this.queryCorpStatisticDataWithOptions(request, headers, runtime);
    }
    async queryCorpUserStatisticWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            body["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            body["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.templateIds)) {
            body["templateIds"] = request.templateIds;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryCorpUserStatistic",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cards/users/statistics/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCorpUserStatisticResponse({}));
    }
    async queryCorpUserStatistic(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCorpUserStatisticHeaders({});
        return await this.queryCorpUserStatisticWithOptions(request, headers, runtime);
    }
    async queryResourceManagementMembersWithOptions(resourceId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryResourceManagementMembers",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/resources/${resourceId}/managementMembers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryResourceManagementMembersResponse({}));
    }
    async queryResourceManagementMembers(resourceId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryResourceManagementMembersHeaders({});
        return await this.queryResourceManagementMembersWithOptions(resourceId, headers, runtime);
    }
    async queryStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryStatus",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccounts/status`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryStatusResponse({}));
    }
    async queryStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryStatusHeaders({});
        return await this.queryStatusWithOptions(request, headers, runtime);
    }
    async queryUserManagementResourcesWithOptions(userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryUserManagementResources",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/users/${userId}/managemementResources`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserManagementResourcesResponse({}));
    }
    async queryUserManagementResources(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserManagementResourcesHeaders({});
        return await this.queryUserManagementResourcesWithOptions(userId, headers, runtime);
    }
    async queryVerifyResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.verifyId)) {
            query["verifyId"] = request.verifyId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryVerifyResult",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/verifyIdentitys/verifyResults`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryVerifyResultResponse({}));
    }
    async queryVerifyResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryVerifyResultHeaders({});
        return await this.queryVerifyResultWithOptions(request, headers, runtime);
    }
    async searchDepartmentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.offset)) {
            body["offset"] = request.offset;
        }
        if (!tea_util_1.default.isUnset(request.queryWord)) {
            body["queryWord"] = request.queryWord;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            body["size"] = request.size;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchDepartment",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/departments/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchDepartmentResponse({}));
    }
    async searchDepartment(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchDepartmentHeaders({});
        return await this.searchDepartmentWithOptions(request, headers, runtime);
    }
    async searchUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.fullMatchField)) {
            body["fullMatchField"] = request.fullMatchField;
        }
        if (!tea_util_1.default.isUnset(request.offset)) {
            body["offset"] = request.offset;
        }
        if (!tea_util_1.default.isUnset(request.queryWord)) {
            body["queryWord"] = request.queryWord;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            body["size"] = request.size;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchUser",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/users/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchUserResponse({}));
    }
    async searchUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchUserHeaders({});
        return await this.searchUserWithOptions(request, headers, runtime);
    }
    async separateBranchOrgWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.attachDeptId)) {
            body["attachDeptId"] = request.attachDeptId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SeparateBranchOrg",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cooperateCorps/separate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SeparateBranchOrgResponse({}));
    }
    async separateBranchOrg(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SeparateBranchOrgHeaders({});
        return await this.separateBranchOrgWithOptions(request, headers, runtime);
    }
    async setDisableWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.reason)) {
            body["reason"] = request.reason;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetDisable",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccounts/disable`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetDisableResponse({}));
    }
    async setDisable(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetDisableHeaders({});
        return await this.setDisableWithOptions(request, headers, runtime);
    }
    async setEnableWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetEnable",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccounts/enable`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetEnableResponse({}));
    }
    async setEnable(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetEnableHeaders({});
        return await this.setEnableWithOptions(request, headers, runtime);
    }
    async signOutWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.reason)) {
            body["reason"] = request.reason;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SignOut",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccounts/signOut`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SignOutResponse({}));
    }
    async signOut(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SignOutHeaders({});
        return await this.signOutWithOptions(request, headers, runtime);
    }
    async sortUserWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.sortType)) {
            body["sortType"] = request.sortType;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SortUser",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/users/sort`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SortUserResponse({}));
    }
    async sortUser(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SortUserHeaders({});
        return await this.sortUserWithOptions(request, headers, runtime);
    }
    async transformToExclusiveAccountWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.idpDingTalk)) {
            body["idpDingTalk"] = request.idpDingTalk;
        }
        if (!tea_util_1.default.isUnset(request.initPassword)) {
            body["initPassword"] = request.initPassword;
        }
        if (!tea_util_1.default.isUnset(request.loginId)) {
            body["loginId"] = request.loginId;
        }
        if (!tea_util_1.default.isUnset(request.transformType)) {
            body["transformType"] = request.transformType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TransformToExclusiveAccount",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/orgAccount/transformToExclusiveAccounts`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TransformToExclusiveAccountResponse({}));
    }
    async transformToExclusiveAccount(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TransformToExclusiveAccountHeaders({});
        return await this.transformToExclusiveAccountWithOptions(request, headers, runtime);
    }
    async translateFileWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.medias)) {
            body["medias"] = request.medias;
        }
        if (!tea_util_1.default.isUnset(request.outputFileName)) {
            body["outputFileName"] = request.outputFileName;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TranslateFile",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/files/translate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TranslateFileResponse({}));
    }
    async translateFile(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TranslateFileHeaders({});
        return await this.translateFileWithOptions(request, headers, runtime);
    }
    async uniqueQueryUserCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.templateId)) {
            query["templateId"] = request.templateId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UniqueQueryUserCard",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/uniques/cards`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UniqueQueryUserCardResponse({}));
    }
    async uniqueQueryUserCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UniqueQueryUserCardHeaders({});
        return await this.uniqueQueryUserCardWithOptions(request, headers, runtime);
    }
    async updateBranchAttributesInCooperateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateBranchAttributesInCooperate",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cooperateCorps/branchAttributes`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateBranchAttributesInCooperateResponse({}));
    }
    async updateBranchAttributesInCooperate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateBranchAttributesInCooperateHeaders({});
        return await this.updateBranchAttributesInCooperateWithOptions(request, headers, runtime);
    }
    async updateBranchVisibleSettingInCooperateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateBranchVisibleSettingInCooperate",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/cooperateCorps/branchVisibleSettings`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateBranchVisibleSettingInCooperateResponse({}));
    }
    async updateBranchVisibleSettingInCooperate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateBranchVisibleSettingInCooperateHeaders({});
        return await this.updateBranchVisibleSettingInCooperateWithOptions(request, headers, runtime);
    }
    async updateContactHideBySceneSettingWithOptions(settingId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.excludeDeptIds)) {
            body["excludeDeptIds"] = request.excludeDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeTagIds)) {
            body["excludeTagIds"] = request.excludeTagIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeUserIds)) {
            body["excludeUserIds"] = request.excludeUserIds;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.nodeListSceneConfig)) {
            body["nodeListSceneConfig"] = request.nodeListSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.objectDeptIds)) {
            body["objectDeptIds"] = request.objectDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.objectTagIds)) {
            body["objectTagIds"] = request.objectTagIds;
        }
        if (!tea_util_1.default.isUnset(request.objectUserIds)) {
            body["objectUserIds"] = request.objectUserIds;
        }
        if (!tea_util_1.default.isUnset(request.profileSceneConfig)) {
            body["profileSceneConfig"] = request.profileSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.searchSceneConfig)) {
            body["searchSceneConfig"] = request.searchSceneConfig;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateContactHideBySceneSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/organizations/hides/settings/${settingId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateContactHideBySceneSettingResponse({}));
    }
    async updateContactHideBySceneSetting(settingId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateContactHideBySceneSettingHeaders({});
        return await this.updateContactHideBySceneSettingWithOptions(settingId, request, headers, runtime);
    }
    async updateContactHideSettingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.active)) {
            body["active"] = request.active;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.excludeDeptIds)) {
            body["excludeDeptIds"] = request.excludeDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeStaffIds)) {
            body["excludeStaffIds"] = request.excludeStaffIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeTagIds)) {
            body["excludeTagIds"] = request.excludeTagIds;
        }
        if (!tea_util_1.default.isUnset(request.hideInSearch)) {
            body["hideInSearch"] = request.hideInSearch;
        }
        if (!tea_util_1.default.isUnset(request.hideInUserProfile)) {
            body["hideInUserProfile"] = request.hideInUserProfile;
        }
        if (!tea_util_1.default.isUnset(request.id)) {
            body["id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.objectDeptIds)) {
            body["objectDeptIds"] = request.objectDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.objectStaffIds)) {
            body["objectStaffIds"] = request.objectStaffIds;
        }
        if (!tea_util_1.default.isUnset(request.objectTagIds)) {
            body["objectTagIds"] = request.objectTagIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateContactHideSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/contactHideSettings`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateContactHideSettingResponse({}));
    }
    async updateContactHideSetting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateContactHideSettingHeaders({});
        return await this.updateContactHideSettingWithOptions(request, headers, runtime);
    }
    async updateContactRestrictSettingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.active)) {
            body["active"] = request.active;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.excludeDeptIds)) {
            body["excludeDeptIds"] = request.excludeDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeTagIds)) {
            body["excludeTagIds"] = request.excludeTagIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeUserIds)) {
            body["excludeUserIds"] = request.excludeUserIds;
        }
        if (!tea_util_1.default.isUnset(request.id)) {
            body["id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.restrictInSearch)) {
            body["restrictInSearch"] = request.restrictInSearch;
        }
        if (!tea_util_1.default.isUnset(request.restrictInUserProfile)) {
            body["restrictInUserProfile"] = request.restrictInUserProfile;
        }
        if (!tea_util_1.default.isUnset(request.subjectDeptIds)) {
            body["subjectDeptIds"] = request.subjectDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.subjectTagIds)) {
            body["subjectTagIds"] = request.subjectTagIds;
        }
        if (!tea_util_1.default.isUnset(request.subjectUserIds)) {
            body["subjectUserIds"] = request.subjectUserIds;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            body["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateContactRestrictSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/restrictions/settings`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateContactRestrictSettingResponse({}));
    }
    async updateContactRestrictSetting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateContactRestrictSettingHeaders({});
        return await this.updateContactRestrictSettingWithOptions(request, headers, runtime);
    }
    async updateDeptSettngTailFirstWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.enable)) {
            body["enable"] = request.enable;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateDeptSettngTailFirst",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/depts/settings/priorities`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateDeptSettngTailFirstResponse({}));
    }
    async updateDeptSettngTailFirst(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateDeptSettngTailFirstHeaders({});
        return await this.updateDeptSettngTailFirstWithOptions(request, headers, runtime);
    }
    async updateEmpAttrbuteVisibilitySettingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.active)) {
            body["active"] = request.active;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.excludeDeptIds)) {
            body["excludeDeptIds"] = request.excludeDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeStaffIds)) {
            body["excludeStaffIds"] = request.excludeStaffIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeTagIds)) {
            body["excludeTagIds"] = request.excludeTagIds;
        }
        if (!tea_util_1.default.isUnset(request.hideFields)) {
            body["hideFields"] = request.hideFields;
        }
        if (!tea_util_1.default.isUnset(request.id)) {
            body["id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.objectDeptIds)) {
            body["objectDeptIds"] = request.objectDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.objectStaffIds)) {
            body["objectStaffIds"] = request.objectStaffIds;
        }
        if (!tea_util_1.default.isUnset(request.objectTagIds)) {
            body["objectTagIds"] = request.objectTagIds;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateEmpAttrbuteVisibilitySetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/staffAttributes/visibilitySettings`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateEmpAttrbuteVisibilitySettingResponse({}));
    }
    async updateEmpAttrbuteVisibilitySetting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateEmpAttrbuteVisibilitySettingHeaders({});
        return await this.updateEmpAttrbuteVisibilitySettingWithOptions(request, headers, runtime);
    }
    async updateEmpAttributeHideBySceneSettingWithOptions(settingId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.chatSubtitleConfig)) {
            body["chatSubtitleConfig"] = request.chatSubtitleConfig;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.excludeDeptIds)) {
            body["excludeDeptIds"] = request.excludeDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeTagIds)) {
            body["excludeTagIds"] = request.excludeTagIds;
        }
        if (!tea_util_1.default.isUnset(request.excludeUserIds)) {
            body["excludeUserIds"] = request.excludeUserIds;
        }
        if (!tea_util_1.default.isUnset(request.hideFields)) {
            body["hideFields"] = request.hideFields;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.objectDeptIds)) {
            body["objectDeptIds"] = request.objectDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.objectTagIds)) {
            body["objectTagIds"] = request.objectTagIds;
        }
        if (!tea_util_1.default.isUnset(request.objectUserIds)) {
            body["objectUserIds"] = request.objectUserIds;
        }
        if (!tea_util_1.default.isUnset(request.profileSceneConfig)) {
            body["profileSceneConfig"] = request.profileSceneConfig;
        }
        if (!tea_util_1.default.isUnset(request.searchSceneConfig)) {
            body["searchSceneConfig"] = request.searchSceneConfig;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateEmpAttributeHideBySceneSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/empAttributes/hides/settings/${settingId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateEmpAttributeHideBySceneSettingResponse({}));
    }
    async updateEmpAttributeHideBySceneSetting(settingId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateEmpAttributeHideBySceneSettingHeaders({});
        return await this.updateEmpAttributeHideBySceneSettingWithOptions(settingId, request, headers, runtime);
    }
    async updateManagementGroupWithOptions(groupId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupName)) {
            body["groupName"] = request.groupName;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.resourceIds)) {
            body["resourceIds"] = request.resourceIds;
        }
        if (!tea_util_1.default.isUnset(request.scope)) {
            body["scope"] = request.scope;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateManagementGroup",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/managementGroups/${groupId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateManagementGroupResponse({}));
    }
    async updateManagementGroup(groupId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateManagementGroupHeaders({});
        return await this.updateManagementGroupWithOptions(groupId, request, headers, runtime);
    }
    async updateSeniorSettingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.open)) {
            body["open"] = request.open;
        }
        if (!tea_util_1.default.isUnset(request.permitDeptIds)) {
            body["permitDeptIds"] = request.permitDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.permitStaffIds)) {
            body["permitStaffIds"] = request.permitStaffIds;
        }
        if (!tea_util_1.default.isUnset(request.permitTagIds)) {
            body["permitTagIds"] = request.permitTagIds;
        }
        if (!tea_util_1.default.isUnset(request.protectScenes)) {
            body["protectScenes"] = request.protectScenes;
        }
        if (!tea_util_1.default.isUnset(request.seniorStaffId)) {
            body["seniorStaffId"] = request.seniorStaffId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateSeniorSetting",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/seniorSettings`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateSeniorSettingResponse({}));
    }
    async updateSeniorSetting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateSeniorSettingHeaders({});
        return await this.updateSeniorSettingWithOptions(request, headers, runtime);
    }
    async updateUserOwnnessWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deletedFlag)) {
            body["deletedFlag"] = request.deletedFlag;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.id)) {
            body["id"] = request.id;
        }
        if (!tea_util_1.default.isUnset(request.ownenssType)) {
            body["ownenssType"] = request.ownenssType;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateUserOwnness",
            version: "contact_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/contact/user/${userId}/ownness`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateUserOwnnessResponse({}));
    }
    async updateUserOwnness(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateUserOwnnessHeaders({});
        return await this.updateUserOwnnessWithOptions(userId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map