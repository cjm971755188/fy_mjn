"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateTemplatesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateTemplatesHeaders = CreateTemplatesHeaders;
class CreateTemplatesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            allowAddReceivers: 'allowAddReceivers',
            allowEdit: 'allowEdit',
            allowGetLocation: 'allowGetLocation',
            authDeptIds: 'authDeptIds',
            authUserIds: 'authUserIds',
            creator: 'creator',
            defaultReceivedCids: 'defaultReceivedCids',
            defaultReceivedMasterLevels: 'defaultReceivedMasterLevels',
            defaultReceivers: 'defaultReceivers',
            fields: 'fields',
            logo: 'logo',
            maxWordCount: 'maxWordCount',
            minWordCount: 'minWordCount',
            name: 'name',
            templateManagers: 'templateManagers',
        };
    }
    static types() {
        return {
            allowAddReceivers: 'boolean',
            allowEdit: 'boolean',
            allowGetLocation: 'boolean',
            authDeptIds: { 'type': 'array', 'itemType': 'string' },
            authUserIds: { 'type': 'array', 'itemType': 'string' },
            creator: 'string',
            defaultReceivedCids: { 'type': 'array', 'itemType': 'string' },
            defaultReceivedMasterLevels: { 'type': 'array', 'itemType': 'string' },
            defaultReceivers: { 'type': 'array', 'itemType': 'string' },
            fields: { 'type': 'array', 'itemType': CreateTemplatesRequestFields },
            logo: 'string',
            maxWordCount: 'number',
            minWordCount: 'number',
            name: 'string',
            templateManagers: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateTemplatesRequest = CreateTemplatesRequest;
class CreateTemplatesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateId: 'templateId',
        };
    }
    static types() {
        return {
            templateId: 'string',
        };
    }
}
exports.CreateTemplatesResponseBody = CreateTemplatesResponseBody;
class CreateTemplatesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTemplatesResponseBody,
        };
    }
}
exports.CreateTemplatesResponse = CreateTemplatesResponse;
class CreateTemplatesRequestFieldsDataValueOpenInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attribute: 'attribute',
            openId: 'openId',
        };
    }
    static types() {
        return {
            attribute: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            openId: 'string',
        };
    }
}
exports.CreateTemplatesRequestFieldsDataValueOpenInfo = CreateTemplatesRequestFieldsDataValueOpenInfo;
class CreateTemplatesRequestFieldsDataValue extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            openInfo: 'openInfo',
            options: 'options',
            placeholder: 'placeholder',
        };
    }
    static types() {
        return {
            openInfo: CreateTemplatesRequestFieldsDataValueOpenInfo,
            options: { 'type': 'array', 'itemType': 'string' },
            placeholder: 'string',
        };
    }
}
exports.CreateTemplatesRequestFieldsDataValue = CreateTemplatesRequestFieldsDataValue;
class CreateTemplatesRequestFields extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataType: 'dataType',
            dataValue: 'dataValue',
            fieldName: 'fieldName',
            need: 'need',
            order: 'order',
            sort: 'sort',
        };
    }
    static types() {
        return {
            dataType: 'number',
            dataValue: CreateTemplatesRequestFieldsDataValue,
            fieldName: 'string',
            need: 'boolean',
            order: 'number',
            sort: 'number',
        };
    }
}
exports.CreateTemplatesRequestFields = CreateTemplatesRequestFields;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async createTemplatesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.allowAddReceivers)) {
            body["allowAddReceivers"] = request.allowAddReceivers;
        }
        if (!tea_util_1.default.isUnset(request.allowEdit)) {
            body["allowEdit"] = request.allowEdit;
        }
        if (!tea_util_1.default.isUnset(request.allowGetLocation)) {
            body["allowGetLocation"] = request.allowGetLocation;
        }
        if (!tea_util_1.default.isUnset(request.authDeptIds)) {
            body["authDeptIds"] = request.authDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.authUserIds)) {
            body["authUserIds"] = request.authUserIds;
        }
        if (!tea_util_1.default.isUnset(request.creator)) {
            body["creator"] = request.creator;
        }
        if (!tea_util_1.default.isUnset(request.defaultReceivedCids)) {
            body["defaultReceivedCids"] = request.defaultReceivedCids;
        }
        if (!tea_util_1.default.isUnset(request.defaultReceivedMasterLevels)) {
            body["defaultReceivedMasterLevels"] = request.defaultReceivedMasterLevels;
        }
        if (!tea_util_1.default.isUnset(request.defaultReceivers)) {
            body["defaultReceivers"] = request.defaultReceivers;
        }
        if (!tea_util_1.default.isUnset(request.fields)) {
            body["fields"] = request.fields;
        }
        if (!tea_util_1.default.isUnset(request.logo)) {
            body["logo"] = request.logo;
        }
        if (!tea_util_1.default.isUnset(request.maxWordCount)) {
            body["maxWordCount"] = request.maxWordCount;
        }
        if (!tea_util_1.default.isUnset(request.minWordCount)) {
            body["minWordCount"] = request.minWordCount;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.templateManagers)) {
            body["templateManagers"] = request.templateManagers;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTemplates",
            version: "report_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/report/templates`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTemplatesResponse({}));
    }
    async createTemplates(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTemplatesHeaders({});
        return await this.createTemplatesWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map