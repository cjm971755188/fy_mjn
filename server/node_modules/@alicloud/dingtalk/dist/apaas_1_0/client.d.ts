/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class BatchCreateTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTemplateRequest extends $tea.Model {
    templateList?: BatchCreateTemplateRequestTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTemplateResponseBody extends $tea.Model {
    createResultList?: BatchCreateTemplateResponseBodyCreateResultList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchCreateTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryByTemplateKeyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryByTemplateKeyRequest extends $tea.Model {
    templateKeys?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryByTemplateKeyResponseBody extends $tea.Model {
    templateList?: BatchQueryByTemplateKeyResponseBodyTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryByTemplateKeyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchQueryByTemplateKeyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateTemplateRequest extends $tea.Model {
    templateList?: BatchUpdateTemplateRequestTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateTemplateResponseBody extends $tea.Model {
    updateResultList?: BatchUpdateTemplateResponseBodyUpdateResultList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchUpdateTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryIndustryTagListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryIndustryTagListResponseBody extends $tea.Model {
    industryList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryIndustryTagListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryIndustryTagListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRoleTagListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRoleTagListResponseBody extends $tea.Model {
    roleList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRoleTagListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryRoleTagListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateCategorysHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateCategorysResponseBody extends $tea.Model {
    categoryList?: QueryTemplateCategorysResponseBodyCategoryList[];
    total?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateCategorysResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryTemplateCategorysResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallAuditTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallAuditTemplateRequest extends $tea.Model {
    templateKeys?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallAuditTemplateResponseBody extends $tea.Model {
    recallResult?: RecallAuditTemplateResponseBodyRecallResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallAuditTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecallAuditTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTemplateRequestTemplateList extends $tea.Model {
    adaptEnv?: string[];
    appDesc?: string;
    appIcon?: string;
    caseVideoList?: string[];
    categoryCode?: string;
    coverImgList?: string[];
    expUrl?: string;
    industryLabelList?: string[];
    installTimes?: number;
    mobilePreviewMediaList?: string[];
    name?: string;
    previewMediaList?: string[];
    providerName?: string;
    roleLabelList?: string[];
    simpleDesc?: string;
    templateKey?: string;
    useCasesMediaList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateTemplateResponseBodyCreateResultList extends $tea.Model {
    templateKey?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryByTemplateKeyResponseBodyTemplateList extends $tea.Model {
    adaptEnv?: string[];
    appDesc?: string;
    appIcon?: string;
    caseVideoList?: string[];
    category?: string;
    coverImgList?: string[];
    expUrl?: string;
    industryLabelList?: string[];
    installTimes?: number;
    mobilePreviewMediaList?: string[];
    name?: string;
    previewMediaList?: string[];
    providerName?: string;
    roleLabelList?: string[];
    simpleDesc?: string;
    templateKey?: string;
    useCasesMediaList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateTemplateRequestTemplateList extends $tea.Model {
    adaptEnv?: string[];
    appDesc?: string;
    appIcon?: string;
    caseVideoList?: string[];
    categoryCode?: string;
    coverImgList?: string[];
    expUrl?: string;
    industryLabelList?: string[];
    mobilePreviewMediaList?: string[];
    name?: string;
    previewMediaList?: string[];
    providerName?: string;
    roleLabelList?: string[];
    simpleDesc?: string;
    templateKey?: string;
    useCasesMediaList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateTemplateResponseBodyUpdateResultList extends $tea.Model {
    templateKey?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTemplateCategorysResponseBodyCategoryList extends $tea.Model {
    code?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallAuditTemplateResponseBodyRecallResult extends $tea.Model {
    templateKey?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    batchCreateTemplateWithOptions(request: BatchCreateTemplateRequest, headers: BatchCreateTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<BatchCreateTemplateResponse>;
    batchCreateTemplate(request: BatchCreateTemplateRequest): Promise<BatchCreateTemplateResponse>;
    batchQueryByTemplateKeyWithOptions(request: BatchQueryByTemplateKeyRequest, headers: BatchQueryByTemplateKeyHeaders, runtime: $Util.RuntimeOptions): Promise<BatchQueryByTemplateKeyResponse>;
    batchQueryByTemplateKey(request: BatchQueryByTemplateKeyRequest): Promise<BatchQueryByTemplateKeyResponse>;
    batchUpdateTemplateWithOptions(request: BatchUpdateTemplateRequest, headers: BatchUpdateTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<BatchUpdateTemplateResponse>;
    batchUpdateTemplate(request: BatchUpdateTemplateRequest): Promise<BatchUpdateTemplateResponse>;
    queryIndustryTagListWithOptions(headers: QueryIndustryTagListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryIndustryTagListResponse>;
    queryIndustryTagList(): Promise<QueryIndustryTagListResponse>;
    queryRoleTagListWithOptions(headers: QueryRoleTagListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRoleTagListResponse>;
    queryRoleTagList(): Promise<QueryRoleTagListResponse>;
    queryTemplateCategorysWithOptions(headers: QueryTemplateCategorysHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTemplateCategorysResponse>;
    queryTemplateCategorys(): Promise<QueryTemplateCategorysResponse>;
    recallAuditTemplateWithOptions(request: RecallAuditTemplateRequest, headers: RecallAuditTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<RecallAuditTemplateResponse>;
    recallAuditTemplate(request: RecallAuditTemplateRequest): Promise<RecallAuditTemplateResponse>;
}
