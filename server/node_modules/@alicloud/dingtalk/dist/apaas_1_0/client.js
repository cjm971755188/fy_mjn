"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class BatchCreateTemplateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchCreateTemplateHeaders = BatchCreateTemplateHeaders;
class BatchCreateTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateList: 'templateList',
        };
    }
    static types() {
        return {
            templateList: { 'type': 'array', 'itemType': BatchCreateTemplateRequestTemplateList },
        };
    }
}
exports.BatchCreateTemplateRequest = BatchCreateTemplateRequest;
class BatchCreateTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createResultList: 'createResultList',
        };
    }
    static types() {
        return {
            createResultList: { 'type': 'array', 'itemType': BatchCreateTemplateResponseBodyCreateResultList },
        };
    }
}
exports.BatchCreateTemplateResponseBody = BatchCreateTemplateResponseBody;
class BatchCreateTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchCreateTemplateResponseBody,
        };
    }
}
exports.BatchCreateTemplateResponse = BatchCreateTemplateResponse;
class BatchQueryByTemplateKeyHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchQueryByTemplateKeyHeaders = BatchQueryByTemplateKeyHeaders;
class BatchQueryByTemplateKeyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateKeys: 'templateKeys',
        };
    }
    static types() {
        return {
            templateKeys: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchQueryByTemplateKeyRequest = BatchQueryByTemplateKeyRequest;
class BatchQueryByTemplateKeyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateList: 'templateList',
        };
    }
    static types() {
        return {
            templateList: { 'type': 'array', 'itemType': BatchQueryByTemplateKeyResponseBodyTemplateList },
        };
    }
}
exports.BatchQueryByTemplateKeyResponseBody = BatchQueryByTemplateKeyResponseBody;
class BatchQueryByTemplateKeyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchQueryByTemplateKeyResponseBody,
        };
    }
}
exports.BatchQueryByTemplateKeyResponse = BatchQueryByTemplateKeyResponse;
class BatchUpdateTemplateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchUpdateTemplateHeaders = BatchUpdateTemplateHeaders;
class BatchUpdateTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateList: 'templateList',
        };
    }
    static types() {
        return {
            templateList: { 'type': 'array', 'itemType': BatchUpdateTemplateRequestTemplateList },
        };
    }
}
exports.BatchUpdateTemplateRequest = BatchUpdateTemplateRequest;
class BatchUpdateTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            updateResultList: 'updateResultList',
        };
    }
    static types() {
        return {
            updateResultList: { 'type': 'array', 'itemType': BatchUpdateTemplateResponseBodyUpdateResultList },
        };
    }
}
exports.BatchUpdateTemplateResponseBody = BatchUpdateTemplateResponseBody;
class BatchUpdateTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchUpdateTemplateResponseBody,
        };
    }
}
exports.BatchUpdateTemplateResponse = BatchUpdateTemplateResponse;
class QueryIndustryTagListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryIndustryTagListHeaders = QueryIndustryTagListHeaders;
class QueryIndustryTagListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            industryList: 'industryList',
        };
    }
    static types() {
        return {
            industryList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryIndustryTagListResponseBody = QueryIndustryTagListResponseBody;
class QueryIndustryTagListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryIndustryTagListResponseBody,
        };
    }
}
exports.QueryIndustryTagListResponse = QueryIndustryTagListResponse;
class QueryRoleTagListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryRoleTagListHeaders = QueryRoleTagListHeaders;
class QueryRoleTagListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleList: 'roleList',
        };
    }
    static types() {
        return {
            roleList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.QueryRoleTagListResponseBody = QueryRoleTagListResponseBody;
class QueryRoleTagListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryRoleTagListResponseBody,
        };
    }
}
exports.QueryRoleTagListResponse = QueryRoleTagListResponse;
class QueryTemplateCategorysHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryTemplateCategorysHeaders = QueryTemplateCategorysHeaders;
class QueryTemplateCategorysResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            categoryList: 'categoryList',
            total: 'total',
        };
    }
    static types() {
        return {
            categoryList: { 'type': 'array', 'itemType': QueryTemplateCategorysResponseBodyCategoryList },
            total: 'string',
        };
    }
}
exports.QueryTemplateCategorysResponseBody = QueryTemplateCategorysResponseBody;
class QueryTemplateCategorysResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTemplateCategorysResponseBody,
        };
    }
}
exports.QueryTemplateCategorysResponse = QueryTemplateCategorysResponse;
class RecallAuditTemplateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RecallAuditTemplateHeaders = RecallAuditTemplateHeaders;
class RecallAuditTemplateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateKeys: 'templateKeys',
        };
    }
    static types() {
        return {
            templateKeys: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.RecallAuditTemplateRequest = RecallAuditTemplateRequest;
class RecallAuditTemplateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            recallResult: 'recallResult',
        };
    }
    static types() {
        return {
            recallResult: { 'type': 'array', 'itemType': RecallAuditTemplateResponseBodyRecallResult },
        };
    }
}
exports.RecallAuditTemplateResponseBody = RecallAuditTemplateResponseBody;
class RecallAuditTemplateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RecallAuditTemplateResponseBody,
        };
    }
}
exports.RecallAuditTemplateResponse = RecallAuditTemplateResponse;
class BatchCreateTemplateRequestTemplateList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            adaptEnv: 'adaptEnv',
            appDesc: 'appDesc',
            appIcon: 'appIcon',
            caseVideoList: 'caseVideoList',
            categoryCode: 'categoryCode',
            coverImgList: 'coverImgList',
            expUrl: 'expUrl',
            industryLabelList: 'industryLabelList',
            installTimes: 'installTimes',
            mobilePreviewMediaList: 'mobilePreviewMediaList',
            name: 'name',
            previewMediaList: 'previewMediaList',
            providerName: 'providerName',
            roleLabelList: 'roleLabelList',
            simpleDesc: 'simpleDesc',
            templateKey: 'templateKey',
            useCasesMediaList: 'useCasesMediaList',
        };
    }
    static types() {
        return {
            adaptEnv: { 'type': 'array', 'itemType': 'string' },
            appDesc: 'string',
            appIcon: 'string',
            caseVideoList: { 'type': 'array', 'itemType': 'string' },
            categoryCode: 'string',
            coverImgList: { 'type': 'array', 'itemType': 'string' },
            expUrl: 'string',
            industryLabelList: { 'type': 'array', 'itemType': 'string' },
            installTimes: 'number',
            mobilePreviewMediaList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            previewMediaList: { 'type': 'array', 'itemType': 'string' },
            providerName: 'string',
            roleLabelList: { 'type': 'array', 'itemType': 'string' },
            simpleDesc: 'string',
            templateKey: 'string',
            useCasesMediaList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchCreateTemplateRequestTemplateList = BatchCreateTemplateRequestTemplateList;
class BatchCreateTemplateResponseBodyCreateResultList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateKey: 'templateKey',
            value: 'value',
        };
    }
    static types() {
        return {
            templateKey: 'string',
            value: 'string',
        };
    }
}
exports.BatchCreateTemplateResponseBodyCreateResultList = BatchCreateTemplateResponseBodyCreateResultList;
class BatchQueryByTemplateKeyResponseBodyTemplateList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            adaptEnv: 'adaptEnv',
            appDesc: 'appDesc',
            appIcon: 'appIcon',
            caseVideoList: 'caseVideoList',
            category: 'category',
            coverImgList: 'coverImgList',
            expUrl: 'expUrl',
            industryLabelList: 'industryLabelList',
            installTimes: 'installTimes',
            mobilePreviewMediaList: 'mobilePreviewMediaList',
            name: 'name',
            previewMediaList: 'previewMediaList',
            providerName: 'providerName',
            roleLabelList: 'roleLabelList',
            simpleDesc: 'simpleDesc',
            templateKey: 'templateKey',
            useCasesMediaList: 'useCasesMediaList',
        };
    }
    static types() {
        return {
            adaptEnv: { 'type': 'array', 'itemType': 'string' },
            appDesc: 'string',
            appIcon: 'string',
            caseVideoList: { 'type': 'array', 'itemType': 'string' },
            category: 'string',
            coverImgList: { 'type': 'array', 'itemType': 'string' },
            expUrl: 'string',
            industryLabelList: { 'type': 'array', 'itemType': 'string' },
            installTimes: 'number',
            mobilePreviewMediaList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            previewMediaList: { 'type': 'array', 'itemType': 'string' },
            providerName: 'string',
            roleLabelList: { 'type': 'array', 'itemType': 'string' },
            simpleDesc: 'string',
            templateKey: 'string',
            useCasesMediaList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchQueryByTemplateKeyResponseBodyTemplateList = BatchQueryByTemplateKeyResponseBodyTemplateList;
class BatchUpdateTemplateRequestTemplateList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            adaptEnv: 'adaptEnv',
            appDesc: 'appDesc',
            appIcon: 'appIcon',
            caseVideoList: 'caseVideoList',
            categoryCode: 'categoryCode',
            coverImgList: 'coverImgList',
            expUrl: 'expUrl',
            industryLabelList: 'industryLabelList',
            mobilePreviewMediaList: 'mobilePreviewMediaList',
            name: 'name',
            previewMediaList: 'previewMediaList',
            providerName: 'providerName',
            roleLabelList: 'roleLabelList',
            simpleDesc: 'simpleDesc',
            templateKey: 'templateKey',
            useCasesMediaList: 'useCasesMediaList',
        };
    }
    static types() {
        return {
            adaptEnv: { 'type': 'array', 'itemType': 'string' },
            appDesc: 'string',
            appIcon: 'string',
            caseVideoList: { 'type': 'array', 'itemType': 'string' },
            categoryCode: 'string',
            coverImgList: { 'type': 'array', 'itemType': 'string' },
            expUrl: 'string',
            industryLabelList: { 'type': 'array', 'itemType': 'string' },
            mobilePreviewMediaList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            previewMediaList: { 'type': 'array', 'itemType': 'string' },
            providerName: 'string',
            roleLabelList: { 'type': 'array', 'itemType': 'string' },
            simpleDesc: 'string',
            templateKey: 'string',
            useCasesMediaList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchUpdateTemplateRequestTemplateList = BatchUpdateTemplateRequestTemplateList;
class BatchUpdateTemplateResponseBodyUpdateResultList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateKey: 'templateKey',
            value: 'value',
        };
    }
    static types() {
        return {
            templateKey: 'string',
            value: 'string',
        };
    }
}
exports.BatchUpdateTemplateResponseBodyUpdateResultList = BatchUpdateTemplateResponseBodyUpdateResultList;
class QueryTemplateCategorysResponseBodyCategoryList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            code: 'code',
            name: 'name',
        };
    }
    static types() {
        return {
            code: 'string',
            name: 'string',
        };
    }
}
exports.QueryTemplateCategorysResponseBodyCategoryList = QueryTemplateCategorysResponseBodyCategoryList;
class RecallAuditTemplateResponseBodyRecallResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            templateKey: 'templateKey',
            value: 'value',
        };
    }
    static types() {
        return {
            templateKey: 'string',
            value: 'string',
        };
    }
}
exports.RecallAuditTemplateResponseBodyRecallResult = RecallAuditTemplateResponseBodyRecallResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async batchCreateTemplateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.templateList)) {
            body["templateList"] = request.templateList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchCreateTemplate",
            version: "apaas_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/apaas/templates`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchCreateTemplateResponse({}));
    }
    async batchCreateTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchCreateTemplateHeaders({});
        return await this.batchCreateTemplateWithOptions(request, headers, runtime);
    }
    async batchQueryByTemplateKeyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.templateKeys)) {
            body["templateKeys"] = request.templateKeys;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchQueryByTemplateKey",
            version: "apaas_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/apaas/templates/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchQueryByTemplateKeyResponse({}));
    }
    async batchQueryByTemplateKey(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchQueryByTemplateKeyHeaders({});
        return await this.batchQueryByTemplateKeyWithOptions(request, headers, runtime);
    }
    async batchUpdateTemplateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.templateList)) {
            body["templateList"] = request.templateList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchUpdateTemplate",
            version: "apaas_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/apaas/templates`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchUpdateTemplateResponse({}));
    }
    async batchUpdateTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchUpdateTemplateHeaders({});
        return await this.batchUpdateTemplateWithOptions(request, headers, runtime);
    }
    async queryIndustryTagListWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryIndustryTagList",
            version: "apaas_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/apaas/templates/industries`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryIndustryTagListResponse({}));
    }
    async queryIndustryTagList() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryIndustryTagListHeaders({});
        return await this.queryIndustryTagListWithOptions(headers, runtime);
    }
    async queryRoleTagListWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryRoleTagList",
            version: "apaas_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/apaas/templates/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryRoleTagListResponse({}));
    }
    async queryRoleTagList() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRoleTagListHeaders({});
        return await this.queryRoleTagListWithOptions(headers, runtime);
    }
    async queryTemplateCategorysWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryTemplateCategorys",
            version: "apaas_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/apaas/templates/categories`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryTemplateCategorysResponse({}));
    }
    async queryTemplateCategorys() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTemplateCategorysHeaders({});
        return await this.queryTemplateCategorysWithOptions(headers, runtime);
    }
    async recallAuditTemplateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.templateKeys)) {
            body["templateKeys"] = request.templateKeys;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RecallAuditTemplate",
            version: "apaas_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/apaas/templates/audits/recall`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RecallAuditTemplateResponse({}));
    }
    async recallAuditTemplate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RecallAuditTemplateHeaders({});
        return await this.recallAuditTemplateWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map