"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class QueryScoreHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryScoreHeaders = QueryScoreHeaders;
class QueryScoreRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            encryption: 'encryption',
            fullName: 'fullName',
            idCardCode: 'idCardCode',
            mobile: 'mobile',
            orgName: 'orgName',
            uniScCode: 'uniScCode',
        };
    }
    static types() {
        return {
            encryption: 'string',
            fullName: 'string',
            idCardCode: 'string',
            mobile: 'string',
            orgName: 'string',
            uniScCode: 'string',
        };
    }
}
exports.QueryScoreRequest = QueryScoreRequest;
class QueryScoreResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryScoreResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.QueryScoreResponseBody = QueryScoreResponseBody;
class QueryScoreResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryScoreResponseBody,
        };
    }
}
exports.QueryScoreResponse = QueryScoreResponse;
class QueryScoreResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ccocScore: 'ccocScore',
            cityChangeCnt3y: 'cityChangeCnt3y',
            cityChangeTrend2y: 'cityChangeTrend2y',
            classificationOfOrg: 'classificationOfOrg',
            growthRateLoginDays180d: 'growthRateLoginDays180d',
            indChangeCnt3y: 'indChangeCnt3y',
            indChangeTrend2y: 'indChangeTrend2y',
            jobChangeCnt3y: 'jobChangeCnt3y',
            jobTitle: 'jobTitle',
            joinDays: 'joinDays',
            loginDays14dPct: 'loginDays14dPct',
            loginDays365dPct: 'loginDays365dPct',
            orgCnt: 'orgCnt',
            orgIndustrySubNameNew: 'orgIndustrySubNameNew',
            orgIndustryUpNameNew: 'orgIndustryUpNameNew',
        };
    }
    static types() {
        return {
            ccocScore: 'number',
            cityChangeCnt3y: 'number',
            cityChangeTrend2y: 'number',
            classificationOfOrg: 'string',
            growthRateLoginDays180d: 'number',
            indChangeCnt3y: 'number',
            indChangeTrend2y: 'number',
            jobChangeCnt3y: 'number',
            jobTitle: 'string',
            joinDays: 'number',
            loginDays14dPct: 'number',
            loginDays365dPct: 'number',
            orgCnt: 'number',
            orgIndustrySubNameNew: 'string',
            orgIndustryUpNameNew: 'string',
        };
    }
}
exports.QueryScoreResponseBodyResult = QueryScoreResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async queryScoreWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.encryption)) {
            query["encryption"] = request.encryption;
        }
        if (!tea_util_1.default.isUnset(request.fullName)) {
            query["fullName"] = request.fullName;
        }
        if (!tea_util_1.default.isUnset(request.idCardCode)) {
            query["idCardCode"] = request.idCardCode;
        }
        if (!tea_util_1.default.isUnset(request.mobile)) {
            query["mobile"] = request.mobile;
        }
        if (!tea_util_1.default.isUnset(request.orgName)) {
            query["orgName"] = request.orgName;
        }
        if (!tea_util_1.default.isUnset(request.uniScCode)) {
            query["uniScCode"] = request.uniScCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryScore",
            version: "credit_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/credit/scores`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryScoreResponse({}));
    }
    async queryScore(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryScoreHeaders({});
        return await this.queryScoreWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map