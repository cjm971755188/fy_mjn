"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddAppRolesToMemberHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddAppRolesToMemberHeaders = AddAppRolesToMemberHeaders;
class AddAppRolesToMemberRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            opUserId: 'opUserId',
            roleList: 'roleList',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'string',
            opUserId: 'string',
            roleList: { 'type': 'array', 'itemType': AddAppRolesToMemberRequestRoleList },
        };
    }
}
exports.AddAppRolesToMemberRequest = AddAppRolesToMemberRequest;
class AddAppRolesToMemberResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': AddAppRolesToMemberResponseBodyResult },
        };
    }
}
exports.AddAppRolesToMemberResponseBody = AddAppRolesToMemberResponseBody;
class AddAppRolesToMemberResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddAppRolesToMemberResponseBody,
        };
    }
}
exports.AddAppRolesToMemberResponse = AddAppRolesToMemberResponse;
class AddAppToWorkBenchGroupHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddAppToWorkBenchGroupHeaders = AddAppToWorkBenchGroupHeaders;
class AddAppToWorkBenchGroupRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            componentId: 'componentId',
            ecologicalCorpId: 'ecologicalCorpId',
            opUnionId: 'opUnionId',
        };
    }
    static types() {
        return {
            componentId: 'string',
            ecologicalCorpId: 'string',
            opUnionId: 'string',
        };
    }
}
exports.AddAppToWorkBenchGroupRequest = AddAppToWorkBenchGroupRequest;
class AddAppToWorkBenchGroupResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.AddAppToWorkBenchGroupResponseBody = AddAppToWorkBenchGroupResponseBody;
class AddAppToWorkBenchGroupResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddAppToWorkBenchGroupResponseBody,
        };
    }
}
exports.AddAppToWorkBenchGroupResponse = AddAppToWorkBenchGroupResponse;
class AddMemberToAppRoleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AddMemberToAppRoleHeaders = AddMemberToAppRoleHeaders;
class AddMemberToAppRoleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIdList: 'deptIdList',
            opUserId: 'opUserId',
            scopeVersion: 'scopeVersion',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
            scopeVersion: 'number',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.AddMemberToAppRoleRequest = AddMemberToAppRoleRequest;
class AddMemberToAppRoleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            latestScopeVersion: 'latestScopeVersion',
        };
    }
    static types() {
        return {
            latestScopeVersion: 'number',
        };
    }
}
exports.AddMemberToAppRoleResponseBody = AddMemberToAppRoleResponseBody;
class AddMemberToAppRoleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddMemberToAppRoleResponseBody,
        };
    }
}
exports.AddMemberToAppRoleResponse = AddMemberToAppRoleResponse;
class AnheiPResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.AnheiPResponseBody = AnheiPResponseBody;
class AnheiPResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AnheiPResponseBody,
        };
    }
}
exports.AnheiPResponse = AnheiPResponse;
class AnheiTest888ResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.AnheiTest888ResponseBody = AnheiTest888ResponseBody;
class AnheiTest888Response extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AnheiTest888ResponseBody,
        };
    }
}
exports.AnheiTest888Response = AnheiTest888Response;
class AnheiTestBResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.AnheiTestBResponseBody = AnheiTestBResponseBody;
class AnheiTestBResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AnheiTestBResponseBody,
        };
    }
}
exports.AnheiTestBResponse = AnheiTestBResponse;
class AnheiTestNineResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.AnheiTestNineResponseBody = AnheiTestNineResponseBody;
class AnheiTestNineResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AnheiTestNineResponseBody,
        };
    }
}
exports.AnheiTestNineResponse = AnheiTestNineResponse;
class AppStatusManagerTestRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.AppStatusManagerTestRequest = AppStatusManagerTestRequest;
class AppStatusManagerTestResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.AppStatusManagerTestResponseBody = AppStatusManagerTestResponseBody;
class AppStatusManagerTestResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AppStatusManagerTestResponseBody,
        };
    }
}
exports.AppStatusManagerTestResponse = AppStatusManagerTestResponse;
class AyunTestResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.AyunTestResponseBody = AyunTestResponseBody;
class AyunTestResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AyunTestResponseBody,
        };
    }
}
exports.AyunTestResponse = AyunTestResponse;
class AyunTestOnlineResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'requestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.AyunTestOnlineResponseBody = AyunTestOnlineResponseBody;
class AyunTestOnlineResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AyunTestOnlineResponseBody,
        };
    }
}
exports.AyunTestOnlineResponse = AyunTestOnlineResponse;
class CreateApaasAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateApaasAppHeaders = CreateApaasAppHeaders;
class CreateApaasAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appDesc: 'appDesc',
            appIcon: 'appIcon',
            appName: 'appName',
            bizAppId: 'bizAppId',
            homepageEditLink: 'homepageEditLink',
            homepageLink: 'homepageLink',
            isShortCut: 'isShortCut',
            ompLink: 'ompLink',
            opUserId: 'opUserId',
            pcHomepageEditLink: 'pcHomepageEditLink',
            pcHomepageLink: 'pcHomepageLink',
            templateKey: 'templateKey',
        };
    }
    static types() {
        return {
            appDesc: 'string',
            appIcon: 'string',
            appName: 'string',
            bizAppId: 'string',
            homepageEditLink: 'string',
            homepageLink: 'string',
            isShortCut: 'number',
            ompLink: 'string',
            opUserId: 'string',
            pcHomepageEditLink: 'string',
            pcHomepageLink: 'string',
            templateKey: 'string',
        };
    }
}
exports.CreateApaasAppRequest = CreateApaasAppRequest;
class CreateApaasAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            bizAppId: 'bizAppId',
        };
    }
    static types() {
        return {
            agentId: 'number',
            bizAppId: 'string',
        };
    }
}
exports.CreateApaasAppResponseBody = CreateApaasAppResponseBody;
class CreateApaasAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateApaasAppResponseBody,
        };
    }
}
exports.CreateApaasAppResponse = CreateApaasAppResponse;
class CreateInnerAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateInnerAppHeaders = CreateInnerAppHeaders;
class CreateInnerAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'desc',
            developType: 'developType',
            homepageLink: 'homepageLink',
            icon: 'icon',
            ipWhiteList: 'ipWhiteList',
            name: 'name',
            ompLink: 'ompLink',
            opUnionId: 'opUnionId',
            pcHomepageLink: 'pcHomepageLink',
            scopeType: 'scopeType',
        };
    }
    static types() {
        return {
            desc: 'string',
            developType: 'number',
            homepageLink: 'string',
            icon: 'string',
            ipWhiteList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            ompLink: 'string',
            opUnionId: 'string',
            pcHomepageLink: 'string',
            scopeType: 'string',
        };
    }
}
exports.CreateInnerAppRequest = CreateInnerAppRequest;
class CreateInnerAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            appKey: 'appKey',
            appSecret: 'appSecret',
        };
    }
    static types() {
        return {
            agentId: 'number',
            appKey: 'string',
            appSecret: 'string',
        };
    }
}
exports.CreateInnerAppResponseBody = CreateInnerAppResponseBody;
class CreateInnerAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateInnerAppResponseBody,
        };
    }
}
exports.CreateInnerAppResponse = CreateInnerAppResponse;
class DeleteAppRoleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteAppRoleHeaders = DeleteAppRoleHeaders;
class DeleteAppRoleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            opUserId: 'string',
        };
    }
}
exports.DeleteAppRoleRequest = DeleteAppRoleRequest;
class DeleteAppRoleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteAppRoleResponseBody = DeleteAppRoleResponseBody;
class DeleteAppRoleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteAppRoleResponseBody,
        };
    }
}
exports.DeleteAppRoleResponse = DeleteAppRoleResponse;
class DeleteInnerAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteInnerAppHeaders = DeleteInnerAppHeaders;
class DeleteInnerAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            opUnionId: 'opUnionId',
        };
    }
    static types() {
        return {
            opUnionId: 'string',
        };
    }
}
exports.DeleteInnerAppRequest = DeleteInnerAppRequest;
class DeleteInnerAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeleteInnerAppResponseBody = DeleteInnerAppResponseBody;
class DeleteInnerAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteInnerAppResponseBody,
        };
    }
}
exports.DeleteInnerAppResponse = DeleteInnerAppResponse;
class GetApaasAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetApaasAppHeaders = GetApaasAppHeaders;
class GetApaasAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            bizAppId: 'bizAppId',
            publishStatus: 'publishStatus',
        };
    }
    static types() {
        return {
            agentId: 'number',
            bizAppId: 'string',
            publishStatus: 'string',
        };
    }
}
exports.GetApaasAppResponseBody = GetApaasAppResponseBody;
class GetApaasAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetApaasAppResponseBody,
        };
    }
}
exports.GetApaasAppResponse = GetApaasAppResponse;
class GetAppResourceUseInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAppResourceUseInfoHeaders = GetAppResourceUseInfoHeaders;
class GetAppResourceUseInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            benefitCode: 'benefitCode',
            endTime: 'endTime',
            periodType: 'periodType',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            benefitCode: 'string',
            endTime: 'string',
            periodType: 'string',
            startTime: 'string',
        };
    }
}
exports.GetAppResourceUseInfoRequest = GetAppResourceUseInfoRequest;
class GetAppResourceUseInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: { 'type': 'array', 'itemType': GetAppResourceUseInfoResponseBody },
        };
    }
}
exports.GetAppResourceUseInfoResponse = GetAppResourceUseInfoResponse;
class GetAppRoleScopeByRoleIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAppRoleScopeByRoleIdHeaders = GetAppRoleScopeByRoleIdHeaders;
class GetAppRoleScopeByRoleIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            canManageRole: 'canManageRole',
            deptIdList: 'deptIdList',
            roleId: 'roleId',
            roleName: 'roleName',
            scopeType: 'scopeType',
            scopeVersion: 'scopeVersion',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            canManageRole: 'boolean',
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            roleId: 'number',
            roleName: 'string',
            scopeType: 'string',
            scopeVersion: 'string',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetAppRoleScopeByRoleIdResponseBody = GetAppRoleScopeByRoleIdResponseBody;
class GetAppRoleScopeByRoleIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAppRoleScopeByRoleIdResponseBody,
        };
    }
}
exports.GetAppRoleScopeByRoleIdResponse = GetAppRoleScopeByRoleIdResponse;
class GetInnerAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetInnerAppHeaders = GetInnerAppHeaders;
class GetInnerAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ecologicalCorpId: 'ecologicalCorpId',
            opUnionId: 'opUnionId',
        };
    }
    static types() {
        return {
            ecologicalCorpId: 'string',
            opUnionId: 'string',
        };
    }
}
exports.GetInnerAppRequest = GetInnerAppRequest;
class GetInnerAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            appKey: 'appKey',
            appSecret: 'appSecret',
            desc: 'desc',
            homepageLink: 'homepageLink',
            icon: 'icon',
            ipWhiteList: 'ipWhiteList',
            name: 'name',
            ompLink: 'ompLink',
            pcHomepageLink: 'pcHomepageLink',
        };
    }
    static types() {
        return {
            agentId: 'number',
            appKey: 'string',
            appSecret: 'string',
            desc: 'string',
            homepageLink: 'string',
            icon: 'string',
            ipWhiteList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            ompLink: 'string',
            pcHomepageLink: 'string',
        };
    }
}
exports.GetInnerAppResponseBody = GetInnerAppResponseBody;
class GetInnerAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInnerAppResponseBody,
        };
    }
}
exports.GetInnerAppResponse = GetInnerAppResponse;
class GetMicroAppScopeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetMicroAppScopeHeaders = GetMicroAppScopeHeaders;
class GetMicroAppScopeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: GetMicroAppScopeResponseBodyResult,
        };
    }
}
exports.GetMicroAppScopeResponseBody = GetMicroAppScopeResponseBody;
class GetMicroAppScopeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMicroAppScopeResponseBody,
        };
    }
}
exports.GetMicroAppScopeResponse = GetMicroAppScopeResponse;
class GetMicroAppUserAccessHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetMicroAppUserAccessHeaders = GetMicroAppUserAccessHeaders;
class GetMicroAppUserAccessResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.GetMicroAppUserAccessResponseBody = GetMicroAppUserAccessResponseBody;
class GetMicroAppUserAccessResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMicroAppUserAccessResponseBody,
        };
    }
}
exports.GetMicroAppUserAccessResponse = GetMicroAppUserAccessResponse;
class GetUserAppDevAccessHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetUserAppDevAccessHeaders = GetUserAppDevAccessHeaders;
class GetUserAppDevAccessResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.GetUserAppDevAccessResponseBody = GetUserAppDevAccessResponseBody;
class GetUserAppDevAccessResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserAppDevAccessResponseBody,
        };
    }
}
exports.GetUserAppDevAccessResponse = GetUserAppDevAccessResponse;
class ListAllAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListAllAppHeaders = ListAllAppHeaders;
class ListAllAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appList: 'appList',
        };
    }
    static types() {
        return {
            appList: { 'type': 'array', 'itemType': ListAllAppResponseBodyAppList },
        };
    }
}
exports.ListAllAppResponseBody = ListAllAppResponseBody;
class ListAllAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAllAppResponseBody,
        };
    }
}
exports.ListAllAppResponse = ListAllAppResponse;
class ListAllInnerAppsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListAllInnerAppsHeaders = ListAllInnerAppsHeaders;
class ListAllInnerAppsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appList: 'appList',
        };
    }
    static types() {
        return {
            appList: { 'type': 'array', 'itemType': ListAllInnerAppsResponseBodyAppList },
        };
    }
}
exports.ListAllInnerAppsResponseBody = ListAllInnerAppsResponseBody;
class ListAllInnerAppsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAllInnerAppsResponseBody,
        };
    }
}
exports.ListAllInnerAppsResponse = ListAllInnerAppsResponse;
class ListAppRoleScopesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListAppRoleScopesHeaders = ListAppRoleScopesHeaders;
class ListAppRoleScopesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nextToken: 'nextToken',
            size: 'size',
        };
    }
    static types() {
        return {
            nextToken: 'number',
            size: 'number',
        };
    }
}
exports.ListAppRoleScopesRequest = ListAppRoleScopesRequest;
class ListAppRoleScopesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            dataList: 'dataList',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': ListAppRoleScopesResponseBodyDataList },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
}
exports.ListAppRoleScopesResponseBody = ListAppRoleScopesResponseBody;
class ListAppRoleScopesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAppRoleScopesResponseBody,
        };
    }
}
exports.ListAppRoleScopesResponse = ListAppRoleScopesResponse;
class ListInnerAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListInnerAppHeaders = ListInnerAppHeaders;
class ListInnerAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            ecologicalCorpId: 'ecologicalCorpId',
        };
    }
    static types() {
        return {
            ecologicalCorpId: 'string',
        };
    }
}
exports.ListInnerAppRequest = ListInnerAppRequest;
class ListInnerAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appList: 'appList',
        };
    }
    static types() {
        return {
            appList: { 'type': 'array', 'itemType': ListInnerAppResponseBodyAppList },
        };
    }
}
exports.ListInnerAppResponseBody = ListInnerAppResponseBody;
class ListInnerAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListInnerAppResponseBody,
        };
    }
}
exports.ListInnerAppResponse = ListInnerAppResponse;
class ListInnerAppVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListInnerAppVersionHeaders = ListInnerAppVersionHeaders;
class ListInnerAppVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appVersionList: 'appVersionList',
        };
    }
    static types() {
        return {
            appVersionList: { 'type': 'array', 'itemType': ListInnerAppVersionResponseBodyAppVersionList },
        };
    }
}
exports.ListInnerAppVersionResponseBody = ListInnerAppVersionResponseBody;
class ListInnerAppVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListInnerAppVersionResponseBody,
        };
    }
}
exports.ListInnerAppVersionResponse = ListInnerAppVersionResponse;
class ListRoleInfoByUserHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListRoleInfoByUserHeaders = ListRoleInfoByUserHeaders;
class ListRoleInfoByUserResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ListRoleInfoByUserResponseBodyResult },
        };
    }
}
exports.ListRoleInfoByUserResponseBody = ListRoleInfoByUserResponseBody;
class ListRoleInfoByUserResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListRoleInfoByUserResponseBody,
        };
    }
}
exports.ListRoleInfoByUserResponse = ListRoleInfoByUserResponse;
class ListUserVilebleAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListUserVilebleAppHeaders = ListUserVilebleAppHeaders;
class ListUserVilebleAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appList: 'appList',
        };
    }
    static types() {
        return {
            appList: { 'type': 'array', 'itemType': ListUserVilebleAppResponseBodyAppList },
        };
    }
}
exports.ListUserVilebleAppResponseBody = ListUserVilebleAppResponseBody;
class ListUserVilebleAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListUserVilebleAppResponseBody,
        };
    }
}
exports.ListUserVilebleAppResponse = ListUserVilebleAppResponse;
class PageInnerAppHistoryVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PageInnerAppHistoryVersionHeaders = PageInnerAppHistoryVersionHeaders;
class PageInnerAppHistoryVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.PageInnerAppHistoryVersionRequest = PageInnerAppHistoryVersionRequest;
class PageInnerAppHistoryVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            miniAppVersionList: 'miniAppVersionList',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            miniAppVersionList: { 'type': 'array', 'itemType': PageInnerAppHistoryVersionResponseBodyMiniAppVersionList },
            totalCount: 'number',
        };
    }
}
exports.PageInnerAppHistoryVersionResponseBody = PageInnerAppHistoryVersionResponseBody;
class PageInnerAppHistoryVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PageInnerAppHistoryVersionResponseBody,
        };
    }
}
exports.PageInnerAppHistoryVersionResponse = PageInnerAppHistoryVersionResponse;
class PublishInnerAppVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PublishInnerAppVersionHeaders = PublishInnerAppVersionHeaders;
class PublishInnerAppVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appVersionId: 'appVersionId',
            miniAppOnPc: 'miniAppOnPc',
            opUnionId: 'opUnionId',
            publishType: 'publishType',
        };
    }
    static types() {
        return {
            appVersionId: 'number',
            miniAppOnPc: 'boolean',
            opUnionId: 'string',
            publishType: 'string',
        };
    }
}
exports.PublishInnerAppVersionRequest = PublishInnerAppVersionRequest;
class PublishInnerAppVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.PublishInnerAppVersionResponseBody = PublishInnerAppVersionResponseBody;
class PublishInnerAppVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PublishInnerAppVersionResponseBody,
        };
    }
}
exports.PublishInnerAppVersionResponse = PublishInnerAppVersionResponse;
class RebuildRoleScopeForAppRoleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RebuildRoleScopeForAppRoleHeaders = RebuildRoleScopeForAppRoleHeaders;
class RebuildRoleScopeForAppRoleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIdList: 'deptIdList',
            opUserId: 'opUserId',
            scopeType: 'scopeType',
            scopeVersion: 'scopeVersion',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
            scopeType: 'string',
            scopeVersion: 'number',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.RebuildRoleScopeForAppRoleRequest = RebuildRoleScopeForAppRoleRequest;
class RebuildRoleScopeForAppRoleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            latestScopeVersion: 'latestScopeVersion',
        };
    }
    static types() {
        return {
            latestScopeVersion: 'number',
        };
    }
}
exports.RebuildRoleScopeForAppRoleResponseBody = RebuildRoleScopeForAppRoleResponseBody;
class RebuildRoleScopeForAppRoleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RebuildRoleScopeForAppRoleResponseBody,
        };
    }
}
exports.RebuildRoleScopeForAppRoleResponse = RebuildRoleScopeForAppRoleResponse;
class RegisterCustomAppRoleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RegisterCustomAppRoleHeaders = RegisterCustomAppRoleHeaders;
class RegisterCustomAppRoleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            canManageRole: 'canManageRole',
            opUserId: 'opUserId',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            canManageRole: 'boolean',
            opUserId: 'string',
            roleName: 'string',
        };
    }
}
exports.RegisterCustomAppRoleRequest = RegisterCustomAppRoleRequest;
class RegisterCustomAppRoleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleId: 'roleId',
            scopeVersion: 'scopeVersion',
        };
    }
    static types() {
        return {
            roleId: 'number',
            scopeVersion: 'number',
        };
    }
}
exports.RegisterCustomAppRoleResponseBody = RegisterCustomAppRoleResponseBody;
class RegisterCustomAppRoleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RegisterCustomAppRoleResponseBody,
        };
    }
}
exports.RegisterCustomAppRoleResponse = RegisterCustomAppRoleResponse;
class RemoveApaasAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveApaasAppHeaders = RemoveApaasAppHeaders;
class RemoveApaasAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizAppId: 'bizAppId',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            bizAppId: 'string',
            opUserId: 'string',
        };
    }
}
exports.RemoveApaasAppRequest = RemoveApaasAppRequest;
class RemoveApaasAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.RemoveApaasAppResponseBody = RemoveApaasAppResponseBody;
class RemoveApaasAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveApaasAppResponseBody,
        };
    }
}
exports.RemoveApaasAppResponse = RemoveApaasAppResponse;
class RemoveMemberForAppRoleHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveMemberForAppRoleHeaders = RemoveMemberForAppRoleHeaders;
class RemoveMemberForAppRoleRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIdList: 'deptIdList',
            opUserId: 'opUserId',
            scopeVersion: 'scopeVersion',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            opUserId: 'string',
            scopeVersion: 'number',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.RemoveMemberForAppRoleRequest = RemoveMemberForAppRoleRequest;
class RemoveMemberForAppRoleResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            latestScopeVersion: 'latestScopeVersion',
        };
    }
    static types() {
        return {
            latestScopeVersion: 'number',
        };
    }
}
exports.RemoveMemberForAppRoleResponseBody = RemoveMemberForAppRoleResponseBody;
class RemoveMemberForAppRoleResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveMemberForAppRoleResponseBody,
        };
    }
}
exports.RemoveMemberForAppRoleResponse = RemoveMemberForAppRoleResponse;
class RollbackInnerAppVersionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RollbackInnerAppVersionHeaders = RollbackInnerAppVersionHeaders;
class RollbackInnerAppVersionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appVersionId: 'appVersionId',
            opUnionId: 'opUnionId',
        };
    }
    static types() {
        return {
            appVersionId: 'number',
            opUnionId: 'string',
        };
    }
}
exports.RollbackInnerAppVersionRequest = RollbackInnerAppVersionRequest;
class RollbackInnerAppVersionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.RollbackInnerAppVersionResponseBody = RollbackInnerAppVersionResponseBody;
class RollbackInnerAppVersionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RollbackInnerAppVersionResponseBody,
        };
    }
}
exports.RollbackInnerAppVersionResponse = RollbackInnerAppVersionResponse;
class SetMicroAppScopeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SetMicroAppScopeHeaders = SetMicroAppScopeHeaders;
class SetMicroAppScopeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            addDeptIds: 'addDeptIds',
            addRoleIds: 'addRoleIds',
            addUserIds: 'addUserIds',
            delDeptIds: 'delDeptIds',
            delRoleIds: 'delRoleIds',
            delUserIds: 'delUserIds',
            onlyAdminVisible: 'onlyAdminVisible',
        };
    }
    static types() {
        return {
            addDeptIds: { 'type': 'array', 'itemType': 'number' },
            addRoleIds: { 'type': 'array', 'itemType': 'number' },
            addUserIds: { 'type': 'array', 'itemType': 'string' },
            delDeptIds: { 'type': 'array', 'itemType': 'number' },
            delRoleIds: { 'type': 'array', 'itemType': 'number' },
            delUserIds: { 'type': 'array', 'itemType': 'string' },
            onlyAdminVisible: 'boolean',
        };
    }
}
exports.SetMicroAppScopeRequest = SetMicroAppScopeRequest;
class SetMicroAppScopeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.SetMicroAppScopeResponseBody = SetMicroAppScopeResponseBody;
class SetMicroAppScopeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetMicroAppScopeResponseBody,
        };
    }
}
exports.SetMicroAppScopeResponse = SetMicroAppScopeResponse;
class UpdateApaasAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateApaasAppHeaders = UpdateApaasAppHeaders;
class UpdateApaasAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appIcon: 'appIcon',
            appName: 'appName',
            appStatus: 'appStatus',
            bizAppId: 'bizAppId',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            appIcon: 'string',
            appName: 'string',
            appStatus: 'number',
            bizAppId: 'string',
            opUserId: 'string',
        };
    }
}
exports.UpdateApaasAppRequest = UpdateApaasAppRequest;
class UpdateApaasAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            bizAppId: 'bizAppId',
        };
    }
    static types() {
        return {
            agentId: 'number',
            bizAppId: 'string',
        };
    }
}
exports.UpdateApaasAppResponseBody = UpdateApaasAppResponseBody;
class UpdateApaasAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateApaasAppResponseBody,
        };
    }
}
exports.UpdateApaasAppResponse = UpdateApaasAppResponse;
class UpdateAppRoleInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateAppRoleInfoHeaders = UpdateAppRoleInfoHeaders;
class UpdateAppRoleInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            canManageRole: 'canManageRole',
            newRoleName: 'newRoleName',
            opUserId: 'opUserId',
        };
    }
    static types() {
        return {
            canManageRole: 'boolean',
            newRoleName: 'string',
            opUserId: 'string',
        };
    }
}
exports.UpdateAppRoleInfoRequest = UpdateAppRoleInfoRequest;
class UpdateAppRoleInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateAppRoleInfoResponseBody = UpdateAppRoleInfoResponseBody;
class UpdateAppRoleInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateAppRoleInfoResponseBody,
        };
    }
}
exports.UpdateAppRoleInfoResponse = UpdateAppRoleInfoResponse;
class UpdateInnerAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInnerAppHeaders = UpdateInnerAppHeaders;
class UpdateInnerAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            desc: 'desc',
            homepageLink: 'homepageLink',
            icon: 'icon',
            ipWhiteList: 'ipWhiteList',
            name: 'name',
            ompLink: 'ompLink',
            opUnionId: 'opUnionId',
            pcHomepageLink: 'pcHomepageLink',
        };
    }
    static types() {
        return {
            desc: 'string',
            homepageLink: 'string',
            icon: 'string',
            ipWhiteList: { 'type': 'array', 'itemType': 'string' },
            name: 'string',
            ompLink: 'string',
            opUnionId: 'string',
            pcHomepageLink: 'string',
        };
    }
}
exports.UpdateInnerAppRequest = UpdateInnerAppRequest;
class UpdateInnerAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateInnerAppResponseBody = UpdateInnerAppResponseBody;
class UpdateInnerAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInnerAppResponseBody,
        };
    }
}
exports.UpdateInnerAppResponse = UpdateInnerAppResponse;
class AddAppRolesToMemberRequestRoleList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            roleId: 'roleId',
            scopeVersion: 'scopeVersion',
        };
    }
    static types() {
        return {
            roleId: 'number',
            scopeVersion: 'number',
        };
    }
}
exports.AddAppRolesToMemberRequestRoleList = AddAppRolesToMemberRequestRoleList;
class AddAppRolesToMemberResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            latestScopeVersion: 'latestScopeVersion',
            roleId: 'roleId',
            subErrorCode: 'subErrorCode',
            subErrorMsg: 'subErrorMsg',
            success: 'success',
        };
    }
    static types() {
        return {
            latestScopeVersion: 'number',
            roleId: 'number',
            subErrorCode: 'string',
            subErrorMsg: 'string',
            success: 'boolean',
        };
    }
}
exports.AddAppRolesToMemberResponseBodyResult = AddAppRolesToMemberResponseBodyResult;
class GetAppResourceUseInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            period: 'period',
            usedNum: 'usedNum',
            quotaNum: 'quotaNum',
        };
    }
    static types() {
        return {
            period: 'string',
            usedNum: 'number',
            quotaNum: 'number',
        };
    }
}
exports.GetAppResourceUseInfoResponseBody = GetAppResourceUseInfoResponseBody;
class GetMicroAppScopeResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptIds: 'deptIds',
            onlyAdminVisible: 'onlyAdminVisible',
            roleIds: 'roleIds',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            deptIds: { 'type': 'array', 'itemType': 'number' },
            onlyAdminVisible: 'boolean',
            roleIds: { 'type': 'array', 'itemType': 'number' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.GetMicroAppScopeResponseBodyResult = GetMicroAppScopeResponseBodyResult;
class ListAllAppResponseBodyAppList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            appId: 'appId',
            appStatus: 'appStatus',
            desc: 'desc',
            developType: 'developType',
            homepageLink: 'homepageLink',
            icon: 'icon',
            name: 'name',
            ompLink: 'ompLink',
            pcHomepageLink: 'pcHomepageLink',
        };
    }
    static types() {
        return {
            agentId: 'number',
            appId: 'number',
            appStatus: 'number',
            desc: 'string',
            developType: 'number',
            homepageLink: 'string',
            icon: 'string',
            name: 'string',
            ompLink: 'string',
            pcHomepageLink: 'string',
        };
    }
}
exports.ListAllAppResponseBodyAppList = ListAllAppResponseBodyAppList;
class ListAllInnerAppsResponseBodyAppList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            appId: 'appId',
            appStatus: 'appStatus',
            desc: 'desc',
            developType: 'developType',
            homepageLink: 'homepageLink',
            icon: 'icon',
            name: 'name',
            ompLink: 'ompLink',
            pcHomepageLink: 'pcHomepageLink',
        };
    }
    static types() {
        return {
            agentId: 'number',
            appId: 'number',
            appStatus: 'number',
            desc: 'string',
            developType: 'number',
            homepageLink: 'string',
            icon: 'string',
            name: 'string',
            ompLink: 'string',
            pcHomepageLink: 'string',
        };
    }
}
exports.ListAllInnerAppsResponseBodyAppList = ListAllInnerAppsResponseBodyAppList;
class ListAppRoleScopesResponseBodyDataList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            canManageRole: 'canManageRole',
            deptIdList: 'deptIdList',
            roleId: 'roleId',
            roleName: 'roleName',
            scopeType: 'scopeType',
            scopeVersion: 'scopeVersion',
            userIdList: 'userIdList',
        };
    }
    static types() {
        return {
            canManageRole: 'boolean',
            deptIdList: { 'type': 'array', 'itemType': 'number' },
            roleId: 'number',
            roleName: 'string',
            scopeType: 'string',
            scopeVersion: 'number',
            userIdList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.ListAppRoleScopesResponseBodyDataList = ListAppRoleScopesResponseBodyDataList;
class ListInnerAppResponseBodyAppList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            desc: 'desc',
            homepageLink: 'homepageLink',
            icon: 'icon',
            name: 'name',
            ompLink: 'ompLink',
            pcHomepageLink: 'pcHomepageLink',
        };
    }
    static types() {
        return {
            agentId: 'number',
            desc: 'string',
            homepageLink: 'string',
            icon: 'string',
            name: 'string',
            ompLink: 'string',
            pcHomepageLink: 'string',
        };
    }
}
exports.ListInnerAppResponseBodyAppList = ListInnerAppResponseBodyAppList;
class ListInnerAppVersionResponseBodyAppVersionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appVersion: 'appVersion',
            appVersionId: 'appVersionId',
            appVersionType: 'appVersionType',
            createTime: 'createTime',
            entranceLink: 'entranceLink',
            miniAppId: 'miniAppId',
            miniAppOnPc: 'miniAppOnPc',
            modifyTime: 'modifyTime',
        };
    }
    static types() {
        return {
            appVersion: 'string',
            appVersionId: 'number',
            appVersionType: 'number',
            createTime: 'string',
            entranceLink: 'string',
            miniAppId: 'string',
            miniAppOnPc: 'boolean',
            modifyTime: 'string',
        };
    }
}
exports.ListInnerAppVersionResponseBodyAppVersionList = ListInnerAppVersionResponseBodyAppVersionList;
class ListRoleInfoByUserResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            canManageRole: 'canManageRole',
            roleId: 'roleId',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            canManageRole: 'boolean',
            roleId: 'number',
            roleName: 'string',
        };
    }
}
exports.ListRoleInfoByUserResponseBodyResult = ListRoleInfoByUserResponseBodyResult;
class ListUserVilebleAppResponseBodyAppList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            agentId: 'agentId',
            appId: 'appId',
            appStatus: 'appStatus',
            desc: 'desc',
            developType: 'developType',
            homepageLink: 'homepageLink',
            icon: 'icon',
            name: 'name',
            ompLink: 'ompLink',
            pcHomepageLink: 'pcHomepageLink',
        };
    }
    static types() {
        return {
            agentId: 'number',
            appId: 'number',
            appStatus: 'number',
            desc: 'string',
            developType: 'number',
            homepageLink: 'string',
            icon: 'string',
            name: 'string',
            ompLink: 'string',
            pcHomepageLink: 'string',
        };
    }
}
exports.ListUserVilebleAppResponseBodyAppList = ListUserVilebleAppResponseBodyAppList;
class PageInnerAppHistoryVersionResponseBodyMiniAppVersionList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appVersion: 'appVersion',
            appVersionId: 'appVersionId',
            appVersionType: 'appVersionType',
            createTime: 'createTime',
            miniAppId: 'miniAppId',
            miniAppOnPc: 'miniAppOnPc',
            modifyTime: 'modifyTime',
        };
    }
    static types() {
        return {
            appVersion: 'string',
            appVersionId: 'number',
            appVersionType: 'number',
            createTime: 'string',
            miniAppId: 'string',
            miniAppOnPc: 'boolean',
            modifyTime: 'string',
        };
    }
}
exports.PageInnerAppHistoryVersionResponseBodyMiniAppVersionList = PageInnerAppHistoryVersionResponseBodyMiniAppVersionList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._signatureAlgorithm = "v2";
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async addAppRolesToMemberWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.memberId)) {
            body["memberId"] = request.memberId;
        }
        if (!tea_util_1.default.isUnset(request.memberType)) {
            body["memberType"] = request.memberType;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.roleList)) {
            body["roleList"] = request.roleList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddAppRolesToMember",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/members/roles`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddAppRolesToMemberResponse({}));
    }
    async addAppRolesToMember(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddAppRolesToMemberHeaders({});
        return await this.addAppRolesToMemberWithOptions(agentId, request, headers, runtime);
    }
    async addAppToWorkBenchGroupWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.componentId)) {
            body["componentId"] = request.componentId;
        }
        if (!tea_util_1.default.isUnset(request.ecologicalCorpId)) {
            body["ecologicalCorpId"] = request.ecologicalCorpId;
        }
        if (!tea_util_1.default.isUnset(request.opUnionId)) {
            body["opUnionId"] = request.opUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddAppToWorkBenchGroup",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/addToWorkBenchGroup`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddAppToWorkBenchGroupResponse({}));
    }
    async addAppToWorkBenchGroup(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddAppToWorkBenchGroupHeaders({});
        return await this.addAppToWorkBenchGroupWithOptions(agentId, request, headers, runtime);
    }
    async addMemberToAppRoleWithOptions(agentId, roleId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIdList)) {
            body["deptIdList"] = request.deptIdList;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.scopeVersion)) {
            body["scopeVersion"] = request.scopeVersion;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddMemberToAppRole",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/roles/${roleId}/members`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddMemberToAppRoleResponse({}));
    }
    async addMemberToAppRole(agentId, roleId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddMemberToAppRoleHeaders({});
        return await this.addMemberToAppRoleWithOptions(agentId, roleId, request, headers, runtime);
    }
    async anheiPWithOptions(headers, runtime) {
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
        });
        let params = new $OpenApi.Params({
            action: "AnheiP",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/anheiP`,
            method: "GET",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AnheiPResponse({}));
    }
    async anheiP() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.anheiPWithOptions(headers, runtime);
    }
    async anheiTest888WithOptions(headers, runtime) {
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
        });
        let params = new $OpenApi.Params({
            action: "AnheiTest888",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/anheiTest888`,
            method: "POST",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AnheiTest888Response({}));
    }
    async anheiTest888() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.anheiTest888WithOptions(headers, runtime);
    }
    async anheiTestBWithOptions(headers, runtime) {
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
        });
        let params = new $OpenApi.Params({
            action: "AnheiTestB",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/anheiTestB`,
            method: "PUT",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AnheiTestBResponse({}));
    }
    async anheiTestB() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.anheiTestBWithOptions(headers, runtime);
    }
    async anheiTestNineWithOptions(headers, runtime) {
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
        });
        let params = new $OpenApi.Params({
            action: "AnheiTestNine",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/anheiTestNine`,
            method: "POST",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AnheiTestNineResponse({}));
    }
    async anheiTestNine() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.anheiTestNineWithOptions(headers, runtime);
    }
    async appStatusManagerTestWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.requestId)) {
            query["requestId"] = request.requestId;
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "AppStatusManagerTest",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/manager/test`,
            method: "GET",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AppStatusManagerTestResponse({}));
    }
    async appStatusManagerTest(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.appStatusManagerTestWithOptions(request, headers, runtime);
    }
    async ayunTestWithOptions(headers, runtime) {
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
        });
        let params = new $OpenApi.Params({
            action: "AyunTest",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/ayun/test`,
            method: "GET",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AyunTestResponse({}));
    }
    async ayunTest() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.ayunTestWithOptions(headers, runtime);
    }
    async ayunTestOnlineWithOptions(headers, runtime) {
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
        });
        let params = new $OpenApi.Params({
            action: "AyunTestOnline",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/ayunTest`,
            method: "GET",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AyunTestOnlineResponse({}));
    }
    async ayunTestOnline() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.ayunTestOnlineWithOptions(headers, runtime);
    }
    async createApaasAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appDesc)) {
            body["appDesc"] = request.appDesc;
        }
        if (!tea_util_1.default.isUnset(request.appIcon)) {
            body["appIcon"] = request.appIcon;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.bizAppId)) {
            body["bizAppId"] = request.bizAppId;
        }
        if (!tea_util_1.default.isUnset(request.homepageEditLink)) {
            body["homepageEditLink"] = request.homepageEditLink;
        }
        if (!tea_util_1.default.isUnset(request.homepageLink)) {
            body["homepageLink"] = request.homepageLink;
        }
        if (!tea_util_1.default.isUnset(request.isShortCut)) {
            body["isShortCut"] = request.isShortCut;
        }
        if (!tea_util_1.default.isUnset(request.ompLink)) {
            body["ompLink"] = request.ompLink;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.pcHomepageEditLink)) {
            body["pcHomepageEditLink"] = request.pcHomepageEditLink;
        }
        if (!tea_util_1.default.isUnset(request.pcHomepageLink)) {
            body["pcHomepageLink"] = request.pcHomepageLink;
        }
        if (!tea_util_1.default.isUnset(request.templateKey)) {
            body["templateKey"] = request.templateKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateApaasApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apaasApps`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateApaasAppResponse({}));
    }
    async createApaasApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateApaasAppHeaders({});
        return await this.createApaasAppWithOptions(request, headers, runtime);
    }
    async createInnerAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.desc)) {
            body["desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.developType)) {
            body["developType"] = request.developType;
        }
        if (!tea_util_1.default.isUnset(request.homepageLink)) {
            body["homepageLink"] = request.homepageLink;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.ipWhiteList)) {
            body["ipWhiteList"] = request.ipWhiteList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.ompLink)) {
            body["ompLink"] = request.ompLink;
        }
        if (!tea_util_1.default.isUnset(request.opUnionId)) {
            body["opUnionId"] = request.opUnionId;
        }
        if (!tea_util_1.default.isUnset(request.pcHomepageLink)) {
            body["pcHomepageLink"] = request.pcHomepageLink;
        }
        if (!tea_util_1.default.isUnset(request.scopeType)) {
            body["scopeType"] = request.scopeType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateInnerApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateInnerAppResponse({}));
    }
    async createInnerApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateInnerAppHeaders({});
        return await this.createInnerAppWithOptions(request, headers, runtime);
    }
    async deleteAppRoleWithOptions(agentId, roleId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            query["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteAppRole",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/roles/${roleId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteAppRoleResponse({}));
    }
    async deleteAppRole(agentId, roleId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteAppRoleHeaders({});
        return await this.deleteAppRoleWithOptions(agentId, roleId, request, headers, runtime);
    }
    async deleteInnerAppWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.opUnionId)) {
            query["opUnionId"] = request.opUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteInnerApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteInnerAppResponse({}));
    }
    async deleteInnerApp(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteInnerAppHeaders({});
        return await this.deleteInnerAppWithOptions(agentId, request, headers, runtime);
    }
    async getApaasAppWithOptions(bizAppId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetApaasApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apaasApps/${bizAppId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetApaasAppResponse({}));
    }
    async getApaasApp(bizAppId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetApaasAppHeaders({});
        return await this.getApaasAppWithOptions(bizAppId, headers, runtime);
    }
    async getAppResourceUseInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.benefitCode)) {
            query["benefitCode"] = request.benefitCode;
        }
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.periodType)) {
            query["periodType"] = request.periodType;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAppResourceUseInfo",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/resources/useInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "array",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAppResourceUseInfoResponse({}));
    }
    async getAppResourceUseInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAppResourceUseInfoHeaders({});
        return await this.getAppResourceUseInfoWithOptions(request, headers, runtime);
    }
    async getAppRoleScopeByRoleIdWithOptions(agentId, roleId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetAppRoleScopeByRoleId",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/roles/${roleId}/scopes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAppRoleScopeByRoleIdResponse({}));
    }
    async getAppRoleScopeByRoleId(agentId, roleId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAppRoleScopeByRoleIdHeaders({});
        return await this.getAppRoleScopeByRoleIdWithOptions(agentId, roleId, headers, runtime);
    }
    async getInnerAppWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ecologicalCorpId)) {
            query["ecologicalCorpId"] = request.ecologicalCorpId;
        }
        if (!tea_util_1.default.isUnset(request.opUnionId)) {
            query["opUnionId"] = request.opUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetInnerApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInnerAppResponse({}));
    }
    async getInnerApp(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInnerAppHeaders({});
        return await this.getInnerAppWithOptions(agentId, request, headers, runtime);
    }
    async getMicroAppScopeWithOptions(agentId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetMicroAppScope",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/scopes`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMicroAppScopeResponse({}));
    }
    async getMicroAppScope(agentId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMicroAppScopeHeaders({});
        return await this.getMicroAppScopeWithOptions(agentId, headers, runtime);
    }
    async getMicroAppUserAccessWithOptions(agentId, userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetMicroAppUserAccess",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/users/${userId}/adminAccess`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMicroAppUserAccessResponse({}));
    }
    async getMicroAppUserAccess(agentId, userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMicroAppUserAccessHeaders({});
        return await this.getMicroAppUserAccessWithOptions(agentId, userId, headers, runtime);
    }
    async getUserAppDevAccessWithOptions(userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetUserAppDevAccess",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/users/${userId}/devAccesses`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserAppDevAccessResponse({}));
    }
    async getUserAppDevAccess(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserAppDevAccessHeaders({});
        return await this.getUserAppDevAccessWithOptions(userId, headers, runtime);
    }
    async listAllAppWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListAllApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/allApps`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAllAppResponse({}));
    }
    async listAllApp() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAllAppHeaders({});
        return await this.listAllAppWithOptions(headers, runtime);
    }
    async listAllInnerAppsWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListAllInnerApps",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/allInnerApps`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAllInnerAppsResponse({}));
    }
    async listAllInnerApps() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAllInnerAppsHeaders({});
        return await this.listAllInnerAppsWithOptions(headers, runtime);
    }
    async listAppRoleScopesWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.size)) {
            query["size"] = request.size;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListAppRoleScopes",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAppRoleScopesResponse({}));
    }
    async listAppRoleScopes(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAppRoleScopesHeaders({});
        return await this.listAppRoleScopesWithOptions(agentId, request, headers, runtime);
    }
    async listInnerAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.ecologicalCorpId)) {
            query["ecologicalCorpId"] = request.ecologicalCorpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListInnerApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListInnerAppResponse({}));
    }
    async listInnerApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListInnerAppHeaders({});
        return await this.listInnerAppWithOptions(request, headers, runtime);
    }
    async listInnerAppVersionWithOptions(agentId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListInnerAppVersion",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/innerMiniApps/${agentId}/versions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListInnerAppVersionResponse({}));
    }
    async listInnerAppVersion(agentId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListInnerAppVersionHeaders({});
        return await this.listInnerAppVersionWithOptions(agentId, headers, runtime);
    }
    async listRoleInfoByUserWithOptions(agentId, userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListRoleInfoByUser",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/users/${userId}/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListRoleInfoByUserResponse({}));
    }
    async listRoleInfoByUser(agentId, userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListRoleInfoByUserHeaders({});
        return await this.listRoleInfoByUserWithOptions(agentId, userId, headers, runtime);
    }
    async listUserVilebleAppWithOptions(userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ListUserVilebleApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/users/${userId}/apps`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListUserVilebleAppResponse({}));
    }
    async listUserVilebleApp(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListUserVilebleAppHeaders({});
        return await this.listUserVilebleAppWithOptions(userId, headers, runtime);
    }
    async pageInnerAppHistoryVersionWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "PageInnerAppHistoryVersion",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/innerMiniApps/${agentId}/historyVersions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PageInnerAppHistoryVersionResponse({}));
    }
    async pageInnerAppHistoryVersion(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PageInnerAppHistoryVersionHeaders({});
        return await this.pageInnerAppHistoryVersionWithOptions(agentId, request, headers, runtime);
    }
    async publishInnerAppVersionWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appVersionId)) {
            body["appVersionId"] = request.appVersionId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppOnPc)) {
            body["miniAppOnPc"] = request.miniAppOnPc;
        }
        if (!tea_util_1.default.isUnset(request.opUnionId)) {
            body["opUnionId"] = request.opUnionId;
        }
        if (!tea_util_1.default.isUnset(request.publishType)) {
            body["publishType"] = request.publishType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PublishInnerAppVersion",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/innerMiniApps/${agentId}/versions/publish`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PublishInnerAppVersionResponse({}));
    }
    async publishInnerAppVersion(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PublishInnerAppVersionHeaders({});
        return await this.publishInnerAppVersionWithOptions(agentId, request, headers, runtime);
    }
    async rebuildRoleScopeForAppRoleWithOptions(agentId, roleId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIdList)) {
            body["deptIdList"] = request.deptIdList;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.scopeType)) {
            body["scopeType"] = request.scopeType;
        }
        if (!tea_util_1.default.isUnset(request.scopeVersion)) {
            body["scopeVersion"] = request.scopeVersion;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RebuildRoleScopeForAppRole",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/roles/${roleId}/scopes/rebuild`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RebuildRoleScopeForAppRoleResponse({}));
    }
    async rebuildRoleScopeForAppRole(agentId, roleId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RebuildRoleScopeForAppRoleHeaders({});
        return await this.rebuildRoleScopeForAppRoleWithOptions(agentId, roleId, request, headers, runtime);
    }
    async registerCustomAppRoleWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.canManageRole)) {
            body["canManageRole"] = request.canManageRole;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.roleName)) {
            body["roleName"] = request.roleName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RegisterCustomAppRole",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/roles`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RegisterCustomAppRoleResponse({}));
    }
    async registerCustomAppRole(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RegisterCustomAppRoleHeaders({});
        return await this.registerCustomAppRoleWithOptions(agentId, request, headers, runtime);
    }
    async removeApaasAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizAppId)) {
            body["bizAppId"] = request.bizAppId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RemoveApaasApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apaasApps/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveApaasAppResponse({}));
    }
    async removeApaasApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveApaasAppHeaders({});
        return await this.removeApaasAppWithOptions(request, headers, runtime);
    }
    async removeMemberForAppRoleWithOptions(agentId, roleId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.deptIdList)) {
            body["deptIdList"] = request.deptIdList;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        if (!tea_util_1.default.isUnset(request.scopeVersion)) {
            body["scopeVersion"] = request.scopeVersion;
        }
        if (!tea_util_1.default.isUnset(request.userIdList)) {
            body["userIdList"] = request.userIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RemoveMemberForAppRole",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/roles/${roleId}/members/batchRemove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveMemberForAppRoleResponse({}));
    }
    async removeMemberForAppRole(agentId, roleId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveMemberForAppRoleHeaders({});
        return await this.removeMemberForAppRoleWithOptions(agentId, roleId, request, headers, runtime);
    }
    async rollbackInnerAppVersionWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appVersionId)) {
            body["appVersionId"] = request.appVersionId;
        }
        if (!tea_util_1.default.isUnset(request.opUnionId)) {
            body["opUnionId"] = request.opUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RollbackInnerAppVersion",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/innerMiniApps/${agentId}/versions/rollback`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RollbackInnerAppVersionResponse({}));
    }
    async rollbackInnerAppVersion(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RollbackInnerAppVersionHeaders({});
        return await this.rollbackInnerAppVersionWithOptions(agentId, request, headers, runtime);
    }
    async setMicroAppScopeWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.addDeptIds)) {
            body["addDeptIds"] = request.addDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.addRoleIds)) {
            body["addRoleIds"] = request.addRoleIds;
        }
        if (!tea_util_1.default.isUnset(request.addUserIds)) {
            body["addUserIds"] = request.addUserIds;
        }
        if (!tea_util_1.default.isUnset(request.delDeptIds)) {
            body["delDeptIds"] = request.delDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.delRoleIds)) {
            body["delRoleIds"] = request.delRoleIds;
        }
        if (!tea_util_1.default.isUnset(request.delUserIds)) {
            body["delUserIds"] = request.delUserIds;
        }
        if (!tea_util_1.default.isUnset(request.onlyAdminVisible)) {
            body["onlyAdminVisible"] = request.onlyAdminVisible;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetMicroAppScope",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/scopes`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetMicroAppScopeResponse({}));
    }
    async setMicroAppScope(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetMicroAppScopeHeaders({});
        return await this.setMicroAppScopeWithOptions(agentId, request, headers, runtime);
    }
    async updateApaasAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appIcon)) {
            body["appIcon"] = request.appIcon;
        }
        if (!tea_util_1.default.isUnset(request.appName)) {
            body["appName"] = request.appName;
        }
        if (!tea_util_1.default.isUnset(request.appStatus)) {
            body["appStatus"] = request.appStatus;
        }
        if (!tea_util_1.default.isUnset(request.bizAppId)) {
            body["bizAppId"] = request.bizAppId;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateApaasApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apaasApps`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateApaasAppResponse({}));
    }
    async updateApaasApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateApaasAppHeaders({});
        return await this.updateApaasAppWithOptions(request, headers, runtime);
    }
    async updateAppRoleInfoWithOptions(agentId, roleId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.canManageRole)) {
            body["canManageRole"] = request.canManageRole;
        }
        if (!tea_util_1.default.isUnset(request.newRoleName)) {
            body["newRoleName"] = request.newRoleName;
        }
        if (!tea_util_1.default.isUnset(request.opUserId)) {
            body["opUserId"] = request.opUserId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateAppRoleInfo",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}/roles/${roleId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateAppRoleInfoResponse({}));
    }
    async updateAppRoleInfo(agentId, roleId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateAppRoleInfoHeaders({});
        return await this.updateAppRoleInfoWithOptions(agentId, roleId, request, headers, runtime);
    }
    async updateInnerAppWithOptions(agentId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.desc)) {
            body["desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.homepageLink)) {
            body["homepageLink"] = request.homepageLink;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.ipWhiteList)) {
            body["ipWhiteList"] = request.ipWhiteList;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.ompLink)) {
            body["ompLink"] = request.ompLink;
        }
        if (!tea_util_1.default.isUnset(request.opUnionId)) {
            body["opUnionId"] = request.opUnionId;
        }
        if (!tea_util_1.default.isUnset(request.pcHomepageLink)) {
            body["pcHomepageLink"] = request.pcHomepageLink;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInnerApp",
            version: "microApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/microApp/apps/${agentId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInnerAppResponse({}));
    }
    async updateInnerApp(agentId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInnerAppHeaders({});
        return await this.updateInnerAppWithOptions(agentId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map