/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AppLoginCodeGenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppLoginCodeGenRequest extends $tea.Model {
    appKey?: string;
    signTimestampStr?: string;
    signature?: string;
    fullUrl?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppLoginCodeGenResponseBody extends $tea.Model {
    loginCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppLoginCodeGenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AppLoginCodeGenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetFormDataByIdListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetFormDataByIdListRequest extends $tea.Model {
    appType?: string;
    formInstanceIdList?: string[];
    formUuid?: string;
    needFormInstanceValue?: boolean;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetFormDataByIdListResponseBody extends $tea.Model {
    result?: BatchGetFormDataByIdListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetFormDataByIdListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchGetFormDataByIdListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRemovalByFormInstanceIdListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRemovalByFormInstanceIdListRequest extends $tea.Model {
    appType?: string;
    asynchronousExecution?: boolean;
    executeExpression?: boolean;
    formInstanceIdList?: string[];
    formUuid?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRemovalByFormInstanceIdListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSaveFormDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSaveFormDataRequest extends $tea.Model {
    appType?: string;
    asynchronousExecution?: boolean;
    formDataJsonList?: string[];
    formUuid?: string;
    keepRunningAfterException?: boolean;
    noExecuteExpression?: boolean;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSaveFormDataResponseBody extends $tea.Model {
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSaveFormDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchSaveFormDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFormDataByInstanceIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFormDataByInstanceIdRequest extends $tea.Model {
    appType?: string;
    asynchronousExecution?: boolean;
    formInstanceIdList?: string[];
    formUuid?: string;
    ignoreEmpty?: boolean;
    noExecuteExpression?: boolean;
    systemToken?: string;
    updateFormDataJson?: string;
    useLatestFormSchemaVersion?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFormDataByInstanceIdResponseBody extends $tea.Model {
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFormDataByInstanceIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchUpdateFormDataByInstanceIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFormDataByInstanceMapHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFormDataByInstanceMapRequest extends $tea.Model {
    appType?: string;
    asynchronousExecution?: boolean;
    formUuid?: string;
    ignoreEmpty?: boolean;
    noExecuteExpression?: boolean;
    systemToken?: string;
    updateFormDataJsonMap?: {
        [key: string]: any;
    };
    useLatestFormSchemaVersion?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFormDataByInstanceMapResponseBody extends $tea.Model {
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFormDataByInstanceMapResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BatchUpdateFormDataByInstanceMapResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BuyAuthorizationOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BuyAuthorizationOrderRequest extends $tea.Model {
    accessKey?: string;
    accountNumber?: string;
    beginTimeGMT?: number;
    callerUnionId?: string;
    chargeType?: string;
    commerceType?: string;
    commodityType?: string;
    endTimeGMT?: number;
    instanceId?: string;
    instanceName?: string;
    produceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BuyAuthorizationOrderResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BuyAuthorizationOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BuyAuthorizationOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BuyFreshOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BuyFreshOrderRequest extends $tea.Model {
    accessKey?: string;
    accountNumber?: string;
    beginTimeGMT?: number;
    callerUnionId?: string;
    chargeType?: string;
    commerceType?: string;
    commodityType?: string;
    endTimeGMT?: number;
    instanceId?: string;
    instanceName?: string;
    produceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BuyFreshOrderResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BuyFreshOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: BuyFreshOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudAccountStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudAccountStatusRequest extends $tea.Model {
    accessKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudAccountStatusResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckCloudAccountStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CheckCloudAccountStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateFormDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateFormDataRequest extends $tea.Model {
    appType?: string;
    formDataJson?: string;
    formUuid?: string;
    noExecuteExpression?: boolean;
    searchCondition?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateFormDataResponseBody extends $tea.Model {
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrUpdateFormDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateOrUpdateFormDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFormDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFormDataRequest extends $tea.Model {
    appType?: string;
    formInstanceId?: string;
    language?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteFormDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceRequest extends $tea.Model {
    appType?: string;
    language?: string;
    processInstanceId?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSequenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSequenceRequest extends $tea.Model {
    appType?: string;
    language?: string;
    sequence?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSequenceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployFunctionCallbackHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployFunctionCallbackRequest extends $tea.Model {
    appId?: string;
    customDomain?: string;
    deployStage?: string;
    gateWayAppKey?: string;
    gateWayAppSecret?: string;
    gateWayDomain?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployFunctionCallbackResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployFunctionCallbackResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeployFunctionCallbackResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteBatchTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteBatchTaskRequest extends $tea.Model {
    appType?: string;
    outResult?: string;
    remark?: string;
    systemToken?: string;
    taskInformationList?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteBatchTaskResponseBody extends $tea.Model {
    failNumber?: number;
    successNumber?: number;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteBatchTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ExecuteBatchTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteCustomApiHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteCustomApiRequest extends $tea.Model {
    appType?: string;
    data?: string;
    language?: string;
    serviceId?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteCustomApiResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteCustomApiResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ExecuteCustomApiResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecutePlatformTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecutePlatformTaskRequest extends $tea.Model {
    appType?: string;
    formDataJson?: string;
    language?: string;
    noExecuteExpressions?: string;
    outResult?: string;
    processInstanceId?: string;
    remark?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecutePlatformTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteTaskRequest extends $tea.Model {
    appType?: string;
    digitalSignUrl?: string;
    formDataJson?: string;
    language?: string;
    noExecuteExpressions?: string;
    outResult?: string;
    processInstanceId?: string;
    remark?: string;
    systemToken?: string;
    taskId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExpireCommodityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExpireCommodityRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExpireCommodityResponseBody extends $tea.Model {
    message?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExpireCommodityResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ExpireCommodityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivationCodeByCallerUnionIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivationCodeByCallerUnionIdRequest extends $tea.Model {
    accessKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivationCodeByCallerUnionIdResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivationCodeByCallerUnionIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetActivationCodeByCallerUnionIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityButtonListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityButtonListRequest extends $tea.Model {
    language?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityButtonListResponseBody extends $tea.Model {
    result?: GetActivityButtonListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityButtonListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetActivityButtonListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityListRequest extends $tea.Model {
    appType?: string;
    language?: string;
    processCode?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityListResponseBody extends $tea.Model {
    result?: GetActivityListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetActivityListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllAuthCubesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllAuthCubesRequest extends $tea.Model {
    appType?: string;
    corpId?: string;
    keywords?: string;
    pageNumber?: number;
    pageSize?: number;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllAuthCubesResponseBody extends $tea.Model {
    count?: number;
    result?: GetAllAuthCubesResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllAuthCubesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetAllAuthCubesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetApplicationAuthorizationServicePlatformResourceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetApplicationAuthorizationServicePlatformResourceRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetApplicationAuthorizationServicePlatformResourceResponseBody extends $tea.Model {
    accountTotalAmount?: number;
    accountUsageAmount?: number;
    appTotalAmount?: number;
    attachmentTotalAmount?: number;
    attachmentUsageAmount?: number;
    instanceId?: string;
    instanceTotalAmount?: number;
    instanceUsageAmount?: number;
    pluginUsageAmount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetApplicationAuthorizationServicePlatformResourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetApplicationAuthorizationServicePlatformResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpAccomplishmentTasksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpAccomplishmentTasksRequest extends $tea.Model {
    appTypes?: string;
    createFromTimeGMT?: number;
    createToTimeGMT?: number;
    keyword?: string;
    language?: string;
    pageNumber?: number;
    pageSize?: number;
    processCodes?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpAccomplishmentTasksResponseBody extends $tea.Model {
    data?: GetCorpAccomplishmentTasksResponseBodyData[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpAccomplishmentTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetCorpAccomplishmentTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpLevelByAccountIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpLevelByAccountIdRequest extends $tea.Model {
    accountId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpLevelByAccountIdResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpLevelByAccountIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetCorpLevelByAccountIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpTasksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpTasksRequest extends $tea.Model {
    appTypes?: string;
    corpId?: string;
    createFromTimeGMT?: number;
    createToTimeGMT?: number;
    keyword?: string;
    language?: string;
    pageNumber?: number;
    pageSize?: number;
    processCodes?: string;
    token?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpTasksResponseBody extends $tea.Model {
    data?: GetCorpTasksResponseBodyData[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetCorpTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDbConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDbConfigRequest extends $tea.Model {
    appType?: string;
    corpId?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDbConfigResponseBody extends $tea.Model {
    config?: string;
    corpId?: string;
    createTimeGMT?: string;
    creator?: string;
    exclusive?: string;
    id?: string;
    modifiedTimeGMT?: string;
    modifier?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDbConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetDbConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFieldDefByUuidHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFieldDefByUuidRequest extends $tea.Model {
    appType?: string;
    formUuid?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFieldDefByUuidResponseBody extends $tea.Model {
    result?: GetFieldDefByUuidResponseBodyResult[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFieldDefByUuidResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetFieldDefByUuidResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormComponentDefinitionListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormComponentDefinitionListRequest extends $tea.Model {
    language?: string;
    systemToken?: string;
    userId?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormComponentDefinitionListResponseBody extends $tea.Model {
    result?: GetFormComponentDefinitionListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormComponentDefinitionListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetFormComponentDefinitionListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormDataByIDHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormDataByIDRequest extends $tea.Model {
    appType?: string;
    language?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormDataByIDResponseBody extends $tea.Model {
    formData?: {
        [key: string]: any;
    };
    formInstId?: string;
    modifiedTimeGMT?: string;
    originator?: GetFormDataByIDResponseBodyOriginator;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormDataByIDResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetFormDataByIDResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormListInAppHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormListInAppRequest extends $tea.Model {
    appType?: string;
    formTypes?: string;
    pageNumber?: number;
    pageSize?: number;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormListInAppResponseBody extends $tea.Model {
    result?: GetFormListInAppResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormListInAppResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetFormListInAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceByIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceByIdRequest extends $tea.Model {
    appType?: string;
    language?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceByIdResponseBody extends $tea.Model {
    actionExecutor?: GetInstanceByIdResponseBodyActionExecutor[];
    approvedResult?: string;
    createTimeGMT?: string;
    data?: {
        [key: string]: any;
    };
    formUuid?: string;
    instanceStatus?: string;
    modifiedTimeGMT?: string;
    originator?: GetInstanceByIdResponseBodyOriginator;
    processCode?: string;
    processInstanceId?: string;
    title?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceByIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetInstanceByIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceIdListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceIdListRequest extends $tea.Model {
    appType?: string;
    approvedResult?: string;
    createFromTimeGMT?: string;
    createToTimeGMT?: string;
    formUuid?: string;
    instanceStatus?: string;
    language?: string;
    modifiedFromTimeGMT?: string;
    modifiedToTimeGMT?: string;
    originatorId?: string;
    searchFieldJson?: string;
    systemToken?: string;
    taskId?: string;
    userId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceIdListResponseBody extends $tea.Model {
    data?: string[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceIdListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetInstanceIdListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesRequest extends $tea.Model {
    appType?: string;
    approvedResult?: string;
    createFromTimeGMT?: string;
    createToTimeGMT?: string;
    formUuid?: string;
    instanceStatus?: string;
    language?: string;
    modifiedFromTimeGMT?: string;
    modifiedToTimeGMT?: string;
    orderConfigJson?: string;
    originatorId?: string;
    searchFieldJson?: string;
    systemToken?: string;
    taskId?: string;
    userId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesResponseBody extends $tea.Model {
    data?: GetInstancesResponseBodyData[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdListRequest extends $tea.Model {
    appType?: string;
    language?: string;
    processInstanceIds?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdListResponseBody extends $tea.Model {
    result?: GetInstancesByIdListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetInstancesByIdListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMeCorpSubmissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMeCorpSubmissionRequest extends $tea.Model {
    appTypes?: string;
    corpId?: string;
    createFromTimeGMT?: number;
    createToTimeGMT?: number;
    keyword?: string;
    language?: string;
    pageNumber?: number;
    pageSize?: number;
    processCodes?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMeCorpSubmissionResponseBody extends $tea.Model {
    data?: GetMeCorpSubmissionResponseBodyData[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMeCorpSubmissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetMeCorpSubmissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNotifyMeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNotifyMeRequest extends $tea.Model {
    appTypes?: string;
    corpId?: string;
    createFromTimeGMT?: number;
    createToTimeGMT?: number;
    instanceCreateFromTimeGMT?: number;
    instanceCreateToTimeGMT?: number;
    keyword?: string;
    language?: string;
    pageNumber?: number;
    pageSize?: number;
    processCodes?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNotifyMeResponseBody extends $tea.Model {
    data?: GetNotifyMeResponseBodyData[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNotifyMeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetNotifyMeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenUrlRequest extends $tea.Model {
    fileUrl?: string;
    language?: string;
    systemToken?: string;
    timeout?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenUrlResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenUrlResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetOpenUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOperationRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOperationRecordsRequest extends $tea.Model {
    appType?: string;
    language?: string;
    processInstanceId?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOperationRecordsResponseBody extends $tea.Model {
    result?: GetOperationRecordsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOperationRecordsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetOperationRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPlatformResourceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPlatformResourceRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPlatformResourceResponseBody extends $tea.Model {
    accountTotalAmount?: number;
    accountUsageAmount?: number;
    appTotalAmount?: number;
    attachmentTotalAmount?: number;
    attachmentUsageAmount?: number;
    instanceTotalAmount?: number;
    instanceUsageAmount?: number;
    pluginUsageAmount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPlatformResourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPlatformResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintAppInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintAppInfoRequest extends $tea.Model {
    nameLike?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintAppInfoResponseBody extends $tea.Model {
    result?: GetPrintAppInfoResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintAppInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPrintAppInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintDictionaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintDictionaryRequest extends $tea.Model {
    appType?: string;
    formUuid?: string;
    userId?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintDictionaryResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintDictionaryResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetPrintDictionaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionRequest extends $tea.Model {
    appType?: string;
    corpId?: string;
    groupId?: string;
    language?: string;
    nameSpace?: string;
    orderNumber?: string;
    systemToken?: string;
    systemType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionResponseBody extends $tea.Model {
    formUuid?: string;
    originator?: GetProcessDefinitionResponseBodyOriginator;
    outResult?: string;
    owners?: GetProcessDefinitionResponseBodyOwners[];
    processId?: string;
    processInstanceId?: string;
    status?: string;
    tasks?: GetProcessDefinitionResponseBodyTasks[];
    title?: string;
    variables?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetProcessDefinitionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTaskListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTaskListRequest extends $tea.Model {
    appType?: string;
    processInstanceIdList?: string;
    systemToken?: string;
    userCorpId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTaskListResponseBody extends $tea.Model {
    result?: GetRunningTaskListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTaskListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetRunningTaskListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTasksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTasksRequest extends $tea.Model {
    appType?: string;
    language?: string;
    processInstanceId?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTasksResponseBody extends $tea.Model {
    result?: GetRunningTasksResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetRunningTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaleUserInfoByUserIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaleUserInfoByUserIdRequest extends $tea.Model {
    corpId?: string;
    namespace?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaleUserInfoByUserIdResponseBody extends $tea.Model {
    accountId?: number;
    corpList?: GetSaleUserInfoByUserIdResponseBodyCorpList[];
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaleUserInfoByUserIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSaleUserInfoByUserIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleCubeModelListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleCubeModelListRequest extends $tea.Model {
    appType?: string;
    corpId?: string;
    cubeCode?: string;
    cubeTenantId?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleCubeModelListResponseBody extends $tea.Model {
    result?: GetSimpleCubeModelListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleCubeModelListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetSimpleCubeModelListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskCopiesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskCopiesRequest extends $tea.Model {
    appType?: string;
    createFromTimeGMT?: number;
    createToTimeGMT?: number;
    keyword?: string;
    language?: string;
    pageNumber?: number;
    pageSize?: number;
    processCodes?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskCopiesResponseBody extends $tea.Model {
    data?: GetTaskCopiesResponseBodyData[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskCopiesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetTaskCopiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationRequest extends $tea.Model {
    appFilter?: string;
    appNameSearchKeyword?: string;
    corpId?: string;
    pageNumber?: number;
    pageSize?: number;
    token?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationResponseBody extends $tea.Model {
    data?: ListApplicationResponseBodyData[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListApplicationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceApplicationInformationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceApplicationInformationRequest extends $tea.Model {
    accessKey?: string;
    callerUnionId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceApplicationInformationResponseBody extends $tea.Model {
    applicationInformation?: ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformation[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceApplicationInformationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListApplicationAuthorizationServiceApplicationInformationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceConnectorInformationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceConnectorInformationRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceConnectorInformationResponseBody extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    plugInformation?: ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformation[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceConnectorInformationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListApplicationAuthorizationServiceConnectorInformationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationInformationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationInformationRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationInformationResponseBody extends $tea.Model {
    applicationInformation?: ListApplicationInformationResponseBodyApplicationInformation[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationInformationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListApplicationInformationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCommodityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCommodityRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCommodityResponseBody extends $tea.Model {
    commodityVOList?: ListCommodityResponseBodyCommodityVOList[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCommodityResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListCommodityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListConnectorInformationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListConnectorInformationRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListConnectorInformationResponseBody extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    pluginInfos?: ListConnectorInformationResponseBodyPluginInfos[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListConnectorInformationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListConnectorInformationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormRemarksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormRemarksRequest extends $tea.Model {
    appType?: string;
    formInstanceIdList?: string[];
    formUuid?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormRemarksResponseBody extends $tea.Model {
    formRemarkVoMap?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormRemarksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListFormRemarksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNavigationByFormTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNavigationByFormTypeRequest extends $tea.Model {
    appType?: string;
    formType?: string;
    language?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNavigationByFormTypeResponseBody extends $tea.Model {
    result?: ListNavigationByFormTypeResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNavigationByFormTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListNavigationByFormTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOperationLogsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOperationLogsRequest extends $tea.Model {
    appType?: string;
    formInstanceIdList?: string[];
    formUuid?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOperationLogsResponseBody extends $tea.Model {
    operationLogMap?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOperationLogsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListOperationLogsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTableDataByFormInstanceIdTableIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTableDataByFormInstanceIdTableIdRequest extends $tea.Model {
    appType?: string;
    formUuid?: string;
    pageNumber?: number;
    pageSize?: number;
    systemToken?: string;
    tableFieldId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTableDataByFormInstanceIdTableIdResponseBody extends $tea.Model {
    data?: {
        [key: string]: any;
    }[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTableDataByFormInstanceIdTableIdResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListTableDataByFormInstanceIdTableIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoginCodeGenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoginCodeGenRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoginCodeGenResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoginCodeGenResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: LoginCodeGenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAuthorizationResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAuthorizationResultRequest extends $tea.Model {
    accessKey?: string;
    accountNumber?: string;
    beginTimeGMT?: number;
    callerUid?: string;
    chargeType?: string;
    commerceType?: string;
    commodityType?: string;
    endTimeGMT?: number;
    instanceId?: string;
    instanceName?: string;
    produceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAuthorizationResultResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyAuthorizationResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: NotifyAuthorizationResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFormBaseInfosHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFormBaseInfosRequest extends $tea.Model {
    appKey?: string;
    formTypeList?: string[];
    language?: string;
    pageIndex?: number;
    pageSize?: number;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFormBaseInfosResponseBody extends $tea.Model {
    result?: PageFormBaseInfosResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFormBaseInfosResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: PageFormBaseInfosResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceRecordRequest extends $tea.Model {
    appType?: string;
    formUuid?: string;
    hookType?: string;
    hookUuid?: string;
    instanceId?: string;
    invokeAfterDateGMT?: string;
    invokeBeforeDateGMT?: string;
    invokeStatus?: string;
    pageNumber?: number;
    pageSize?: number;
    requestUrl?: string;
    sourceUuid?: string;
    success?: boolean;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceRecordResponseBody extends $tea.Model {
    totalCount?: number;
    values?: QueryServiceRecordResponseBodyValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceRecordResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: QueryServiceRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RedirectTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RedirectTaskRequest extends $tea.Model {
    appType?: string;
    byManager?: string;
    language?: string;
    nowActionExecutorId?: string;
    processInstanceId?: string;
    remark?: string;
    systemToken?: string;
    taskId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RedirectTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefundCommodityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefundCommodityRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefundCommodityResponseBody extends $tea.Model {
    message?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RefundCommodityResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RefundCommodityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAccountsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAccountsRequest extends $tea.Model {
    accessKey?: string;
    activeCode?: string;
    corpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAccountsResponseBody extends $tea.Model {
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RegisterAccountsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RegisterAccountsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseCommodityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseCommodityRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseCommodityResponseBody extends $tea.Model {
    message?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReleaseCommodityResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ReleaseCommodityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTenantResourceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTenantResourceRequest extends $tea.Model {
    accessKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTenantResourceResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveTenantResourceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RemoveTenantResourceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenderBatchCallbackHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenderBatchCallbackRequest extends $tea.Model {
    appType?: string;
    corpId?: string;
    fileSize?: number;
    language?: string;
    namespace?: string;
    ossUrl?: string;
    sequenceId?: string;
    source?: string;
    status?: string;
    systemToken?: string;
    timeZone?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenderBatchCallbackResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewApplicationAuthorizationServiceOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewApplicationAuthorizationServiceOrderRequest extends $tea.Model {
    accessKey?: string;
    callerUnionId?: string;
    endTimeGMT?: number;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewApplicationAuthorizationServiceOrderResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewApplicationAuthorizationServiceOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RenewApplicationAuthorizationServiceOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewTenantOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewTenantOrderRequest extends $tea.Model {
    accessKey?: string;
    callerUnionId?: string;
    endTimeGMT?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewTenantOrderResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RenewTenantOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RenewTenantOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveFormDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveFormDataRequest extends $tea.Model {
    appType?: string;
    formDataJson?: string;
    formUuid?: string;
    language?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveFormDataResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveFormDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SaveFormDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveFormRemarkHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveFormRemarkRequest extends $tea.Model {
    appType?: string;
    atUserId?: string;
    content?: string;
    formInstanceId?: string;
    language?: string;
    replyId?: number;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveFormRemarkResponseBody extends $tea.Model {
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveFormRemarkResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SaveFormRemarkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SavePrintTplDetailInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SavePrintTplDetailInfoRequest extends $tea.Model {
    appType?: string;
    description?: string;
    fileNameConfig?: string;
    formUuid?: string;
    formVersion?: number;
    setting?: string;
    templateId?: number;
    title?: string;
    userId?: string;
    vm?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SavePrintTplDetailInfoResponseBody extends $tea.Model {
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SavePrintTplDetailInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SavePrintTplDetailInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchActivationCodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchActivationCodeRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchActivationCodeResponseBody extends $tea.Model {
    activationCode?: string;
    authType?: string;
    expireTimeGMT?: string;
    instanceId?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchActivationCodeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchActivationCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchEmployeeFieldValuesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchEmployeeFieldValuesRequest extends $tea.Model {
    appType?: string;
    createFromTimeGMT?: string;
    createToTimeGMT?: string;
    formUuid?: string;
    language?: string;
    modifiedFromTimeGMT?: string;
    modifiedToTimeGMT?: string;
    originatorId?: string;
    searchFieldJson?: string;
    systemToken?: string;
    targetFieldJson?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchEmployeeFieldValuesResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchEmployeeFieldValuesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchEmployeeFieldValuesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataIdListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataIdListRequest extends $tea.Model {
    createFromTimeGMT?: string;
    createToTimeGMT?: string;
    language?: string;
    modifiedFromTimeGMT?: string;
    modifiedToTimeGMT?: string;
    originatorId?: string;
    searchFieldJson?: string;
    systemToken?: string;
    userId?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataIdListResponseBody extends $tea.Model {
    data?: string[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataIdListResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchFormDataIdListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataRemovalTableDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataRemovalTableDataRequest extends $tea.Model {
    appType?: string;
    createFromTimeGMT?: string;
    createToTimeGMT?: string;
    formUuid?: string;
    modifiedFromTimeGMT?: string;
    modifiedToTimeGMT?: string;
    orderConfigJson?: string;
    originatorId?: string;
    pageNumber?: number;
    pageSize?: number;
    searchFieldJson?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataRemovalTableDataResponseBody extends $tea.Model {
    data?: SearchFormDataRemovalTableDataResponseBodyData[];
    hasMoreData?: boolean;
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataRemovalTableDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchFormDataRemovalTableDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationRequest extends $tea.Model {
    appType?: string;
    createFromTimeGMT?: string;
    createToTimeGMT?: string;
    formUuid?: string;
    modifiedFromTimeGMT?: string;
    modifiedToTimeGMT?: string;
    orderConfigJson?: string;
    originatorId?: string;
    pageNumber?: number;
    pageSize?: number;
    searchCondition?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationResponseBody extends $tea.Model {
    data?: SearchFormDataSecondGenerationResponseBodyData[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchFormDataSecondGenerationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationNoTableFieldHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationNoTableFieldRequest extends $tea.Model {
    appType?: string;
    createFromTimeGMT?: string;
    createToTimeGMT?: string;
    formUuid?: string;
    modifiedFromTimeGMT?: string;
    modifiedToTimeGMT?: string;
    orderConfigJson?: string;
    originatorId?: string;
    pageNumber?: number;
    pageSize?: number;
    searchCondition?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationNoTableFieldResponseBody extends $tea.Model {
    data?: SearchFormDataSecondGenerationNoTableFieldResponseBodyData[];
    pageNumber?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationNoTableFieldResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchFormDataSecondGenerationNoTableFieldResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDatasHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDatasRequest extends $tea.Model {
    appType?: string;
    createFromTimeGMT?: string;
    createToTimeGMT?: string;
    currentPage?: number;
    dynamicOrder?: string;
    formUuid?: string;
    language?: string;
    modifiedFromTimeGMT?: string;
    modifiedToTimeGMT?: string;
    originatorId?: string;
    pageSize?: number;
    searchFieldJson?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDatasResponseBody extends $tea.Model {
    currentPage?: number;
    data?: SearchFormDatasResponseBodyData[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDatasResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: SearchFormDatasResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartInstanceRequest extends $tea.Model {
    appType?: string;
    departmentId?: string;
    formDataJson?: string;
    formUuid?: string;
    language?: string;
    processCode?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartInstanceResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StartInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateCloudAuthorizationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateCloudAuthorizationRequest extends $tea.Model {
    accessKey?: string;
    callerUnionId?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateCloudAuthorizationResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateCloudAuthorizationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TerminateCloudAuthorizationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateInstanceRequest extends $tea.Model {
    appType?: string;
    language?: string;
    processInstanceId?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TerminateInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCloudAccountInformationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCloudAccountInformationRequest extends $tea.Model {
    accessKey?: string;
    accountNumber?: string;
    callerUnionId?: string;
    commodityType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCloudAccountInformationResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCloudAccountInformationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateCloudAccountInformationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFormDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFormDataRequest extends $tea.Model {
    appType?: string;
    formInstanceId?: string;
    language?: string;
    systemToken?: string;
    updateFormDataJson?: string;
    useLatestVersion?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateFormDataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceRequest extends $tea.Model {
    appType?: string;
    language?: string;
    processInstanceId?: string;
    systemToken?: string;
    updateFormDataJson?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStatusRequest extends $tea.Model {
    appType?: string;
    errorLines?: number[];
    importSequence?: string;
    language?: string;
    status?: string;
    systemToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeTenantInformationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeTenantInformationRequest extends $tea.Model {
    accessKey?: string;
    accountNumber?: string;
    callerUnionId?: string;
    commodityType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeTenantInformationResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeTenantInformationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpgradeTenantInformationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationAuthorizationOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationAuthorizationOrderRequest extends $tea.Model {
    accessKey?: string;
    callerUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationAuthorizationOrderResponseBody extends $tea.Model {
    message?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationAuthorizationOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ValidateApplicationAuthorizationOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationAuthorizationServiceOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationAuthorizationServiceOrderRequest extends $tea.Model {
    accessKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationAuthorizationServiceOrderResponseBody extends $tea.Model {
    message?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationAuthorizationServiceOrderResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ValidateApplicationAuthorizationServiceOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationServiceOrderUpgradeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationServiceOrderUpgradeRequest extends $tea.Model {
    accessKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationServiceOrderUpgradeResponseBody extends $tea.Model {
    message?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateApplicationServiceOrderUpgradeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ValidateApplicationServiceOrderUpgradeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderBuyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderBuyRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderBuyResponseBody extends $tea.Model {
    message?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderBuyResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ValidateOrderBuyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderUpdateRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderUpdateResponseBody extends $tea.Model {
    message?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderUpdateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ValidateOrderUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderUpgradeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderUpgradeRequest extends $tea.Model {
    accessKey?: string;
    callerUid?: string;
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderUpgradeResponseBody extends $tea.Model {
    message?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateOrderUpgradeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ValidateOrderUpgradeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetFormDataByIdListResponseBodyResultModifyUserName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetFormDataByIdListResponseBodyResultModifyUser extends $tea.Model {
    name?: BatchGetFormDataByIdListResponseBodyResultModifyUserName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetFormDataByIdListResponseBodyResultOriginatorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetFormDataByIdListResponseBodyResultOriginator extends $tea.Model {
    name?: BatchGetFormDataByIdListResponseBodyResultOriginatorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetFormDataByIdListResponseBodyResult extends $tea.Model {
    createTimeGMT?: string;
    creatorUserId?: string;
    formData?: {
        [key: string]: any;
    };
    formInstanceId?: string;
    formUuid?: string;
    id?: number;
    instanceValue?: string;
    modifiedTimeGMT?: string;
    modifier?: string;
    modifyUser?: BatchGetFormDataByIdListResponseBodyResultModifyUser;
    originator?: BatchGetFormDataByIdListResponseBodyResultOriginator;
    sequence?: string;
    serialNumber?: string;
    title?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityButtonListResponseBodyResult extends $tea.Model {
    aliasInChinese?: string;
    aliasInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActivityListResponseBodyResult extends $tea.Model {
    activityId?: string;
    activityName?: string;
    activityNameInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllAuthCubesResponseBodyResultCubeDataRanges extends $tea.Model {
    classifiedCode?: string;
    conditionKey?: string;
    conditionValue?: any[];
    elementCode?: string;
    elementType?: string;
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllAuthCubesResponseBodyResultUserInformation extends $tea.Model {
    authProvider?: string;
    corpId?: string;
    departmentName?: string;
    name?: string;
    nickName?: string;
    realmId?: number;
    refererNamespaceCode?: string;
    showName?: string;
    workNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllAuthCubesResponseBodyResult extends $tea.Model {
    apappliedCount?: number;
    appCode?: string;
    appInstanceCode?: string;
    appStoreCode?: string;
    authMode?: string;
    authorizationType?: number;
    businessProcessCode?: string;
    categoriesFirst?: string;
    categoriesSecond?: string;
    createTimeGMT?: string;
    creatorUserId?: string;
    cubeAuthType?: string;
    cubeCode?: string;
    cubeDataRange?: string;
    cubeDataRanges?: GetAllAuthCubesResponseBodyResultCubeDataRanges[];
    cubeSource?: string;
    dataCacheTimeConfiguration?: string;
    dataflowCode?: string;
    description?: string;
    domainCode?: string;
    enableCache?: boolean;
    id?: number;
    isNeedApplication?: string;
    isTrend?: string;
    modifiedTimeGMT?: string;
    modifier?: string;
    name?: string;
    namespaceCode?: string;
    owner?: string;
    sharedDataSet?: boolean;
    tenantCorpId?: string;
    type?: string;
    userInformation?: GetAllAuthCubesResponseBodyResultUserInformation;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpAccomplishmentTasksResponseBodyData extends $tea.Model {
    activeTimeGMT?: string;
    actualActionerId?: string;
    appType?: string;
    createTimeGMT?: string;
    finishTimeGMT?: string;
    originatorEmail?: string;
    originatorId?: string;
    originatorName?: string;
    originatorNameInEnglish?: string;
    originatorNickName?: string;
    originatorNickNameInEnglish?: string;
    originatorPhoto?: string;
    outResult?: string;
    outResultName?: string;
    processInstanceId?: string;
    status?: string;
    taskId?: string;
    taskType?: string;
    title?: string;
    titleInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpTasksResponseBodyData extends $tea.Model {
    activeTimeGMT?: string;
    actualActionerId?: string;
    appType?: string;
    createTimeGMT?: string;
    finishTimeGMT?: string;
    originatorEmail?: string;
    originatorId?: string;
    originatorName?: string;
    originatorNameInEnglish?: string;
    originatorNickName?: string;
    originatorNickNameEn?: string;
    originatorPhoto?: string;
    outResult?: string;
    outResultName?: string;
    processInstanceId?: string;
    status?: string;
    taskId?: string;
    taskType?: string;
    title?: string;
    titleInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFieldDefByUuidResponseBodyResult extends $tea.Model {
    behavior?: string;
    children?: string;
    componentName?: string;
    fieldId?: string;
    label?: any;
    props?: any;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormComponentDefinitionListResponseBodyResult extends $tea.Model {
    componentName?: string;
    fieldId?: string;
    label?: string;
    parentId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormDataByIDResponseBodyOriginatorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormDataByIDResponseBodyOriginator extends $tea.Model {
    departmentName?: string;
    email?: string;
    name?: GetFormDataByIDResponseBodyOriginatorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormListInAppResponseBodyResultDataTitle extends $tea.Model {
    enUS?: string;
    zhCN?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormListInAppResponseBodyResultData extends $tea.Model {
    creator?: string;
    formType?: string;
    formUuid?: string;
    gmtCreate?: string;
    title?: GetFormListInAppResponseBodyResultDataTitle;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormListInAppResponseBodyResult extends $tea.Model {
    currentPage?: number;
    data?: GetFormListInAppResponseBodyResultData[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceByIdResponseBodyActionExecutorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceByIdResponseBodyActionExecutor extends $tea.Model {
    deptName?: string;
    email?: string;
    name?: GetInstanceByIdResponseBodyActionExecutorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceByIdResponseBodyOriginatorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstanceByIdResponseBodyOriginator extends $tea.Model {
    deptName?: string;
    email?: string;
    name?: GetInstanceByIdResponseBodyOriginatorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesResponseBodyDataActionExecutorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesResponseBodyDataActionExecutor extends $tea.Model {
    deptName?: string;
    email?: string;
    name?: GetInstancesResponseBodyDataActionExecutorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesResponseBodyDataOriginatorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesResponseBodyDataOriginator extends $tea.Model {
    deptName?: string;
    email?: string;
    name?: GetInstancesResponseBodyDataOriginatorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesResponseBodyData extends $tea.Model {
    actionExecutor?: GetInstancesResponseBodyDataActionExecutor[];
    approvedResult?: string;
    createTimeGMT?: string;
    data?: {
        [key: string]: any;
    };
    formUuid?: string;
    instanceStatus?: string;
    modifiedTimeGMT?: string;
    originator?: GetInstancesResponseBodyDataOriginator;
    processCode?: string;
    processInstanceId?: string;
    title?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdListResponseBodyResultActionExecutorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdListResponseBodyResultActionExecutor extends $tea.Model {
    departmentName?: string;
    email?: string;
    name?: GetInstancesByIdListResponseBodyResultActionExecutorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdListResponseBodyResultOriginatorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdListResponseBodyResultOriginator extends $tea.Model {
    departmentName?: string;
    email?: string;
    name?: GetInstancesByIdListResponseBodyResultOriginatorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInstancesByIdListResponseBodyResult extends $tea.Model {
    actionExecutor?: GetInstancesByIdListResponseBodyResultActionExecutor[];
    approvedResult?: string;
    data?: {
        [key: string]: any;
    };
    formUuid?: string;
    instanceStatus?: string;
    originator?: GetInstancesByIdListResponseBodyResultOriginator;
    processCode?: string;
    processInstanceId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMeCorpSubmissionResponseBodyDataActioner extends $tea.Model {
    buName?: string;
    email?: string;
    employeeType?: string;
    employeeTypeInformation?: string;
    humanResourceGroupWorkNumber?: string;
    isSystemAdmin?: boolean;
    level?: string;
    name?: string;
    nickName?: string;
    orderNumber?: string;
    personalPhoto?: string;
    personalPhotoUrl?: string;
    pinyinNameAll?: string;
    pinyinNickName?: string;
    state?: string;
    superUserId?: string;
    tbWang?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances extends $tea.Model {
    activityId?: string;
    activityInstanceStatus?: string;
    activityName?: string;
    activityNameEn?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMeCorpSubmissionResponseBodyData extends $tea.Model {
    actioner?: GetMeCorpSubmissionResponseBodyDataActioner[];
    actionerId?: string[];
    actionerName?: string[];
    appType?: string;
    createTimeGMT?: string;
    currentActivityInstances?: GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances[];
    dataMap?: {
        [key: string]: any;
    };
    dataType?: string;
    finishTimeGMT?: string;
    formInstanceId?: string;
    formUuid?: string;
    instanceValue?: string;
    modifiedTimeGMT?: string;
    originatorAvatar?: string;
    originatorDisplayName?: string;
    originatorId?: string;
    processApprovedResult?: string;
    processApprovedResultText?: string;
    processCode?: string;
    processId?: number;
    processInstanceId?: string;
    processInstanceStatus?: string;
    processInstanceStatusText?: string;
    processName?: string;
    title?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNotifyMeResponseBodyData extends $tea.Model {
    activityId?: string;
    appType?: string;
    corpId?: string;
    createTimeGMT?: string;
    creatorUserId?: string;
    formInstanceId?: string;
    instStatus?: string;
    mobileUrl?: string;
    modifiedTimeGMT?: string;
    processCode?: string;
    title?: string;
    titleInEnglish?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOperationRecordsResponseBodyResult extends $tea.Model {
    action?: string;
    actionExit?: string;
    activeTimeGMT?: string;
    activityId?: string;
    dataId?: number;
    digitalSign?: string;
    files?: string;
    operateTimeGMT?: string;
    operateType?: string;
    operatorDisplayName?: string;
    operatorName?: string;
    operatorNickName?: string;
    operatorPhotoUrl?: string;
    operatorStatus?: string;
    operatorUserId?: string;
    processInstanceId?: string;
    remark?: string;
    showName?: string;
    size?: number;
    taskExecuteType?: string;
    taskHoldTimeGMT?: number;
    taskId?: string;
    taskType?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintAppInfoResponseBodyResultFormInfoList extends $tea.Model {
    formName?: string;
    formUuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrintAppInfoResponseBodyResult extends $tea.Model {
    appName?: string;
    appType?: string;
    formInfoList?: GetPrintAppInfoResponseBodyResultFormInfoList[];
    iconUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments extends $tea.Model {
    deptName?: string;
    deptNameInEnglish?: string;
    deptNo?: string;
    deptPath?: string;
    humanSourceGroupOrderNumber?: string;
    humanSourceGroupWorkNo?: string;
    id?: number;
    masterWorkNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionResponseBodyOriginator extends $tea.Model {
    departmentDescription?: string;
    displayEnName?: string;
    displayName?: string;
    masterDataDepartments?: GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments[];
    orderNumber?: string;
    personalPhoto?: string;
    status?: string;
    tbWang?: string;
    userId?: string;
    userInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionResponseBodyOwnersMasterDataDepartments extends $tea.Model {
    deptName?: string;
    deptNameInEnglish?: string;
    deptNo?: string;
    deptPath?: string;
    humanSourceGroupOrderNumber?: string;
    humanSourceGroupWorkNo?: string;
    id?: number;
    masterWorkNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionResponseBodyOwners extends $tea.Model {
    departmentDescription?: string;
    displayEnName?: string;
    displayName?: string;
    masterDataDepartments?: GetProcessDefinitionResponseBodyOwnersMasterDataDepartments[];
    orderNumber?: string;
    personalPhoto?: string;
    status?: string;
    tbWang?: string;
    userId?: string;
    userInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionResponseBodyTasksActivity extends $tea.Model {
    activityId?: string;
    activityInstanceStatus?: string;
    activityName?: string;
    activityNameInEnglish?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessDefinitionResponseBodyTasks extends $tea.Model {
    actionerId?: string;
    activity?: GetProcessDefinitionResponseBodyTasksActivity;
    status?: string;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTaskListResponseBodyResult extends $tea.Model {
    activeTimeGMT?: string;
    actualActionExecutorId?: string;
    appType?: string;
    createTimeGMT?: string;
    finishTimeGMT?: string;
    originatorEmail?: string;
    originatorId?: string;
    originatorName?: string;
    originatorNameInEnglish?: string;
    originatorNickName?: string;
    originatorNickNameInEnglish?: string;
    originatorPhoto?: string;
    outResult?: string;
    outResultName?: string;
    processInstanceId?: string;
    status?: string;
    taskId?: string;
    taskType?: string;
    title?: string;
    titleInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRunningTasksResponseBodyResult extends $tea.Model {
    activeTimeGMT?: string;
    activityId?: string;
    actualActionerId?: string;
    createTimeGMT?: string;
    finishTimeGMT?: string;
    originatorId?: string;
    processInstanceId?: string;
    status?: string;
    taskId?: string;
    taskType?: string;
    title?: string;
    titleInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSaleUserInfoByUserIdResponseBodyCorpList extends $tea.Model {
    corpId?: string;
    corpName?: string;
    namespace?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleCubeModelListResponseBodyResultChildren extends $tea.Model {
    classifiedCode?: string;
    cubeCode?: string;
    dataType?: string;
    dimensionType?: string;
    fieldCode?: string;
    id?: string;
    isDimension?: string;
    isVisible?: string;
    measureType?: string;
    text?: string;
    timeFormat?: string;
    timeGranularityType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleCubeModelListResponseBodyResult extends $tea.Model {
    children?: GetSimpleCubeModelListResponseBodyResultChildren[];
    id?: string;
    isDimension?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskCopiesResponseBodyDataCurrentActivityInstances extends $tea.Model {
    activityId?: string;
    activityInstanceStatus?: string;
    activityName?: string;
    activityNameInEnglish?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskCopiesResponseBodyData extends $tea.Model {
    actionExecutorId?: string[];
    actionExecutorName?: string[];
    appType?: string;
    carbonActivityId?: string;
    createTimeGMT?: string;
    currentActivityInstances?: GetTaskCopiesResponseBodyDataCurrentActivityInstances[];
    dataMap?: {
        [key: string]: any;
    };
    dataType?: string;
    finishTimeGMT?: string;
    formInstanceId?: string;
    formUuid?: string;
    instanceValue?: string;
    modifiedTimeGMT?: string;
    originatorAvatar?: string;
    originatorDisplayName?: string;
    originatorId?: string;
    processApprovedResult?: string;
    processApprovedResultText?: string;
    processCode?: string;
    processId?: number;
    processInstanceId?: string;
    processInstanceStatus?: string;
    processInstanceStatusText?: string;
    processName?: string;
    serialNumber?: string;
    title?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationResponseBodyData extends $tea.Model {
    appConfig?: string;
    appType?: string;
    applicationStatus?: string;
    corpId?: string;
    creatorUserId?: string;
    description?: string;
    icon?: string;
    inexistence?: string;
    name?: string;
    subCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformationUsagePlugins extends $tea.Model {
    iconUrl?: string;
    pluginName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformation extends $tea.Model {
    appName?: string;
    appType?: string;
    attachmentUsageAmount?: number;
    instanceUsageAmount?: number;
    usagePlugins?: ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformationUsagePlugins[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformationApplications extends $tea.Model {
    appName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformation extends $tea.Model {
    applications?: ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformationApplications[];
    iconUrl?: string;
    plugName?: string;
    plugPayType?: number;
    plugStatus?: number;
    plugTotalAmount?: number;
    plugUsageAmount?: number;
    plugUuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationInformationResponseBodyApplicationInformationUsagePlugins extends $tea.Model {
    iconUrl?: string;
    pluginName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApplicationInformationResponseBodyApplicationInformation extends $tea.Model {
    appName?: string;
    appType?: string;
    attachmentUsageAmount?: number;
    instanceUsageAmount?: number;
    usagePlugins?: ListApplicationInformationResponseBodyApplicationInformationUsagePlugins[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCommodityResponseBodyCommodityVOList extends $tea.Model {
    accountDistributionNumber?: number;
    accountNumber?: number;
    activationCode?: string;
    buyDateGMT?: string;
    expireDateGMT?: string;
    instanceId?: string;
    status?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListConnectorInformationResponseBodyPluginInfosApps extends $tea.Model {
    appName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListConnectorInformationResponseBodyPluginInfos extends $tea.Model {
    apps?: ListConnectorInformationResponseBodyPluginInfosApps[];
    iconUrl?: string;
    pluginName?: string;
    pluginPayType?: number;
    pluginStatus?: number;
    pluginTotalAmount?: number;
    pluginUsageAmount?: number;
    pluginUuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNavigationByFormTypeResponseBodyResultTitle extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListNavigationByFormTypeResponseBodyResult extends $tea.Model {
    formUuid?: string;
    processCode?: string;
    title?: ListNavigationByFormTypeResponseBodyResultTitle;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFormBaseInfosResponseBodyResultDataTitle extends $tea.Model {
    enUS?: string;
    zhCN?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFormBaseInfosResponseBodyResultData extends $tea.Model {
    creator?: string;
    formType?: string;
    formUuid?: string;
    gmtCreate?: string;
    title?: PageFormBaseInfosResponseBodyResultDataTitle;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFormBaseInfosResponseBodyResult extends $tea.Model {
    currentPage?: number;
    data?: PageFormBaseInfosResponseBodyResultData[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryServiceRecordResponseBodyValues extends $tea.Model {
    formInstanceId?: string;
    formUuid?: string;
    hookType?: string;
    hookUuid?: string;
    invokeParameter?: string;
    invokeResult?: string;
    invokeStatus?: string;
    invokeSuccess?: string;
    invokeUrl?: string;
    serviceContent?: string;
    serviceName?: string;
    serviceParameter?: string;
    sourceUuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataRemovalTableDataResponseBodyDataModifyUserName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataRemovalTableDataResponseBodyDataModifyUser extends $tea.Model {
    departmentName?: string;
    email?: string;
    name?: SearchFormDataRemovalTableDataResponseBodyDataModifyUserName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataRemovalTableDataResponseBodyDataOriginatorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataRemovalTableDataResponseBodyDataOriginator extends $tea.Model {
    departmentName?: string;
    email?: string;
    name?: SearchFormDataRemovalTableDataResponseBodyDataOriginatorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataRemovalTableDataResponseBodyData extends $tea.Model {
    createTimeGMT?: string;
    creatorUserId?: string;
    formData?: {
        [key: string]: any;
    };
    formInstanceId?: string;
    formUuid?: string;
    id?: number;
    instanceValue?: string;
    modifiedTimeGMT?: string;
    modifier?: string;
    modifyUser?: SearchFormDataRemovalTableDataResponseBodyDataModifyUser;
    originator?: SearchFormDataRemovalTableDataResponseBodyDataOriginator;
    sequence?: string;
    serialNumber?: string;
    title?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationResponseBodyDataModifyUserName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationResponseBodyDataModifyUser extends $tea.Model {
    name?: SearchFormDataSecondGenerationResponseBodyDataModifyUserName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationResponseBodyDataOriginatorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationResponseBodyDataOriginator extends $tea.Model {
    name?: SearchFormDataSecondGenerationResponseBodyDataOriginatorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationResponseBodyData extends $tea.Model {
    createTimeGMT?: string;
    creatorUserId?: string;
    formData?: {
        [key: string]: any;
    };
    formInstanceId?: string;
    formUuid?: string;
    id?: number;
    instanceValue?: string;
    modifiedTimeGMT?: string;
    modifier?: string;
    modifyUser?: SearchFormDataSecondGenerationResponseBodyDataModifyUser;
    originator?: SearchFormDataSecondGenerationResponseBodyDataOriginator;
    sequence?: string;
    serialNumber?: string;
    title?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser extends $tea.Model {
    name?: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator extends $tea.Model {
    name?: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDataSecondGenerationNoTableFieldResponseBodyData extends $tea.Model {
    createTimeGMT?: string;
    creatorUserId?: string;
    formData?: {
        [key: string]: any;
    };
    formInstanceId?: string;
    formUuid?: string;
    id?: number;
    instanceValue?: string;
    modifiedTimeGMT?: string;
    modifier?: string;
    modifyUser?: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser;
    originator?: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator;
    sequence?: string;
    serialNumber?: string;
    title?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDatasResponseBodyDataModifyUserUserName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDatasResponseBodyDataModifyUser extends $tea.Model {
    userId?: string;
    userName?: SearchFormDatasResponseBodyDataModifyUserUserName;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDatasResponseBodyDataOriginatorUserName extends $tea.Model {
    nameInChinese?: string;
    nameInEnglish?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDatasResponseBodyDataOriginator extends $tea.Model {
    userId?: string;
    userName?: SearchFormDatasResponseBodyDataOriginatorUserName;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchFormDatasResponseBodyData extends $tea.Model {
    createdTimeGMT?: string;
    creatorUserId?: string;
    dataId?: number;
    formData?: {
        [key: string]: any;
    };
    formInstanceId?: string;
    formUuid?: string;
    instanceValue?: string;
    modelUuid?: string;
    modifiedTimeGMT?: string;
    modifierUserId?: string;
    modifyUser?: SearchFormDatasResponseBodyDataModifyUser;
    originator?: SearchFormDatasResponseBodyDataOriginator;
    sequence?: string;
    serialNo?: string;
    title?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    appLoginCodeGenWithOptions(request: AppLoginCodeGenRequest, headers: AppLoginCodeGenHeaders, runtime: $Util.RuntimeOptions): Promise<AppLoginCodeGenResponse>;
    appLoginCodeGen(request: AppLoginCodeGenRequest): Promise<AppLoginCodeGenResponse>;
    batchGetFormDataByIdListWithOptions(request: BatchGetFormDataByIdListRequest, headers: BatchGetFormDataByIdListHeaders, runtime: $Util.RuntimeOptions): Promise<BatchGetFormDataByIdListResponse>;
    batchGetFormDataByIdList(request: BatchGetFormDataByIdListRequest): Promise<BatchGetFormDataByIdListResponse>;
    batchRemovalByFormInstanceIdListWithOptions(request: BatchRemovalByFormInstanceIdListRequest, headers: BatchRemovalByFormInstanceIdListHeaders, runtime: $Util.RuntimeOptions): Promise<BatchRemovalByFormInstanceIdListResponse>;
    batchRemovalByFormInstanceIdList(request: BatchRemovalByFormInstanceIdListRequest): Promise<BatchRemovalByFormInstanceIdListResponse>;
    batchSaveFormDataWithOptions(request: BatchSaveFormDataRequest, headers: BatchSaveFormDataHeaders, runtime: $Util.RuntimeOptions): Promise<BatchSaveFormDataResponse>;
    batchSaveFormData(request: BatchSaveFormDataRequest): Promise<BatchSaveFormDataResponse>;
    batchUpdateFormDataByInstanceIdWithOptions(request: BatchUpdateFormDataByInstanceIdRequest, headers: BatchUpdateFormDataByInstanceIdHeaders, runtime: $Util.RuntimeOptions): Promise<BatchUpdateFormDataByInstanceIdResponse>;
    batchUpdateFormDataByInstanceId(request: BatchUpdateFormDataByInstanceIdRequest): Promise<BatchUpdateFormDataByInstanceIdResponse>;
    batchUpdateFormDataByInstanceMapWithOptions(request: BatchUpdateFormDataByInstanceMapRequest, headers: BatchUpdateFormDataByInstanceMapHeaders, runtime: $Util.RuntimeOptions): Promise<BatchUpdateFormDataByInstanceMapResponse>;
    batchUpdateFormDataByInstanceMap(request: BatchUpdateFormDataByInstanceMapRequest): Promise<BatchUpdateFormDataByInstanceMapResponse>;
    buyAuthorizationOrderWithOptions(request: BuyAuthorizationOrderRequest, headers: BuyAuthorizationOrderHeaders, runtime: $Util.RuntimeOptions): Promise<BuyAuthorizationOrderResponse>;
    buyAuthorizationOrder(request: BuyAuthorizationOrderRequest): Promise<BuyAuthorizationOrderResponse>;
    buyFreshOrderWithOptions(request: BuyFreshOrderRequest, headers: BuyFreshOrderHeaders, runtime: $Util.RuntimeOptions): Promise<BuyFreshOrderResponse>;
    buyFreshOrder(request: BuyFreshOrderRequest): Promise<BuyFreshOrderResponse>;
    checkCloudAccountStatusWithOptions(callerUid: string, request: CheckCloudAccountStatusRequest, headers: CheckCloudAccountStatusHeaders, runtime: $Util.RuntimeOptions): Promise<CheckCloudAccountStatusResponse>;
    checkCloudAccountStatus(callerUid: string, request: CheckCloudAccountStatusRequest): Promise<CheckCloudAccountStatusResponse>;
    createOrUpdateFormDataWithOptions(request: CreateOrUpdateFormDataRequest, headers: CreateOrUpdateFormDataHeaders, runtime: $Util.RuntimeOptions): Promise<CreateOrUpdateFormDataResponse>;
    createOrUpdateFormData(request: CreateOrUpdateFormDataRequest): Promise<CreateOrUpdateFormDataResponse>;
    deleteFormDataWithOptions(request: DeleteFormDataRequest, headers: DeleteFormDataHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteFormDataResponse>;
    deleteFormData(request: DeleteFormDataRequest): Promise<DeleteFormDataResponse>;
    deleteInstanceWithOptions(request: DeleteInstanceRequest, headers: DeleteInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteInstanceResponse>;
    deleteInstance(request: DeleteInstanceRequest): Promise<DeleteInstanceResponse>;
    deleteSequenceWithOptions(request: DeleteSequenceRequest, headers: DeleteSequenceHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteSequenceResponse>;
    deleteSequence(request: DeleteSequenceRequest): Promise<DeleteSequenceResponse>;
    deployFunctionCallbackWithOptions(request: DeployFunctionCallbackRequest, headers: DeployFunctionCallbackHeaders, runtime: $Util.RuntimeOptions): Promise<DeployFunctionCallbackResponse>;
    deployFunctionCallback(request: DeployFunctionCallbackRequest): Promise<DeployFunctionCallbackResponse>;
    executeBatchTaskWithOptions(request: ExecuteBatchTaskRequest, headers: ExecuteBatchTaskHeaders, runtime: $Util.RuntimeOptions): Promise<ExecuteBatchTaskResponse>;
    executeBatchTask(request: ExecuteBatchTaskRequest): Promise<ExecuteBatchTaskResponse>;
    executeCustomApiWithOptions(request: ExecuteCustomApiRequest, headers: ExecuteCustomApiHeaders, runtime: $Util.RuntimeOptions): Promise<ExecuteCustomApiResponse>;
    executeCustomApi(request: ExecuteCustomApiRequest): Promise<ExecuteCustomApiResponse>;
    executePlatformTaskWithOptions(request: ExecutePlatformTaskRequest, headers: ExecutePlatformTaskHeaders, runtime: $Util.RuntimeOptions): Promise<ExecutePlatformTaskResponse>;
    executePlatformTask(request: ExecutePlatformTaskRequest): Promise<ExecutePlatformTaskResponse>;
    executeTaskWithOptions(request: ExecuteTaskRequest, headers: ExecuteTaskHeaders, runtime: $Util.RuntimeOptions): Promise<ExecuteTaskResponse>;
    executeTask(request: ExecuteTaskRequest): Promise<ExecuteTaskResponse>;
    expireCommodityWithOptions(request: ExpireCommodityRequest, headers: ExpireCommodityHeaders, runtime: $Util.RuntimeOptions): Promise<ExpireCommodityResponse>;
    expireCommodity(request: ExpireCommodityRequest): Promise<ExpireCommodityResponse>;
    getActivationCodeByCallerUnionIdWithOptions(callerUid: string, request: GetActivationCodeByCallerUnionIdRequest, headers: GetActivationCodeByCallerUnionIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetActivationCodeByCallerUnionIdResponse>;
    getActivationCodeByCallerUnionId(callerUid: string, request: GetActivationCodeByCallerUnionIdRequest): Promise<GetActivationCodeByCallerUnionIdResponse>;
    getActivityButtonListWithOptions(appType: string, processCode: string, activityId: string, request: GetActivityButtonListRequest, headers: GetActivityButtonListHeaders, runtime: $Util.RuntimeOptions): Promise<GetActivityButtonListResponse>;
    getActivityButtonList(appType: string, processCode: string, activityId: string, request: GetActivityButtonListRequest): Promise<GetActivityButtonListResponse>;
    getActivityListWithOptions(request: GetActivityListRequest, headers: GetActivityListHeaders, runtime: $Util.RuntimeOptions): Promise<GetActivityListResponse>;
    getActivityList(request: GetActivityListRequest): Promise<GetActivityListResponse>;
    getAllAuthCubesWithOptions(request: GetAllAuthCubesRequest, headers: GetAllAuthCubesHeaders, runtime: $Util.RuntimeOptions): Promise<GetAllAuthCubesResponse>;
    getAllAuthCubes(request: GetAllAuthCubesRequest): Promise<GetAllAuthCubesResponse>;
    getApplicationAuthorizationServicePlatformResourceWithOptions(request: GetApplicationAuthorizationServicePlatformResourceRequest, headers: GetApplicationAuthorizationServicePlatformResourceHeaders, runtime: $Util.RuntimeOptions): Promise<GetApplicationAuthorizationServicePlatformResourceResponse>;
    getApplicationAuthorizationServicePlatformResource(request: GetApplicationAuthorizationServicePlatformResourceRequest): Promise<GetApplicationAuthorizationServicePlatformResourceResponse>;
    getCorpAccomplishmentTasksWithOptions(corpId: string, userId: string, request: GetCorpAccomplishmentTasksRequest, headers: GetCorpAccomplishmentTasksHeaders, runtime: $Util.RuntimeOptions): Promise<GetCorpAccomplishmentTasksResponse>;
    getCorpAccomplishmentTasks(corpId: string, userId: string, request: GetCorpAccomplishmentTasksRequest): Promise<GetCorpAccomplishmentTasksResponse>;
    getCorpLevelByAccountIdWithOptions(request: GetCorpLevelByAccountIdRequest, headers: GetCorpLevelByAccountIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetCorpLevelByAccountIdResponse>;
    getCorpLevelByAccountId(request: GetCorpLevelByAccountIdRequest): Promise<GetCorpLevelByAccountIdResponse>;
    getCorpTasksWithOptions(request: GetCorpTasksRequest, headers: GetCorpTasksHeaders, runtime: $Util.RuntimeOptions): Promise<GetCorpTasksResponse>;
    getCorpTasks(request: GetCorpTasksRequest): Promise<GetCorpTasksResponse>;
    getDbConfigWithOptions(request: GetDbConfigRequest, headers: GetDbConfigHeaders, runtime: $Util.RuntimeOptions): Promise<GetDbConfigResponse>;
    getDbConfig(request: GetDbConfigRequest): Promise<GetDbConfigResponse>;
    getFieldDefByUuidWithOptions(request: GetFieldDefByUuidRequest, headers: GetFieldDefByUuidHeaders, runtime: $Util.RuntimeOptions): Promise<GetFieldDefByUuidResponse>;
    getFieldDefByUuid(request: GetFieldDefByUuidRequest): Promise<GetFieldDefByUuidResponse>;
    getFormComponentDefinitionListWithOptions(appType: string, formUuid: string, request: GetFormComponentDefinitionListRequest, headers: GetFormComponentDefinitionListHeaders, runtime: $Util.RuntimeOptions): Promise<GetFormComponentDefinitionListResponse>;
    getFormComponentDefinitionList(appType: string, formUuid: string, request: GetFormComponentDefinitionListRequest): Promise<GetFormComponentDefinitionListResponse>;
    getFormDataByIDWithOptions(id: string, request: GetFormDataByIDRequest, headers: GetFormDataByIDHeaders, runtime: $Util.RuntimeOptions): Promise<GetFormDataByIDResponse>;
    getFormDataByID(id: string, request: GetFormDataByIDRequest): Promise<GetFormDataByIDResponse>;
    getFormListInAppWithOptions(request: GetFormListInAppRequest, headers: GetFormListInAppHeaders, runtime: $Util.RuntimeOptions): Promise<GetFormListInAppResponse>;
    getFormListInApp(request: GetFormListInAppRequest): Promise<GetFormListInAppResponse>;
    getInstanceByIdWithOptions(id: string, request: GetInstanceByIdRequest, headers: GetInstanceByIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetInstanceByIdResponse>;
    getInstanceById(id: string, request: GetInstanceByIdRequest): Promise<GetInstanceByIdResponse>;
    getInstanceIdListWithOptions(request: GetInstanceIdListRequest, headers: GetInstanceIdListHeaders, runtime: $Util.RuntimeOptions): Promise<GetInstanceIdListResponse>;
    getInstanceIdList(request: GetInstanceIdListRequest): Promise<GetInstanceIdListResponse>;
    getInstancesWithOptions(request: GetInstancesRequest, headers: GetInstancesHeaders, runtime: $Util.RuntimeOptions): Promise<GetInstancesResponse>;
    getInstances(request: GetInstancesRequest): Promise<GetInstancesResponse>;
    getInstancesByIdListWithOptions(request: GetInstancesByIdListRequest, headers: GetInstancesByIdListHeaders, runtime: $Util.RuntimeOptions): Promise<GetInstancesByIdListResponse>;
    getInstancesByIdList(request: GetInstancesByIdListRequest): Promise<GetInstancesByIdListResponse>;
    getMeCorpSubmissionWithOptions(userId: string, request: GetMeCorpSubmissionRequest, headers: GetMeCorpSubmissionHeaders, runtime: $Util.RuntimeOptions): Promise<GetMeCorpSubmissionResponse>;
    getMeCorpSubmission(userId: string, request: GetMeCorpSubmissionRequest): Promise<GetMeCorpSubmissionResponse>;
    getNotifyMeWithOptions(userId: string, request: GetNotifyMeRequest, headers: GetNotifyMeHeaders, runtime: $Util.RuntimeOptions): Promise<GetNotifyMeResponse>;
    getNotifyMe(userId: string, request: GetNotifyMeRequest): Promise<GetNotifyMeResponse>;
    getOpenUrlWithOptions(appType: string, request: GetOpenUrlRequest, headers: GetOpenUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetOpenUrlResponse>;
    getOpenUrl(appType: string, request: GetOpenUrlRequest): Promise<GetOpenUrlResponse>;
    getOperationRecordsWithOptions(request: GetOperationRecordsRequest, headers: GetOperationRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<GetOperationRecordsResponse>;
    getOperationRecords(request: GetOperationRecordsRequest): Promise<GetOperationRecordsResponse>;
    getPlatformResourceWithOptions(request: GetPlatformResourceRequest, headers: GetPlatformResourceHeaders, runtime: $Util.RuntimeOptions): Promise<GetPlatformResourceResponse>;
    getPlatformResource(request: GetPlatformResourceRequest): Promise<GetPlatformResourceResponse>;
    getPrintAppInfoWithOptions(request: GetPrintAppInfoRequest, headers: GetPrintAppInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPrintAppInfoResponse>;
    getPrintAppInfo(request: GetPrintAppInfoRequest): Promise<GetPrintAppInfoResponse>;
    getPrintDictionaryWithOptions(request: GetPrintDictionaryRequest, headers: GetPrintDictionaryHeaders, runtime: $Util.RuntimeOptions): Promise<GetPrintDictionaryResponse>;
    getPrintDictionary(request: GetPrintDictionaryRequest): Promise<GetPrintDictionaryResponse>;
    getProcessDefinitionWithOptions(processInstanceId: string, request: GetProcessDefinitionRequest, headers: GetProcessDefinitionHeaders, runtime: $Util.RuntimeOptions): Promise<GetProcessDefinitionResponse>;
    getProcessDefinition(processInstanceId: string, request: GetProcessDefinitionRequest): Promise<GetProcessDefinitionResponse>;
    getRunningTaskListWithOptions(request: GetRunningTaskListRequest, headers: GetRunningTaskListHeaders, runtime: $Util.RuntimeOptions): Promise<GetRunningTaskListResponse>;
    getRunningTaskList(request: GetRunningTaskListRequest): Promise<GetRunningTaskListResponse>;
    getRunningTasksWithOptions(request: GetRunningTasksRequest, headers: GetRunningTasksHeaders, runtime: $Util.RuntimeOptions): Promise<GetRunningTasksResponse>;
    getRunningTasks(request: GetRunningTasksRequest): Promise<GetRunningTasksResponse>;
    getSaleUserInfoByUserIdWithOptions(request: GetSaleUserInfoByUserIdRequest, headers: GetSaleUserInfoByUserIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetSaleUserInfoByUserIdResponse>;
    getSaleUserInfoByUserId(request: GetSaleUserInfoByUserIdRequest): Promise<GetSaleUserInfoByUserIdResponse>;
    getSimpleCubeModelListWithOptions(request: GetSimpleCubeModelListRequest, headers: GetSimpleCubeModelListHeaders, runtime: $Util.RuntimeOptions): Promise<GetSimpleCubeModelListResponse>;
    getSimpleCubeModelList(request: GetSimpleCubeModelListRequest): Promise<GetSimpleCubeModelListResponse>;
    getTaskCopiesWithOptions(request: GetTaskCopiesRequest, headers: GetTaskCopiesHeaders, runtime: $Util.RuntimeOptions): Promise<GetTaskCopiesResponse>;
    getTaskCopies(request: GetTaskCopiesRequest): Promise<GetTaskCopiesResponse>;
    listApplicationWithOptions(request: ListApplicationRequest, headers: ListApplicationHeaders, runtime: $Util.RuntimeOptions): Promise<ListApplicationResponse>;
    listApplication(request: ListApplicationRequest): Promise<ListApplicationResponse>;
    listApplicationAuthorizationServiceApplicationInformationWithOptions(instanceId: string, request: ListApplicationAuthorizationServiceApplicationInformationRequest, headers: ListApplicationAuthorizationServiceApplicationInformationHeaders, runtime: $Util.RuntimeOptions): Promise<ListApplicationAuthorizationServiceApplicationInformationResponse>;
    listApplicationAuthorizationServiceApplicationInformation(instanceId: string, request: ListApplicationAuthorizationServiceApplicationInformationRequest): Promise<ListApplicationAuthorizationServiceApplicationInformationResponse>;
    listApplicationAuthorizationServiceConnectorInformationWithOptions(instanceId: string, request: ListApplicationAuthorizationServiceConnectorInformationRequest, headers: ListApplicationAuthorizationServiceConnectorInformationHeaders, runtime: $Util.RuntimeOptions): Promise<ListApplicationAuthorizationServiceConnectorInformationResponse>;
    listApplicationAuthorizationServiceConnectorInformation(instanceId: string, request: ListApplicationAuthorizationServiceConnectorInformationRequest): Promise<ListApplicationAuthorizationServiceConnectorInformationResponse>;
    listApplicationInformationWithOptions(instanceId: string, request: ListApplicationInformationRequest, headers: ListApplicationInformationHeaders, runtime: $Util.RuntimeOptions): Promise<ListApplicationInformationResponse>;
    listApplicationInformation(instanceId: string, request: ListApplicationInformationRequest): Promise<ListApplicationInformationResponse>;
    listCommodityWithOptions(request: ListCommodityRequest, headers: ListCommodityHeaders, runtime: $Util.RuntimeOptions): Promise<ListCommodityResponse>;
    listCommodity(request: ListCommodityRequest): Promise<ListCommodityResponse>;
    listConnectorInformationWithOptions(instanceId: string, request: ListConnectorInformationRequest, headers: ListConnectorInformationHeaders, runtime: $Util.RuntimeOptions): Promise<ListConnectorInformationResponse>;
    listConnectorInformation(instanceId: string, request: ListConnectorInformationRequest): Promise<ListConnectorInformationResponse>;
    listFormRemarksWithOptions(request: ListFormRemarksRequest, headers: ListFormRemarksHeaders, runtime: $Util.RuntimeOptions): Promise<ListFormRemarksResponse>;
    listFormRemarks(request: ListFormRemarksRequest): Promise<ListFormRemarksResponse>;
    listNavigationByFormTypeWithOptions(request: ListNavigationByFormTypeRequest, headers: ListNavigationByFormTypeHeaders, runtime: $Util.RuntimeOptions): Promise<ListNavigationByFormTypeResponse>;
    listNavigationByFormType(request: ListNavigationByFormTypeRequest): Promise<ListNavigationByFormTypeResponse>;
    listOperationLogsWithOptions(request: ListOperationLogsRequest, headers: ListOperationLogsHeaders, runtime: $Util.RuntimeOptions): Promise<ListOperationLogsResponse>;
    listOperationLogs(request: ListOperationLogsRequest): Promise<ListOperationLogsResponse>;
    listTableDataByFormInstanceIdTableIdWithOptions(formInstanceId: string, request: ListTableDataByFormInstanceIdTableIdRequest, headers: ListTableDataByFormInstanceIdTableIdHeaders, runtime: $Util.RuntimeOptions): Promise<ListTableDataByFormInstanceIdTableIdResponse>;
    listTableDataByFormInstanceIdTableId(formInstanceId: string, request: ListTableDataByFormInstanceIdTableIdRequest): Promise<ListTableDataByFormInstanceIdTableIdResponse>;
    loginCodeGenWithOptions(request: LoginCodeGenRequest, headers: LoginCodeGenHeaders, runtime: $Util.RuntimeOptions): Promise<LoginCodeGenResponse>;
    loginCodeGen(request: LoginCodeGenRequest): Promise<LoginCodeGenResponse>;
    notifyAuthorizationResultWithOptions(request: NotifyAuthorizationResultRequest, headers: NotifyAuthorizationResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyAuthorizationResultResponse>;
    notifyAuthorizationResult(request: NotifyAuthorizationResultRequest): Promise<NotifyAuthorizationResultResponse>;
    pageFormBaseInfosWithOptions(request: PageFormBaseInfosRequest, headers: PageFormBaseInfosHeaders, runtime: $Util.RuntimeOptions): Promise<PageFormBaseInfosResponse>;
    pageFormBaseInfos(request: PageFormBaseInfosRequest): Promise<PageFormBaseInfosResponse>;
    queryServiceRecordWithOptions(request: QueryServiceRecordRequest, headers: QueryServiceRecordHeaders, runtime: $Util.RuntimeOptions): Promise<QueryServiceRecordResponse>;
    queryServiceRecord(request: QueryServiceRecordRequest): Promise<QueryServiceRecordResponse>;
    redirectTaskWithOptions(request: RedirectTaskRequest, headers: RedirectTaskHeaders, runtime: $Util.RuntimeOptions): Promise<RedirectTaskResponse>;
    redirectTask(request: RedirectTaskRequest): Promise<RedirectTaskResponse>;
    refundCommodityWithOptions(request: RefundCommodityRequest, headers: RefundCommodityHeaders, runtime: $Util.RuntimeOptions): Promise<RefundCommodityResponse>;
    refundCommodity(request: RefundCommodityRequest): Promise<RefundCommodityResponse>;
    registerAccountsWithOptions(request: RegisterAccountsRequest, headers: RegisterAccountsHeaders, runtime: $Util.RuntimeOptions): Promise<RegisterAccountsResponse>;
    registerAccounts(request: RegisterAccountsRequest): Promise<RegisterAccountsResponse>;
    releaseCommodityWithOptions(request: ReleaseCommodityRequest, headers: ReleaseCommodityHeaders, runtime: $Util.RuntimeOptions): Promise<ReleaseCommodityResponse>;
    releaseCommodity(request: ReleaseCommodityRequest): Promise<ReleaseCommodityResponse>;
    removeTenantResourceWithOptions(callerUid: string, request: RemoveTenantResourceRequest, headers: RemoveTenantResourceHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveTenantResourceResponse>;
    removeTenantResource(callerUid: string, request: RemoveTenantResourceRequest): Promise<RemoveTenantResourceResponse>;
    renderBatchCallbackWithOptions(request: RenderBatchCallbackRequest, headers: RenderBatchCallbackHeaders, runtime: $Util.RuntimeOptions): Promise<RenderBatchCallbackResponse>;
    renderBatchCallback(request: RenderBatchCallbackRequest): Promise<RenderBatchCallbackResponse>;
    renewApplicationAuthorizationServiceOrderWithOptions(request: RenewApplicationAuthorizationServiceOrderRequest, headers: RenewApplicationAuthorizationServiceOrderHeaders, runtime: $Util.RuntimeOptions): Promise<RenewApplicationAuthorizationServiceOrderResponse>;
    renewApplicationAuthorizationServiceOrder(request: RenewApplicationAuthorizationServiceOrderRequest): Promise<RenewApplicationAuthorizationServiceOrderResponse>;
    renewTenantOrderWithOptions(request: RenewTenantOrderRequest, headers: RenewTenantOrderHeaders, runtime: $Util.RuntimeOptions): Promise<RenewTenantOrderResponse>;
    renewTenantOrder(request: RenewTenantOrderRequest): Promise<RenewTenantOrderResponse>;
    saveFormDataWithOptions(request: SaveFormDataRequest, headers: SaveFormDataHeaders, runtime: $Util.RuntimeOptions): Promise<SaveFormDataResponse>;
    saveFormData(request: SaveFormDataRequest): Promise<SaveFormDataResponse>;
    saveFormRemarkWithOptions(request: SaveFormRemarkRequest, headers: SaveFormRemarkHeaders, runtime: $Util.RuntimeOptions): Promise<SaveFormRemarkResponse>;
    saveFormRemark(request: SaveFormRemarkRequest): Promise<SaveFormRemarkResponse>;
    savePrintTplDetailInfoWithOptions(request: SavePrintTplDetailInfoRequest, headers: SavePrintTplDetailInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SavePrintTplDetailInfoResponse>;
    savePrintTplDetailInfo(request: SavePrintTplDetailInfoRequest): Promise<SavePrintTplDetailInfoResponse>;
    searchActivationCodeWithOptions(request: SearchActivationCodeRequest, headers: SearchActivationCodeHeaders, runtime: $Util.RuntimeOptions): Promise<SearchActivationCodeResponse>;
    searchActivationCode(request: SearchActivationCodeRequest): Promise<SearchActivationCodeResponse>;
    searchEmployeeFieldValuesWithOptions(request: SearchEmployeeFieldValuesRequest, headers: SearchEmployeeFieldValuesHeaders, runtime: $Util.RuntimeOptions): Promise<SearchEmployeeFieldValuesResponse>;
    searchEmployeeFieldValues(request: SearchEmployeeFieldValuesRequest): Promise<SearchEmployeeFieldValuesResponse>;
    searchFormDataIdListWithOptions(appType: string, formUuid: string, request: SearchFormDataIdListRequest, headers: SearchFormDataIdListHeaders, runtime: $Util.RuntimeOptions): Promise<SearchFormDataIdListResponse>;
    searchFormDataIdList(appType: string, formUuid: string, request: SearchFormDataIdListRequest): Promise<SearchFormDataIdListResponse>;
    searchFormDataRemovalTableDataWithOptions(request: SearchFormDataRemovalTableDataRequest, headers: SearchFormDataRemovalTableDataHeaders, runtime: $Util.RuntimeOptions): Promise<SearchFormDataRemovalTableDataResponse>;
    searchFormDataRemovalTableData(request: SearchFormDataRemovalTableDataRequest): Promise<SearchFormDataRemovalTableDataResponse>;
    searchFormDataSecondGenerationWithOptions(request: SearchFormDataSecondGenerationRequest, headers: SearchFormDataSecondGenerationHeaders, runtime: $Util.RuntimeOptions): Promise<SearchFormDataSecondGenerationResponse>;
    searchFormDataSecondGeneration(request: SearchFormDataSecondGenerationRequest): Promise<SearchFormDataSecondGenerationResponse>;
    searchFormDataSecondGenerationNoTableFieldWithOptions(request: SearchFormDataSecondGenerationNoTableFieldRequest, headers: SearchFormDataSecondGenerationNoTableFieldHeaders, runtime: $Util.RuntimeOptions): Promise<SearchFormDataSecondGenerationNoTableFieldResponse>;
    searchFormDataSecondGenerationNoTableField(request: SearchFormDataSecondGenerationNoTableFieldRequest): Promise<SearchFormDataSecondGenerationNoTableFieldResponse>;
    searchFormDatasWithOptions(request: SearchFormDatasRequest, headers: SearchFormDatasHeaders, runtime: $Util.RuntimeOptions): Promise<SearchFormDatasResponse>;
    searchFormDatas(request: SearchFormDatasRequest): Promise<SearchFormDatasResponse>;
    startInstanceWithOptions(request: StartInstanceRequest, headers: StartInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<StartInstanceResponse>;
    startInstance(request: StartInstanceRequest): Promise<StartInstanceResponse>;
    terminateCloudAuthorizationWithOptions(request: TerminateCloudAuthorizationRequest, headers: TerminateCloudAuthorizationHeaders, runtime: $Util.RuntimeOptions): Promise<TerminateCloudAuthorizationResponse>;
    terminateCloudAuthorization(request: TerminateCloudAuthorizationRequest): Promise<TerminateCloudAuthorizationResponse>;
    terminateInstanceWithOptions(request: TerminateInstanceRequest, headers: TerminateInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<TerminateInstanceResponse>;
    terminateInstance(request: TerminateInstanceRequest): Promise<TerminateInstanceResponse>;
    updateCloudAccountInformationWithOptions(request: UpdateCloudAccountInformationRequest, headers: UpdateCloudAccountInformationHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateCloudAccountInformationResponse>;
    updateCloudAccountInformation(request: UpdateCloudAccountInformationRequest): Promise<UpdateCloudAccountInformationResponse>;
    updateFormDataWithOptions(request: UpdateFormDataRequest, headers: UpdateFormDataHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateFormDataResponse>;
    updateFormData(request: UpdateFormDataRequest): Promise<UpdateFormDataResponse>;
    updateInstanceWithOptions(request: UpdateInstanceRequest, headers: UpdateInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateInstanceResponse>;
    updateInstance(request: UpdateInstanceRequest): Promise<UpdateInstanceResponse>;
    updateStatusWithOptions(request: UpdateStatusRequest, headers: UpdateStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateStatusResponse>;
    updateStatus(request: UpdateStatusRequest): Promise<UpdateStatusResponse>;
    upgradeTenantInformationWithOptions(request: UpgradeTenantInformationRequest, headers: UpgradeTenantInformationHeaders, runtime: $Util.RuntimeOptions): Promise<UpgradeTenantInformationResponse>;
    upgradeTenantInformation(request: UpgradeTenantInformationRequest): Promise<UpgradeTenantInformationResponse>;
    validateApplicationAuthorizationOrderWithOptions(instanceId: string, request: ValidateApplicationAuthorizationOrderRequest, headers: ValidateApplicationAuthorizationOrderHeaders, runtime: $Util.RuntimeOptions): Promise<ValidateApplicationAuthorizationOrderResponse>;
    validateApplicationAuthorizationOrder(instanceId: string, request: ValidateApplicationAuthorizationOrderRequest): Promise<ValidateApplicationAuthorizationOrderResponse>;
    validateApplicationAuthorizationServiceOrderWithOptions(callerUid: string, request: ValidateApplicationAuthorizationServiceOrderRequest, headers: ValidateApplicationAuthorizationServiceOrderHeaders, runtime: $Util.RuntimeOptions): Promise<ValidateApplicationAuthorizationServiceOrderResponse>;
    validateApplicationAuthorizationServiceOrder(callerUid: string, request: ValidateApplicationAuthorizationServiceOrderRequest): Promise<ValidateApplicationAuthorizationServiceOrderResponse>;
    validateApplicationServiceOrderUpgradeWithOptions(callerUnionid: string, request: ValidateApplicationServiceOrderUpgradeRequest, headers: ValidateApplicationServiceOrderUpgradeHeaders, runtime: $Util.RuntimeOptions): Promise<ValidateApplicationServiceOrderUpgradeResponse>;
    validateApplicationServiceOrderUpgrade(callerUnionid: string, request: ValidateApplicationServiceOrderUpgradeRequest): Promise<ValidateApplicationServiceOrderUpgradeResponse>;
    validateOrderBuyWithOptions(request: ValidateOrderBuyRequest, headers: ValidateOrderBuyHeaders, runtime: $Util.RuntimeOptions): Promise<ValidateOrderBuyResponse>;
    validateOrderBuy(request: ValidateOrderBuyRequest): Promise<ValidateOrderBuyResponse>;
    validateOrderUpdateWithOptions(instanceId: string, request: ValidateOrderUpdateRequest, headers: ValidateOrderUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<ValidateOrderUpdateResponse>;
    validateOrderUpdate(instanceId: string, request: ValidateOrderUpdateRequest): Promise<ValidateOrderUpdateResponse>;
    validateOrderUpgradeWithOptions(request: ValidateOrderUpgradeRequest, headers: ValidateOrderUpgradeHeaders, runtime: $Util.RuntimeOptions): Promise<ValidateOrderUpgradeResponse>;
    validateOrderUpgrade(request: ValidateOrderUpgradeRequest): Promise<ValidateOrderUpgradeResponse>;
}
