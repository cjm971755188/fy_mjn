"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AppLoginCodeGenHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.AppLoginCodeGenHeaders = AppLoginCodeGenHeaders;
class AppLoginCodeGenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appKey: 'appKey',
            signTimestampStr: 'signTimestampStr',
            signature: 'signature',
            fullUrl: 'fullUrl',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appKey: 'string',
            signTimestampStr: 'string',
            signature: 'string',
            fullUrl: 'string',
            userId: 'string',
        };
    }
}
exports.AppLoginCodeGenRequest = AppLoginCodeGenRequest;
class AppLoginCodeGenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            loginCode: 'loginCode',
        };
    }
    static types() {
        return {
            loginCode: 'string',
        };
    }
}
exports.AppLoginCodeGenResponseBody = AppLoginCodeGenResponseBody;
class AppLoginCodeGenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AppLoginCodeGenResponseBody,
        };
    }
}
exports.AppLoginCodeGenResponse = AppLoginCodeGenResponse;
class BatchGetFormDataByIdListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchGetFormDataByIdListHeaders = BatchGetFormDataByIdListHeaders;
class BatchGetFormDataByIdListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formInstanceIdList: 'formInstanceIdList',
            formUuid: 'formUuid',
            needFormInstanceValue: 'needFormInstanceValue',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formInstanceIdList: { 'type': 'array', 'itemType': 'string' },
            formUuid: 'string',
            needFormInstanceValue: 'boolean',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.BatchGetFormDataByIdListRequest = BatchGetFormDataByIdListRequest;
class BatchGetFormDataByIdListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': BatchGetFormDataByIdListResponseBodyResult },
        };
    }
}
exports.BatchGetFormDataByIdListResponseBody = BatchGetFormDataByIdListResponseBody;
class BatchGetFormDataByIdListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchGetFormDataByIdListResponseBody,
        };
    }
}
exports.BatchGetFormDataByIdListResponse = BatchGetFormDataByIdListResponse;
class BatchRemovalByFormInstanceIdListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchRemovalByFormInstanceIdListHeaders = BatchRemovalByFormInstanceIdListHeaders;
class BatchRemovalByFormInstanceIdListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            asynchronousExecution: 'asynchronousExecution',
            executeExpression: 'executeExpression',
            formInstanceIdList: 'formInstanceIdList',
            formUuid: 'formUuid',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            asynchronousExecution: 'boolean',
            executeExpression: 'boolean',
            formInstanceIdList: { 'type': 'array', 'itemType': 'string' },
            formUuid: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.BatchRemovalByFormInstanceIdListRequest = BatchRemovalByFormInstanceIdListRequest;
class BatchRemovalByFormInstanceIdListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.BatchRemovalByFormInstanceIdListResponse = BatchRemovalByFormInstanceIdListResponse;
class BatchSaveFormDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchSaveFormDataHeaders = BatchSaveFormDataHeaders;
class BatchSaveFormDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            asynchronousExecution: 'asynchronousExecution',
            formDataJsonList: 'formDataJsonList',
            formUuid: 'formUuid',
            keepRunningAfterException: 'keepRunningAfterException',
            noExecuteExpression: 'noExecuteExpression',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            asynchronousExecution: 'boolean',
            formDataJsonList: { 'type': 'array', 'itemType': 'string' },
            formUuid: 'string',
            keepRunningAfterException: 'boolean',
            noExecuteExpression: 'boolean',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.BatchSaveFormDataRequest = BatchSaveFormDataRequest;
class BatchSaveFormDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchSaveFormDataResponseBody = BatchSaveFormDataResponseBody;
class BatchSaveFormDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchSaveFormDataResponseBody,
        };
    }
}
exports.BatchSaveFormDataResponse = BatchSaveFormDataResponse;
class BatchUpdateFormDataByInstanceIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchUpdateFormDataByInstanceIdHeaders = BatchUpdateFormDataByInstanceIdHeaders;
class BatchUpdateFormDataByInstanceIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            asynchronousExecution: 'asynchronousExecution',
            formInstanceIdList: 'formInstanceIdList',
            formUuid: 'formUuid',
            ignoreEmpty: 'ignoreEmpty',
            noExecuteExpression: 'noExecuteExpression',
            systemToken: 'systemToken',
            updateFormDataJson: 'updateFormDataJson',
            useLatestFormSchemaVersion: 'useLatestFormSchemaVersion',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            asynchronousExecution: 'boolean',
            formInstanceIdList: { 'type': 'array', 'itemType': 'string' },
            formUuid: 'string',
            ignoreEmpty: 'boolean',
            noExecuteExpression: 'boolean',
            systemToken: 'string',
            updateFormDataJson: 'string',
            useLatestFormSchemaVersion: 'boolean',
            userId: 'string',
        };
    }
}
exports.BatchUpdateFormDataByInstanceIdRequest = BatchUpdateFormDataByInstanceIdRequest;
class BatchUpdateFormDataByInstanceIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchUpdateFormDataByInstanceIdResponseBody = BatchUpdateFormDataByInstanceIdResponseBody;
class BatchUpdateFormDataByInstanceIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchUpdateFormDataByInstanceIdResponseBody,
        };
    }
}
exports.BatchUpdateFormDataByInstanceIdResponse = BatchUpdateFormDataByInstanceIdResponse;
class BatchUpdateFormDataByInstanceMapHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BatchUpdateFormDataByInstanceMapHeaders = BatchUpdateFormDataByInstanceMapHeaders;
class BatchUpdateFormDataByInstanceMapRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            asynchronousExecution: 'asynchronousExecution',
            formUuid: 'formUuid',
            ignoreEmpty: 'ignoreEmpty',
            noExecuteExpression: 'noExecuteExpression',
            systemToken: 'systemToken',
            updateFormDataJsonMap: 'updateFormDataJsonMap',
            useLatestFormSchemaVersion: 'useLatestFormSchemaVersion',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            asynchronousExecution: 'boolean',
            formUuid: 'string',
            ignoreEmpty: 'boolean',
            noExecuteExpression: 'boolean',
            systemToken: 'string',
            updateFormDataJsonMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            useLatestFormSchemaVersion: 'boolean',
            userId: 'string',
        };
    }
}
exports.BatchUpdateFormDataByInstanceMapRequest = BatchUpdateFormDataByInstanceMapRequest;
class BatchUpdateFormDataByInstanceMapResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.BatchUpdateFormDataByInstanceMapResponseBody = BatchUpdateFormDataByInstanceMapResponseBody;
class BatchUpdateFormDataByInstanceMapResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchUpdateFormDataByInstanceMapResponseBody,
        };
    }
}
exports.BatchUpdateFormDataByInstanceMapResponse = BatchUpdateFormDataByInstanceMapResponse;
class BuyAuthorizationOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BuyAuthorizationOrderHeaders = BuyAuthorizationOrderHeaders;
class BuyAuthorizationOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            accountNumber: 'accountNumber',
            beginTimeGMT: 'beginTimeGMT',
            callerUnionId: 'callerUnionId',
            chargeType: 'chargeType',
            commerceType: 'commerceType',
            commodityType: 'commodityType',
            endTimeGMT: 'endTimeGMT',
            instanceId: 'instanceId',
            instanceName: 'instanceName',
            produceCode: 'produceCode',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            accountNumber: 'string',
            beginTimeGMT: 'number',
            callerUnionId: 'string',
            chargeType: 'string',
            commerceType: 'string',
            commodityType: 'string',
            endTimeGMT: 'number',
            instanceId: 'string',
            instanceName: 'string',
            produceCode: 'string',
        };
    }
}
exports.BuyAuthorizationOrderRequest = BuyAuthorizationOrderRequest;
class BuyAuthorizationOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.BuyAuthorizationOrderResponseBody = BuyAuthorizationOrderResponseBody;
class BuyAuthorizationOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BuyAuthorizationOrderResponseBody,
        };
    }
}
exports.BuyAuthorizationOrderResponse = BuyAuthorizationOrderResponse;
class BuyFreshOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.BuyFreshOrderHeaders = BuyFreshOrderHeaders;
class BuyFreshOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            accountNumber: 'accountNumber',
            beginTimeGMT: 'beginTimeGMT',
            callerUnionId: 'callerUnionId',
            chargeType: 'chargeType',
            commerceType: 'commerceType',
            commodityType: 'commodityType',
            endTimeGMT: 'endTimeGMT',
            instanceId: 'instanceId',
            instanceName: 'instanceName',
            produceCode: 'produceCode',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            accountNumber: 'string',
            beginTimeGMT: 'number',
            callerUnionId: 'string',
            chargeType: 'string',
            commerceType: 'string',
            commodityType: 'string',
            endTimeGMT: 'number',
            instanceId: 'string',
            instanceName: 'string',
            produceCode: 'string',
        };
    }
}
exports.BuyFreshOrderRequest = BuyFreshOrderRequest;
class BuyFreshOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.BuyFreshOrderResponseBody = BuyFreshOrderResponseBody;
class BuyFreshOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BuyFreshOrderResponseBody,
        };
    }
}
exports.BuyFreshOrderResponse = BuyFreshOrderResponse;
class CheckCloudAccountStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CheckCloudAccountStatusHeaders = CheckCloudAccountStatusHeaders;
class CheckCloudAccountStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
        };
    }
    static types() {
        return {
            accessKey: 'string',
        };
    }
}
exports.CheckCloudAccountStatusRequest = CheckCloudAccountStatusRequest;
class CheckCloudAccountStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.CheckCloudAccountStatusResponseBody = CheckCloudAccountStatusResponseBody;
class CheckCloudAccountStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckCloudAccountStatusResponseBody,
        };
    }
}
exports.CheckCloudAccountStatusResponse = CheckCloudAccountStatusResponse;
class CreateOrUpdateFormDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.CreateOrUpdateFormDataHeaders = CreateOrUpdateFormDataHeaders;
class CreateOrUpdateFormDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formDataJson: 'formDataJson',
            formUuid: 'formUuid',
            noExecuteExpression: 'noExecuteExpression',
            searchCondition: 'searchCondition',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formDataJson: 'string',
            formUuid: 'string',
            noExecuteExpression: 'boolean',
            searchCondition: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.CreateOrUpdateFormDataRequest = CreateOrUpdateFormDataRequest;
class CreateOrUpdateFormDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.CreateOrUpdateFormDataResponseBody = CreateOrUpdateFormDataResponseBody;
class CreateOrUpdateFormDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateOrUpdateFormDataResponseBody,
        };
    }
}
exports.CreateOrUpdateFormDataResponse = CreateOrUpdateFormDataResponse;
class DeleteFormDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteFormDataHeaders = DeleteFormDataHeaders;
class DeleteFormDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formInstanceId: 'formInstanceId',
            language: 'language',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formInstanceId: 'string',
            language: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.DeleteFormDataRequest = DeleteFormDataRequest;
class DeleteFormDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteFormDataResponse = DeleteFormDataResponse;
class DeleteInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteInstanceHeaders = DeleteInstanceHeaders;
class DeleteInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            processInstanceId: 'processInstanceId',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            processInstanceId: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.DeleteInstanceRequest = DeleteInstanceRequest;
class DeleteInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteInstanceResponse = DeleteInstanceResponse;
class DeleteSequenceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeleteSequenceHeaders = DeleteSequenceHeaders;
class DeleteSequenceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            sequence: 'sequence',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            sequence: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.DeleteSequenceRequest = DeleteSequenceRequest;
class DeleteSequenceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.DeleteSequenceResponse = DeleteSequenceResponse;
class DeployFunctionCallbackHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.DeployFunctionCallbackHeaders = DeployFunctionCallbackHeaders;
class DeployFunctionCallbackRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appId: 'appId',
            customDomain: 'customDomain',
            deployStage: 'deployStage',
            gateWayAppKey: 'gateWayAppKey',
            gateWayAppSecret: 'gateWayAppSecret',
            gateWayDomain: 'gateWayDomain',
        };
    }
    static types() {
        return {
            appId: 'string',
            customDomain: 'string',
            deployStage: 'string',
            gateWayAppKey: 'string',
            gateWayAppSecret: 'string',
            gateWayDomain: 'string',
        };
    }
}
exports.DeployFunctionCallbackRequest = DeployFunctionCallbackRequest;
class DeployFunctionCallbackResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.DeployFunctionCallbackResponseBody = DeployFunctionCallbackResponseBody;
class DeployFunctionCallbackResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeployFunctionCallbackResponseBody,
        };
    }
}
exports.DeployFunctionCallbackResponse = DeployFunctionCallbackResponse;
class ExecuteBatchTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExecuteBatchTaskHeaders = ExecuteBatchTaskHeaders;
class ExecuteBatchTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            outResult: 'outResult',
            remark: 'remark',
            systemToken: 'systemToken',
            taskInformationList: 'taskInformationList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            outResult: 'string',
            remark: 'string',
            systemToken: 'string',
            taskInformationList: 'string',
            userId: 'string',
        };
    }
}
exports.ExecuteBatchTaskRequest = ExecuteBatchTaskRequest;
class ExecuteBatchTaskResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failNumber: 'failNumber',
            successNumber: 'successNumber',
            total: 'total',
        };
    }
    static types() {
        return {
            failNumber: 'number',
            successNumber: 'number',
            total: 'number',
        };
    }
}
exports.ExecuteBatchTaskResponseBody = ExecuteBatchTaskResponseBody;
class ExecuteBatchTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExecuteBatchTaskResponseBody,
        };
    }
}
exports.ExecuteBatchTaskResponse = ExecuteBatchTaskResponse;
class ExecuteCustomApiHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExecuteCustomApiHeaders = ExecuteCustomApiHeaders;
class ExecuteCustomApiRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            data: 'data',
            language: 'language',
            serviceId: 'serviceId',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            data: 'string',
            language: 'string',
            serviceId: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.ExecuteCustomApiRequest = ExecuteCustomApiRequest;
class ExecuteCustomApiResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.ExecuteCustomApiResponseBody = ExecuteCustomApiResponseBody;
class ExecuteCustomApiResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExecuteCustomApiResponseBody,
        };
    }
}
exports.ExecuteCustomApiResponse = ExecuteCustomApiResponse;
class ExecutePlatformTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExecutePlatformTaskHeaders = ExecutePlatformTaskHeaders;
class ExecutePlatformTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formDataJson: 'formDataJson',
            language: 'language',
            noExecuteExpressions: 'noExecuteExpressions',
            outResult: 'outResult',
            processInstanceId: 'processInstanceId',
            remark: 'remark',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formDataJson: 'string',
            language: 'string',
            noExecuteExpressions: 'string',
            outResult: 'string',
            processInstanceId: 'string',
            remark: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.ExecutePlatformTaskRequest = ExecutePlatformTaskRequest;
class ExecutePlatformTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.ExecutePlatformTaskResponse = ExecutePlatformTaskResponse;
class ExecuteTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExecuteTaskHeaders = ExecuteTaskHeaders;
class ExecuteTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            digitalSignUrl: 'digitalSignUrl',
            formDataJson: 'formDataJson',
            language: 'language',
            noExecuteExpressions: 'noExecuteExpressions',
            outResult: 'outResult',
            processInstanceId: 'processInstanceId',
            remark: 'remark',
            systemToken: 'systemToken',
            taskId: 'taskId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            digitalSignUrl: 'string',
            formDataJson: 'string',
            language: 'string',
            noExecuteExpressions: 'string',
            outResult: 'string',
            processInstanceId: 'string',
            remark: 'string',
            systemToken: 'string',
            taskId: 'number',
            userId: 'string',
        };
    }
}
exports.ExecuteTaskRequest = ExecuteTaskRequest;
class ExecuteTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.ExecuteTaskResponse = ExecuteTaskResponse;
class ExpireCommodityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ExpireCommodityHeaders = ExpireCommodityHeaders;
class ExpireCommodityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            instanceId: 'string',
        };
    }
}
exports.ExpireCommodityRequest = ExpireCommodityRequest;
class ExpireCommodityResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            success: 'success',
        };
    }
    static types() {
        return {
            message: 'string',
            success: 'boolean',
        };
    }
}
exports.ExpireCommodityResponseBody = ExpireCommodityResponseBody;
class ExpireCommodityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExpireCommodityResponseBody,
        };
    }
}
exports.ExpireCommodityResponse = ExpireCommodityResponse;
class GetActivationCodeByCallerUnionIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetActivationCodeByCallerUnionIdHeaders = GetActivationCodeByCallerUnionIdHeaders;
class GetActivationCodeByCallerUnionIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
        };
    }
    static types() {
        return {
            accessKey: 'string',
        };
    }
}
exports.GetActivationCodeByCallerUnionIdRequest = GetActivationCodeByCallerUnionIdRequest;
class GetActivationCodeByCallerUnionIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.GetActivationCodeByCallerUnionIdResponseBody = GetActivationCodeByCallerUnionIdResponseBody;
class GetActivationCodeByCallerUnionIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetActivationCodeByCallerUnionIdResponseBody,
        };
    }
}
exports.GetActivationCodeByCallerUnionIdResponse = GetActivationCodeByCallerUnionIdResponse;
class GetActivityButtonListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetActivityButtonListHeaders = GetActivityButtonListHeaders;
class GetActivityButtonListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'language',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            language: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetActivityButtonListRequest = GetActivityButtonListRequest;
class GetActivityButtonListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetActivityButtonListResponseBodyResult },
        };
    }
}
exports.GetActivityButtonListResponseBody = GetActivityButtonListResponseBody;
class GetActivityButtonListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetActivityButtonListResponseBody,
        };
    }
}
exports.GetActivityButtonListResponse = GetActivityButtonListResponse;
class GetActivityListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetActivityListHeaders = GetActivityListHeaders;
class GetActivityListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            processCode: 'processCode',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            processCode: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetActivityListRequest = GetActivityListRequest;
class GetActivityListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetActivityListResponseBodyResult },
        };
    }
}
exports.GetActivityListResponseBody = GetActivityListResponseBody;
class GetActivityListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetActivityListResponseBody,
        };
    }
}
exports.GetActivityListResponse = GetActivityListResponse;
class GetAllAuthCubesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetAllAuthCubesHeaders = GetAllAuthCubesHeaders;
class GetAllAuthCubesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            corpId: 'corpId',
            keywords: 'keywords',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            corpId: 'string',
            keywords: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetAllAuthCubesRequest = GetAllAuthCubesRequest;
class GetAllAuthCubesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            count: 'count',
            result: 'result',
        };
    }
    static types() {
        return {
            count: 'number',
            result: { 'type': 'array', 'itemType': GetAllAuthCubesResponseBodyResult },
        };
    }
}
exports.GetAllAuthCubesResponseBody = GetAllAuthCubesResponseBody;
class GetAllAuthCubesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAllAuthCubesResponseBody,
        };
    }
}
exports.GetAllAuthCubesResponse = GetAllAuthCubesResponse;
class GetApplicationAuthorizationServicePlatformResourceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetApplicationAuthorizationServicePlatformResourceHeaders = GetApplicationAuthorizationServicePlatformResourceHeaders;
class GetApplicationAuthorizationServicePlatformResourceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            instanceId: 'string',
        };
    }
}
exports.GetApplicationAuthorizationServicePlatformResourceRequest = GetApplicationAuthorizationServicePlatformResourceRequest;
class GetApplicationAuthorizationServicePlatformResourceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountTotalAmount: 'accountTotalAmount',
            accountUsageAmount: 'accountUsageAmount',
            appTotalAmount: 'appTotalAmount',
            attachmentTotalAmount: 'attachmentTotalAmount',
            attachmentUsageAmount: 'attachmentUsageAmount',
            instanceId: 'instanceId',
            instanceTotalAmount: 'instanceTotalAmount',
            instanceUsageAmount: 'instanceUsageAmount',
            pluginUsageAmount: 'pluginUsageAmount',
        };
    }
    static types() {
        return {
            accountTotalAmount: 'number',
            accountUsageAmount: 'number',
            appTotalAmount: 'number',
            attachmentTotalAmount: 'number',
            attachmentUsageAmount: 'number',
            instanceId: 'string',
            instanceTotalAmount: 'number',
            instanceUsageAmount: 'number',
            pluginUsageAmount: 'number',
        };
    }
}
exports.GetApplicationAuthorizationServicePlatformResourceResponseBody = GetApplicationAuthorizationServicePlatformResourceResponseBody;
class GetApplicationAuthorizationServicePlatformResourceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetApplicationAuthorizationServicePlatformResourceResponseBody,
        };
    }
}
exports.GetApplicationAuthorizationServicePlatformResourceResponse = GetApplicationAuthorizationServicePlatformResourceResponse;
class GetCorpAccomplishmentTasksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCorpAccomplishmentTasksHeaders = GetCorpAccomplishmentTasksHeaders;
class GetCorpAccomplishmentTasksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appTypes: 'appTypes',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            keyword: 'keyword',
            language: 'language',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            processCodes: 'processCodes',
            token: 'token',
        };
    }
    static types() {
        return {
            appTypes: 'string',
            createFromTimeGMT: 'number',
            createToTimeGMT: 'number',
            keyword: 'string',
            language: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            processCodes: 'string',
            token: 'string',
        };
    }
}
exports.GetCorpAccomplishmentTasksRequest = GetCorpAccomplishmentTasksRequest;
class GetCorpAccomplishmentTasksResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetCorpAccomplishmentTasksResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetCorpAccomplishmentTasksResponseBody = GetCorpAccomplishmentTasksResponseBody;
class GetCorpAccomplishmentTasksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCorpAccomplishmentTasksResponseBody,
        };
    }
}
exports.GetCorpAccomplishmentTasksResponse = GetCorpAccomplishmentTasksResponse;
class GetCorpLevelByAccountIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCorpLevelByAccountIdHeaders = GetCorpLevelByAccountIdHeaders;
class GetCorpLevelByAccountIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountId: 'accountId',
        };
    }
    static types() {
        return {
            accountId: 'string',
        };
    }
}
exports.GetCorpLevelByAccountIdRequest = GetCorpLevelByAccountIdRequest;
class GetCorpLevelByAccountIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.GetCorpLevelByAccountIdResponseBody = GetCorpLevelByAccountIdResponseBody;
class GetCorpLevelByAccountIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCorpLevelByAccountIdResponseBody,
        };
    }
}
exports.GetCorpLevelByAccountIdResponse = GetCorpLevelByAccountIdResponse;
class GetCorpTasksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetCorpTasksHeaders = GetCorpTasksHeaders;
class GetCorpTasksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appTypes: 'appTypes',
            corpId: 'corpId',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            keyword: 'keyword',
            language: 'language',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            processCodes: 'processCodes',
            token: 'token',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appTypes: 'string',
            corpId: 'string',
            createFromTimeGMT: 'number',
            createToTimeGMT: 'number',
            keyword: 'string',
            language: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            processCodes: 'string',
            token: 'string',
            userId: 'string',
        };
    }
}
exports.GetCorpTasksRequest = GetCorpTasksRequest;
class GetCorpTasksResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetCorpTasksResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetCorpTasksResponseBody = GetCorpTasksResponseBody;
class GetCorpTasksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCorpTasksResponseBody,
        };
    }
}
exports.GetCorpTasksResponse = GetCorpTasksResponse;
class GetDbConfigHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetDbConfigHeaders = GetDbConfigHeaders;
class GetDbConfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            corpId: 'corpId',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            corpId: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetDbConfigRequest = GetDbConfigRequest;
class GetDbConfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            config: 'config',
            corpId: 'corpId',
            createTimeGMT: 'createTimeGMT',
            creator: 'creator',
            exclusive: 'exclusive',
            id: 'id',
            modifiedTimeGMT: 'modifiedTimeGMT',
            modifier: 'modifier',
            type: 'type',
        };
    }
    static types() {
        return {
            config: 'string',
            corpId: 'string',
            createTimeGMT: 'string',
            creator: 'string',
            exclusive: 'string',
            id: 'string',
            modifiedTimeGMT: 'string',
            modifier: 'string',
            type: 'string',
        };
    }
}
exports.GetDbConfigResponseBody = GetDbConfigResponseBody;
class GetDbConfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDbConfigResponseBody,
        };
    }
}
exports.GetDbConfigResponse = GetDbConfigResponse;
class GetFieldDefByUuidHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetFieldDefByUuidHeaders = GetFieldDefByUuidHeaders;
class GetFieldDefByUuidRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formUuid: 'formUuid',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formUuid: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetFieldDefByUuidRequest = GetFieldDefByUuidRequest;
class GetFieldDefByUuidResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetFieldDefByUuidResponseBodyResult },
            success: 'boolean',
        };
    }
}
exports.GetFieldDefByUuidResponseBody = GetFieldDefByUuidResponseBody;
class GetFieldDefByUuidResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFieldDefByUuidResponseBody,
        };
    }
}
exports.GetFieldDefByUuidResponse = GetFieldDefByUuidResponse;
class GetFormComponentDefinitionListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetFormComponentDefinitionListHeaders = GetFormComponentDefinitionListHeaders;
class GetFormComponentDefinitionListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'language',
            systemToken: 'systemToken',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            language: 'string',
            systemToken: 'string',
            userId: 'string',
            version: 'number',
        };
    }
}
exports.GetFormComponentDefinitionListRequest = GetFormComponentDefinitionListRequest;
class GetFormComponentDefinitionListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetFormComponentDefinitionListResponseBodyResult },
        };
    }
}
exports.GetFormComponentDefinitionListResponseBody = GetFormComponentDefinitionListResponseBody;
class GetFormComponentDefinitionListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFormComponentDefinitionListResponseBody,
        };
    }
}
exports.GetFormComponentDefinitionListResponse = GetFormComponentDefinitionListResponse;
class GetFormDataByIDHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetFormDataByIDHeaders = GetFormDataByIDHeaders;
class GetFormDataByIDRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetFormDataByIDRequest = GetFormDataByIDRequest;
class GetFormDataByIDResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            formData: 'formData',
            formInstId: 'formInstId',
            modifiedTimeGMT: 'modifiedTimeGMT',
            originator: 'originator',
        };
    }
    static types() {
        return {
            formData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formInstId: 'string',
            modifiedTimeGMT: 'string',
            originator: GetFormDataByIDResponseBodyOriginator,
        };
    }
}
exports.GetFormDataByIDResponseBody = GetFormDataByIDResponseBody;
class GetFormDataByIDResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFormDataByIDResponseBody,
        };
    }
}
exports.GetFormDataByIDResponse = GetFormDataByIDResponse;
class GetFormListInAppHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetFormListInAppHeaders = GetFormListInAppHeaders;
class GetFormListInAppRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formTypes: 'formTypes',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formTypes: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetFormListInAppRequest = GetFormListInAppRequest;
class GetFormListInAppResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: GetFormListInAppResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.GetFormListInAppResponseBody = GetFormListInAppResponseBody;
class GetFormListInAppResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFormListInAppResponseBody,
        };
    }
}
exports.GetFormListInAppResponse = GetFormListInAppResponse;
class GetInstanceByIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetInstanceByIdHeaders = GetInstanceByIdHeaders;
class GetInstanceByIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetInstanceByIdRequest = GetInstanceByIdRequest;
class GetInstanceByIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionExecutor: 'actionExecutor',
            approvedResult: 'approvedResult',
            createTimeGMT: 'createTimeGMT',
            data: 'data',
            formUuid: 'formUuid',
            instanceStatus: 'instanceStatus',
            modifiedTimeGMT: 'modifiedTimeGMT',
            originator: 'originator',
            processCode: 'processCode',
            processInstanceId: 'processInstanceId',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            actionExecutor: { 'type': 'array', 'itemType': GetInstanceByIdResponseBodyActionExecutor },
            approvedResult: 'string',
            createTimeGMT: 'string',
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formUuid: 'string',
            instanceStatus: 'string',
            modifiedTimeGMT: 'string',
            originator: GetInstanceByIdResponseBodyOriginator,
            processCode: 'string',
            processInstanceId: 'string',
            title: 'string',
            version: 'number',
        };
    }
}
exports.GetInstanceByIdResponseBody = GetInstanceByIdResponseBody;
class GetInstanceByIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInstanceByIdResponseBody,
        };
    }
}
exports.GetInstanceByIdResponse = GetInstanceByIdResponse;
class GetInstanceIdListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetInstanceIdListHeaders = GetInstanceIdListHeaders;
class GetInstanceIdListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            approvedResult: 'approvedResult',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            formUuid: 'formUuid',
            instanceStatus: 'instanceStatus',
            language: 'language',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            originatorId: 'originatorId',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            taskId: 'taskId',
            userId: 'userId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            appType: 'string',
            approvedResult: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            formUuid: 'string',
            instanceStatus: 'string',
            language: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            originatorId: 'string',
            searchFieldJson: 'string',
            systemToken: 'string',
            taskId: 'string',
            userId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.GetInstanceIdListRequest = GetInstanceIdListRequest;
class GetInstanceIdListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': 'string' },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetInstanceIdListResponseBody = GetInstanceIdListResponseBody;
class GetInstanceIdListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInstanceIdListResponseBody,
        };
    }
}
exports.GetInstanceIdListResponse = GetInstanceIdListResponse;
class GetInstancesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetInstancesHeaders = GetInstancesHeaders;
class GetInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            approvedResult: 'approvedResult',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            formUuid: 'formUuid',
            instanceStatus: 'instanceStatus',
            language: 'language',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            orderConfigJson: 'orderConfigJson',
            originatorId: 'originatorId',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            taskId: 'taskId',
            userId: 'userId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            appType: 'string',
            approvedResult: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            formUuid: 'string',
            instanceStatus: 'string',
            language: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            orderConfigJson: 'string',
            originatorId: 'string',
            searchFieldJson: 'string',
            systemToken: 'string',
            taskId: 'string',
            userId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.GetInstancesRequest = GetInstancesRequest;
class GetInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetInstancesResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetInstancesResponseBody = GetInstancesResponseBody;
class GetInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInstancesResponseBody,
        };
    }
}
exports.GetInstancesResponse = GetInstancesResponse;
class GetInstancesByIdListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetInstancesByIdListHeaders = GetInstancesByIdListHeaders;
class GetInstancesByIdListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            processInstanceIds: 'processInstanceIds',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            processInstanceIds: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetInstancesByIdListRequest = GetInstancesByIdListRequest;
class GetInstancesByIdListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetInstancesByIdListResponseBodyResult },
        };
    }
}
exports.GetInstancesByIdListResponseBody = GetInstancesByIdListResponseBody;
class GetInstancesByIdListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInstancesByIdListResponseBody,
        };
    }
}
exports.GetInstancesByIdListResponse = GetInstancesByIdListResponse;
class GetMeCorpSubmissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetMeCorpSubmissionHeaders = GetMeCorpSubmissionHeaders;
class GetMeCorpSubmissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appTypes: 'appTypes',
            corpId: 'corpId',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            keyword: 'keyword',
            language: 'language',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            processCodes: 'processCodes',
            token: 'token',
        };
    }
    static types() {
        return {
            appTypes: 'string',
            corpId: 'string',
            createFromTimeGMT: 'number',
            createToTimeGMT: 'number',
            keyword: 'string',
            language: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            processCodes: 'string',
            token: 'string',
        };
    }
}
exports.GetMeCorpSubmissionRequest = GetMeCorpSubmissionRequest;
class GetMeCorpSubmissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetMeCorpSubmissionResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetMeCorpSubmissionResponseBody = GetMeCorpSubmissionResponseBody;
class GetMeCorpSubmissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMeCorpSubmissionResponseBody,
        };
    }
}
exports.GetMeCorpSubmissionResponse = GetMeCorpSubmissionResponse;
class GetNotifyMeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetNotifyMeHeaders = GetNotifyMeHeaders;
class GetNotifyMeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appTypes: 'appTypes',
            corpId: 'corpId',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            instanceCreateFromTimeGMT: 'instanceCreateFromTimeGMT',
            instanceCreateToTimeGMT: 'instanceCreateToTimeGMT',
            keyword: 'keyword',
            language: 'language',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            processCodes: 'processCodes',
            token: 'token',
        };
    }
    static types() {
        return {
            appTypes: 'string',
            corpId: 'string',
            createFromTimeGMT: 'number',
            createToTimeGMT: 'number',
            instanceCreateFromTimeGMT: 'number',
            instanceCreateToTimeGMT: 'number',
            keyword: 'string',
            language: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            processCodes: 'string',
            token: 'string',
        };
    }
}
exports.GetNotifyMeRequest = GetNotifyMeRequest;
class GetNotifyMeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetNotifyMeResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetNotifyMeResponseBody = GetNotifyMeResponseBody;
class GetNotifyMeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetNotifyMeResponseBody,
        };
    }
}
exports.GetNotifyMeResponse = GetNotifyMeResponse;
class GetOpenUrlHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOpenUrlHeaders = GetOpenUrlHeaders;
class GetOpenUrlRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            fileUrl: 'fileUrl',
            language: 'language',
            systemToken: 'systemToken',
            timeout: 'timeout',
            userId: 'userId',
        };
    }
    static types() {
        return {
            fileUrl: 'string',
            language: 'string',
            systemToken: 'string',
            timeout: 'number',
            userId: 'string',
        };
    }
}
exports.GetOpenUrlRequest = GetOpenUrlRequest;
class GetOpenUrlResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.GetOpenUrlResponseBody = GetOpenUrlResponseBody;
class GetOpenUrlResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOpenUrlResponseBody,
        };
    }
}
exports.GetOpenUrlResponse = GetOpenUrlResponse;
class GetOperationRecordsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetOperationRecordsHeaders = GetOperationRecordsHeaders;
class GetOperationRecordsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            processInstanceId: 'processInstanceId',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            processInstanceId: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetOperationRecordsRequest = GetOperationRecordsRequest;
class GetOperationRecordsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetOperationRecordsResponseBodyResult },
        };
    }
}
exports.GetOperationRecordsResponseBody = GetOperationRecordsResponseBody;
class GetOperationRecordsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetOperationRecordsResponseBody,
        };
    }
}
exports.GetOperationRecordsResponse = GetOperationRecordsResponse;
class GetPlatformResourceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPlatformResourceHeaders = GetPlatformResourceHeaders;
class GetPlatformResourceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            instanceId: 'string',
        };
    }
}
exports.GetPlatformResourceRequest = GetPlatformResourceRequest;
class GetPlatformResourceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountTotalAmount: 'accountTotalAmount',
            accountUsageAmount: 'accountUsageAmount',
            appTotalAmount: 'appTotalAmount',
            attachmentTotalAmount: 'attachmentTotalAmount',
            attachmentUsageAmount: 'attachmentUsageAmount',
            instanceTotalAmount: 'instanceTotalAmount',
            instanceUsageAmount: 'instanceUsageAmount',
            pluginUsageAmount: 'pluginUsageAmount',
        };
    }
    static types() {
        return {
            accountTotalAmount: 'number',
            accountUsageAmount: 'number',
            appTotalAmount: 'number',
            attachmentTotalAmount: 'number',
            attachmentUsageAmount: 'number',
            instanceTotalAmount: 'number',
            instanceUsageAmount: 'number',
            pluginUsageAmount: 'number',
        };
    }
}
exports.GetPlatformResourceResponseBody = GetPlatformResourceResponseBody;
class GetPlatformResourceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPlatformResourceResponseBody,
        };
    }
}
exports.GetPlatformResourceResponse = GetPlatformResourceResponse;
class GetPrintAppInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPrintAppInfoHeaders = GetPrintAppInfoHeaders;
class GetPrintAppInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameLike: 'nameLike',
            userId: 'userId',
        };
    }
    static types() {
        return {
            nameLike: 'string',
            userId: 'string',
        };
    }
}
exports.GetPrintAppInfoRequest = GetPrintAppInfoRequest;
class GetPrintAppInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetPrintAppInfoResponseBodyResult },
        };
    }
}
exports.GetPrintAppInfoResponseBody = GetPrintAppInfoResponseBody;
class GetPrintAppInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPrintAppInfoResponseBody,
        };
    }
}
exports.GetPrintAppInfoResponse = GetPrintAppInfoResponse;
class GetPrintDictionaryHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetPrintDictionaryHeaders = GetPrintDictionaryHeaders;
class GetPrintDictionaryRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formUuid: 'formUuid',
            userId: 'userId',
            version: 'version',
        };
    }
    static types() {
        return {
            appType: 'string',
            formUuid: 'string',
            userId: 'string',
            version: 'number',
        };
    }
}
exports.GetPrintDictionaryRequest = GetPrintDictionaryRequest;
class GetPrintDictionaryResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.GetPrintDictionaryResponseBody = GetPrintDictionaryResponseBody;
class GetPrintDictionaryResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPrintDictionaryResponseBody,
        };
    }
}
exports.GetPrintDictionaryResponse = GetPrintDictionaryResponse;
class GetProcessDefinitionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetProcessDefinitionHeaders = GetProcessDefinitionHeaders;
class GetProcessDefinitionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            corpId: 'corpId',
            groupId: 'groupId',
            language: 'language',
            nameSpace: 'nameSpace',
            orderNumber: 'orderNumber',
            systemToken: 'systemToken',
            systemType: 'systemType',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            corpId: 'string',
            groupId: 'string',
            language: 'string',
            nameSpace: 'string',
            orderNumber: 'string',
            systemToken: 'string',
            systemType: 'string',
            userId: 'string',
        };
    }
}
exports.GetProcessDefinitionRequest = GetProcessDefinitionRequest;
class GetProcessDefinitionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            formUuid: 'formUuid',
            originator: 'originator',
            outResult: 'outResult',
            owners: 'owners',
            processId: 'processId',
            processInstanceId: 'processInstanceId',
            status: 'status',
            tasks: 'tasks',
            title: 'title',
            variables: 'variables',
        };
    }
    static types() {
        return {
            formUuid: 'string',
            originator: GetProcessDefinitionResponseBodyOriginator,
            outResult: 'string',
            owners: { 'type': 'array', 'itemType': GetProcessDefinitionResponseBodyOwners },
            processId: 'string',
            processInstanceId: 'string',
            status: 'string',
            tasks: { 'type': 'array', 'itemType': GetProcessDefinitionResponseBodyTasks },
            title: 'string',
            variables: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.GetProcessDefinitionResponseBody = GetProcessDefinitionResponseBody;
class GetProcessDefinitionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetProcessDefinitionResponseBody,
        };
    }
}
exports.GetProcessDefinitionResponse = GetProcessDefinitionResponse;
class GetRunningTaskListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRunningTaskListHeaders = GetRunningTaskListHeaders;
class GetRunningTaskListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            processInstanceIdList: 'processInstanceIdList',
            systemToken: 'systemToken',
            userCorpId: 'userCorpId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            processInstanceIdList: 'string',
            systemToken: 'string',
            userCorpId: 'string',
            userId: 'string',
        };
    }
}
exports.GetRunningTaskListRequest = GetRunningTaskListRequest;
class GetRunningTaskListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetRunningTaskListResponseBodyResult },
        };
    }
}
exports.GetRunningTaskListResponseBody = GetRunningTaskListResponseBody;
class GetRunningTaskListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRunningTaskListResponseBody,
        };
    }
}
exports.GetRunningTaskListResponse = GetRunningTaskListResponse;
class GetRunningTasksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetRunningTasksHeaders = GetRunningTasksHeaders;
class GetRunningTasksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            processInstanceId: 'processInstanceId',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            processInstanceId: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetRunningTasksRequest = GetRunningTasksRequest;
class GetRunningTasksResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetRunningTasksResponseBodyResult },
        };
    }
}
exports.GetRunningTasksResponseBody = GetRunningTasksResponseBody;
class GetRunningTasksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetRunningTasksResponseBody,
        };
    }
}
exports.GetRunningTasksResponse = GetRunningTasksResponse;
class GetSaleUserInfoByUserIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSaleUserInfoByUserIdHeaders = GetSaleUserInfoByUserIdHeaders;
class GetSaleUserInfoByUserIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            namespace: 'namespace',
            userId: 'userId',
        };
    }
    static types() {
        return {
            corpId: 'string',
            namespace: 'string',
            userId: 'string',
        };
    }
}
exports.GetSaleUserInfoByUserIdRequest = GetSaleUserInfoByUserIdRequest;
class GetSaleUserInfoByUserIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountId: 'accountId',
            corpList: 'corpList',
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            accountId: 'number',
            corpList: { 'type': 'array', 'itemType': GetSaleUserInfoByUserIdResponseBodyCorpList },
            userId: 'string',
            userName: 'string',
        };
    }
}
exports.GetSaleUserInfoByUserIdResponseBody = GetSaleUserInfoByUserIdResponseBody;
class GetSaleUserInfoByUserIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSaleUserInfoByUserIdResponseBody,
        };
    }
}
exports.GetSaleUserInfoByUserIdResponse = GetSaleUserInfoByUserIdResponse;
class GetSimpleCubeModelListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetSimpleCubeModelListHeaders = GetSimpleCubeModelListHeaders;
class GetSimpleCubeModelListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            corpId: 'corpId',
            cubeCode: 'cubeCode',
            cubeTenantId: 'cubeTenantId',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            corpId: 'string',
            cubeCode: 'string',
            cubeTenantId: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetSimpleCubeModelListRequest = GetSimpleCubeModelListRequest;
class GetSimpleCubeModelListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': GetSimpleCubeModelListResponseBodyResult },
        };
    }
}
exports.GetSimpleCubeModelListResponseBody = GetSimpleCubeModelListResponseBody;
class GetSimpleCubeModelListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSimpleCubeModelListResponseBody,
        };
    }
}
exports.GetSimpleCubeModelListResponse = GetSimpleCubeModelListResponse;
class GetTaskCopiesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTaskCopiesHeaders = GetTaskCopiesHeaders;
class GetTaskCopiesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            keyword: 'keyword',
            language: 'language',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            processCodes: 'processCodes',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            createFromTimeGMT: 'number',
            createToTimeGMT: 'number',
            keyword: 'string',
            language: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            processCodes: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.GetTaskCopiesRequest = GetTaskCopiesRequest;
class GetTaskCopiesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetTaskCopiesResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.GetTaskCopiesResponseBody = GetTaskCopiesResponseBody;
class GetTaskCopiesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTaskCopiesResponseBody,
        };
    }
}
exports.GetTaskCopiesResponse = GetTaskCopiesResponse;
class ListApplicationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListApplicationHeaders = ListApplicationHeaders;
class ListApplicationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appFilter: 'appFilter',
            appNameSearchKeyword: 'appNameSearchKeyword',
            corpId: 'corpId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            token: 'token',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appFilter: 'string',
            appNameSearchKeyword: 'string',
            corpId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            token: 'string',
            userId: 'string',
        };
    }
}
exports.ListApplicationRequest = ListApplicationRequest;
class ListApplicationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': ListApplicationResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.ListApplicationResponseBody = ListApplicationResponseBody;
class ListApplicationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListApplicationResponseBody,
        };
    }
}
exports.ListApplicationResponse = ListApplicationResponse;
class ListApplicationAuthorizationServiceApplicationInformationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListApplicationAuthorizationServiceApplicationInformationHeaders = ListApplicationAuthorizationServiceApplicationInformationHeaders;
class ListApplicationAuthorizationServiceApplicationInformationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUnionId: 'callerUnionId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUnionId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.ListApplicationAuthorizationServiceApplicationInformationRequest = ListApplicationAuthorizationServiceApplicationInformationRequest;
class ListApplicationAuthorizationServiceApplicationInformationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applicationInformation: 'applicationInformation',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            applicationInformation: { 'type': 'array', 'itemType': ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformation },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.ListApplicationAuthorizationServiceApplicationInformationResponseBody = ListApplicationAuthorizationServiceApplicationInformationResponseBody;
class ListApplicationAuthorizationServiceApplicationInformationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListApplicationAuthorizationServiceApplicationInformationResponseBody,
        };
    }
}
exports.ListApplicationAuthorizationServiceApplicationInformationResponse = ListApplicationAuthorizationServiceApplicationInformationResponse;
class ListApplicationAuthorizationServiceConnectorInformationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListApplicationAuthorizationServiceConnectorInformationHeaders = ListApplicationAuthorizationServiceConnectorInformationHeaders;
class ListApplicationAuthorizationServiceConnectorInformationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.ListApplicationAuthorizationServiceConnectorInformationRequest = ListApplicationAuthorizationServiceConnectorInformationRequest;
class ListApplicationAuthorizationServiceConnectorInformationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            plugInformation: 'plugInformation',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            plugInformation: { 'type': 'array', 'itemType': ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformation },
            totalCount: 'number',
        };
    }
}
exports.ListApplicationAuthorizationServiceConnectorInformationResponseBody = ListApplicationAuthorizationServiceConnectorInformationResponseBody;
class ListApplicationAuthorizationServiceConnectorInformationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListApplicationAuthorizationServiceConnectorInformationResponseBody,
        };
    }
}
exports.ListApplicationAuthorizationServiceConnectorInformationResponse = ListApplicationAuthorizationServiceConnectorInformationResponse;
class ListApplicationInformationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListApplicationInformationHeaders = ListApplicationInformationHeaders;
class ListApplicationInformationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.ListApplicationInformationRequest = ListApplicationInformationRequest;
class ListApplicationInformationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applicationInformation: 'applicationInformation',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            applicationInformation: { 'type': 'array', 'itemType': ListApplicationInformationResponseBodyApplicationInformation },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.ListApplicationInformationResponseBody = ListApplicationInformationResponseBody;
class ListApplicationInformationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListApplicationInformationResponseBody,
        };
    }
}
exports.ListApplicationInformationResponse = ListApplicationInformationResponse;
class ListCommodityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListCommodityHeaders = ListCommodityHeaders;
class ListCommodityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.ListCommodityRequest = ListCommodityRequest;
class ListCommodityResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commodityVOList: 'commodityVOList',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            commodityVOList: { 'type': 'array', 'itemType': ListCommodityResponseBodyCommodityVOList },
            pageNumber: 'number',
            pageSize: 'number',
            totalCount: 'number',
        };
    }
}
exports.ListCommodityResponseBody = ListCommodityResponseBody;
class ListCommodityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListCommodityResponseBody,
        };
    }
}
exports.ListCommodityResponse = ListCommodityResponse;
class ListConnectorInformationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListConnectorInformationHeaders = ListConnectorInformationHeaders;
class ListConnectorInformationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.ListConnectorInformationRequest = ListConnectorInformationRequest;
class ListConnectorInformationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            pluginInfos: 'pluginInfos',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            pluginInfos: { 'type': 'array', 'itemType': ListConnectorInformationResponseBodyPluginInfos },
            totalCount: 'number',
        };
    }
}
exports.ListConnectorInformationResponseBody = ListConnectorInformationResponseBody;
class ListConnectorInformationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListConnectorInformationResponseBody,
        };
    }
}
exports.ListConnectorInformationResponse = ListConnectorInformationResponse;
class ListFormRemarksHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListFormRemarksHeaders = ListFormRemarksHeaders;
class ListFormRemarksRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formInstanceIdList: 'formInstanceIdList',
            formUuid: 'formUuid',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formInstanceIdList: { 'type': 'array', 'itemType': 'string' },
            formUuid: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.ListFormRemarksRequest = ListFormRemarksRequest;
class ListFormRemarksResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            formRemarkVoMap: 'formRemarkVoMap',
        };
    }
    static types() {
        return {
            formRemarkVoMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.ListFormRemarksResponseBody = ListFormRemarksResponseBody;
class ListFormRemarksResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListFormRemarksResponseBody,
        };
    }
}
exports.ListFormRemarksResponse = ListFormRemarksResponse;
class ListNavigationByFormTypeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListNavigationByFormTypeHeaders = ListNavigationByFormTypeHeaders;
class ListNavigationByFormTypeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formType: 'formType',
            language: 'language',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formType: 'string',
            language: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.ListNavigationByFormTypeRequest = ListNavigationByFormTypeRequest;
class ListNavigationByFormTypeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': ListNavigationByFormTypeResponseBodyResult },
        };
    }
}
exports.ListNavigationByFormTypeResponseBody = ListNavigationByFormTypeResponseBody;
class ListNavigationByFormTypeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListNavigationByFormTypeResponseBody,
        };
    }
}
exports.ListNavigationByFormTypeResponse = ListNavigationByFormTypeResponse;
class ListOperationLogsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListOperationLogsHeaders = ListOperationLogsHeaders;
class ListOperationLogsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formInstanceIdList: 'formInstanceIdList',
            formUuid: 'formUuid',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formInstanceIdList: { 'type': 'array', 'itemType': 'string' },
            formUuid: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.ListOperationLogsRequest = ListOperationLogsRequest;
class ListOperationLogsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            operationLogMap: 'operationLogMap',
        };
    }
    static types() {
        return {
            operationLogMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
}
exports.ListOperationLogsResponseBody = ListOperationLogsResponseBody;
class ListOperationLogsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListOperationLogsResponseBody,
        };
    }
}
exports.ListOperationLogsResponse = ListOperationLogsResponse;
class ListTableDataByFormInstanceIdTableIdHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ListTableDataByFormInstanceIdTableIdHeaders = ListTableDataByFormInstanceIdTableIdHeaders;
class ListTableDataByFormInstanceIdTableIdRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formUuid: 'formUuid',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            systemToken: 'systemToken',
            tableFieldId: 'tableFieldId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formUuid: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            systemToken: 'string',
            tableFieldId: 'string',
            userId: 'string',
        };
    }
}
exports.ListTableDataByFormInstanceIdTableIdRequest = ListTableDataByFormInstanceIdTableIdRequest;
class ListTableDataByFormInstanceIdTableIdResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.ListTableDataByFormInstanceIdTableIdResponseBody = ListTableDataByFormInstanceIdTableIdResponseBody;
class ListTableDataByFormInstanceIdTableIdResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListTableDataByFormInstanceIdTableIdResponseBody,
        };
    }
}
exports.ListTableDataByFormInstanceIdTableIdResponse = ListTableDataByFormInstanceIdTableIdResponse;
class LoginCodeGenHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.LoginCodeGenHeaders = LoginCodeGenHeaders;
class LoginCodeGenRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.LoginCodeGenRequest = LoginCodeGenRequest;
class LoginCodeGenResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.LoginCodeGenResponseBody = LoginCodeGenResponseBody;
class LoginCodeGenResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LoginCodeGenResponseBody,
        };
    }
}
exports.LoginCodeGenResponse = LoginCodeGenResponse;
class NotifyAuthorizationResultHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.NotifyAuthorizationResultHeaders = NotifyAuthorizationResultHeaders;
class NotifyAuthorizationResultRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            accountNumber: 'accountNumber',
            beginTimeGMT: 'beginTimeGMT',
            callerUid: 'callerUid',
            chargeType: 'chargeType',
            commerceType: 'commerceType',
            commodityType: 'commodityType',
            endTimeGMT: 'endTimeGMT',
            instanceId: 'instanceId',
            instanceName: 'instanceName',
            produceCode: 'produceCode',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            accountNumber: 'string',
            beginTimeGMT: 'number',
            callerUid: 'string',
            chargeType: 'string',
            commerceType: 'string',
            commodityType: 'string',
            endTimeGMT: 'number',
            instanceId: 'string',
            instanceName: 'string',
            produceCode: 'string',
        };
    }
}
exports.NotifyAuthorizationResultRequest = NotifyAuthorizationResultRequest;
class NotifyAuthorizationResultResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.NotifyAuthorizationResultResponseBody = NotifyAuthorizationResultResponseBody;
class NotifyAuthorizationResultResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: NotifyAuthorizationResultResponseBody,
        };
    }
}
exports.NotifyAuthorizationResultResponse = NotifyAuthorizationResultResponse;
class PageFormBaseInfosHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.PageFormBaseInfosHeaders = PageFormBaseInfosHeaders;
class PageFormBaseInfosRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appKey: 'appKey',
            formTypeList: 'formTypeList',
            language: 'language',
            pageIndex: 'pageIndex',
            pageSize: 'pageSize',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appKey: 'string',
            formTypeList: { 'type': 'array', 'itemType': 'string' },
            language: 'string',
            pageIndex: 'number',
            pageSize: 'number',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.PageFormBaseInfosRequest = PageFormBaseInfosRequest;
class PageFormBaseInfosResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: PageFormBaseInfosResponseBodyResult,
            success: 'boolean',
        };
    }
}
exports.PageFormBaseInfosResponseBody = PageFormBaseInfosResponseBody;
class PageFormBaseInfosResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PageFormBaseInfosResponseBody,
        };
    }
}
exports.PageFormBaseInfosResponse = PageFormBaseInfosResponse;
class QueryServiceRecordHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.QueryServiceRecordHeaders = QueryServiceRecordHeaders;
class QueryServiceRecordRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formUuid: 'formUuid',
            hookType: 'hookType',
            hookUuid: 'hookUuid',
            instanceId: 'instanceId',
            invokeAfterDateGMT: 'invokeAfterDateGMT',
            invokeBeforeDateGMT: 'invokeBeforeDateGMT',
            invokeStatus: 'invokeStatus',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            requestUrl: 'requestUrl',
            sourceUuid: 'sourceUuid',
            success: 'success',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formUuid: 'string',
            hookType: 'string',
            hookUuid: 'string',
            instanceId: 'string',
            invokeAfterDateGMT: 'string',
            invokeBeforeDateGMT: 'string',
            invokeStatus: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            requestUrl: 'string',
            sourceUuid: 'string',
            success: 'boolean',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.QueryServiceRecordRequest = QueryServiceRecordRequest;
class QueryServiceRecordResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalCount: 'totalCount',
            values: 'values',
        };
    }
    static types() {
        return {
            totalCount: 'number',
            values: { 'type': 'array', 'itemType': QueryServiceRecordResponseBodyValues },
        };
    }
}
exports.QueryServiceRecordResponseBody = QueryServiceRecordResponseBody;
class QueryServiceRecordResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryServiceRecordResponseBody,
        };
    }
}
exports.QueryServiceRecordResponse = QueryServiceRecordResponse;
class RedirectTaskHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RedirectTaskHeaders = RedirectTaskHeaders;
class RedirectTaskRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            byManager: 'byManager',
            language: 'language',
            nowActionExecutorId: 'nowActionExecutorId',
            processInstanceId: 'processInstanceId',
            remark: 'remark',
            systemToken: 'systemToken',
            taskId: 'taskId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            byManager: 'string',
            language: 'string',
            nowActionExecutorId: 'string',
            processInstanceId: 'string',
            remark: 'string',
            systemToken: 'string',
            taskId: 'number',
            userId: 'string',
        };
    }
}
exports.RedirectTaskRequest = RedirectTaskRequest;
class RedirectTaskResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.RedirectTaskResponse = RedirectTaskResponse;
class RefundCommodityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RefundCommodityHeaders = RefundCommodityHeaders;
class RefundCommodityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            instanceId: 'string',
        };
    }
}
exports.RefundCommodityRequest = RefundCommodityRequest;
class RefundCommodityResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            success: 'success',
        };
    }
    static types() {
        return {
            message: 'string',
            success: 'boolean',
        };
    }
}
exports.RefundCommodityResponseBody = RefundCommodityResponseBody;
class RefundCommodityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RefundCommodityResponseBody,
        };
    }
}
exports.RefundCommodityResponse = RefundCommodityResponse;
class RegisterAccountsHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RegisterAccountsHeaders = RegisterAccountsHeaders;
class RegisterAccountsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            activeCode: 'activeCode',
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            activeCode: 'string',
            corpId: 'string',
        };
    }
}
exports.RegisterAccountsRequest = RegisterAccountsRequest;
class RegisterAccountsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            instanceId: 'string',
        };
    }
}
exports.RegisterAccountsResponseBody = RegisterAccountsResponseBody;
class RegisterAccountsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RegisterAccountsResponseBody,
        };
    }
}
exports.RegisterAccountsResponse = RegisterAccountsResponse;
class ReleaseCommodityHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ReleaseCommodityHeaders = ReleaseCommodityHeaders;
class ReleaseCommodityRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            instanceId: 'string',
        };
    }
}
exports.ReleaseCommodityRequest = ReleaseCommodityRequest;
class ReleaseCommodityResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            success: 'success',
        };
    }
    static types() {
        return {
            message: 'string',
            success: 'boolean',
        };
    }
}
exports.ReleaseCommodityResponseBody = ReleaseCommodityResponseBody;
class ReleaseCommodityResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ReleaseCommodityResponseBody,
        };
    }
}
exports.ReleaseCommodityResponse = ReleaseCommodityResponse;
class RemoveTenantResourceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemoveTenantResourceHeaders = RemoveTenantResourceHeaders;
class RemoveTenantResourceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
        };
    }
    static types() {
        return {
            accessKey: 'string',
        };
    }
}
exports.RemoveTenantResourceRequest = RemoveTenantResourceRequest;
class RemoveTenantResourceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.RemoveTenantResourceResponseBody = RemoveTenantResourceResponseBody;
class RemoveTenantResourceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveTenantResourceResponseBody,
        };
    }
}
exports.RemoveTenantResourceResponse = RemoveTenantResourceResponse;
class RenderBatchCallbackHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RenderBatchCallbackHeaders = RenderBatchCallbackHeaders;
class RenderBatchCallbackRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            corpId: 'corpId',
            fileSize: 'fileSize',
            language: 'language',
            namespace: 'namespace',
            ossUrl: 'ossUrl',
            sequenceId: 'sequenceId',
            source: 'source',
            status: 'status',
            systemToken: 'systemToken',
            timeZone: 'timeZone',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            corpId: 'string',
            fileSize: 'number',
            language: 'string',
            namespace: 'string',
            ossUrl: 'string',
            sequenceId: 'string',
            source: 'string',
            status: 'string',
            systemToken: 'string',
            timeZone: 'string',
            userId: 'string',
        };
    }
}
exports.RenderBatchCallbackRequest = RenderBatchCallbackRequest;
class RenderBatchCallbackResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.RenderBatchCallbackResponse = RenderBatchCallbackResponse;
class RenewApplicationAuthorizationServiceOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RenewApplicationAuthorizationServiceOrderHeaders = RenewApplicationAuthorizationServiceOrderHeaders;
class RenewApplicationAuthorizationServiceOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUnionId: 'callerUnionId',
            endTimeGMT: 'endTimeGMT',
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUnionId: 'string',
            endTimeGMT: 'number',
            instanceId: 'string',
        };
    }
}
exports.RenewApplicationAuthorizationServiceOrderRequest = RenewApplicationAuthorizationServiceOrderRequest;
class RenewApplicationAuthorizationServiceOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.RenewApplicationAuthorizationServiceOrderResponseBody = RenewApplicationAuthorizationServiceOrderResponseBody;
class RenewApplicationAuthorizationServiceOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RenewApplicationAuthorizationServiceOrderResponseBody,
        };
    }
}
exports.RenewApplicationAuthorizationServiceOrderResponse = RenewApplicationAuthorizationServiceOrderResponse;
class RenewTenantOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RenewTenantOrderHeaders = RenewTenantOrderHeaders;
class RenewTenantOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUnionId: 'callerUnionId',
            endTimeGMT: 'endTimeGMT',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUnionId: 'string',
            endTimeGMT: 'number',
        };
    }
}
exports.RenewTenantOrderRequest = RenewTenantOrderRequest;
class RenewTenantOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.RenewTenantOrderResponseBody = RenewTenantOrderResponseBody;
class RenewTenantOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RenewTenantOrderResponseBody,
        };
    }
}
exports.RenewTenantOrderResponse = RenewTenantOrderResponse;
class SaveFormDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SaveFormDataHeaders = SaveFormDataHeaders;
class SaveFormDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formDataJson: 'formDataJson',
            formUuid: 'formUuid',
            language: 'language',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formDataJson: 'string',
            formUuid: 'string',
            language: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.SaveFormDataRequest = SaveFormDataRequest;
class SaveFormDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.SaveFormDataResponseBody = SaveFormDataResponseBody;
class SaveFormDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveFormDataResponseBody,
        };
    }
}
exports.SaveFormDataResponse = SaveFormDataResponse;
class SaveFormRemarkHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SaveFormRemarkHeaders = SaveFormRemarkHeaders;
class SaveFormRemarkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            atUserId: 'atUserId',
            content: 'content',
            formInstanceId: 'formInstanceId',
            language: 'language',
            replyId: 'replyId',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            atUserId: 'string',
            content: 'string',
            formInstanceId: 'string',
            language: 'string',
            replyId: 'number',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.SaveFormRemarkRequest = SaveFormRemarkRequest;
class SaveFormRemarkResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
}
exports.SaveFormRemarkResponseBody = SaveFormRemarkResponseBody;
class SaveFormRemarkResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveFormRemarkResponseBody,
        };
    }
}
exports.SaveFormRemarkResponse = SaveFormRemarkResponse;
class SavePrintTplDetailInfoHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SavePrintTplDetailInfoHeaders = SavePrintTplDetailInfoHeaders;
class SavePrintTplDetailInfoRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            description: 'description',
            fileNameConfig: 'fileNameConfig',
            formUuid: 'formUuid',
            formVersion: 'formVersion',
            setting: 'setting',
            templateId: 'templateId',
            title: 'title',
            userId: 'userId',
            vm: 'vm',
        };
    }
    static types() {
        return {
            appType: 'string',
            description: 'string',
            fileNameConfig: 'string',
            formUuid: 'string',
            formVersion: 'number',
            setting: 'string',
            templateId: 'number',
            title: 'string',
            userId: 'string',
            vm: 'string',
        };
    }
}
exports.SavePrintTplDetailInfoRequest = SavePrintTplDetailInfoRequest;
class SavePrintTplDetailInfoResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'number',
        };
    }
}
exports.SavePrintTplDetailInfoResponseBody = SavePrintTplDetailInfoResponseBody;
class SavePrintTplDetailInfoResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SavePrintTplDetailInfoResponseBody,
        };
    }
}
exports.SavePrintTplDetailInfoResponse = SavePrintTplDetailInfoResponse;
class SearchActivationCodeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchActivationCodeHeaders = SearchActivationCodeHeaders;
class SearchActivationCodeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
        };
    }
}
exports.SearchActivationCodeRequest = SearchActivationCodeRequest;
class SearchActivationCodeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activationCode: 'activationCode',
            authType: 'authType',
            expireTimeGMT: 'expireTimeGMT',
            instanceId: 'instanceId',
            status: 'status',
        };
    }
    static types() {
        return {
            activationCode: 'string',
            authType: 'string',
            expireTimeGMT: 'string',
            instanceId: 'string',
            status: 'number',
        };
    }
}
exports.SearchActivationCodeResponseBody = SearchActivationCodeResponseBody;
class SearchActivationCodeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchActivationCodeResponseBody,
        };
    }
}
exports.SearchActivationCodeResponse = SearchActivationCodeResponse;
class SearchEmployeeFieldValuesHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchEmployeeFieldValuesHeaders = SearchEmployeeFieldValuesHeaders;
class SearchEmployeeFieldValuesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            formUuid: 'formUuid',
            language: 'language',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            originatorId: 'originatorId',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            targetFieldJson: 'targetFieldJson',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            formUuid: 'string',
            language: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            originatorId: 'string',
            searchFieldJson: 'string',
            systemToken: 'string',
            targetFieldJson: 'string',
            userId: 'string',
        };
    }
}
exports.SearchEmployeeFieldValuesRequest = SearchEmployeeFieldValuesRequest;
class SearchEmployeeFieldValuesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.SearchEmployeeFieldValuesResponseBody = SearchEmployeeFieldValuesResponseBody;
class SearchEmployeeFieldValuesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchEmployeeFieldValuesResponseBody,
        };
    }
}
exports.SearchEmployeeFieldValuesResponse = SearchEmployeeFieldValuesResponse;
class SearchFormDataIdListHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchFormDataIdListHeaders = SearchFormDataIdListHeaders;
class SearchFormDataIdListRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            language: 'language',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            originatorId: 'originatorId',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            userId: 'userId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            language: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            originatorId: 'string',
            searchFieldJson: 'string',
            systemToken: 'string',
            userId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
}
exports.SearchFormDataIdListRequest = SearchFormDataIdListRequest;
class SearchFormDataIdListResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': 'string' },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.SearchFormDataIdListResponseBody = SearchFormDataIdListResponseBody;
class SearchFormDataIdListResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchFormDataIdListResponseBody,
        };
    }
}
exports.SearchFormDataIdListResponse = SearchFormDataIdListResponse;
class SearchFormDataRemovalTableDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchFormDataRemovalTableDataHeaders = SearchFormDataRemovalTableDataHeaders;
class SearchFormDataRemovalTableDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            formUuid: 'formUuid',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            orderConfigJson: 'orderConfigJson',
            originatorId: 'originatorId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            formUuid: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            orderConfigJson: 'string',
            originatorId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            searchFieldJson: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.SearchFormDataRemovalTableDataRequest = SearchFormDataRemovalTableDataRequest;
class SearchFormDataRemovalTableDataResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            hasMoreData: 'hasMoreData',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': SearchFormDataRemovalTableDataResponseBodyData },
            hasMoreData: 'boolean',
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.SearchFormDataRemovalTableDataResponseBody = SearchFormDataRemovalTableDataResponseBody;
class SearchFormDataRemovalTableDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchFormDataRemovalTableDataResponseBody,
        };
    }
}
exports.SearchFormDataRemovalTableDataResponse = SearchFormDataRemovalTableDataResponse;
class SearchFormDataSecondGenerationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationHeaders = SearchFormDataSecondGenerationHeaders;
class SearchFormDataSecondGenerationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            formUuid: 'formUuid',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            orderConfigJson: 'orderConfigJson',
            originatorId: 'originatorId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchCondition: 'searchCondition',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            formUuid: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            orderConfigJson: 'string',
            originatorId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            searchCondition: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationRequest = SearchFormDataSecondGenerationRequest;
class SearchFormDataSecondGenerationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': SearchFormDataSecondGenerationResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.SearchFormDataSecondGenerationResponseBody = SearchFormDataSecondGenerationResponseBody;
class SearchFormDataSecondGenerationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchFormDataSecondGenerationResponseBody,
        };
    }
}
exports.SearchFormDataSecondGenerationResponse = SearchFormDataSecondGenerationResponse;
class SearchFormDataSecondGenerationNoTableFieldHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationNoTableFieldHeaders = SearchFormDataSecondGenerationNoTableFieldHeaders;
class SearchFormDataSecondGenerationNoTableFieldRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            formUuid: 'formUuid',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            orderConfigJson: 'orderConfigJson',
            originatorId: 'originatorId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchCondition: 'searchCondition',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            formUuid: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            orderConfigJson: 'string',
            originatorId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            searchCondition: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationNoTableFieldRequest = SearchFormDataSecondGenerationNoTableFieldRequest;
class SearchFormDataSecondGenerationNoTableFieldResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            pageNumber: 'pageNumber',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': SearchFormDataSecondGenerationNoTableFieldResponseBodyData },
            pageNumber: 'number',
            totalCount: 'number',
        };
    }
}
exports.SearchFormDataSecondGenerationNoTableFieldResponseBody = SearchFormDataSecondGenerationNoTableFieldResponseBody;
class SearchFormDataSecondGenerationNoTableFieldResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchFormDataSecondGenerationNoTableFieldResponseBody,
        };
    }
}
exports.SearchFormDataSecondGenerationNoTableFieldResponse = SearchFormDataSecondGenerationNoTableFieldResponse;
class SearchFormDatasHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.SearchFormDatasHeaders = SearchFormDatasHeaders;
class SearchFormDatasRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            createFromTimeGMT: 'createFromTimeGMT',
            createToTimeGMT: 'createToTimeGMT',
            currentPage: 'currentPage',
            dynamicOrder: 'dynamicOrder',
            formUuid: 'formUuid',
            language: 'language',
            modifiedFromTimeGMT: 'modifiedFromTimeGMT',
            modifiedToTimeGMT: 'modifiedToTimeGMT',
            originatorId: 'originatorId',
            pageSize: 'pageSize',
            searchFieldJson: 'searchFieldJson',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            createFromTimeGMT: 'string',
            createToTimeGMT: 'string',
            currentPage: 'number',
            dynamicOrder: 'string',
            formUuid: 'string',
            language: 'string',
            modifiedFromTimeGMT: 'string',
            modifiedToTimeGMT: 'string',
            originatorId: 'string',
            pageSize: 'number',
            searchFieldJson: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.SearchFormDatasRequest = SearchFormDatasRequest;
class SearchFormDatasResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'currentPage',
            data: 'data',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            data: { 'type': 'array', 'itemType': SearchFormDatasResponseBodyData },
            totalCount: 'number',
        };
    }
}
exports.SearchFormDatasResponseBody = SearchFormDatasResponseBody;
class SearchFormDatasResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchFormDatasResponseBody,
        };
    }
}
exports.SearchFormDatasResponse = SearchFormDatasResponse;
class StartInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.StartInstanceHeaders = StartInstanceHeaders;
class StartInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            departmentId: 'departmentId',
            formDataJson: 'formDataJson',
            formUuid: 'formUuid',
            language: 'language',
            processCode: 'processCode',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            departmentId: 'string',
            formDataJson: 'string',
            formUuid: 'string',
            language: 'string',
            processCode: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.StartInstanceRequest = StartInstanceRequest;
class StartInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
}
exports.StartInstanceResponseBody = StartInstanceResponseBody;
class StartInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StartInstanceResponseBody,
        };
    }
}
exports.StartInstanceResponse = StartInstanceResponse;
class TerminateCloudAuthorizationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.TerminateCloudAuthorizationHeaders = TerminateCloudAuthorizationHeaders;
class TerminateCloudAuthorizationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUnionId: 'callerUnionId',
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUnionId: 'string',
            instanceId: 'string',
        };
    }
}
exports.TerminateCloudAuthorizationRequest = TerminateCloudAuthorizationRequest;
class TerminateCloudAuthorizationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.TerminateCloudAuthorizationResponseBody = TerminateCloudAuthorizationResponseBody;
class TerminateCloudAuthorizationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TerminateCloudAuthorizationResponseBody,
        };
    }
}
exports.TerminateCloudAuthorizationResponse = TerminateCloudAuthorizationResponse;
class TerminateInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.TerminateInstanceHeaders = TerminateInstanceHeaders;
class TerminateInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            processInstanceId: 'processInstanceId',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            processInstanceId: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.TerminateInstanceRequest = TerminateInstanceRequest;
class TerminateInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.TerminateInstanceResponse = TerminateInstanceResponse;
class UpdateCloudAccountInformationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateCloudAccountInformationHeaders = UpdateCloudAccountInformationHeaders;
class UpdateCloudAccountInformationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            accountNumber: 'accountNumber',
            callerUnionId: 'callerUnionId',
            commodityType: 'commodityType',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            accountNumber: 'string',
            callerUnionId: 'string',
            commodityType: 'string',
        };
    }
}
exports.UpdateCloudAccountInformationRequest = UpdateCloudAccountInformationRequest;
class UpdateCloudAccountInformationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpdateCloudAccountInformationResponseBody = UpdateCloudAccountInformationResponseBody;
class UpdateCloudAccountInformationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCloudAccountInformationResponseBody,
        };
    }
}
exports.UpdateCloudAccountInformationResponse = UpdateCloudAccountInformationResponse;
class UpdateFormDataHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateFormDataHeaders = UpdateFormDataHeaders;
class UpdateFormDataRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            formInstanceId: 'formInstanceId',
            language: 'language',
            systemToken: 'systemToken',
            updateFormDataJson: 'updateFormDataJson',
            useLatestVersion: 'useLatestVersion',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            formInstanceId: 'string',
            language: 'string',
            systemToken: 'string',
            updateFormDataJson: 'string',
            useLatestVersion: 'boolean',
            userId: 'string',
        };
    }
}
exports.UpdateFormDataRequest = UpdateFormDataRequest;
class UpdateFormDataResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateFormDataResponse = UpdateFormDataResponse;
class UpdateInstanceHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateInstanceHeaders = UpdateInstanceHeaders;
class UpdateInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            language: 'language',
            processInstanceId: 'processInstanceId',
            systemToken: 'systemToken',
            updateFormDataJson: 'updateFormDataJson',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            language: 'string',
            processInstanceId: 'string',
            systemToken: 'string',
            updateFormDataJson: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateInstanceRequest = UpdateInstanceRequest;
class UpdateInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateInstanceResponse = UpdateInstanceResponse;
class UpdateStatusHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdateStatusHeaders = UpdateStatusHeaders;
class UpdateStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appType: 'appType',
            errorLines: 'errorLines',
            importSequence: 'importSequence',
            language: 'language',
            status: 'status',
            systemToken: 'systemToken',
            userId: 'userId',
        };
    }
    static types() {
        return {
            appType: 'string',
            errorLines: { 'type': 'array', 'itemType': 'number' },
            importSequence: 'string',
            language: 'string',
            status: 'string',
            systemToken: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateStatusRequest = UpdateStatusRequest;
class UpdateStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
}
exports.UpdateStatusResponse = UpdateStatusResponse;
class UpgradeTenantInformationHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpgradeTenantInformationHeaders = UpgradeTenantInformationHeaders;
class UpgradeTenantInformationRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            accountNumber: 'accountNumber',
            callerUnionId: 'callerUnionId',
            commodityType: 'commodityType',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            accountNumber: 'string',
            callerUnionId: 'string',
            commodityType: 'string',
        };
    }
}
exports.UpgradeTenantInformationRequest = UpgradeTenantInformationRequest;
class UpgradeTenantInformationResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
}
exports.UpgradeTenantInformationResponseBody = UpgradeTenantInformationResponseBody;
class UpgradeTenantInformationResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpgradeTenantInformationResponseBody,
        };
    }
}
exports.UpgradeTenantInformationResponse = UpgradeTenantInformationResponse;
class ValidateApplicationAuthorizationOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ValidateApplicationAuthorizationOrderHeaders = ValidateApplicationAuthorizationOrderHeaders;
class ValidateApplicationAuthorizationOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUnionId: 'callerUnionId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUnionId: 'string',
        };
    }
}
exports.ValidateApplicationAuthorizationOrderRequest = ValidateApplicationAuthorizationOrderRequest;
class ValidateApplicationAuthorizationOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            status: 'status',
        };
    }
    static types() {
        return {
            message: 'string',
            status: 'number',
        };
    }
}
exports.ValidateApplicationAuthorizationOrderResponseBody = ValidateApplicationAuthorizationOrderResponseBody;
class ValidateApplicationAuthorizationOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ValidateApplicationAuthorizationOrderResponseBody,
        };
    }
}
exports.ValidateApplicationAuthorizationOrderResponse = ValidateApplicationAuthorizationOrderResponse;
class ValidateApplicationAuthorizationServiceOrderHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ValidateApplicationAuthorizationServiceOrderHeaders = ValidateApplicationAuthorizationServiceOrderHeaders;
class ValidateApplicationAuthorizationServiceOrderRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
        };
    }
    static types() {
        return {
            accessKey: 'string',
        };
    }
}
exports.ValidateApplicationAuthorizationServiceOrderRequest = ValidateApplicationAuthorizationServiceOrderRequest;
class ValidateApplicationAuthorizationServiceOrderResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            status: 'status',
        };
    }
    static types() {
        return {
            message: 'string',
            status: 'number',
        };
    }
}
exports.ValidateApplicationAuthorizationServiceOrderResponseBody = ValidateApplicationAuthorizationServiceOrderResponseBody;
class ValidateApplicationAuthorizationServiceOrderResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ValidateApplicationAuthorizationServiceOrderResponseBody,
        };
    }
}
exports.ValidateApplicationAuthorizationServiceOrderResponse = ValidateApplicationAuthorizationServiceOrderResponse;
class ValidateApplicationServiceOrderUpgradeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ValidateApplicationServiceOrderUpgradeHeaders = ValidateApplicationServiceOrderUpgradeHeaders;
class ValidateApplicationServiceOrderUpgradeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
        };
    }
    static types() {
        return {
            accessKey: 'string',
        };
    }
}
exports.ValidateApplicationServiceOrderUpgradeRequest = ValidateApplicationServiceOrderUpgradeRequest;
class ValidateApplicationServiceOrderUpgradeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            status: 'status',
        };
    }
    static types() {
        return {
            message: 'string',
            status: 'number',
        };
    }
}
exports.ValidateApplicationServiceOrderUpgradeResponseBody = ValidateApplicationServiceOrderUpgradeResponseBody;
class ValidateApplicationServiceOrderUpgradeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ValidateApplicationServiceOrderUpgradeResponseBody,
        };
    }
}
exports.ValidateApplicationServiceOrderUpgradeResponse = ValidateApplicationServiceOrderUpgradeResponse;
class ValidateOrderBuyHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ValidateOrderBuyHeaders = ValidateOrderBuyHeaders;
class ValidateOrderBuyRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
        };
    }
}
exports.ValidateOrderBuyRequest = ValidateOrderBuyRequest;
class ValidateOrderBuyResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            status: 'status',
        };
    }
    static types() {
        return {
            message: 'string',
            status: 'number',
        };
    }
}
exports.ValidateOrderBuyResponseBody = ValidateOrderBuyResponseBody;
class ValidateOrderBuyResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ValidateOrderBuyResponseBody,
        };
    }
}
exports.ValidateOrderBuyResponse = ValidateOrderBuyResponse;
class ValidateOrderUpdateHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ValidateOrderUpdateHeaders = ValidateOrderUpdateHeaders;
class ValidateOrderUpdateRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
        };
    }
}
exports.ValidateOrderUpdateRequest = ValidateOrderUpdateRequest;
class ValidateOrderUpdateResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            status: 'status',
        };
    }
    static types() {
        return {
            message: 'string',
            status: 'number',
        };
    }
}
exports.ValidateOrderUpdateResponseBody = ValidateOrderUpdateResponseBody;
class ValidateOrderUpdateResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ValidateOrderUpdateResponseBody,
        };
    }
}
exports.ValidateOrderUpdateResponse = ValidateOrderUpdateResponse;
class ValidateOrderUpgradeHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.ValidateOrderUpgradeHeaders = ValidateOrderUpgradeHeaders;
class ValidateOrderUpgradeRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessKey: 'accessKey',
            callerUid: 'callerUid',
            instanceId: 'instanceId',
        };
    }
    static types() {
        return {
            accessKey: 'string',
            callerUid: 'string',
            instanceId: 'string',
        };
    }
}
exports.ValidateOrderUpgradeRequest = ValidateOrderUpgradeRequest;
class ValidateOrderUpgradeResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'message',
            status: 'status',
        };
    }
    static types() {
        return {
            message: 'string',
            status: 'number',
        };
    }
}
exports.ValidateOrderUpgradeResponseBody = ValidateOrderUpgradeResponseBody;
class ValidateOrderUpgradeResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ValidateOrderUpgradeResponseBody,
        };
    }
}
exports.ValidateOrderUpgradeResponse = ValidateOrderUpgradeResponse;
class BatchGetFormDataByIdListResponseBodyResultModifyUserName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
}
exports.BatchGetFormDataByIdListResponseBodyResultModifyUserName = BatchGetFormDataByIdListResponseBodyResultModifyUserName;
class BatchGetFormDataByIdListResponseBodyResultModifyUser extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: BatchGetFormDataByIdListResponseBodyResultModifyUserName,
            userId: 'string',
        };
    }
}
exports.BatchGetFormDataByIdListResponseBodyResultModifyUser = BatchGetFormDataByIdListResponseBodyResultModifyUser;
class BatchGetFormDataByIdListResponseBodyResultOriginatorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
}
exports.BatchGetFormDataByIdListResponseBodyResultOriginatorName = BatchGetFormDataByIdListResponseBodyResultOriginatorName;
class BatchGetFormDataByIdListResponseBodyResultOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: BatchGetFormDataByIdListResponseBodyResultOriginatorName,
            userId: 'string',
        };
    }
}
exports.BatchGetFormDataByIdListResponseBodyResultOriginator = BatchGetFormDataByIdListResponseBodyResultOriginator;
class BatchGetFormDataByIdListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTimeGMT: 'createTimeGMT',
            creatorUserId: 'creatorUserId',
            formData: 'formData',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            id: 'id',
            instanceValue: 'instanceValue',
            modifiedTimeGMT: 'modifiedTimeGMT',
            modifier: 'modifier',
            modifyUser: 'modifyUser',
            originator: 'originator',
            sequence: 'sequence',
            serialNumber: 'serialNumber',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            createTimeGMT: 'string',
            creatorUserId: 'string',
            formData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formInstanceId: 'string',
            formUuid: 'string',
            id: 'number',
            instanceValue: 'string',
            modifiedTimeGMT: 'string',
            modifier: 'string',
            modifyUser: BatchGetFormDataByIdListResponseBodyResultModifyUser,
            originator: BatchGetFormDataByIdListResponseBodyResultOriginator,
            sequence: 'string',
            serialNumber: 'string',
            title: 'string',
            version: 'number',
        };
    }
}
exports.BatchGetFormDataByIdListResponseBodyResult = BatchGetFormDataByIdListResponseBodyResult;
class GetActivityButtonListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            aliasInChinese: 'aliasInChinese',
            aliasInEnglish: 'aliasInEnglish',
        };
    }
    static types() {
        return {
            aliasInChinese: 'string',
            aliasInEnglish: 'string',
        };
    }
}
exports.GetActivityButtonListResponseBodyResult = GetActivityButtonListResponseBodyResult;
class GetActivityListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activityId: 'activityId',
            activityName: 'activityName',
            activityNameInEnglish: 'activityNameInEnglish',
        };
    }
    static types() {
        return {
            activityId: 'string',
            activityName: 'string',
            activityNameInEnglish: 'string',
        };
    }
}
exports.GetActivityListResponseBodyResult = GetActivityListResponseBodyResult;
class GetAllAuthCubesResponseBodyResultCubeDataRanges extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classifiedCode: 'classifiedCode',
            conditionKey: 'conditionKey',
            conditionValue: 'conditionValue',
            elementCode: 'elementCode',
            elementType: 'elementType',
            operator: 'operator',
        };
    }
    static types() {
        return {
            classifiedCode: 'string',
            conditionKey: 'string',
            conditionValue: { 'type': 'array', 'itemType': 'any' },
            elementCode: 'string',
            elementType: 'string',
            operator: 'string',
        };
    }
}
exports.GetAllAuthCubesResponseBodyResultCubeDataRanges = GetAllAuthCubesResponseBodyResultCubeDataRanges;
class GetAllAuthCubesResponseBodyResultUserInformation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            authProvider: 'authProvider',
            corpId: 'corpId',
            departmentName: 'departmentName',
            name: 'name',
            nickName: 'nickName',
            realmId: 'realmId',
            refererNamespaceCode: 'refererNamespaceCode',
            showName: 'showName',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            authProvider: 'string',
            corpId: 'string',
            departmentName: 'string',
            name: 'string',
            nickName: 'string',
            realmId: 'number',
            refererNamespaceCode: 'string',
            showName: 'string',
            workNo: 'string',
        };
    }
}
exports.GetAllAuthCubesResponseBodyResultUserInformation = GetAllAuthCubesResponseBodyResultUserInformation;
class GetAllAuthCubesResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apappliedCount: 'apappliedCount',
            appCode: 'appCode',
            appInstanceCode: 'appInstanceCode',
            appStoreCode: 'appStoreCode',
            authMode: 'authMode',
            authorizationType: 'authorizationType',
            businessProcessCode: 'businessProcessCode',
            categoriesFirst: 'categoriesFirst',
            categoriesSecond: 'categoriesSecond',
            createTimeGMT: 'createTimeGMT',
            creatorUserId: 'creatorUserId',
            cubeAuthType: 'cubeAuthType',
            cubeCode: 'cubeCode',
            cubeDataRange: 'cubeDataRange',
            cubeDataRanges: 'cubeDataRanges',
            cubeSource: 'cubeSource',
            dataCacheTimeConfiguration: 'dataCacheTimeConfiguration',
            dataflowCode: 'dataflowCode',
            description: 'description',
            domainCode: 'domainCode',
            enableCache: 'enableCache',
            id: 'id',
            isNeedApplication: 'isNeedApplication',
            isTrend: 'isTrend',
            modifiedTimeGMT: 'modifiedTimeGMT',
            modifier: 'modifier',
            name: 'name',
            namespaceCode: 'namespaceCode',
            owner: 'owner',
            sharedDataSet: 'sharedDataSet',
            tenantCorpId: 'tenantCorpId',
            type: 'type',
            userInformation: 'userInformation',
        };
    }
    static types() {
        return {
            apappliedCount: 'number',
            appCode: 'string',
            appInstanceCode: 'string',
            appStoreCode: 'string',
            authMode: 'string',
            authorizationType: 'number',
            businessProcessCode: 'string',
            categoriesFirst: 'string',
            categoriesSecond: 'string',
            createTimeGMT: 'string',
            creatorUserId: 'string',
            cubeAuthType: 'string',
            cubeCode: 'string',
            cubeDataRange: 'string',
            cubeDataRanges: { 'type': 'array', 'itemType': GetAllAuthCubesResponseBodyResultCubeDataRanges },
            cubeSource: 'string',
            dataCacheTimeConfiguration: 'string',
            dataflowCode: 'string',
            description: 'string',
            domainCode: 'string',
            enableCache: 'boolean',
            id: 'number',
            isNeedApplication: 'string',
            isTrend: 'string',
            modifiedTimeGMT: 'string',
            modifier: 'string',
            name: 'string',
            namespaceCode: 'string',
            owner: 'string',
            sharedDataSet: 'boolean',
            tenantCorpId: 'string',
            type: 'string',
            userInformation: GetAllAuthCubesResponseBodyResultUserInformation,
        };
    }
}
exports.GetAllAuthCubesResponseBodyResult = GetAllAuthCubesResponseBodyResult;
class GetCorpAccomplishmentTasksResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activeTimeGMT: 'activeTimeGMT',
            actualActionerId: 'actualActionerId',
            appType: 'appType',
            createTimeGMT: 'createTimeGMT',
            finishTimeGMT: 'finishTimeGMT',
            originatorEmail: 'originatorEmail',
            originatorId: 'originatorId',
            originatorName: 'originatorName',
            originatorNameInEnglish: 'originatorNameInEnglish',
            originatorNickName: 'originatorNickName',
            originatorNickNameInEnglish: 'originatorNickNameInEnglish',
            originatorPhoto: 'originatorPhoto',
            outResult: 'outResult',
            outResultName: 'outResultName',
            processInstanceId: 'processInstanceId',
            status: 'status',
            taskId: 'taskId',
            taskType: 'taskType',
            title: 'title',
            titleInEnglish: 'titleInEnglish',
        };
    }
    static types() {
        return {
            activeTimeGMT: 'string',
            actualActionerId: 'string',
            appType: 'string',
            createTimeGMT: 'string',
            finishTimeGMT: 'string',
            originatorEmail: 'string',
            originatorId: 'string',
            originatorName: 'string',
            originatorNameInEnglish: 'string',
            originatorNickName: 'string',
            originatorNickNameInEnglish: 'string',
            originatorPhoto: 'string',
            outResult: 'string',
            outResultName: 'string',
            processInstanceId: 'string',
            status: 'string',
            taskId: 'string',
            taskType: 'string',
            title: 'string',
            titleInEnglish: 'string',
        };
    }
}
exports.GetCorpAccomplishmentTasksResponseBodyData = GetCorpAccomplishmentTasksResponseBodyData;
class GetCorpTasksResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activeTimeGMT: 'activeTimeGMT',
            actualActionerId: 'actualActionerId',
            appType: 'appType',
            createTimeGMT: 'createTimeGMT',
            finishTimeGMT: 'finishTimeGMT',
            originatorEmail: 'originatorEmail',
            originatorId: 'originatorId',
            originatorName: 'originatorName',
            originatorNameInEnglish: 'originatorNameInEnglish',
            originatorNickName: 'originatorNickName',
            originatorNickNameEn: 'originatorNickNameEn',
            originatorPhoto: 'originatorPhoto',
            outResult: 'outResult',
            outResultName: 'outResultName',
            processInstanceId: 'processInstanceId',
            status: 'status',
            taskId: 'taskId',
            taskType: 'taskType',
            title: 'title',
            titleInEnglish: 'titleInEnglish',
        };
    }
    static types() {
        return {
            activeTimeGMT: 'string',
            actualActionerId: 'string',
            appType: 'string',
            createTimeGMT: 'string',
            finishTimeGMT: 'string',
            originatorEmail: 'string',
            originatorId: 'string',
            originatorName: 'string',
            originatorNameInEnglish: 'string',
            originatorNickName: 'string',
            originatorNickNameEn: 'string',
            originatorPhoto: 'string',
            outResult: 'string',
            outResultName: 'string',
            processInstanceId: 'string',
            status: 'string',
            taskId: 'string',
            taskType: 'string',
            title: 'string',
            titleInEnglish: 'string',
        };
    }
}
exports.GetCorpTasksResponseBodyData = GetCorpTasksResponseBodyData;
class GetFieldDefByUuidResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            behavior: 'behavior',
            children: 'children',
            componentName: 'componentName',
            fieldId: 'fieldId',
            label: 'label',
            props: 'props',
        };
    }
    static types() {
        return {
            behavior: 'string',
            children: 'string',
            componentName: 'string',
            fieldId: 'string',
            label: 'any',
            props: 'any',
        };
    }
}
exports.GetFieldDefByUuidResponseBodyResult = GetFieldDefByUuidResponseBodyResult;
class GetFormComponentDefinitionListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            componentName: 'componentName',
            fieldId: 'fieldId',
            label: 'label',
            parentId: 'parentId',
        };
    }
    static types() {
        return {
            componentName: 'string',
            fieldId: 'string',
            label: 'string',
            parentId: 'string',
        };
    }
}
exports.GetFormComponentDefinitionListResponseBodyResult = GetFormComponentDefinitionListResponseBodyResult;
class GetFormDataByIDResponseBodyOriginatorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.GetFormDataByIDResponseBodyOriginatorName = GetFormDataByIDResponseBodyOriginatorName;
class GetFormDataByIDResponseBodyOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentName: 'departmentName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentName: 'string',
            email: 'string',
            name: GetFormDataByIDResponseBodyOriginatorName,
            userId: 'string',
        };
    }
}
exports.GetFormDataByIDResponseBodyOriginator = GetFormDataByIDResponseBodyOriginator;
class GetFormListInAppResponseBodyResultDataTitle extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enUS: 'enUS',
            zhCN: 'zhCN',
        };
    }
    static types() {
        return {
            enUS: 'string',
            zhCN: 'string',
        };
    }
}
exports.GetFormListInAppResponseBodyResultDataTitle = GetFormListInAppResponseBodyResultDataTitle;
class GetFormListInAppResponseBodyResultData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            creator: 'creator',
            formType: 'formType',
            formUuid: 'formUuid',
            gmtCreate: 'gmtCreate',
            title: 'title',
        };
    }
    static types() {
        return {
            creator: 'string',
            formType: 'string',
            formUuid: 'string',
            gmtCreate: 'string',
            title: GetFormListInAppResponseBodyResultDataTitle,
        };
    }
}
exports.GetFormListInAppResponseBodyResultData = GetFormListInAppResponseBodyResultData;
class GetFormListInAppResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'currentPage',
            data: 'data',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            data: { 'type': 'array', 'itemType': GetFormListInAppResponseBodyResultData },
            totalCount: 'number',
        };
    }
}
exports.GetFormListInAppResponseBodyResult = GetFormListInAppResponseBodyResult;
class GetInstanceByIdResponseBodyActionExecutorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.GetInstanceByIdResponseBodyActionExecutorName = GetInstanceByIdResponseBodyActionExecutorName;
class GetInstanceByIdResponseBodyActionExecutor extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: GetInstanceByIdResponseBodyActionExecutorName,
            userId: 'string',
        };
    }
}
exports.GetInstanceByIdResponseBodyActionExecutor = GetInstanceByIdResponseBodyActionExecutor;
class GetInstanceByIdResponseBodyOriginatorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.GetInstanceByIdResponseBodyOriginatorName = GetInstanceByIdResponseBodyOriginatorName;
class GetInstanceByIdResponseBodyOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: GetInstanceByIdResponseBodyOriginatorName,
            userId: 'string',
        };
    }
}
exports.GetInstanceByIdResponseBodyOriginator = GetInstanceByIdResponseBodyOriginator;
class GetInstancesResponseBodyDataActionExecutorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.GetInstancesResponseBodyDataActionExecutorName = GetInstancesResponseBodyDataActionExecutorName;
class GetInstancesResponseBodyDataActionExecutor extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: GetInstancesResponseBodyDataActionExecutorName,
            userId: 'string',
        };
    }
}
exports.GetInstancesResponseBodyDataActionExecutor = GetInstancesResponseBodyDataActionExecutor;
class GetInstancesResponseBodyDataOriginatorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.GetInstancesResponseBodyDataOriginatorName = GetInstancesResponseBodyDataOriginatorName;
class GetInstancesResponseBodyDataOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptName: 'deptName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptName: 'string',
            email: 'string',
            name: GetInstancesResponseBodyDataOriginatorName,
            userId: 'string',
        };
    }
}
exports.GetInstancesResponseBodyDataOriginator = GetInstancesResponseBodyDataOriginator;
class GetInstancesResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionExecutor: 'actionExecutor',
            approvedResult: 'approvedResult',
            createTimeGMT: 'createTimeGMT',
            data: 'data',
            formUuid: 'formUuid',
            instanceStatus: 'instanceStatus',
            modifiedTimeGMT: 'modifiedTimeGMT',
            originator: 'originator',
            processCode: 'processCode',
            processInstanceId: 'processInstanceId',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            actionExecutor: { 'type': 'array', 'itemType': GetInstancesResponseBodyDataActionExecutor },
            approvedResult: 'string',
            createTimeGMT: 'string',
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formUuid: 'string',
            instanceStatus: 'string',
            modifiedTimeGMT: 'string',
            originator: GetInstancesResponseBodyDataOriginator,
            processCode: 'string',
            processInstanceId: 'string',
            title: 'string',
            version: 'number',
        };
    }
}
exports.GetInstancesResponseBodyData = GetInstancesResponseBodyData;
class GetInstancesByIdListResponseBodyResultActionExecutorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.GetInstancesByIdListResponseBodyResultActionExecutorName = GetInstancesByIdListResponseBodyResultActionExecutorName;
class GetInstancesByIdListResponseBodyResultActionExecutor extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentName: 'departmentName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentName: 'string',
            email: 'string',
            name: GetInstancesByIdListResponseBodyResultActionExecutorName,
            userId: 'string',
        };
    }
}
exports.GetInstancesByIdListResponseBodyResultActionExecutor = GetInstancesByIdListResponseBodyResultActionExecutor;
class GetInstancesByIdListResponseBodyResultOriginatorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.GetInstancesByIdListResponseBodyResultOriginatorName = GetInstancesByIdListResponseBodyResultOriginatorName;
class GetInstancesByIdListResponseBodyResultOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentName: 'departmentName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentName: 'string',
            email: 'string',
            name: GetInstancesByIdListResponseBodyResultOriginatorName,
            userId: 'string',
        };
    }
}
exports.GetInstancesByIdListResponseBodyResultOriginator = GetInstancesByIdListResponseBodyResultOriginator;
class GetInstancesByIdListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionExecutor: 'actionExecutor',
            approvedResult: 'approvedResult',
            data: 'data',
            formUuid: 'formUuid',
            instanceStatus: 'instanceStatus',
            originator: 'originator',
            processCode: 'processCode',
            processInstanceId: 'processInstanceId',
            title: 'title',
        };
    }
    static types() {
        return {
            actionExecutor: { 'type': 'array', 'itemType': GetInstancesByIdListResponseBodyResultActionExecutor },
            approvedResult: 'string',
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formUuid: 'string',
            instanceStatus: 'string',
            originator: GetInstancesByIdListResponseBodyResultOriginator,
            processCode: 'string',
            processInstanceId: 'string',
            title: 'string',
        };
    }
}
exports.GetInstancesByIdListResponseBodyResult = GetInstancesByIdListResponseBodyResult;
class GetMeCorpSubmissionResponseBodyDataActioner extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            buName: 'buName',
            email: 'email',
            employeeType: 'employeeType',
            employeeTypeInformation: 'employeeTypeInformation',
            humanResourceGroupWorkNumber: 'humanResourceGroupWorkNumber',
            isSystemAdmin: 'isSystemAdmin',
            level: 'level',
            name: 'name',
            nickName: 'nickName',
            orderNumber: 'orderNumber',
            personalPhoto: 'personalPhoto',
            personalPhotoUrl: 'personalPhotoUrl',
            pinyinNameAll: 'pinyinNameAll',
            pinyinNickName: 'pinyinNickName',
            state: 'state',
            superUserId: 'superUserId',
            tbWang: 'tbWang',
            userId: 'userId',
        };
    }
    static types() {
        return {
            buName: 'string',
            email: 'string',
            employeeType: 'string',
            employeeTypeInformation: 'string',
            humanResourceGroupWorkNumber: 'string',
            isSystemAdmin: 'boolean',
            level: 'string',
            name: 'string',
            nickName: 'string',
            orderNumber: 'string',
            personalPhoto: 'string',
            personalPhotoUrl: 'string',
            pinyinNameAll: 'string',
            pinyinNickName: 'string',
            state: 'string',
            superUserId: 'string',
            tbWang: 'string',
            userId: 'string',
        };
    }
}
exports.GetMeCorpSubmissionResponseBodyDataActioner = GetMeCorpSubmissionResponseBodyDataActioner;
class GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activityId: 'activityId',
            activityInstanceStatus: 'activityInstanceStatus',
            activityName: 'activityName',
            activityNameEn: 'activityNameEn',
            id: 'id',
        };
    }
    static types() {
        return {
            activityId: 'string',
            activityInstanceStatus: 'string',
            activityName: 'string',
            activityNameEn: 'string',
            id: 'number',
        };
    }
}
exports.GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances = GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances;
class GetMeCorpSubmissionResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actioner: 'actioner',
            actionerId: 'actionerId',
            actionerName: 'actionerName',
            appType: 'appType',
            createTimeGMT: 'createTimeGMT',
            currentActivityInstances: 'currentActivityInstances',
            dataMap: 'dataMap',
            dataType: 'dataType',
            finishTimeGMT: 'finishTimeGMT',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            instanceValue: 'instanceValue',
            modifiedTimeGMT: 'modifiedTimeGMT',
            originatorAvatar: 'originatorAvatar',
            originatorDisplayName: 'originatorDisplayName',
            originatorId: 'originatorId',
            processApprovedResult: 'processApprovedResult',
            processApprovedResultText: 'processApprovedResultText',
            processCode: 'processCode',
            processId: 'processId',
            processInstanceId: 'processInstanceId',
            processInstanceStatus: 'processInstanceStatus',
            processInstanceStatusText: 'processInstanceStatusText',
            processName: 'processName',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            actioner: { 'type': 'array', 'itemType': GetMeCorpSubmissionResponseBodyDataActioner },
            actionerId: { 'type': 'array', 'itemType': 'string' },
            actionerName: { 'type': 'array', 'itemType': 'string' },
            appType: 'string',
            createTimeGMT: 'string',
            currentActivityInstances: { 'type': 'array', 'itemType': GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances },
            dataMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            dataType: 'string',
            finishTimeGMT: 'string',
            formInstanceId: 'string',
            formUuid: 'string',
            instanceValue: 'string',
            modifiedTimeGMT: 'string',
            originatorAvatar: 'string',
            originatorDisplayName: 'string',
            originatorId: 'string',
            processApprovedResult: 'string',
            processApprovedResultText: 'string',
            processCode: 'string',
            processId: 'number',
            processInstanceId: 'string',
            processInstanceStatus: 'string',
            processInstanceStatusText: 'string',
            processName: 'string',
            title: 'string',
            version: 'number',
        };
    }
}
exports.GetMeCorpSubmissionResponseBodyData = GetMeCorpSubmissionResponseBodyData;
class GetNotifyMeResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activityId: 'activityId',
            appType: 'appType',
            corpId: 'corpId',
            createTimeGMT: 'createTimeGMT',
            creatorUserId: 'creatorUserId',
            formInstanceId: 'formInstanceId',
            instStatus: 'instStatus',
            mobileUrl: 'mobileUrl',
            modifiedTimeGMT: 'modifiedTimeGMT',
            processCode: 'processCode',
            title: 'title',
            titleInEnglish: 'titleInEnglish',
            url: 'url',
        };
    }
    static types() {
        return {
            activityId: 'string',
            appType: 'string',
            corpId: 'string',
            createTimeGMT: 'string',
            creatorUserId: 'string',
            formInstanceId: 'string',
            instStatus: 'string',
            mobileUrl: 'string',
            modifiedTimeGMT: 'string',
            processCode: 'string',
            title: 'string',
            titleInEnglish: 'string',
            url: 'string',
        };
    }
}
exports.GetNotifyMeResponseBodyData = GetNotifyMeResponseBodyData;
class GetOperationRecordsResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'action',
            actionExit: 'actionExit',
            activeTimeGMT: 'activeTimeGMT',
            activityId: 'activityId',
            dataId: 'dataId',
            digitalSign: 'digitalSign',
            files: 'files',
            operateTimeGMT: 'operateTimeGMT',
            operateType: 'operateType',
            operatorDisplayName: 'operatorDisplayName',
            operatorName: 'operatorName',
            operatorNickName: 'operatorNickName',
            operatorPhotoUrl: 'operatorPhotoUrl',
            operatorStatus: 'operatorStatus',
            operatorUserId: 'operatorUserId',
            processInstanceId: 'processInstanceId',
            remark: 'remark',
            showName: 'showName',
            size: 'size',
            taskExecuteType: 'taskExecuteType',
            taskHoldTimeGMT: 'taskHoldTimeGMT',
            taskId: 'taskId',
            taskType: 'taskType',
            type: 'type',
        };
    }
    static types() {
        return {
            action: 'string',
            actionExit: 'string',
            activeTimeGMT: 'string',
            activityId: 'string',
            dataId: 'number',
            digitalSign: 'string',
            files: 'string',
            operateTimeGMT: 'string',
            operateType: 'string',
            operatorDisplayName: 'string',
            operatorName: 'string',
            operatorNickName: 'string',
            operatorPhotoUrl: 'string',
            operatorStatus: 'string',
            operatorUserId: 'string',
            processInstanceId: 'string',
            remark: 'string',
            showName: 'string',
            size: 'number',
            taskExecuteType: 'string',
            taskHoldTimeGMT: 'number',
            taskId: 'string',
            taskType: 'string',
            type: 'string',
        };
    }
}
exports.GetOperationRecordsResponseBodyResult = GetOperationRecordsResponseBodyResult;
class GetPrintAppInfoResponseBodyResultFormInfoList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            formName: 'formName',
            formUuid: 'formUuid',
        };
    }
    static types() {
        return {
            formName: 'string',
            formUuid: 'string',
        };
    }
}
exports.GetPrintAppInfoResponseBodyResultFormInfoList = GetPrintAppInfoResponseBodyResultFormInfoList;
class GetPrintAppInfoResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appName: 'appName',
            appType: 'appType',
            formInfoList: 'formInfoList',
            iconUrl: 'iconUrl',
        };
    }
    static types() {
        return {
            appName: 'string',
            appType: 'string',
            formInfoList: { 'type': 'array', 'itemType': GetPrintAppInfoResponseBodyResultFormInfoList },
            iconUrl: 'string',
        };
    }
}
exports.GetPrintAppInfoResponseBodyResult = GetPrintAppInfoResponseBodyResult;
class GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptName: 'deptName',
            deptNameInEnglish: 'deptNameInEnglish',
            deptNo: 'deptNo',
            deptPath: 'deptPath',
            humanSourceGroupOrderNumber: 'humanSourceGroupOrderNumber',
            humanSourceGroupWorkNo: 'humanSourceGroupWorkNo',
            id: 'id',
            masterWorkNo: 'masterWorkNo',
        };
    }
    static types() {
        return {
            deptName: 'string',
            deptNameInEnglish: 'string',
            deptNo: 'string',
            deptPath: 'string',
            humanSourceGroupOrderNumber: 'string',
            humanSourceGroupWorkNo: 'string',
            id: 'number',
            masterWorkNo: 'string',
        };
    }
}
exports.GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments = GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments;
class GetProcessDefinitionResponseBodyOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentDescription: 'departmentDescription',
            displayEnName: 'displayEnName',
            displayName: 'displayName',
            masterDataDepartments: 'masterDataDepartments',
            orderNumber: 'orderNumber',
            personalPhoto: 'personalPhoto',
            status: 'status',
            tbWang: 'tbWang',
            userId: 'userId',
            userInfo: 'userInfo',
        };
    }
    static types() {
        return {
            departmentDescription: 'string',
            displayEnName: 'string',
            displayName: 'string',
            masterDataDepartments: { 'type': 'array', 'itemType': GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments },
            orderNumber: 'string',
            personalPhoto: 'string',
            status: 'string',
            tbWang: 'string',
            userId: 'string',
            userInfo: 'string',
        };
    }
}
exports.GetProcessDefinitionResponseBodyOriginator = GetProcessDefinitionResponseBodyOriginator;
class GetProcessDefinitionResponseBodyOwnersMasterDataDepartments extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deptName: 'deptName',
            deptNameInEnglish: 'deptNameInEnglish',
            deptNo: 'deptNo',
            deptPath: 'deptPath',
            humanSourceGroupOrderNumber: 'humanSourceGroupOrderNumber',
            humanSourceGroupWorkNo: 'humanSourceGroupWorkNo',
            id: 'id',
            masterWorkNo: 'masterWorkNo',
        };
    }
    static types() {
        return {
            deptName: 'string',
            deptNameInEnglish: 'string',
            deptNo: 'string',
            deptPath: 'string',
            humanSourceGroupOrderNumber: 'string',
            humanSourceGroupWorkNo: 'string',
            id: 'number',
            masterWorkNo: 'string',
        };
    }
}
exports.GetProcessDefinitionResponseBodyOwnersMasterDataDepartments = GetProcessDefinitionResponseBodyOwnersMasterDataDepartments;
class GetProcessDefinitionResponseBodyOwners extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentDescription: 'departmentDescription',
            displayEnName: 'displayEnName',
            displayName: 'displayName',
            masterDataDepartments: 'masterDataDepartments',
            orderNumber: 'orderNumber',
            personalPhoto: 'personalPhoto',
            status: 'status',
            tbWang: 'tbWang',
            userId: 'userId',
            userInfo: 'userInfo',
        };
    }
    static types() {
        return {
            departmentDescription: 'string',
            displayEnName: 'string',
            displayName: 'string',
            masterDataDepartments: { 'type': 'array', 'itemType': GetProcessDefinitionResponseBodyOwnersMasterDataDepartments },
            orderNumber: 'string',
            personalPhoto: 'string',
            status: 'string',
            tbWang: 'string',
            userId: 'string',
            userInfo: 'string',
        };
    }
}
exports.GetProcessDefinitionResponseBodyOwners = GetProcessDefinitionResponseBodyOwners;
class GetProcessDefinitionResponseBodyTasksActivity extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activityId: 'activityId',
            activityInstanceStatus: 'activityInstanceStatus',
            activityName: 'activityName',
            activityNameInEnglish: 'activityNameInEnglish',
            id: 'id',
        };
    }
    static types() {
        return {
            activityId: 'string',
            activityInstanceStatus: 'string',
            activityName: 'string',
            activityNameInEnglish: 'string',
            id: 'number',
        };
    }
}
exports.GetProcessDefinitionResponseBodyTasksActivity = GetProcessDefinitionResponseBodyTasksActivity;
class GetProcessDefinitionResponseBodyTasks extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionerId: 'actionerId',
            activity: 'activity',
            status: 'status',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            actionerId: 'string',
            activity: GetProcessDefinitionResponseBodyTasksActivity,
            status: 'string',
            taskId: 'number',
        };
    }
}
exports.GetProcessDefinitionResponseBodyTasks = GetProcessDefinitionResponseBodyTasks;
class GetRunningTaskListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activeTimeGMT: 'activeTimeGMT',
            actualActionExecutorId: 'actualActionExecutorId',
            appType: 'appType',
            createTimeGMT: 'createTimeGMT',
            finishTimeGMT: 'finishTimeGMT',
            originatorEmail: 'originatorEmail',
            originatorId: 'originatorId',
            originatorName: 'originatorName',
            originatorNameInEnglish: 'originatorNameInEnglish',
            originatorNickName: 'originatorNickName',
            originatorNickNameInEnglish: 'originatorNickNameInEnglish',
            originatorPhoto: 'originatorPhoto',
            outResult: 'outResult',
            outResultName: 'outResultName',
            processInstanceId: 'processInstanceId',
            status: 'status',
            taskId: 'taskId',
            taskType: 'taskType',
            title: 'title',
            titleInEnglish: 'titleInEnglish',
        };
    }
    static types() {
        return {
            activeTimeGMT: 'string',
            actualActionExecutorId: 'string',
            appType: 'string',
            createTimeGMT: 'string',
            finishTimeGMT: 'string',
            originatorEmail: 'string',
            originatorId: 'string',
            originatorName: 'string',
            originatorNameInEnglish: 'string',
            originatorNickName: 'string',
            originatorNickNameInEnglish: 'string',
            originatorPhoto: 'string',
            outResult: 'string',
            outResultName: 'string',
            processInstanceId: 'string',
            status: 'string',
            taskId: 'string',
            taskType: 'string',
            title: 'string',
            titleInEnglish: 'string',
        };
    }
}
exports.GetRunningTaskListResponseBodyResult = GetRunningTaskListResponseBodyResult;
class GetRunningTasksResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activeTimeGMT: 'activeTimeGMT',
            activityId: 'activityId',
            actualActionerId: 'actualActionerId',
            createTimeGMT: 'createTimeGMT',
            finishTimeGMT: 'finishTimeGMT',
            originatorId: 'originatorId',
            processInstanceId: 'processInstanceId',
            status: 'status',
            taskId: 'taskId',
            taskType: 'taskType',
            title: 'title',
            titleInEnglish: 'titleInEnglish',
        };
    }
    static types() {
        return {
            activeTimeGMT: 'string',
            activityId: 'string',
            actualActionerId: 'string',
            createTimeGMT: 'string',
            finishTimeGMT: 'string',
            originatorId: 'string',
            processInstanceId: 'string',
            status: 'string',
            taskId: 'string',
            taskType: 'string',
            title: 'string',
            titleInEnglish: 'string',
        };
    }
}
exports.GetRunningTasksResponseBodyResult = GetRunningTasksResponseBodyResult;
class GetSaleUserInfoByUserIdResponseBodyCorpList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            corpId: 'corpId',
            corpName: 'corpName',
            namespace: 'namespace',
        };
    }
    static types() {
        return {
            corpId: 'string',
            corpName: 'string',
            namespace: 'string',
        };
    }
}
exports.GetSaleUserInfoByUserIdResponseBodyCorpList = GetSaleUserInfoByUserIdResponseBodyCorpList;
class GetSimpleCubeModelListResponseBodyResultChildren extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            classifiedCode: 'classifiedCode',
            cubeCode: 'cubeCode',
            dataType: 'dataType',
            dimensionType: 'dimensionType',
            fieldCode: 'fieldCode',
            id: 'id',
            isDimension: 'isDimension',
            isVisible: 'isVisible',
            measureType: 'measureType',
            text: 'text',
            timeFormat: 'timeFormat',
            timeGranularityType: 'timeGranularityType',
        };
    }
    static types() {
        return {
            classifiedCode: 'string',
            cubeCode: 'string',
            dataType: 'string',
            dimensionType: 'string',
            fieldCode: 'string',
            id: 'string',
            isDimension: 'string',
            isVisible: 'string',
            measureType: 'string',
            text: 'string',
            timeFormat: 'string',
            timeGranularityType: 'string',
        };
    }
}
exports.GetSimpleCubeModelListResponseBodyResultChildren = GetSimpleCubeModelListResponseBodyResultChildren;
class GetSimpleCubeModelListResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            children: 'children',
            id: 'id',
            isDimension: 'isDimension',
            text: 'text',
        };
    }
    static types() {
        return {
            children: { 'type': 'array', 'itemType': GetSimpleCubeModelListResponseBodyResultChildren },
            id: 'string',
            isDimension: 'string',
            text: 'string',
        };
    }
}
exports.GetSimpleCubeModelListResponseBodyResult = GetSimpleCubeModelListResponseBodyResult;
class GetTaskCopiesResponseBodyDataCurrentActivityInstances extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            activityId: 'activityId',
            activityInstanceStatus: 'activityInstanceStatus',
            activityName: 'activityName',
            activityNameInEnglish: 'activityNameInEnglish',
            id: 'id',
        };
    }
    static types() {
        return {
            activityId: 'string',
            activityInstanceStatus: 'string',
            activityName: 'string',
            activityNameInEnglish: 'string',
            id: 'number',
        };
    }
}
exports.GetTaskCopiesResponseBodyDataCurrentActivityInstances = GetTaskCopiesResponseBodyDataCurrentActivityInstances;
class GetTaskCopiesResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            actionExecutorId: 'actionExecutorId',
            actionExecutorName: 'actionExecutorName',
            appType: 'appType',
            carbonActivityId: 'carbonActivityId',
            createTimeGMT: 'createTimeGMT',
            currentActivityInstances: 'currentActivityInstances',
            dataMap: 'dataMap',
            dataType: 'dataType',
            finishTimeGMT: 'finishTimeGMT',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            instanceValue: 'instanceValue',
            modifiedTimeGMT: 'modifiedTimeGMT',
            originatorAvatar: 'originatorAvatar',
            originatorDisplayName: 'originatorDisplayName',
            originatorId: 'originatorId',
            processApprovedResult: 'processApprovedResult',
            processApprovedResultText: 'processApprovedResultText',
            processCode: 'processCode',
            processId: 'processId',
            processInstanceId: 'processInstanceId',
            processInstanceStatus: 'processInstanceStatus',
            processInstanceStatusText: 'processInstanceStatusText',
            processName: 'processName',
            serialNumber: 'serialNumber',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            actionExecutorId: { 'type': 'array', 'itemType': 'string' },
            actionExecutorName: { 'type': 'array', 'itemType': 'string' },
            appType: 'string',
            carbonActivityId: 'string',
            createTimeGMT: 'string',
            currentActivityInstances: { 'type': 'array', 'itemType': GetTaskCopiesResponseBodyDataCurrentActivityInstances },
            dataMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            dataType: 'string',
            finishTimeGMT: 'string',
            formInstanceId: 'string',
            formUuid: 'string',
            instanceValue: 'string',
            modifiedTimeGMT: 'string',
            originatorAvatar: 'string',
            originatorDisplayName: 'string',
            originatorId: 'string',
            processApprovedResult: 'string',
            processApprovedResultText: 'string',
            processCode: 'string',
            processId: 'number',
            processInstanceId: 'string',
            processInstanceStatus: 'string',
            processInstanceStatusText: 'string',
            processName: 'string',
            serialNumber: 'string',
            title: 'string',
            version: 'number',
        };
    }
}
exports.GetTaskCopiesResponseBodyData = GetTaskCopiesResponseBodyData;
class ListApplicationResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appConfig: 'appConfig',
            appType: 'appType',
            applicationStatus: 'applicationStatus',
            corpId: 'corpId',
            creatorUserId: 'creatorUserId',
            description: 'description',
            icon: 'icon',
            inexistence: 'inexistence',
            name: 'name',
            subCorpId: 'subCorpId',
        };
    }
    static types() {
        return {
            appConfig: 'string',
            appType: 'string',
            applicationStatus: 'string',
            corpId: 'string',
            creatorUserId: 'string',
            description: 'string',
            icon: 'string',
            inexistence: 'string',
            name: 'string',
            subCorpId: 'string',
        };
    }
}
exports.ListApplicationResponseBodyData = ListApplicationResponseBodyData;
class ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformationUsagePlugins extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iconUrl: 'iconUrl',
            pluginName: 'pluginName',
        };
    }
    static types() {
        return {
            iconUrl: 'string',
            pluginName: 'string',
        };
    }
}
exports.ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformationUsagePlugins = ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformationUsagePlugins;
class ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appName: 'appName',
            appType: 'appType',
            attachmentUsageAmount: 'attachmentUsageAmount',
            instanceUsageAmount: 'instanceUsageAmount',
            usagePlugins: 'usagePlugins',
        };
    }
    static types() {
        return {
            appName: 'string',
            appType: 'string',
            attachmentUsageAmount: 'number',
            instanceUsageAmount: 'number',
            usagePlugins: { 'type': 'array', 'itemType': ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformationUsagePlugins },
        };
    }
}
exports.ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformation = ListApplicationAuthorizationServiceApplicationInformationResponseBodyApplicationInformation;
class ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformationApplications extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appName: 'appName',
        };
    }
    static types() {
        return {
            appName: 'string',
        };
    }
}
exports.ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformationApplications = ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformationApplications;
class ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            applications: 'applications',
            iconUrl: 'iconUrl',
            plugName: 'plugName',
            plugPayType: 'plugPayType',
            plugStatus: 'plugStatus',
            plugTotalAmount: 'plugTotalAmount',
            plugUsageAmount: 'plugUsageAmount',
            plugUuid: 'plugUuid',
        };
    }
    static types() {
        return {
            applications: { 'type': 'array', 'itemType': ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformationApplications },
            iconUrl: 'string',
            plugName: 'string',
            plugPayType: 'number',
            plugStatus: 'number',
            plugTotalAmount: 'number',
            plugUsageAmount: 'number',
            plugUuid: 'string',
        };
    }
}
exports.ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformation = ListApplicationAuthorizationServiceConnectorInformationResponseBodyPlugInformation;
class ListApplicationInformationResponseBodyApplicationInformationUsagePlugins extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            iconUrl: 'iconUrl',
            pluginName: 'pluginName',
        };
    }
    static types() {
        return {
            iconUrl: 'string',
            pluginName: 'string',
        };
    }
}
exports.ListApplicationInformationResponseBodyApplicationInformationUsagePlugins = ListApplicationInformationResponseBodyApplicationInformationUsagePlugins;
class ListApplicationInformationResponseBodyApplicationInformation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appName: 'appName',
            appType: 'appType',
            attachmentUsageAmount: 'attachmentUsageAmount',
            instanceUsageAmount: 'instanceUsageAmount',
            usagePlugins: 'usagePlugins',
        };
    }
    static types() {
        return {
            appName: 'string',
            appType: 'string',
            attachmentUsageAmount: 'number',
            instanceUsageAmount: 'number',
            usagePlugins: { 'type': 'array', 'itemType': ListApplicationInformationResponseBodyApplicationInformationUsagePlugins },
        };
    }
}
exports.ListApplicationInformationResponseBodyApplicationInformation = ListApplicationInformationResponseBodyApplicationInformation;
class ListCommodityResponseBodyCommodityVOList extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accountDistributionNumber: 'accountDistributionNumber',
            accountNumber: 'accountNumber',
            activationCode: 'activationCode',
            buyDateGMT: 'buyDateGMT',
            expireDateGMT: 'expireDateGMT',
            instanceId: 'instanceId',
            status: 'status',
            version: 'version',
        };
    }
    static types() {
        return {
            accountDistributionNumber: 'number',
            accountNumber: 'number',
            activationCode: 'string',
            buyDateGMT: 'string',
            expireDateGMT: 'string',
            instanceId: 'string',
            status: 'string',
            version: 'number',
        };
    }
}
exports.ListCommodityResponseBodyCommodityVOList = ListCommodityResponseBodyCommodityVOList;
class ListConnectorInformationResponseBodyPluginInfosApps extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            appName: 'appName',
        };
    }
    static types() {
        return {
            appName: 'string',
        };
    }
}
exports.ListConnectorInformationResponseBodyPluginInfosApps = ListConnectorInformationResponseBodyPluginInfosApps;
class ListConnectorInformationResponseBodyPluginInfos extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apps: 'apps',
            iconUrl: 'iconUrl',
            pluginName: 'pluginName',
            pluginPayType: 'pluginPayType',
            pluginStatus: 'pluginStatus',
            pluginTotalAmount: 'pluginTotalAmount',
            pluginUsageAmount: 'pluginUsageAmount',
            pluginUuid: 'pluginUuid',
        };
    }
    static types() {
        return {
            apps: { 'type': 'array', 'itemType': ListConnectorInformationResponseBodyPluginInfosApps },
            iconUrl: 'string',
            pluginName: 'string',
            pluginPayType: 'number',
            pluginStatus: 'number',
            pluginTotalAmount: 'number',
            pluginUsageAmount: 'number',
            pluginUuid: 'string',
        };
    }
}
exports.ListConnectorInformationResponseBodyPluginInfos = ListConnectorInformationResponseBodyPluginInfos;
class ListNavigationByFormTypeResponseBodyResultTitle extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.ListNavigationByFormTypeResponseBodyResultTitle = ListNavigationByFormTypeResponseBodyResultTitle;
class ListNavigationByFormTypeResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            formUuid: 'formUuid',
            processCode: 'processCode',
            title: 'title',
        };
    }
    static types() {
        return {
            formUuid: 'string',
            processCode: 'string',
            title: ListNavigationByFormTypeResponseBodyResultTitle,
        };
    }
}
exports.ListNavigationByFormTypeResponseBodyResult = ListNavigationByFormTypeResponseBodyResult;
class PageFormBaseInfosResponseBodyResultDataTitle extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enUS: 'enUS',
            zhCN: 'zhCN',
        };
    }
    static types() {
        return {
            enUS: 'string',
            zhCN: 'string',
        };
    }
}
exports.PageFormBaseInfosResponseBodyResultDataTitle = PageFormBaseInfosResponseBodyResultDataTitle;
class PageFormBaseInfosResponseBodyResultData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            creator: 'creator',
            formType: 'formType',
            formUuid: 'formUuid',
            gmtCreate: 'gmtCreate',
            title: 'title',
        };
    }
    static types() {
        return {
            creator: 'string',
            formType: 'string',
            formUuid: 'string',
            gmtCreate: 'string',
            title: PageFormBaseInfosResponseBodyResultDataTitle,
        };
    }
}
exports.PageFormBaseInfosResponseBodyResultData = PageFormBaseInfosResponseBodyResultData;
class PageFormBaseInfosResponseBodyResult extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            currentPage: 'currentPage',
            data: 'data',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            currentPage: 'number',
            data: { 'type': 'array', 'itemType': PageFormBaseInfosResponseBodyResultData },
            totalCount: 'number',
        };
    }
}
exports.PageFormBaseInfosResponseBodyResult = PageFormBaseInfosResponseBodyResult;
class QueryServiceRecordResponseBodyValues extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            hookType: 'hookType',
            hookUuid: 'hookUuid',
            invokeParameter: 'invokeParameter',
            invokeResult: 'invokeResult',
            invokeStatus: 'invokeStatus',
            invokeSuccess: 'invokeSuccess',
            invokeUrl: 'invokeUrl',
            serviceContent: 'serviceContent',
            serviceName: 'serviceName',
            serviceParameter: 'serviceParameter',
            sourceUuid: 'sourceUuid',
        };
    }
    static types() {
        return {
            formInstanceId: 'string',
            formUuid: 'string',
            hookType: 'string',
            hookUuid: 'string',
            invokeParameter: 'string',
            invokeResult: 'string',
            invokeStatus: 'string',
            invokeSuccess: 'string',
            invokeUrl: 'string',
            serviceContent: 'string',
            serviceName: 'string',
            serviceParameter: 'string',
            sourceUuid: 'string',
        };
    }
}
exports.QueryServiceRecordResponseBodyValues = QueryServiceRecordResponseBodyValues;
class SearchFormDataRemovalTableDataResponseBodyDataModifyUserName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
}
exports.SearchFormDataRemovalTableDataResponseBodyDataModifyUserName = SearchFormDataRemovalTableDataResponseBodyDataModifyUserName;
class SearchFormDataRemovalTableDataResponseBodyDataModifyUser extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentName: 'departmentName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentName: 'string',
            email: 'string',
            name: SearchFormDataRemovalTableDataResponseBodyDataModifyUserName,
            userId: 'string',
        };
    }
}
exports.SearchFormDataRemovalTableDataResponseBodyDataModifyUser = SearchFormDataRemovalTableDataResponseBodyDataModifyUser;
class SearchFormDataRemovalTableDataResponseBodyDataOriginatorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
}
exports.SearchFormDataRemovalTableDataResponseBodyDataOriginatorName = SearchFormDataRemovalTableDataResponseBodyDataOriginatorName;
class SearchFormDataRemovalTableDataResponseBodyDataOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            departmentName: 'departmentName',
            email: 'email',
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            departmentName: 'string',
            email: 'string',
            name: SearchFormDataRemovalTableDataResponseBodyDataOriginatorName,
            userId: 'string',
        };
    }
}
exports.SearchFormDataRemovalTableDataResponseBodyDataOriginator = SearchFormDataRemovalTableDataResponseBodyDataOriginator;
class SearchFormDataRemovalTableDataResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTimeGMT: 'createTimeGMT',
            creatorUserId: 'creatorUserId',
            formData: 'formData',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            id: 'id',
            instanceValue: 'instanceValue',
            modifiedTimeGMT: 'modifiedTimeGMT',
            modifier: 'modifier',
            modifyUser: 'modifyUser',
            originator: 'originator',
            sequence: 'sequence',
            serialNumber: 'serialNumber',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            createTimeGMT: 'string',
            creatorUserId: 'string',
            formData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formInstanceId: 'string',
            formUuid: 'string',
            id: 'number',
            instanceValue: 'string',
            modifiedTimeGMT: 'string',
            modifier: 'string',
            modifyUser: SearchFormDataRemovalTableDataResponseBodyDataModifyUser,
            originator: SearchFormDataRemovalTableDataResponseBodyDataOriginator,
            sequence: 'string',
            serialNumber: 'string',
            title: 'string',
            version: 'number',
        };
    }
}
exports.SearchFormDataRemovalTableDataResponseBodyData = SearchFormDataRemovalTableDataResponseBodyData;
class SearchFormDataSecondGenerationResponseBodyDataModifyUserName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationResponseBodyDataModifyUserName = SearchFormDataSecondGenerationResponseBodyDataModifyUserName;
class SearchFormDataSecondGenerationResponseBodyDataModifyUser extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: SearchFormDataSecondGenerationResponseBodyDataModifyUserName,
            userId: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationResponseBodyDataModifyUser = SearchFormDataSecondGenerationResponseBodyDataModifyUser;
class SearchFormDataSecondGenerationResponseBodyDataOriginatorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationResponseBodyDataOriginatorName = SearchFormDataSecondGenerationResponseBodyDataOriginatorName;
class SearchFormDataSecondGenerationResponseBodyDataOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: SearchFormDataSecondGenerationResponseBodyDataOriginatorName,
            userId: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationResponseBodyDataOriginator = SearchFormDataSecondGenerationResponseBodyDataOriginator;
class SearchFormDataSecondGenerationResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTimeGMT: 'createTimeGMT',
            creatorUserId: 'creatorUserId',
            formData: 'formData',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            id: 'id',
            instanceValue: 'instanceValue',
            modifiedTimeGMT: 'modifiedTimeGMT',
            modifier: 'modifier',
            modifyUser: 'modifyUser',
            originator: 'originator',
            sequence: 'sequence',
            serialNumber: 'serialNumber',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            createTimeGMT: 'string',
            creatorUserId: 'string',
            formData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formInstanceId: 'string',
            formUuid: 'string',
            id: 'number',
            instanceValue: 'string',
            modifiedTimeGMT: 'string',
            modifier: 'string',
            modifyUser: SearchFormDataSecondGenerationResponseBodyDataModifyUser,
            originator: SearchFormDataSecondGenerationResponseBodyDataOriginator,
            sequence: 'string',
            serialNumber: 'string',
            title: 'string',
            version: 'number',
        };
    }
}
exports.SearchFormDataSecondGenerationResponseBodyData = SearchFormDataSecondGenerationResponseBodyData;
class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName = SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName;
class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName,
            userId: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser = SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser;
class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName = SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName;
class SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName,
            userId: 'string',
        };
    }
}
exports.SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator = SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator;
class SearchFormDataSecondGenerationNoTableFieldResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createTimeGMT: 'createTimeGMT',
            creatorUserId: 'creatorUserId',
            formData: 'formData',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            id: 'id',
            instanceValue: 'instanceValue',
            modifiedTimeGMT: 'modifiedTimeGMT',
            modifier: 'modifier',
            modifyUser: 'modifyUser',
            originator: 'originator',
            sequence: 'sequence',
            serialNumber: 'serialNumber',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            createTimeGMT: 'string',
            creatorUserId: 'string',
            formData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formInstanceId: 'string',
            formUuid: 'string',
            id: 'number',
            instanceValue: 'string',
            modifiedTimeGMT: 'string',
            modifier: 'string',
            modifyUser: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser,
            originator: SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator,
            sequence: 'string',
            serialNumber: 'string',
            title: 'string',
            version: 'number',
        };
    }
}
exports.SearchFormDataSecondGenerationNoTableFieldResponseBodyData = SearchFormDataSecondGenerationNoTableFieldResponseBodyData;
class SearchFormDatasResponseBodyDataModifyUserUserName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.SearchFormDatasResponseBodyDataModifyUserUserName = SearchFormDatasResponseBodyDataModifyUserUserName;
class SearchFormDatasResponseBodyDataModifyUser extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            userId: 'string',
            userName: SearchFormDatasResponseBodyDataModifyUserUserName,
        };
    }
}
exports.SearchFormDatasResponseBodyDataModifyUser = SearchFormDatasResponseBodyDataModifyUser;
class SearchFormDatasResponseBodyDataOriginatorUserName extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            nameInChinese: 'nameInChinese',
            nameInEnglish: 'nameInEnglish',
            type: 'type',
        };
    }
    static types() {
        return {
            nameInChinese: 'string',
            nameInEnglish: 'string',
            type: 'string',
        };
    }
}
exports.SearchFormDatasResponseBodyDataOriginatorUserName = SearchFormDatasResponseBodyDataOriginatorUserName;
class SearchFormDatasResponseBodyDataOriginator extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'userId',
            userName: 'userName',
        };
    }
    static types() {
        return {
            userId: 'string',
            userName: SearchFormDatasResponseBodyDataOriginatorUserName,
        };
    }
}
exports.SearchFormDatasResponseBodyDataOriginator = SearchFormDatasResponseBodyDataOriginator;
class SearchFormDatasResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            createdTimeGMT: 'createdTimeGMT',
            creatorUserId: 'creatorUserId',
            dataId: 'dataId',
            formData: 'formData',
            formInstanceId: 'formInstanceId',
            formUuid: 'formUuid',
            instanceValue: 'instanceValue',
            modelUuid: 'modelUuid',
            modifiedTimeGMT: 'modifiedTimeGMT',
            modifierUserId: 'modifierUserId',
            modifyUser: 'modifyUser',
            originator: 'originator',
            sequence: 'sequence',
            serialNo: 'serialNo',
            title: 'title',
            version: 'version',
        };
    }
    static types() {
        return {
            createdTimeGMT: 'string',
            creatorUserId: 'string',
            dataId: 'number',
            formData: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            formInstanceId: 'string',
            formUuid: 'string',
            instanceValue: 'string',
            modelUuid: 'string',
            modifiedTimeGMT: 'string',
            modifierUserId: 'string',
            modifyUser: SearchFormDatasResponseBodyDataModifyUser,
            originator: SearchFormDatasResponseBodyDataOriginator,
            sequence: 'string',
            serialNo: 'string',
            title: 'string',
            version: 'number',
        };
    }
}
exports.SearchFormDatasResponseBodyData = SearchFormDatasResponseBodyData;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async appLoginCodeGenWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.fullUrl)) {
            query["fullUrl"] = request.fullUrl;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.signTimestampStr)) {
            body["signTimestampStr"] = request.signTimestampStr;
        }
        if (!tea_util_1.default.isUnset(request.signature)) {
            body["signature"] = request.signature;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AppLoginCodeGen",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/authorizations/appLoginCodes`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AppLoginCodeGenResponse({}));
    }
    async appLoginCodeGen(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AppLoginCodeGenHeaders({});
        return await this.appLoginCodeGenWithOptions(request, headers, runtime);
    }
    async batchGetFormDataByIdListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceIdList)) {
            body["formInstanceIdList"] = request.formInstanceIdList;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.needFormInstanceValue)) {
            body["needFormInstanceValue"] = request.needFormInstanceValue;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchGetFormDataByIdList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/ids/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchGetFormDataByIdListResponse({}));
    }
    async batchGetFormDataByIdList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchGetFormDataByIdListHeaders({});
        return await this.batchGetFormDataByIdListWithOptions(request, headers, runtime);
    }
    async batchRemovalByFormInstanceIdListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.asynchronousExecution)) {
            body["asynchronousExecution"] = request.asynchronousExecution;
        }
        if (!tea_util_1.default.isUnset(request.executeExpression)) {
            body["executeExpression"] = request.executeExpression;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceIdList)) {
            body["formInstanceIdList"] = request.formInstanceIdList;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchRemovalByFormInstanceIdList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/batchRemove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchRemovalByFormInstanceIdListResponse({}));
    }
    async batchRemovalByFormInstanceIdList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchRemovalByFormInstanceIdListHeaders({});
        return await this.batchRemovalByFormInstanceIdListWithOptions(request, headers, runtime);
    }
    async batchSaveFormDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.asynchronousExecution)) {
            body["asynchronousExecution"] = request.asynchronousExecution;
        }
        if (!tea_util_1.default.isUnset(request.formDataJsonList)) {
            body["formDataJsonList"] = request.formDataJsonList;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.keepRunningAfterException)) {
            body["keepRunningAfterException"] = request.keepRunningAfterException;
        }
        if (!tea_util_1.default.isUnset(request.noExecuteExpression)) {
            body["noExecuteExpression"] = request.noExecuteExpression;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchSaveFormData",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/batchSave`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchSaveFormDataResponse({}));
    }
    async batchSaveFormData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchSaveFormDataHeaders({});
        return await this.batchSaveFormDataWithOptions(request, headers, runtime);
    }
    async batchUpdateFormDataByInstanceIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.asynchronousExecution)) {
            body["asynchronousExecution"] = request.asynchronousExecution;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceIdList)) {
            body["formInstanceIdList"] = request.formInstanceIdList;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.ignoreEmpty)) {
            body["ignoreEmpty"] = request.ignoreEmpty;
        }
        if (!tea_util_1.default.isUnset(request.noExecuteExpression)) {
            body["noExecuteExpression"] = request.noExecuteExpression;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.updateFormDataJson)) {
            body["updateFormDataJson"] = request.updateFormDataJson;
        }
        if (!tea_util_1.default.isUnset(request.useLatestFormSchemaVersion)) {
            body["useLatestFormSchemaVersion"] = request.useLatestFormSchemaVersion;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchUpdateFormDataByInstanceId",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/components`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchUpdateFormDataByInstanceIdResponse({}));
    }
    async batchUpdateFormDataByInstanceId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchUpdateFormDataByInstanceIdHeaders({});
        return await this.batchUpdateFormDataByInstanceIdWithOptions(request, headers, runtime);
    }
    async batchUpdateFormDataByInstanceMapWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.asynchronousExecution)) {
            body["asynchronousExecution"] = request.asynchronousExecution;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.ignoreEmpty)) {
            body["ignoreEmpty"] = request.ignoreEmpty;
        }
        if (!tea_util_1.default.isUnset(request.noExecuteExpression)) {
            body["noExecuteExpression"] = request.noExecuteExpression;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.updateFormDataJsonMap)) {
            body["updateFormDataJsonMap"] = request.updateFormDataJsonMap;
        }
        if (!tea_util_1.default.isUnset(request.useLatestFormSchemaVersion)) {
            body["useLatestFormSchemaVersion"] = request.useLatestFormSchemaVersion;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchUpdateFormDataByInstanceMap",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/datas`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchUpdateFormDataByInstanceMapResponse({}));
    }
    async batchUpdateFormDataByInstanceMap(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchUpdateFormDataByInstanceMapHeaders({});
        return await this.batchUpdateFormDataByInstanceMapWithOptions(request, headers, runtime);
    }
    async buyAuthorizationOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.accountNumber)) {
            body["accountNumber"] = request.accountNumber;
        }
        if (!tea_util_1.default.isUnset(request.beginTimeGMT)) {
            body["beginTimeGMT"] = request.beginTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.callerUnionId)) {
            body["callerUnionId"] = request.callerUnionId;
        }
        if (!tea_util_1.default.isUnset(request.chargeType)) {
            body["chargeType"] = request.chargeType;
        }
        if (!tea_util_1.default.isUnset(request.commerceType)) {
            body["commerceType"] = request.commerceType;
        }
        if (!tea_util_1.default.isUnset(request.commodityType)) {
            body["commodityType"] = request.commodityType;
        }
        if (!tea_util_1.default.isUnset(request.endTimeGMT)) {
            body["endTimeGMT"] = request.endTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.instanceName)) {
            body["instanceName"] = request.instanceName;
        }
        if (!tea_util_1.default.isUnset(request.produceCode)) {
            body["produceCode"] = request.produceCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BuyAuthorizationOrder",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/appAuthorizations/order`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BuyAuthorizationOrderResponse({}));
    }
    async buyAuthorizationOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BuyAuthorizationOrderHeaders({});
        return await this.buyAuthorizationOrderWithOptions(request, headers, runtime);
    }
    async buyFreshOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.accountNumber)) {
            body["accountNumber"] = request.accountNumber;
        }
        if (!tea_util_1.default.isUnset(request.beginTimeGMT)) {
            body["beginTimeGMT"] = request.beginTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.callerUnionId)) {
            body["callerUnionId"] = request.callerUnionId;
        }
        if (!tea_util_1.default.isUnset(request.chargeType)) {
            body["chargeType"] = request.chargeType;
        }
        if (!tea_util_1.default.isUnset(request.commerceType)) {
            body["commerceType"] = request.commerceType;
        }
        if (!tea_util_1.default.isUnset(request.commodityType)) {
            body["commodityType"] = request.commodityType;
        }
        if (!tea_util_1.default.isUnset(request.endTimeGMT)) {
            body["endTimeGMT"] = request.endTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.instanceName)) {
            body["instanceName"] = request.instanceName;
        }
        if (!tea_util_1.default.isUnset(request.produceCode)) {
            body["produceCode"] = request.produceCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BuyFreshOrder",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/freshOrders`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BuyFreshOrderResponse({}));
    }
    async buyFreshOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BuyFreshOrderHeaders({});
        return await this.buyFreshOrderWithOptions(request, headers, runtime);
    }
    async checkCloudAccountStatusWithOptions(callerUid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CheckCloudAccountStatus",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/cloudAccountStatus/${callerUid}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CheckCloudAccountStatusResponse({}));
    }
    async checkCloudAccountStatus(callerUid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckCloudAccountStatusHeaders({});
        return await this.checkCloudAccountStatusWithOptions(callerUid, request, headers, runtime);
    }
    async createOrUpdateFormDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formDataJson)) {
            body["formDataJson"] = request.formDataJson;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.noExecuteExpression)) {
            body["noExecuteExpression"] = request.noExecuteExpression;
        }
        if (!tea_util_1.default.isUnset(request.searchCondition)) {
            body["searchCondition"] = request.searchCondition;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOrUpdateFormData",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/insertOrUpdate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateOrUpdateFormDataResponse({}));
    }
    async createOrUpdateFormData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateOrUpdateFormDataHeaders({});
        return await this.createOrUpdateFormDataWithOptions(request, headers, runtime);
    }
    async deleteFormDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceId)) {
            query["formInstanceId"] = request.formInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteFormData",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteFormDataResponse({}));
    }
    async deleteFormData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteFormDataHeaders({});
        return await this.deleteFormDataWithOptions(request, headers, runtime);
    }
    async deleteInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            query["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteInstance",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/instances`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteInstanceResponse({}));
    }
    async deleteInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteInstanceHeaders({});
        return await this.deleteInstanceWithOptions(request, headers, runtime);
    }
    async deleteSequenceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.sequence)) {
            query["sequence"] = request.sequence;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteSequence",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/deleteSequence`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteSequenceResponse({}));
    }
    async deleteSequence(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteSequenceHeaders({});
        return await this.deleteSequenceWithOptions(request, headers, runtime);
    }
    async deployFunctionCallbackWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appId)) {
            body["appId"] = request.appId;
        }
        if (!tea_util_1.default.isUnset(request.customDomain)) {
            body["customDomain"] = request.customDomain;
        }
        if (!tea_util_1.default.isUnset(request.deployStage)) {
            body["deployStage"] = request.deployStage;
        }
        if (!tea_util_1.default.isUnset(request.gateWayAppKey)) {
            body["gateWayAppKey"] = request.gateWayAppKey;
        }
        if (!tea_util_1.default.isUnset(request.gateWayAppSecret)) {
            body["gateWayAppSecret"] = request.gateWayAppSecret;
        }
        if (!tea_util_1.default.isUnset(request.gateWayDomain)) {
            body["gateWayDomain"] = request.gateWayDomain;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeployFunctionCallback",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/functionComputeConnectors/completeDeployments/notify`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeployFunctionCallbackResponse({}));
    }
    async deployFunctionCallback(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeployFunctionCallbackHeaders({});
        return await this.deployFunctionCallbackWithOptions(request, headers, runtime);
    }
    async executeBatchTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.outResult)) {
            body["outResult"] = request.outResult;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.taskInformationList)) {
            body["taskInformationList"] = request.taskInformationList;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ExecuteBatchTask",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/tasks/batches/execute`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExecuteBatchTaskResponse({}));
    }
    async executeBatchTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExecuteBatchTaskHeaders({});
        return await this.executeBatchTaskWithOptions(request, headers, runtime);
    }
    async executeCustomApiWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.data)) {
            query["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.serviceId)) {
            query["serviceId"] = request.serviceId;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ExecuteCustomApi",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/customApi/execute`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExecuteCustomApiResponse({}));
    }
    async executeCustomApi(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExecuteCustomApiHeaders({});
        return await this.executeCustomApiWithOptions(request, headers, runtime);
    }
    async executePlatformTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formDataJson)) {
            body["formDataJson"] = request.formDataJson;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.noExecuteExpressions)) {
            body["noExecuteExpressions"] = request.noExecuteExpressions;
        }
        if (!tea_util_1.default.isUnset(request.outResult)) {
            body["outResult"] = request.outResult;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            body["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ExecutePlatformTask",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/tasks/platformTasks/execute`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExecutePlatformTaskResponse({}));
    }
    async executePlatformTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExecutePlatformTaskHeaders({});
        return await this.executePlatformTaskWithOptions(request, headers, runtime);
    }
    async executeTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.digitalSignUrl)) {
            body["digitalSignUrl"] = request.digitalSignUrl;
        }
        if (!tea_util_1.default.isUnset(request.formDataJson)) {
            body["formDataJson"] = request.formDataJson;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.noExecuteExpressions)) {
            body["noExecuteExpressions"] = request.noExecuteExpressions;
        }
        if (!tea_util_1.default.isUnset(request.outResult)) {
            body["outResult"] = request.outResult;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            body["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ExecuteTask",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/tasks/execute`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExecuteTaskResponse({}));
    }
    async executeTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExecuteTaskHeaders({});
        return await this.executeTaskWithOptions(request, headers, runtime);
    }
    async expireCommodityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ExpireCommodity",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/appAuth/commodities/expire`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExpireCommodityResponse({}));
    }
    async expireCommodity(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExpireCommodityHeaders({});
        return await this.expireCommodityWithOptions(request, headers, runtime);
    }
    async getActivationCodeByCallerUnionIdWithOptions(callerUid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetActivationCodeByCallerUnionId",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/applications/activationCodes/${callerUid}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetActivationCodeByCallerUnionIdResponse({}));
    }
    async getActivationCodeByCallerUnionId(callerUid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetActivationCodeByCallerUnionIdHeaders({});
        return await this.getActivationCodeByCallerUnionIdWithOptions(callerUid, request, headers, runtime);
    }
    async getActivityButtonListWithOptions(appType, processCode, activityId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetActivityButtonList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processDefinitions/buttons/${appType}/${processCode}/${activityId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetActivityButtonListResponse({}));
    }
    async getActivityButtonList(appType, processCode, activityId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetActivityButtonListHeaders({});
        return await this.getActivityButtonListWithOptions(appType, processCode, activityId, request, headers, runtime);
    }
    async getActivityListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.processCode)) {
            query["processCode"] = request.processCode;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetActivityList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/activities`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetActivityListResponse({}));
    }
    async getActivityList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetActivityListHeaders({});
        return await this.getActivityListWithOptions(request, headers, runtime);
    }
    async getAllAuthCubesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.keywords)) {
            body["keywords"] = request.keywords;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetAllAuthCubes",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/metadata/allAuthCubes/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAllAuthCubesResponse({}));
    }
    async getAllAuthCubes(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAllAuthCubesHeaders({});
        return await this.getAllAuthCubesWithOptions(request, headers, runtime);
    }
    async getApplicationAuthorizationServicePlatformResourceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetApplicationAuthorizationServicePlatformResource",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/authorization/platformResources`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetApplicationAuthorizationServicePlatformResourceResponse({}));
    }
    async getApplicationAuthorizationServicePlatformResource(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetApplicationAuthorizationServicePlatformResourceHeaders({});
        return await this.getApplicationAuthorizationServicePlatformResourceWithOptions(request, headers, runtime);
    }
    async getCorpAccomplishmentTasksWithOptions(corpId, userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appTypes)) {
            query["appTypes"] = request.appTypes;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            query["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            query["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.processCodes)) {
            query["processCodes"] = request.processCodes;
        }
        if (!tea_util_1.default.isUnset(request.token)) {
            query["token"] = request.token;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCorpAccomplishmentTasks",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/tasks/completedTasks/${corpId}/${userId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCorpAccomplishmentTasksResponse({}));
    }
    async getCorpAccomplishmentTasks(corpId, userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCorpAccomplishmentTasksHeaders({});
        return await this.getCorpAccomplishmentTasksWithOptions(corpId, userId, request, headers, runtime);
    }
    async getCorpLevelByAccountIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accountId)) {
            query["accountId"] = request.accountId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCorpLevelByAccountId",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/corpLevel`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCorpLevelByAccountIdResponse({}));
    }
    async getCorpLevelByAccountId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCorpLevelByAccountIdHeaders({});
        return await this.getCorpLevelByAccountIdWithOptions(request, headers, runtime);
    }
    async getCorpTasksWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appTypes)) {
            query["appTypes"] = request.appTypes;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            query["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            query["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.processCodes)) {
            query["processCodes"] = request.processCodes;
        }
        if (!tea_util_1.default.isUnset(request.token)) {
            query["token"] = request.token;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCorpTasks",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/corpTasks`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCorpTasksResponse({}));
    }
    async getCorpTasks(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCorpTasksHeaders({});
        return await this.getCorpTasksWithOptions(request, headers, runtime);
    }
    async getDbConfigWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDbConfig",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/metadata/dbConfigs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDbConfigResponse({}));
    }
    async getDbConfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDbConfigHeaders({});
        return await this.getDbConfigWithOptions(request, headers, runtime);
    }
    async getFieldDefByUuidWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            query["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFieldDefByUuid",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/formFields`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFieldDefByUuidResponse({}));
    }
    async getFieldDefByUuid(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFieldDefByUuidHeaders({});
        return await this.getFieldDefByUuidWithOptions(request, headers, runtime);
    }
    async getFormComponentDefinitionListWithOptions(appType, formUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            query["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFormComponentDefinitionList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/definitions/${appType}/${formUuid}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFormComponentDefinitionListResponse({}));
    }
    async getFormComponentDefinitionList(appType, formUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFormComponentDefinitionListHeaders({});
        return await this.getFormComponentDefinitionListWithOptions(appType, formUuid, request, headers, runtime);
    }
    async getFormDataByIDWithOptions(id, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFormDataByID",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/${id}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFormDataByIDResponse({}));
    }
    async getFormDataByID(id, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFormDataByIDHeaders({});
        return await this.getFormDataByIDWithOptions(id, request, headers, runtime);
    }
    async getFormListInAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formTypes)) {
            query["formTypes"] = request.formTypes;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFormListInApp",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFormListInAppResponse({}));
    }
    async getFormListInApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFormListInAppHeaders({});
        return await this.getFormListInAppWithOptions(request, headers, runtime);
    }
    async getInstanceByIdWithOptions(id, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetInstanceById",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/instancesInfos/${id}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInstanceByIdResponse({}));
    }
    async getInstanceById(id, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInstanceByIdHeaders({});
        return await this.getInstanceByIdWithOptions(id, request, headers, runtime);
    }
    async getInstanceIdListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.approvedResult)) {
            body["approvedResult"] = request.approvedResult;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.instanceStatus)) {
            body["instanceStatus"] = request.instanceStatus;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetInstanceIdList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/instanceIds`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInstanceIdListResponse({}));
    }
    async getInstanceIdList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInstanceIdListHeaders({});
        return await this.getInstanceIdListWithOptions(request, headers, runtime);
    }
    async getInstancesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.approvedResult)) {
            body["approvedResult"] = request.approvedResult;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.instanceStatus)) {
            body["instanceStatus"] = request.instanceStatus;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.orderConfigJson)) {
            body["orderConfigJson"] = request.orderConfigJson;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetInstances",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInstancesResponse({}));
    }
    async getInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInstancesHeaders({});
        return await this.getInstancesWithOptions(request, headers, runtime);
    }
    async getInstancesByIdListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceIds)) {
            query["processInstanceIds"] = request.processInstanceIds;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetInstancesByIdList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/instances/searchWithIds`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInstancesByIdListResponse({}));
    }
    async getInstancesByIdList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInstancesByIdListHeaders({});
        return await this.getInstancesByIdListWithOptions(request, headers, runtime);
    }
    async getMeCorpSubmissionWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appTypes)) {
            query["appTypes"] = request.appTypes;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            query["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            query["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.processCodes)) {
            query["processCodes"] = request.processCodes;
        }
        if (!tea_util_1.default.isUnset(request.token)) {
            query["token"] = request.token;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetMeCorpSubmission",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/tasks/myCorpSubmission/${userId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMeCorpSubmissionResponse({}));
    }
    async getMeCorpSubmission(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMeCorpSubmissionHeaders({});
        return await this.getMeCorpSubmissionWithOptions(userId, request, headers, runtime);
    }
    async getNotifyMeWithOptions(userId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appTypes)) {
            query["appTypes"] = request.appTypes;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            query["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            query["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.instanceCreateFromTimeGMT)) {
            query["instanceCreateFromTimeGMT"] = request.instanceCreateFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.instanceCreateToTimeGMT)) {
            query["instanceCreateToTimeGMT"] = request.instanceCreateToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.processCodes)) {
            query["processCodes"] = request.processCodes;
        }
        if (!tea_util_1.default.isUnset(request.token)) {
            query["token"] = request.token;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetNotifyMe",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/corpNotifications/${userId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetNotifyMeResponse({}));
    }
    async getNotifyMe(userId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetNotifyMeHeaders({});
        return await this.getNotifyMeWithOptions(userId, request, headers, runtime);
    }
    async getOpenUrlWithOptions(appType, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.fileUrl)) {
            query["fileUrl"] = request.fileUrl;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.timeout)) {
            query["timeout"] = request.timeout;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetOpenUrl",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/temporaryUrls/${appType}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOpenUrlResponse({}));
    }
    async getOpenUrl(appType, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOpenUrlHeaders({});
        return await this.getOpenUrlWithOptions(appType, request, headers, runtime);
    }
    async getOperationRecordsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            query["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetOperationRecords",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/operationRecords`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetOperationRecordsResponse({}));
    }
    async getOperationRecords(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetOperationRecordsHeaders({});
        return await this.getOperationRecordsWithOptions(request, headers, runtime);
    }
    async getPlatformResourceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPlatformResource",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/platformResources`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPlatformResourceResponse({}));
    }
    async getPlatformResource(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPlatformResourceHeaders({});
        return await this.getPlatformResourceWithOptions(request, headers, runtime);
    }
    async getPrintAppInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.nameLike)) {
            query["nameLike"] = request.nameLike;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPrintAppInfo",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/printTemplates/printAppInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPrintAppInfoResponse({}));
    }
    async getPrintAppInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPrintAppInfoHeaders({});
        return await this.getPrintAppInfoWithOptions(request, headers, runtime);
    }
    async getPrintDictionaryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            query["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            query["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPrintDictionary",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/printTemplates/printDictionaries`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPrintDictionaryResponse({}));
    }
    async getPrintDictionary(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPrintDictionaryHeaders({});
        return await this.getPrintDictionaryWithOptions(request, headers, runtime);
    }
    async getProcessDefinitionWithOptions(processInstanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.groupId)) {
            query["groupId"] = request.groupId;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.nameSpace)) {
            query["nameSpace"] = request.nameSpace;
        }
        if (!tea_util_1.default.isUnset(request.orderNumber)) {
            query["orderNumber"] = request.orderNumber;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.systemType)) {
            query["systemType"] = request.systemType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetProcessDefinition",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/definitions/${processInstanceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetProcessDefinitionResponse({}));
    }
    async getProcessDefinition(processInstanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetProcessDefinitionHeaders({});
        return await this.getProcessDefinitionWithOptions(processInstanceId, request, headers, runtime);
    }
    async getRunningTaskListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceIdList)) {
            body["processInstanceIdList"] = request.processInstanceIdList;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userCorpId)) {
            body["userCorpId"] = request.userCorpId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetRunningTaskList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/tasks/runningTasks/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRunningTaskListResponse({}));
    }
    async getRunningTaskList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRunningTaskListHeaders({});
        return await this.getRunningTaskListWithOptions(request, headers, runtime);
    }
    async getRunningTasksWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            query["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetRunningTasks",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/tasks/getRunningTasks`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetRunningTasksResponse({}));
    }
    async getRunningTasks(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetRunningTasksHeaders({});
        return await this.getRunningTasksWithOptions(request, headers, runtime);
    }
    async getSaleUserInfoByUserIdWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.namespace)) {
            query["namespace"] = request.namespace;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSaleUserInfoByUserId",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/saleUserInfo`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSaleUserInfoByUserIdResponse({}));
    }
    async getSaleUserInfoByUserId(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSaleUserInfoByUserIdHeaders({});
        return await this.getSaleUserInfoByUserIdWithOptions(request, headers, runtime);
    }
    async getSimpleCubeModelListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.cubeCode)) {
            query["cubeCode"] = request.cubeCode;
        }
        if (!tea_util_1.default.isUnset(request.cubeTenantId)) {
            query["cubeTenantId"] = request.cubeTenantId;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSimpleCubeModelList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/metadata/simpleCubeModelLists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSimpleCubeModelListResponse({}));
    }
    async getSimpleCubeModelList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSimpleCubeModelListHeaders({});
        return await this.getSimpleCubeModelListWithOptions(request, headers, runtime);
    }
    async getTaskCopiesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            query["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            query["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.processCodes)) {
            query["processCodes"] = request.processCodes;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTaskCopies",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/tasks/taskCopies`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTaskCopiesResponse({}));
    }
    async getTaskCopies(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTaskCopiesHeaders({});
        return await this.getTaskCopiesWithOptions(request, headers, runtime);
    }
    async listApplicationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appFilter)) {
            query["appFilter"] = request.appFilter;
        }
        if (!tea_util_1.default.isUnset(request.appNameSearchKeyword)) {
            query["appNameSearchKeyword"] = request.appNameSearchKeyword;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.token)) {
            query["token"] = request.token;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListApplication",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/organizations/applications`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListApplicationResponse({}));
    }
    async listApplication(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListApplicationHeaders({});
        return await this.listApplicationWithOptions(request, headers, runtime);
    }
    async listApplicationAuthorizationServiceApplicationInformationWithOptions(instanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUnionId)) {
            query["callerUnionId"] = request.callerUnionId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListApplicationAuthorizationServiceApplicationInformation",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/authorizations/applicationInfos/${instanceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListApplicationAuthorizationServiceApplicationInformationResponse({}));
    }
    async listApplicationAuthorizationServiceApplicationInformation(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListApplicationAuthorizationServiceApplicationInformationHeaders({});
        return await this.listApplicationAuthorizationServiceApplicationInformationWithOptions(instanceId, request, headers, runtime);
    }
    async listApplicationAuthorizationServiceConnectorInformationWithOptions(instanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListApplicationAuthorizationServiceConnectorInformation",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/applicationAuthorizations/plugs/${instanceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListApplicationAuthorizationServiceConnectorInformationResponse({}));
    }
    async listApplicationAuthorizationServiceConnectorInformation(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListApplicationAuthorizationServiceConnectorInformationHeaders({});
        return await this.listApplicationAuthorizationServiceConnectorInformationWithOptions(instanceId, request, headers, runtime);
    }
    async listApplicationInformationWithOptions(instanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListApplicationInformation",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/infos/${instanceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListApplicationInformationResponse({}));
    }
    async listApplicationInformation(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListApplicationInformationHeaders({});
        return await this.listApplicationInformationWithOptions(instanceId, request, headers, runtime);
    }
    async listCommodityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListCommodity",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/appAuth/commodities`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListCommodityResponse({}));
    }
    async listCommodity(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListCommodityHeaders({});
        return await this.listCommodityWithOptions(request, headers, runtime);
    }
    async listConnectorInformationWithOptions(instanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListConnectorInformation",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/plugins/infos/${instanceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListConnectorInformationResponse({}));
    }
    async listConnectorInformation(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListConnectorInformationHeaders({});
        return await this.listConnectorInformationWithOptions(instanceId, request, headers, runtime);
    }
    async listFormRemarksWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceIdList)) {
            body["formInstanceIdList"] = request.formInstanceIdList;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListFormRemarks",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/remarks/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListFormRemarksResponse({}));
    }
    async listFormRemarks(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListFormRemarksHeaders({});
        return await this.listFormRemarksWithOptions(request, headers, runtime);
    }
    async listNavigationByFormTypeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formType)) {
            query["formType"] = request.formType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListNavigationByFormType",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/navigations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListNavigationByFormTypeResponse({}));
    }
    async listNavigationByFormType(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListNavigationByFormTypeHeaders({});
        return await this.listNavigationByFormTypeWithOptions(request, headers, runtime);
    }
    async listOperationLogsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceIdList)) {
            body["formInstanceIdList"] = request.formInstanceIdList;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListOperationLogs",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/operationsLogs/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListOperationLogsResponse({}));
    }
    async listOperationLogs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListOperationLogsHeaders({});
        return await this.listOperationLogsWithOptions(request, headers, runtime);
    }
    async listTableDataByFormInstanceIdTableIdWithOptions(formInstanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            query["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.tableFieldId)) {
            query["tableFieldId"] = request.tableFieldId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListTableDataByFormInstanceIdTableId",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/innerTables/${formInstanceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListTableDataByFormInstanceIdTableIdResponse({}));
    }
    async listTableDataByFormInstanceIdTableId(formInstanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListTableDataByFormInstanceIdTableIdHeaders({});
        return await this.listTableDataByFormInstanceIdTableIdWithOptions(formInstanceId, request, headers, runtime);
    }
    async loginCodeGenWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "LoginCodeGen",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/authorizations/loginCodes`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LoginCodeGenResponse({}));
    }
    async loginCodeGen(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LoginCodeGenHeaders({});
        return await this.loginCodeGenWithOptions(request, headers, runtime);
    }
    async notifyAuthorizationResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.accountNumber)) {
            body["accountNumber"] = request.accountNumber;
        }
        if (!tea_util_1.default.isUnset(request.beginTimeGMT)) {
            body["beginTimeGMT"] = request.beginTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            body["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.chargeType)) {
            body["chargeType"] = request.chargeType;
        }
        if (!tea_util_1.default.isUnset(request.commerceType)) {
            body["commerceType"] = request.commerceType;
        }
        if (!tea_util_1.default.isUnset(request.commodityType)) {
            body["commodityType"] = request.commodityType;
        }
        if (!tea_util_1.default.isUnset(request.endTimeGMT)) {
            body["endTimeGMT"] = request.endTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.instanceName)) {
            body["instanceName"] = request.instanceName;
        }
        if (!tea_util_1.default.isUnset(request.produceCode)) {
            body["produceCode"] = request.produceCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "NotifyAuthorizationResult",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/authorizationResults/notify`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new NotifyAuthorizationResultResponse({}));
    }
    async notifyAuthorizationResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new NotifyAuthorizationResultHeaders({});
        return await this.notifyAuthorizationResultWithOptions(request, headers, runtime);
    }
    async pageFormBaseInfosWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appKey)) {
            body["appKey"] = request.appKey;
        }
        if (!tea_util_1.default.isUnset(request.formTypeList)) {
            body["formTypeList"] = request.formTypeList;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.pageIndex)) {
            body["pageIndex"] = request.pageIndex;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "PageFormBaseInfos",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/forms/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PageFormBaseInfosResponse({}));
    }
    async pageFormBaseInfos(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PageFormBaseInfosHeaders({});
        return await this.pageFormBaseInfosWithOptions(request, headers, runtime);
    }
    async queryServiceRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            query["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.hookType)) {
            query["hookType"] = request.hookType;
        }
        if (!tea_util_1.default.isUnset(request.hookUuid)) {
            query["hookUuid"] = request.hookUuid;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        if (!tea_util_1.default.isUnset(request.invokeAfterDateGMT)) {
            query["invokeAfterDateGMT"] = request.invokeAfterDateGMT;
        }
        if (!tea_util_1.default.isUnset(request.invokeBeforeDateGMT)) {
            query["invokeBeforeDateGMT"] = request.invokeBeforeDateGMT;
        }
        if (!tea_util_1.default.isUnset(request.invokeStatus)) {
            query["invokeStatus"] = request.invokeStatus;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.requestUrl)) {
            query["requestUrl"] = request.requestUrl;
        }
        if (!tea_util_1.default.isUnset(request.sourceUuid)) {
            query["sourceUuid"] = request.sourceUuid;
        }
        if (!tea_util_1.default.isUnset(request.success)) {
            query["success"] = request.success;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryServiceRecord",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/services/invocationRecords`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryServiceRecordResponse({}));
    }
    async queryServiceRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryServiceRecordHeaders({});
        return await this.queryServiceRecordWithOptions(request, headers, runtime);
    }
    async redirectTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.byManager)) {
            body["byManager"] = request.byManager;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.nowActionExecutorId)) {
            body["nowActionExecutorId"] = request.nowActionExecutorId;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            body["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.remark)) {
            body["remark"] = request.remark;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RedirectTask",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/tasks/redirect`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RedirectTaskResponse({}));
    }
    async redirectTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RedirectTaskHeaders({});
        return await this.redirectTaskWithOptions(request, headers, runtime);
    }
    async refundCommodityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RefundCommodity",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/appAuth/commodities/refund`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RefundCommodityResponse({}));
    }
    async refundCommodity(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RefundCommodityHeaders({});
        return await this.refundCommodityWithOptions(request, headers, runtime);
    }
    async registerAccountsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.activeCode)) {
            body["activeCode"] = request.activeCode;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RegisterAccounts",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/applicationAuthorizations/accounts/register`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RegisterAccountsResponse({}));
    }
    async registerAccounts(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RegisterAccountsHeaders({});
        return await this.registerAccountsWithOptions(request, headers, runtime);
    }
    async releaseCommodityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ReleaseCommodity",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/appAuth/commodities/release`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ReleaseCommodityResponse({}));
    }
    async releaseCommodity(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ReleaseCommodityHeaders({});
        return await this.releaseCommodityWithOptions(request, headers, runtime);
    }
    async removeTenantResourceWithOptions(callerUid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RemoveTenantResource",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/applications/tenantRelatedResources/${callerUid}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveTenantResourceResponse({}));
    }
    async removeTenantResource(callerUid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveTenantResourceHeaders({});
        return await this.removeTenantResourceWithOptions(callerUid, request, headers, runtime);
    }
    async renderBatchCallbackWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.fileSize)) {
            body["fileSize"] = request.fileSize;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.namespace)) {
            body["namespace"] = request.namespace;
        }
        if (!tea_util_1.default.isUnset(request.ossUrl)) {
            body["ossUrl"] = request.ossUrl;
        }
        if (!tea_util_1.default.isUnset(request.sequenceId)) {
            body["sequenceId"] = request.sequenceId;
        }
        if (!tea_util_1.default.isUnset(request.source)) {
            body["source"] = request.source;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.timeZone)) {
            body["timeZone"] = request.timeZone;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RenderBatchCallback",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/printings/callbacks/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RenderBatchCallbackResponse({}));
    }
    async renderBatchCallback(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RenderBatchCallbackHeaders({});
        return await this.renderBatchCallbackWithOptions(request, headers, runtime);
    }
    async renewApplicationAuthorizationServiceOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUnionId)) {
            body["callerUnionId"] = request.callerUnionId;
        }
        if (!tea_util_1.default.isUnset(request.endTimeGMT)) {
            body["endTimeGMT"] = request.endTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RenewApplicationAuthorizationServiceOrder",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/applicationAuthorizations/orders/renew`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RenewApplicationAuthorizationServiceOrderResponse({}));
    }
    async renewApplicationAuthorizationServiceOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RenewApplicationAuthorizationServiceOrderHeaders({});
        return await this.renewApplicationAuthorizationServiceOrderWithOptions(request, headers, runtime);
    }
    async renewTenantOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUnionId)) {
            body["callerUnionId"] = request.callerUnionId;
        }
        if (!tea_util_1.default.isUnset(request.endTimeGMT)) {
            body["endTimeGMT"] = request.endTimeGMT;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RenewTenantOrder",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/tenants/reorder`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RenewTenantOrderResponse({}));
    }
    async renewTenantOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RenewTenantOrderHeaders({});
        return await this.renewTenantOrderWithOptions(request, headers, runtime);
    }
    async saveFormDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formDataJson)) {
            body["formDataJson"] = request.formDataJson;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveFormData",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveFormDataResponse({}));
    }
    async saveFormData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveFormDataHeaders({});
        return await this.saveFormDataWithOptions(request, headers, runtime);
    }
    async saveFormRemarkWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.atUserId)) {
            body["atUserId"] = request.atUserId;
        }
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceId)) {
            body["formInstanceId"] = request.formInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.replyId)) {
            body["replyId"] = request.replyId;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveFormRemark",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/remarks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveFormRemarkResponse({}));
    }
    async saveFormRemark(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveFormRemarkHeaders({});
        return await this.saveFormRemarkWithOptions(request, headers, runtime);
    }
    async savePrintTplDetailInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.fileNameConfig)) {
            body["fileNameConfig"] = request.fileNameConfig;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.formVersion)) {
            body["formVersion"] = request.formVersion;
        }
        if (!tea_util_1.default.isUnset(request.setting)) {
            body["setting"] = request.setting;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.vm)) {
            body["vm"] = request.vm;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SavePrintTplDetailInfo",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/printTemplates/printTplDetailInfos`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SavePrintTplDetailInfoResponse({}));
    }
    async savePrintTplDetailInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SavePrintTplDetailInfoHeaders({});
        return await this.savePrintTplDetailInfoWithOptions(request, headers, runtime);
    }
    async searchActivationCodeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchActivationCode",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/activationCode/information`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchActivationCodeResponse({}));
    }
    async searchActivationCode(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchActivationCodeHeaders({});
        return await this.searchActivationCodeWithOptions(request, headers, runtime);
    }
    async searchEmployeeFieldValuesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.targetFieldJson)) {
            body["targetFieldJson"] = request.targetFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchEmployeeFieldValues",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/employeeFields`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchEmployeeFieldValuesResponse({}));
    }
    async searchEmployeeFieldValues(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchEmployeeFieldValuesHeaders({});
        return await this.searchEmployeeFieldValuesWithOptions(request, headers, runtime);
    }
    async searchFormDataIdListWithOptions(appType, formUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchFormDataIdList",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/ids/${appType}/${formUuid}`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchFormDataIdListResponse({}));
    }
    async searchFormDataIdList(appType, formUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchFormDataIdListHeaders({});
        return await this.searchFormDataIdListWithOptions(appType, formUuid, request, headers, runtime);
    }
    async searchFormDataRemovalTableDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.orderConfigJson)) {
            body["orderConfigJson"] = request.orderConfigJson;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchFormDataRemovalTableData",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchFormDataRemovalTableDataResponse({}));
    }
    async searchFormDataRemovalTableData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchFormDataRemovalTableDataHeaders({});
        return await this.searchFormDataRemovalTableDataWithOptions(request, headers, runtime);
    }
    async searchFormDataSecondGenerationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.orderConfigJson)) {
            body["orderConfigJson"] = request.orderConfigJson;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchCondition)) {
            body["searchCondition"] = request.searchCondition;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchFormDataSecondGeneration",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/advances/queryAll`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchFormDataSecondGenerationResponse({}));
    }
    async searchFormDataSecondGeneration(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchFormDataSecondGenerationHeaders({});
        return await this.searchFormDataSecondGenerationWithOptions(request, headers, runtime);
    }
    async searchFormDataSecondGenerationNoTableFieldWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.orderConfigJson)) {
            body["orderConfigJson"] = request.orderConfigJson;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            body["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchCondition)) {
            body["searchCondition"] = request.searchCondition;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchFormDataSecondGenerationNoTableField",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/advances/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchFormDataSecondGenerationNoTableFieldResponse({}));
    }
    async searchFormDataSecondGenerationNoTableField(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchFormDataSecondGenerationNoTableFieldHeaders({});
        return await this.searchFormDataSecondGenerationNoTableFieldWithOptions(request, headers, runtime);
    }
    async searchFormDatasWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.createFromTimeGMT)) {
            body["createFromTimeGMT"] = request.createFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.createToTimeGMT)) {
            body["createToTimeGMT"] = request.createToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.currentPage)) {
            body["currentPage"] = request.currentPage;
        }
        if (!tea_util_1.default.isUnset(request.dynamicOrder)) {
            body["dynamicOrder"] = request.dynamicOrder;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.modifiedFromTimeGMT)) {
            body["modifiedFromTimeGMT"] = request.modifiedFromTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.modifiedToTimeGMT)) {
            body["modifiedToTimeGMT"] = request.modifiedToTimeGMT;
        }
        if (!tea_util_1.default.isUnset(request.originatorId)) {
            body["originatorId"] = request.originatorId;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchFieldJson)) {
            body["searchFieldJson"] = request.searchFieldJson;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchFormDatas",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchFormDatasResponse({}));
    }
    async searchFormDatas(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchFormDatasHeaders({});
        return await this.searchFormDatasWithOptions(request, headers, runtime);
    }
    async startInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.departmentId)) {
            body["departmentId"] = request.departmentId;
        }
        if (!tea_util_1.default.isUnset(request.formDataJson)) {
            body["formDataJson"] = request.formDataJson;
        }
        if (!tea_util_1.default.isUnset(request.formUuid)) {
            body["formUuid"] = request.formUuid;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.processCode)) {
            body["processCode"] = request.processCode;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "StartInstance",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/instances/start`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new StartInstanceResponse({}));
    }
    async startInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StartInstanceHeaders({});
        return await this.startInstanceWithOptions(request, headers, runtime);
    }
    async terminateCloudAuthorizationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUnionId)) {
            body["callerUnionId"] = request.callerUnionId;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            body["instanceId"] = request.instanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TerminateCloudAuthorization",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/cloudAuthorizations/terminate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TerminateCloudAuthorizationResponse({}));
    }
    async terminateCloudAuthorization(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TerminateCloudAuthorizationHeaders({});
        return await this.terminateCloudAuthorizationWithOptions(request, headers, runtime);
    }
    async terminateInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            query["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            query["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            query["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            query["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "TerminateInstance",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/instances/terminate`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TerminateInstanceResponse({}));
    }
    async terminateInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TerminateInstanceHeaders({});
        return await this.terminateInstanceWithOptions(request, headers, runtime);
    }
    async updateCloudAccountInformationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.accountNumber)) {
            body["accountNumber"] = request.accountNumber;
        }
        if (!tea_util_1.default.isUnset(request.callerUnionId)) {
            body["callerUnionId"] = request.callerUnionId;
        }
        if (!tea_util_1.default.isUnset(request.commodityType)) {
            body["commodityType"] = request.commodityType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCloudAccountInformation",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/cloudAccountInfos`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCloudAccountInformationResponse({}));
    }
    async updateCloudAccountInformation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCloudAccountInformationHeaders({});
        return await this.updateCloudAccountInformationWithOptions(request, headers, runtime);
    }
    async updateFormDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.formInstanceId)) {
            body["formInstanceId"] = request.formInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.updateFormDataJson)) {
            body["updateFormDataJson"] = request.updateFormDataJson;
        }
        if (!tea_util_1.default.isUnset(request.useLatestVersion)) {
            body["useLatestVersion"] = request.useLatestVersion;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateFormData",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/instances`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "none",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateFormDataResponse({}));
    }
    async updateFormData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateFormDataHeaders({});
        return await this.updateFormDataWithOptions(request, headers, runtime);
    }
    async updateInstanceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.processInstanceId)) {
            body["processInstanceId"] = request.processInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.updateFormDataJson)) {
            body["updateFormDataJson"] = request.updateFormDataJson;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInstance",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/processes/instances`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInstanceResponse({}));
    }
    async updateInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInstanceHeaders({});
        return await this.updateInstanceWithOptions(request, headers, runtime);
    }
    async updateStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.appType)) {
            body["appType"] = request.appType;
        }
        if (!tea_util_1.default.isUnset(request.errorLines)) {
            body["errorLines"] = request.errorLines;
        }
        if (!tea_util_1.default.isUnset(request.importSequence)) {
            body["importSequence"] = request.importSequence;
        }
        if (!tea_util_1.default.isUnset(request.language)) {
            body["language"] = request.language;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            body["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.systemToken)) {
            body["systemToken"] = request.systemToken;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateStatus",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/forms/status`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateStatusResponse({}));
    }
    async updateStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateStatusHeaders({});
        return await this.updateStatusWithOptions(request, headers, runtime);
    }
    async upgradeTenantInformationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            body["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.accountNumber)) {
            body["accountNumber"] = request.accountNumber;
        }
        if (!tea_util_1.default.isUnset(request.callerUnionId)) {
            body["callerUnionId"] = request.callerUnionId;
        }
        if (!tea_util_1.default.isUnset(request.commodityType)) {
            body["commodityType"] = request.commodityType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpgradeTenantInformation",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/tenantInfos`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpgradeTenantInformationResponse({}));
    }
    async upgradeTenantInformation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpgradeTenantInformationHeaders({});
        return await this.upgradeTenantInformationWithOptions(request, headers, runtime);
    }
    async validateApplicationAuthorizationOrderWithOptions(instanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUnionId)) {
            query["callerUnionId"] = request.callerUnionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ValidateApplicationAuthorizationOrder",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/applicationOrderUpdateAuthorizations/${instanceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ValidateApplicationAuthorizationOrderResponse({}));
    }
    async validateApplicationAuthorizationOrder(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ValidateApplicationAuthorizationOrderHeaders({});
        return await this.validateApplicationAuthorizationOrderWithOptions(instanceId, request, headers, runtime);
    }
    async validateApplicationAuthorizationServiceOrderWithOptions(callerUid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ValidateApplicationAuthorizationServiceOrder",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/appsAuthorizations/freshOrderInfoReviews/${callerUid}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ValidateApplicationAuthorizationServiceOrderResponse({}));
    }
    async validateApplicationAuthorizationServiceOrder(callerUid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ValidateApplicationAuthorizationServiceOrderHeaders({});
        return await this.validateApplicationAuthorizationServiceOrderWithOptions(callerUid, request, headers, runtime);
    }
    async validateApplicationServiceOrderUpgradeWithOptions(callerUnionid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ValidateApplicationServiceOrderUpgrade",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/applications/orderValidations/${callerUnionid}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ValidateApplicationServiceOrderUpgradeResponse({}));
    }
    async validateApplicationServiceOrderUpgrade(callerUnionid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ValidateApplicationServiceOrderUpgradeHeaders({});
        return await this.validateApplicationServiceOrderUpgradeWithOptions(callerUnionid, request, headers, runtime);
    }
    async validateOrderBuyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ValidateOrderBuy",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/orderBuy/validate`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ValidateOrderBuyResponse({}));
    }
    async validateOrderBuy(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ValidateOrderBuyHeaders({});
        return await this.validateOrderBuyWithOptions(request, headers, runtime);
    }
    async validateOrderUpdateWithOptions(instanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ValidateOrderUpdate",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/orders/renewalReviews/${instanceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ValidateOrderUpdateResponse({}));
    }
    async validateOrderUpdate(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ValidateOrderUpdateHeaders({});
        return await this.validateOrderUpdateWithOptions(instanceId, request, headers, runtime);
    }
    async validateOrderUpgradeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessKey)) {
            query["accessKey"] = request.accessKey;
        }
        if (!tea_util_1.default.isUnset(request.callerUid)) {
            query["callerUid"] = request.callerUid;
        }
        if (!tea_util_1.default.isUnset(request.instanceId)) {
            query["instanceId"] = request.instanceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ValidateOrderUpgrade",
            version: "yida_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/yida/apps/orderUpgrade/validate`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ValidateOrderUpgradeResponse({}));
    }
    async validateOrderUpgrade(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ValidateOrderUpgradeHeaders({});
        return await this.validateOrderUpgradeWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map