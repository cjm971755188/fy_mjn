"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class GetTranscribeBriefHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.GetTranscribeBriefHeaders = GetTranscribeBriefHeaders;
class GetTranscribeBriefResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            statusCode: 'statusCode',
            success: 'success',
        };
    }
    static types() {
        return {
            data: GetTranscribeBriefResponseBodyData,
            statusCode: 'number',
            success: 'boolean',
        };
    }
}
exports.GetTranscribeBriefResponseBody = GetTranscribeBriefResponseBody;
class GetTranscribeBriefResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTranscribeBriefResponseBody,
        };
    }
}
exports.GetTranscribeBriefResponse = GetTranscribeBriefResponse;
class RemovePermissionHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.RemovePermissionHeaders = RemovePermissionHeaders;
class RemovePermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizType: 'bizType',
            members: 'members',
            taskCreator: 'taskCreator',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            bizType: 'number',
            members: { 'type': 'array', 'itemType': RemovePermissionRequestMembers },
            taskCreator: 'number',
            taskId: 'number',
        };
    }
}
exports.RemovePermissionRequest = RemovePermissionRequest;
class RemovePermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            data: 'data',
            statusCode: 'statusCode',
            success: 'success',
        };
    }
    static types() {
        return {
            data: RemovePermissionResponseBodyData,
            statusCode: 'number',
            success: 'boolean',
        };
    }
}
exports.RemovePermissionResponseBody = RemovePermissionResponseBody;
class RemovePermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemovePermissionResponseBody,
        };
    }
}
exports.RemovePermissionResponse = RemovePermissionResponse;
class UpdatePermissionForUsersHeaders extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
}
exports.UpdatePermissionForUsersHeaders = UpdatePermissionForUsersHeaders;
class UpdatePermissionForUsersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizType: 'bizType',
            members: 'members',
            taskCreator: 'taskCreator',
            operatorUid: 'operatorUid',
        };
    }
    static types() {
        return {
            bizType: 'number',
            members: { 'type': 'array', 'itemType': UpdatePermissionForUsersRequestMembers },
            taskCreator: 'number',
            operatorUid: 'number',
        };
    }
}
exports.UpdatePermissionForUsersRequest = UpdatePermissionForUsersRequest;
class UpdatePermissionForUsersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            isSuccess: 'isSuccess',
        };
    }
    static types() {
        return {
            isSuccess: 'boolean',
        };
    }
}
exports.UpdatePermissionForUsersResponseBody = UpdatePermissionForUsersResponseBody;
class UpdatePermissionForUsersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdatePermissionForUsersResponseBody,
        };
    }
}
exports.UpdatePermissionForUsersResponse = UpdatePermissionForUsersResponse;
class GetTranscribeBriefResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            bizType: 'bizType',
        };
    }
    static types() {
        return {
            bizType: 'number',
        };
    }
}
exports.GetTranscribeBriefResponseBodyData = GetTranscribeBriefResponseBodyData;
class RemovePermissionRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            policyType: 'policyType',
        };
    }
    static types() {
        return {
            memberId: 'number',
            memberType: 'string',
            policyType: 'string',
        };
    }
}
exports.RemovePermissionRequestMembers = RemovePermissionRequestMembers;
class RemovePermissionResponseBodyData extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            failNameList: 'failNameList',
        };
    }
    static types() {
        return {
            failNameList: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.RemovePermissionResponseBodyData = RemovePermissionResponseBodyData;
class UpdatePermissionForUsersRequestMembers extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            policyType: 'policyType',
        };
    }
    static types() {
        return {
            memberId: 'number',
            memberType: 'string',
            policyType: 'string',
        };
    }
}
exports.UpdatePermissionForUsersRequestMembers = UpdatePermissionForUsersRequestMembers;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    async getTranscribeBriefWithOptions(taskUuid, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetTranscribeBrief",
            version: "transcribe_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/transcribe/tasks/${taskUuid}/briefInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTranscribeBriefResponse({}));
    }
    async getTranscribeBrief(taskUuid) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTranscribeBriefHeaders({});
        return await this.getTranscribeBriefWithOptions(taskUuid, headers, runtime);
    }
    async removePermissionWithOptions(taskUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.taskCreator)) {
            body["taskCreator"] = request.taskCreator;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RemovePermission",
            version: "transcribe_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/transcribe/tasks/${taskUuid}/permissions/remove`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemovePermissionResponse({}));
    }
    async removePermission(taskUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemovePermissionHeaders({});
        return await this.removePermissionWithOptions(taskUuid, request, headers, runtime);
    }
    async updatePermissionForUsersWithOptions(taskUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorUid)) {
            query["operatorUid"] = request.operatorUid;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.taskCreator)) {
            body["taskCreator"] = request.taskCreator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdatePermissionForUsers",
            version: "transcribe_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/transcribe/tasks/${taskUuid}/permissions`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdatePermissionForUsersResponse({}));
    }
    async updatePermissionForUsers(taskUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdatePermissionForUsersHeaders({});
        return await this.updatePermissionForUsersWithOptions(taskUuid, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map